// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0$abfnosu(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
};

$$.Dynamic_ = {"": "Object;"};

$$.Null = {"": "Object;"};

$$.MetaInfo = {"": "Object;_tag>,_tags,_set>"};

$$.JSSyntaxRegExp = {"": "Object;_pattern,_isMultiLine,_isCaseSensitive,_nativeRegExp",
  hasMatch$1: function(str) {
    return this._nativeRegExp.test($.checkString(str));
  }
};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.UnsupportedError = {"": "Object;message",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  }
};

$$.FormatException = {"": "Object;message",
  toString$0: function(_) {
    return "FormatException: " + $.S(this.message);
  }
};

$$.Object = {"": ";",
  $eq: function(receiver, other) {
    return this === other;
  },
  toString$0: function(_) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(_)) + "'";
  }
};

$$.StringBuffer = {"": "Object;_contents",
  get$length: function(_) {
    return $.get$length$as(this._contents);
  },
  add$1: function(_, obj) {
    return this.write$1(obj);
  },
  write$1: function(obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    if (typeof $content === "string")
      this._contents = $content;
    else
      this.write$1($content);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  $isbool: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  $eq: function(receiver, a) {
    return receiver == a;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(receiver, separator) {
    var t1, list, i, t2;
    if (separator == null)
      separator = "";
    t1 = receiver.length;
    list = $.List_List(t1);
    for (i = 0; i < receiver.length; ++i) {
      t2 = $.S(receiver[i]);
      if (i >= t1)
        throw $.ioore(i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  elementAt$1: function(receiver, index) {
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  toString$0: function(receiver) {
    return $.ToString_collectionToString(receiver);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $isList: true,
  $isCollection: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNumber = {"": "Object;",
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    return receiver - other;
  },
  $mul: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  $lt: function(receiver, other) {
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $isJSNumber: true,
  $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSInt = {"": "JSNumber;", $is$int: true, $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSDouble = {"": "JSNumber;", $is$double: true, $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSString = {"": "Object;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0))
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$$gt$n(endIndex, receiver.length))
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $isString: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.ListIterator = {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._length;
    t2 = this._iterable;
    if (t1 !== t2.length)
      throw $.$$throw($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._current = null;
      return false;
    }
    this._current = $.CONSTANT0.elementAt$1(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.DetailedArgumentError = {"": "Object;",
  get$message: function() {
    return "Illegal argument: \"" + this.argument + "\" -- " + this.details;
  },
  toString$0: function(_) {
    return this.get$message();
  },
  DetailedArgumentError$2: function(argument, details) {
    var t1 = this.argument;
    if (t1.length === 0)
      throw $.$$throw($.InvalidOperationError$("That's just sad. Give me a valid argument"));
    t1 = this.details;
    if (t1.length === 0)
      throw $.$$throw($.InvalidOperationError$("That's just sad. I need details!"));
  }
};

$$.InvalidOperationError = {"": "Object;message"};

$$.NullArgumentError = {"": "DetailedArgumentError;argument,details"};

$$.AffineTransform = {"": "Object;_scX>,_shY>,_shX>,_scY>,_tX>,_tY>",
  get$scaleX: function() {
    return this._scX;
  },
  get$scaleY: function() {
    return this._scY;
  },
  get$translateX: function() {
    return this._tX;
  },
  get$translateY: function() {
    return this._tY;
  },
  get$shearX: function() {
    return this._shX;
  },
  get$shearY: function() {
    return this._shY;
  },
  scale$2: function(sx, sy) {
    this._scX = $.$$mul$n(this._scX, sx);
    this._shY = $.$$mul$n(this._shY, sx);
    this._shX = $.$$mul$n(this._shX, sy);
    this._scY = $.$$mul$n(this._scY, sy);
    return this;
  },
  concatenate$1: function(tx) {
    var m0, m1, m00, m10;
    m0 = this._scX;
    m1 = this._shX;
    this._scX = $.$$add$n($.$$mul$n(tx.get$_scX(), m0), $.$$mul$n(tx.get$_shY(), m1));
    this._shX = $.$$add$n($.$$mul$n(tx.get$_shX(), m0), $.$$mul$n(tx.get$_scY(), m1));
    this._tX = $.$$add$n(this._tX, $.$$add$n($.$$mul$n(tx.get$_tX(), m0), $.$$mul$n(tx.get$_tY(), m1)));
    m00 = this._shY;
    m10 = this._scY;
    this._shY = $.$$add$n($.$$mul$n(tx.get$_scX(), m00), $.$$mul$n(tx.get$_shY(), m10));
    this._scY = $.$$add$n($.$$mul$n(tx.get$_shX(), m00), $.$$mul$n(tx.get$_scY(), m10));
    this._tY = $.$$add$n(this._tY, $.$$add$n($.$$mul$n(tx.get$_tX(), m00), $.$$mul$n(tx.get$_tY(), m10)));
    return this;
  },
  rotate$3: function(theta, x, y) {
    return this.concatenate$1($.AffineTransform$(1, 0, 0, 1, 0, 0).setToRotation$3(theta, x, y));
  },
  translate$2: function(dx, dy) {
    var t1, t2, t3, t4, t5, t6;
    t1 = this._tX;
    t2 = this._scX;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3 = this._shX;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    this._tX = $.$$add$n(t1, dx * t2 + dy * t3);
    t4 = this._tY;
    t5 = this._shY;
    if (typeof t5 !== "number")
      throw $.iae(t5);
    t6 = this._scY;
    if (typeof t6 !== "number")
      throw $.iae(t6);
    this._tY = $.$$add$n(t4, dx * t5 + dy * t6);
    return this;
  },
  setToRotation$3: function(theta, x, y) {
    var cos, sin;
    cos = Math.cos($.checkNum(theta));
    sin = Math.sin($.checkNum(theta));
    return this.setTransform$6(cos, sin, -sin, cos, x - x * cos + y * sin, y - x * sin - y * cos);
  },
  setTransform$6: function(m00, m10, m01, m11, m02, m12) {
    this._scX = m00;
    this._shY = m10;
    this._shX = m01;
    this._scY = m11;
    this._tX = m02;
    this._tY = m12;
    return this;
  },
  $eq: function(_, other) {
    var t1 = other == null;
    if (t1)
      return false;
    return !t1 && $.$$eq$o(this._scX, other.get$_scX()) === true && $.$$eq$o(this._shX, other.get$_shX()) === true && $.$$eq$o(this._tX, other.get$_tX()) === true && $.$$eq$o(this._shY, other.get$_shY()) === true && $.$$eq$o(this._scY, other.get$_scY()) === true && $.$$eq$o(this._tY, other.get$_tY()) === true;
  },
  toString$0: function(_) {
    return $.CONSTANT0.join$1([this.get$scaleX(), this.get$shearY(), this.get$shearX(), this.get$scaleY(), this.get$translateX(), this.get$translateY()], ", ");
  }
};

$$.convertDartToNative_Dictionary_anon = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$.ToString__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true)
      $.add$1$a(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.add$1$a(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  }
};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.main = function() {
  var ctx, tx;
  ctx = document.query$1("#content").get$context2d();
  tx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  tx.scale$2(200, 200);
  tx.translate$2(0, 1.5);
  tx.rotate$3(-1.5707963267948966, 2, 0);
  $.CanvasUtil_transform(ctx, tx);
  ctx.set$lineWidth(0.01);
  ctx.set$strokeStyle("black");
  ctx.beginPath$0();
  $.drawBranch(ctx, 12);
  ctx.stroke$0();
};

$.drawBranch = function(ctx, levels) {
  var rightTx, t1;
  if (typeof levels !== "number")
    return $.drawBranch$bailout(1, ctx, levels);
  if (levels === 0)
    return;
  ctx.moveTo$2(0, 0);
  ctx.lineTo$2(1, 0);
  ctx.save$0();
  rightTx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  rightTx.translate$2(1, 0);
  rightTx.scale$2(0.62, 0.62);
  rightTx.rotate$3(1.0471975511965976, 0, 0);
  $.CanvasUtil_transform(ctx, rightTx);
  t1 = levels - 1;
  $.drawBranch(ctx, t1);
  ctx.restore$0();
  ctx.save$0();
  rightTx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  rightTx.translate$2(1, 0);
  rightTx.scale$2(0.62, 0.62);
  rightTx.rotate$3(-1.0471975511965976, 0, 0);
  $.CanvasUtil_transform(ctx, rightTx);
  $.drawBranch(ctx, t1);
  ctx.restore$0();
};

$.drawBranch$bailout = function(state0, ctx, levels) {
  var t1, rightTx;
  t1 = $.getInterceptor(levels);
  if (t1.$eq(levels, 0) === true)
    return;
  ctx.moveTo$2(0, 0);
  ctx.lineTo$2(1, 0);
  ctx.save$0();
  rightTx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  rightTx.translate$2(1, 0);
  rightTx.scale$2(0.62, 0.62);
  rightTx.rotate$3(1.0471975511965976, 0, 0);
  $.CanvasUtil_transform(ctx, rightTx);
  $.drawBranch(ctx, t1.$sub(levels, 1));
  ctx.restore$0();
  ctx.save$0();
  rightTx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  rightTx.translate$2(1, 0);
  rightTx.scale$2(0.62, 0.62);
  rightTx.rotate$3(-1.0471975511965976, 0, 0);
  $.CanvasUtil_transform(ctx, rightTx);
  $.drawBranch(ctx, t1.$sub(levels, 1));
  ctx.restore$0();
};

$.ListIterator$ = function(iterable) {
  return new $.ListIterator(iterable, iterable.length, 0, null);
};

$.ToString_collectionToString = function(c) {
  var result = $.StringBuffer$("");
  $.ToString__emitCollection(c, result, $.List_List($));
  return result.toString$0(result);
};

$.ToString__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$a(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || !!c.$isList);
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$a(result);
  t3.add$1(result, t2);
  for (t2 = $.get$iterator$a(c), first = true; t2.moveNext$0(); first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.ToString__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!o.$isCollection))
    if ($.ToString__containsRef(visiting, o))
      $.add$1$a(result, typeof o === "object" && o !== null && (o.constructor === Array || !!o.$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && !!o.$isMap)
    if ($.ToString__containsRef(visiting, o))
      $.add$1$a(result, "{...}");
    else
      $.ToString__emitMap(o, result, visiting);
  else
    $.add$1$a(result, o);
};

$.ToString__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.get$iterator$a(c); t1.moveNext$0();) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.ToString__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$a(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$a(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitMap_anon(t1, result, visiting));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && value !== 0 || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  res = $.toString$0$abfnosu(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$$add$n($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$$eq$o($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_newFixedList = function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0$abfnosu(this);
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return new $.invokeClosure_anon(closure).call$0();
  else if (t1.$eq(numberOfArguments, 1) === true)
    return new $.invokeClosure_anon0(closure, arg1).call$0();
  else if (t1.$eq(numberOfArguments, 2) === true)
    return new $.invokeClosure_anon1(closure, arg1, arg2).call$0();
  else
    throw $.$$throw($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($, $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (typeof(navigator) !== "object")
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, $name, methods, $arguments) {
  var hasOwnPropertyFunction, tag, method, secondTag, proto;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if (!$.isDartObject(obj)) {
    tag = $.getTypeNameOf(obj);
    method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
    if (method == null) {
      secondTag = $.alternateTag(obj, tag);
      if (secondTag != null)
        method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
    }
  } else
    method = null;
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT2));
  if (method == null)
    (function(){throw new TypeError($name + " is not a function");})();
  else {
    proto = Object.getPrototypeOf(obj);
    if (!$.callHasOwnProperty(hasOwnPropertyFunction, proto, $name))
      $.defineProperty(proto, $name, method);
  }
  return method.apply(obj, $arguments);
};

$.isDartObject = function(obj) {
  return ((obj) instanceof ($.Object));
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && $._dynamicMetadata0() != null)
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (method != null)
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function($name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[$name];
  if (f != null && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT2)[$name];
  if (dartMethod != null)
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, $name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, $name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive, $.JSSyntaxRegExp_makeNative(pattern, multiLine, caseSensitive, false));
};

$.JSSyntaxRegExp_makeNative = function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  $.checkString(pattern);
  m = multiLine === true ? "m" : "";
  i = caseSensitive === true ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.$$throw($.FormatException$("Illegal RegExp pattern: " + $.S(pattern) + ", " + errorMessage));
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace("$", "$$$$"));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result.add$1(result, to);
      for (i = 0; i < $length; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        result.add$1(result, receiver[i]);
        result.add$1(result, to);
      }
      return result.toString$0(result);
    }
  else
    return $.stringReplaceJS(receiver, new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to);
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0$abfnosu(object);
  if (typeof object === "string")
    return "\"" + $.S($.replaceAll$2$s($.replaceAll$2$s($.replaceAll$2$s($.CONSTANT1.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"")) + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.List_List = function($length) {
  var t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return $.Primitives_newFixedList($length);
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  $.forEach$1$a(dict, new $.convertDartToNative_Dictionary_anon(object));
  return object;
};

$.InvalidOperationError$ = function(message) {
  return new $.InvalidOperationError(message);
};

$.NullArgumentError$ = function(argument) {
  var t1 = new $.NullArgumentError(argument, "cannot be null");
  t1.DetailedArgumentError$2(argument, "cannot be null");
  return t1;
};

$.AffineTransform$ = function(scaleX, shearY, shearX, scaleY, translateX, translateY) {
  return new $.AffineTransform(scaleX, shearY, shearX, scaleY, translateX, translateY);
};

$.requireArgumentNotNull = function(argument, argName) {
  $._metaRequireArgumentNotNullOrEmpty(argName);
  if (argument == null)
    throw $.$$throw($.NullArgumentError$(argName));
};

$._metaRequireArgumentNotNullOrEmpty = function(argName) {
  if (argName.length === 0)
    throw $.$$throw($.InvalidOperationError$("That's just sad. Give me a good argName"));
};

$.CanvasUtil_transform = function(ctx, tx) {
  $.requireArgumentNotNull(ctx, "ctx");
  $.requireArgumentNotNull(tx, "tx");
  ctx.transform$6(tx.get$scaleX(), tx.get$shearY(), tx.get$shearX(), tx.get$scaleY(), tx.get$translateX(), tx.get$translateY());
};

$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.List = {builtin$cls: "List"};
$.num = {builtin$cls: "num"};
$.$int = {builtin$cls: "$int"};
$.bool = {builtin$cls: "bool"};
$.String = {builtin$cls: "String"};
$.$double = {builtin$cls: "$double"};
$.CONSTANT0 = new $.JSArray();
$.CONSTANT = new $.NullThrownError();
$.CONSTANT2 = new $.Object();
$.CONSTANT1 = new $.JSString();
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.$$add$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$n(receiver).$add(receiver, a0);
};
$.$$eq$o = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (!(typeof receiver == "object"))
    return !(a0 == null) && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.add$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).add$1(receiver, a0);
};
$.elementAt$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).elementAt$1(receiver, a0);
};
$.forEach$1$a = function(receiver, a0) {
  return $.getInterceptor$a(receiver).forEach$1(receiver, a0);
};
$.get$iterator$a = function(receiver) {
  return $.getInterceptor$a(receiver).get$iterator(receiver);
};
$.get$length$as = function(receiver) {
  return $.getInterceptor$as(receiver).get$length(receiver);
};
$.replaceAll$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
$.toString$0$abfnosu = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$a = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$as = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return receiver;
};
var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
// Native classes
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  toString$0: function(_) {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function(_) {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(_, a) {
    return this === a;
  }
});

$.$defineNativeClass("HTMLAnchorElement", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLCanvasElement", {
  getContext$2: function(contextId, attrs) {
    var t1 = $ === attrs;
    if (t1)
      attrs = null;
    if (!t1)
      return this.getContext(contextId, $.convertDartToNative_Dictionary(attrs));
    return this.getContext(contextId);
  },
  getContext$1: function(contextId) {
    return this.getContext$2(contextId, $);
  },
  get$context2d: function() {
    return this.getContext$1("2d");
  }
});

$.$defineNativeClass("CanvasRenderingContext2D", {"": "lineWidth<,strokeStyle<",
  beginPath$0: function() {
    return this.beginPath();
  },
  lineTo$2: function(x, y) {
    return this.lineTo(x,y);
  },
  moveTo$2: function(x, y) {
    return this.moveTo(x,y);
  },
  restore$0: function() {
    return this.restore();
  },
  save$0: function() {
    return this.save();
  },
  stroke$0: function() {
    return this.stroke();
  },
  transform$6: function(m11, m12, m21, m22, dx, dy) {
    return this.transform(m11,m12,m21,m22,dx,dy);
  }
});

$.$defineNativeClass("Document", {
  query$1: function(selectors) {
    if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", true, false).hasMatch$1(selectors))
      return this.getElementById($.CONSTANT1.substring$1(selectors, 1));
    return this.querySelector(selectors);
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("EventException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("FileException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length>"});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("RangeException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLSelectElement", {"": "length>"});

$.$defineNativeClass("XPathException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("SVGAElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGCircleElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGClipPathElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGDefsElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGEllipseElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGForeignObjectElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGGElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGImageElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGLineElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGPathElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGPolygonElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGPolylineElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGRectElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGException", {
  toString$0: function(_) {
    return this.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGSwitchElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGTextElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

$.$defineNativeClass("SVGUseElement", {
  transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
});

// 30 dynamic classes.
// 32 classes
// 1 !leaf
(function() {
  $.dynamicSetMetadata([["Document", "Document|SVGDocument|HTMLDocument"]]);
})();

// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.main(); });
      } else {
        $.main();
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.main(); });
  } else {
    $.main();
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var lastCharCode = field.charCodeAt(len - 1);
    var needsAccessor = (lastCharCode & 63) >= 60;
    if (needsAccessor) {
      var needsGetter = (lastCharCode & 3) > 0;
      var needsSetter = (lastCharCode & 2) == 0;
      var renaming = (lastCharCode & 64) != 0;
      var accessorName = field = field.substring(0, len - 1);
      if (renaming) {
        var divider = field.indexOf(":");
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (needsGetter) {
        var getterString = "return this." + field;
        prototype["get$" + accessorName] = new Function(getterString);
      }
      if (needsSetter) {
        var setterString = "this." + field + " = v";
        prototype["set$" + accessorName] = new Function("v", setterString);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = cls;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", ["f?"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var fields = desc[""], supr;
        if (typeof fields == "string") {
          var s = fields.split(";");
          supr = s[0];
          fields = s[1] == "" ? [] : s[1].split(",");
        } else {
          supr = desc.super;
        }
        isolateProperties[cls] = defineClass(cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass)
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=fract_demo.dart.js.map
