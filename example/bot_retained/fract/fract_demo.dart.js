// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.ListIterator = {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._length;
    t2 = this._iterable;
    if (t1 !== t2.length)
      throw $.$$throw($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._current = null;
      return false;
    }
    this._current = $.JSArray_methods.elementAt$1(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.Interceptor = {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(receiver)) + "'";
  }
};

$$.JSFunction = {"": "Interceptor;",
  toString$0: function(receiver) {
    return "Closure";
  }
};

$$.JSBool = {"": "Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  }
};

$$.JSNull = {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  }
};

$$.JSArray = {"": "Interceptor;",
  join$1: function(receiver, separator) {
    var t1, list, i, t2;
    t1 = receiver.length;
    list = $.List_List(t1);
    for (i = 0; i < receiver.length; ++i) {
      t2 = $.S(receiver[i]);
      if (i >= t1)
        throw $.ioore(i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  elementAt$1: function(receiver, index) {
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitCollection(receiver, result, $.List_List($));
    return result.toString$0(result);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  $asList: null,
  $asCollection: null,
  $isList: true,
  $isCollection: true
};

$$.JSMutableArray = {"": "JSArray;", $asList: function () { return [null]; }, $asCollection: function () { return [null]; }};

$$.JSFixedArray = {"": "JSMutableArray;"};

$$.JSExtendableArray = {"": "JSMutableArray;"};

$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  }
};

$$.Null = {"": "Object;"};

$$.JSNumber = {"": "Interceptor;",
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return "" + (receiver);
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    return receiver - other;
  },
  $mul: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $isnum: true
};

$$.JSInt = {"": "JSNumber;", $is$int: true, $isnum: true};

$$.JSDouble = {"": "JSNumber;", $isnum: true};

$$.JSString = {"": "Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  substring$2: function(receiver, startIndex, endIndex) {
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    if (startIndex < 0)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.JSInt_methods.$gt(startIndex, endIndex))
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length))
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toString$0: function(receiver) {
    return receiver;
  },
  $isString: true
};

$$.MetaInfo = {"": "Object;_tag<,_tags,_set<"};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    return "Concurrent modification during iteration: " + $.Error_safeToString(this.modifiedObject) + ".";
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function(_) {
    return "Exception: " + this.message;
  }
};

$$.Object = {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  toString$0: function(_) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  }
};

$$.StringBuffer = {"": "Object;_contents",
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
};

$$.convertDartToNative_Dictionary_anon = {"": "Closure;object_0",
  call$2: function(key, value) {
    this.object_0[key] = value;
  }
};

$$.DetailedArgumentError = {"": "Object;",
  get$message: function(_) {
    return "Illegal argument: \"" + this.argument + "\" -- " + this.details;
  },
  toString$0: function(_) {
    return this.get$message(this);
  },
  DetailedArgumentError$2: function(argument, details) {
    if (this.argument.length === 0)
      throw $.$$throw($.InvalidOperationError$("That's just sad. Give me a valid argument"));
    if (this.details.length === 0)
      throw $.$$throw($.InvalidOperationError$("That's just sad. I need details!"));
  }
};

$$.InvalidOperationError = {"": "Object;message"};

$$.NullArgumentError = {"": "DetailedArgumentError;argument,details"};

$$.AffineTransform = {"": "Object;_scX<,_shY<,_shX<,_scY<,_tX<,_tY<",
  get$scaleX: function() {
    return this._scX;
  },
  get$scaleY: function() {
    return this._scY;
  },
  get$translateX: function() {
    return this._tX;
  },
  get$translateY: function() {
    return this._tY;
  },
  get$shearX: function() {
    return this._shX;
  },
  get$shearY: function() {
    return this._shY;
  },
  scale$2: function(_, sx, sy) {
    this._scX = $.$mul$n(this._scX, sx);
    this._shY = $.$mul$n(this._shY, sx);
    this._shX = $.$mul$n(this._shX, sy);
    this._scY = $.$mul$n(this._scY, sy);
    return this;
  },
  concatenate$1: function(tx) {
    var m0, m1, t1, t2, t3;
    m0 = this._scX;
    m1 = this._shX;
    this._scX = $.$add$ns($.$mul$n(tx._scX, m0), $.$mul$n(tx._shY, m1));
    this._shX = $.$add$ns($.$mul$n(tx._shX, m0), $.$mul$n(tx._scY, m1));
    t1 = this._tX;
    t2 = tx._tX;
    if (typeof m0 !== "number")
      throw $.iae(m0);
    t3 = tx._tY;
    if (typeof m1 !== "number")
      throw $.iae(m1);
    this._tX = t1 + (t2 * m0 + t3 * m1);
    m0 = this._shY;
    m1 = this._scY;
    this._shY = $.$add$ns($.$mul$n(tx._scX, m0), $.$mul$n(tx._shY, m1));
    this._scY = $.$add$ns($.$mul$n(tx._shX, m0), $.$mul$n(tx._scY, m1));
    t3 = this._tY;
    t2 = tx._tX;
    if (typeof m0 !== "number")
      throw $.iae(m0);
    t1 = tx._tY;
    if (typeof m1 !== "number")
      throw $.iae(m1);
    this._tY = t3 + (t2 * m0 + t1 * m1);
    return this;
  },
  rotate$3: function(_, theta, x, y) {
    return this.concatenate$1($.AffineTransform$(1, 0, 0, 1, 0, 0).setToRotation$3(theta, x, y));
  },
  translate$2: function(_, dx, dy) {
    var t1, t2, t3;
    t1 = this._tX;
    t2 = this._scX;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3 = this._shX;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    this._tX = t1 + (dx * t2 + dy * t3);
    t3 = this._tY;
    t2 = this._shY;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t1 = this._scY;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this._tY = t3 + (dx * t2 + dy * t1);
    return this;
  },
  setToRotation$3: function(theta, x, y) {
    var cos, sin;
    cos = Math.cos($.checkNum(theta));
    sin = Math.sin($.checkNum(theta));
    return this.setTransform$6(this, cos, sin, -sin, cos, x - x * cos + y * sin, y - x * sin - y * cos);
  },
  setTransform$6: function(_, m00, m10, m01, m11, m02, m12) {
    this._scX = m00;
    this._shY = m10;
    this._shX = m01;
    this._scY = m11;
    this._tX = m02;
    this._tY = m12;
    return this;
  },
  $eq: function(_, other) {
    var t1 = other == null;
    if (t1)
      return false;
    return !t1 && $.$eq(this._scX, other.get$_scX()) === true && $.$eq(this._shX, other.get$_shX()) === true && this._tX === other.get$_tX() && $.$eq(this._shY, other.get$_shY()) === true && $.$eq(this._scY, other.get$_scY()) === true && this._tY === other.get$_tY();
  },
  toString$0: function(_) {
    return $.JSArray_methods.join$1([this.get$scaleX(), this.get$shearY(), this.get$shearX(), this.get$scaleY(), this.get$translateX(), this.get$translateY()], ", ");
  }
};

$$._HTMLElement = {"": "Element;"};

$$.AnchorElement = {"": "Element;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AreaElement = {"": "Element;"};

$$.AudioElement = {"": "MediaElement;"};

$$.BRElement = {"": "Element;"};

$$.BaseElement = {"": "Element;"};

$$.BodyElement = {"": "Element;"};

$$.ButtonElement = {"": "Element;"};

$$.CanvasElement = {"": "Element;",
  getContext$2: function(receiver, contextId, attrs) {
    var t1 = $ === attrs;
    if (t1)
      attrs = null;
    if (!t1)
      return receiver.getContext(contextId, $.convertDartToNative_Dictionary(attrs));
    return receiver.getContext(contextId);
  },
  getContext$1: function($receiver, contextId) {
    return this.getContext$2($receiver, contextId, $);
  },
  get$context2d: function(receiver) {
    return this.getContext$1(receiver, "2d");
  }
};

$$.CanvasGradient = {"": "Interceptor;"};

$$.CanvasPattern = {"": "Interceptor;"};

$$.CanvasRenderingContext = {"": "Interceptor;"};

$$.CanvasRenderingContext2D = {"": "CanvasRenderingContext;lineWidth},strokeStyle}",
  beginPath$0: function(receiver) {
    return receiver.beginPath();
  },
  lineTo$2: function(receiver, x, y) {
    return receiver.lineTo(x,y);
  },
  moveTo$2: function(receiver, x, y) {
    return receiver.moveTo(x,y);
  },
  restore$0: function(receiver) {
    return receiver.restore();
  },
  save$0: function(receiver) {
    return receiver.save();
  },
  stroke$0: function(receiver) {
    return receiver.stroke();
  },
  transform$6: function(receiver, m11, m12, m21, m22, dx, dy) {
    return receiver.transform(m11,m12,m21,m22,dx,dy);
  }
};

$$.ContentElement = {"": "Element;"};

$$.DListElement = {"": "Element;"};

$$.DataListElement = {"": "Element;"};

$$.DetailsElement = {"": "Element;"};

$$.DivElement = {"": "Element;"};

$$.Document = {"": "Node;"};

$$.DomError = {"": "Interceptor;"};

$$.DomException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;"};

$$.EmbedElement = {"": "Element;"};

$$.ErrorEvent = {"": "Event;"};

$$.Event = {"": "Interceptor;"};

$$.EventException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventTarget = {"": "Interceptor;"};

$$.FieldSetElement = {"": "Element;"};

$$.FileError = {"": "Interceptor;"};

$$.FileException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FormElement = {"": "Element;"};

$$.HRElement = {"": "Element;"};

$$.HeadElement = {"": "Element;"};

$$.HeadingElement = {"": "Element;"};

$$.HtmlDocument = {"": "Document;"};

$$.HtmlElement = {"": "Element;"};

$$.HttpRequestException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.IFrameElement = {"": "Element;"};

$$.ImageElement = {"": "Element;"};

$$.InputElement = {"": "Element;"};

$$.KeygenElement = {"": "Element;"};

$$.LIElement = {"": "Element;"};

$$.LabelElement = {"": "Element;"};

$$.LegendElement = {"": "Element;"};

$$.LinkElement = {"": "Element;"};

$$.MapElement = {"": "Element;"};

$$.MediaElement = {"": "Element;"};

$$.MediaError = {"": "Interceptor;"};

$$.MediaKeyError = {"": "Interceptor;"};

$$.MenuElement = {"": "Element;"};

$$.MetaElement = {"": "Element;"};

$$.MeterElement = {"": "Element;"};

$$.ModElement = {"": "Element;"};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;"};

$$.OListElement = {"": "Element;"};

$$.ObjectElement = {"": "Element;"};

$$.OptGroupElement = {"": "Element;"};

$$.OptionElement = {"": "Element;"};

$$.OutputElement = {"": "Element;"};

$$.ParagraphElement = {"": "Element;"};

$$.ParamElement = {"": "Element;"};

$$.PositionError = {"": "Interceptor;"};

$$.PreElement = {"": "Element;"};

$$.ProgressElement = {"": "Element;"};

$$.QuoteElement = {"": "Element;"};

$$.RangeException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.ScriptElement = {"": "Element;"};

$$.SelectElement = {"": "Element;"};

$$.ShadowElement = {"": "Element;"};

$$.SourceElement = {"": "Element;"};

$$.SpanElement = {"": "Element;"};

$$.SpeechRecognitionError = {"": "Event;"};

$$.StyleElement = {"": "Element;"};

$$.TableCaptionElement = {"": "Element;"};

$$.TableCellElement = {"": "Element;"};

$$.TableColElement = {"": "Element;"};

$$.TableElement = {"": "Element;"};

$$.TableRowElement = {"": "Element;"};

$$.TableSectionElement = {"": "Element;"};

$$.TemplateElement = {"": "Element;"};

$$.TextAreaElement = {"": "Element;"};

$$.TitleElement = {"": "Element;"};

$$.TrackElement = {"": "Element;"};

$$.UListElement = {"": "Element;"};

$$.UnknownElement = {"": "Element;"};

$$.VideoElement = {"": "MediaElement;"};

$$.XPathException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$._HTMLAppletElement = {"": "Element;"};

$$._HTMLBaseFontElement = {"": "Element;"};

$$._HTMLDirectoryElement = {"": "Element;"};

$$._HTMLFontElement = {"": "Element;"};

$$._HTMLFrameElement = {"": "Element;"};

$$._HTMLFrameSetElement = {"": "Element;"};

$$._HTMLMarqueeElement = {"": "Element;"};

$$.AElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.AltGlyphElement = {"": "TextPositioningElement;"};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedLength = {"": "Interceptor;"};

$$.AnimatedLengthList = {"": "Interceptor;"};

$$.AnimatedNumber = {"": "Interceptor;"};

$$.AnimatedNumberList = {"": "Interceptor;"};

$$.AnimatedTransformList = {"": "Interceptor;"};

$$.AnimationElement = {"": "SvgElement;"};

$$.CircleElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.ClipPathElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.DefsElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.DescElement = {"": "StyledElement;"};

$$.EllipseElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.FEBlendElement = {"": "StyledElement;"};

$$.FEColorMatrixElement = {"": "StyledElement;"};

$$.FEComponentTransferElement = {"": "StyledElement;"};

$$.FECompositeElement = {"": "StyledElement;"};

$$.FEConvolveMatrixElement = {"": "StyledElement;"};

$$.FEDiffuseLightingElement = {"": "StyledElement;"};

$$.FEDisplacementMapElement = {"": "StyledElement;"};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;"};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;"};

$$.FEImageElement = {"": "StyledElement;"};

$$.FEMergeElement = {"": "StyledElement;"};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;"};

$$.FEOffsetElement = {"": "StyledElement;"};

$$.FEPointLightElement = {"": "SvgElement;"};

$$.FESpecularLightingElement = {"": "StyledElement;"};

$$.FESpotLightElement = {"": "SvgElement;"};

$$.FETileElement = {"": "StyledElement;"};

$$.FETurbulenceElement = {"": "StyledElement;"};

$$.FilterElement = {"": "StyledElement;"};

$$.ForeignObjectElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.GElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.ImageElement0 = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.LineElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.LinearGradientElement = {"": "_SVGGradientElement;"};

$$.MarkerElement = {"": "StyledElement;"};

$$.MaskElement = {"": "StyledElement;"};

$$.MetadataElement = {"": "SvgElement;"};

$$.PathElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.PatternElement = {"": "StyledElement;"};

$$.PolygonElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.PolylineElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.RadialGradientElement = {"": "_SVGGradientElement;"};

$$.RectElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.ScriptElement0 = {"": "SvgElement;"};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StyleElement0 = {"": "SvgElement;"};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;"};

$$.SvgException = {"": "Interceptor;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.SwitchElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.SymbolElement = {"": "StyledElement;"};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;"};

$$.TextElement = {"": "TextPositioningElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.TextPathElement = {"": "TextContentElement;"};

$$.TextPositioningElement = {"": "TextContentElement;"};

$$.TitleElement0 = {"": "StyledElement;"};

$$.UseElement = {"": "StyledElement;",
  transform$6: function($receiver, arg0, arg1, arg2, arg3, arg4, arg5) {
    return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5);
  }
};

$$.ViewElement = {"": "SvgElement;"};

$$._SVGAltGlyphDefElement = {"": "SvgElement;"};

$$._SVGAltGlyphItemElement = {"": "SvgElement;"};

$$._SVGAnimateColorElement = {"": "AnimationElement;"};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$._SVGCursorElement = {"": "SvgElement;"};

$$._SVGFEDropShadowElement = {"": "StyledElement;"};

$$._SVGFontElement = {"": "SvgElement;"};

$$._SVGFontFaceElement = {"": "SvgElement;"};

$$._SVGFontFaceFormatElement = {"": "SvgElement;"};

$$._SVGFontFaceNameElement = {"": "SvgElement;"};

$$._SVGFontFaceSrcElement = {"": "SvgElement;"};

$$._SVGFontFaceUriElement = {"": "SvgElement;"};

$$._SVGGlyphElement = {"": "SvgElement;"};

$$._SVGGlyphRefElement = {"": "StyledElement;"};

$$._SVGGradientElement = {"": "StyledElement;"};

$$._SVGHKernElement = {"": "SvgElement;"};

$$._SVGMPathElement = {"": "SvgElement;"};

$$._SVGMissingGlyphElement = {"": "StyledElement;"};

$$._SVGTRefElement = {"": "TextPositioningElement;"};

$$._SVGVKernElement = {"": "SvgElement;"};

$$.RenderingContext = {"": "CanvasRenderingContext;"};

$$.SqlError = {"": "Interceptor;"};

$$.SqlException = {"": "Interceptor;"};

// Bound closures
Isolate.$finishClasses($$, $, null);
$$ = null;

$.main = function() {
  var ctx, tx, t1;
  ctx = $.get$context2d$x(document.querySelector("#content"));
  tx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  tx.scale$2(tx, 200, 200);
  tx.translate$2(tx, 0, 1.5);
  tx.rotate$3(tx, -1.5707963267948966, 2, 0);
  $.requireArgumentNotNull(ctx, "ctx");
  $.requireArgumentNotNull(tx, "tx");
  t1 = $.getInterceptor$x(ctx);
  t1.transform$6(ctx, tx.get$scaleX(), tx.get$shearY(), tx.get$shearX(), tx.get$scaleY(), tx.get$translateX(), tx.get$translateY());
  t1.set$lineWidth(ctx, 0.01);
  t1.set$strokeStyle(ctx, "black");
  t1.beginPath$0(ctx);
  $.drawBranch(ctx, 12);
  t1.stroke$0(ctx);
};

$.drawBranch = function(ctx, levels) {
  var t1, rightTx, t2;
  if (typeof levels !== "number")
    return $.drawBranch$bailout(1, ctx, levels);
  if (levels === 0)
    return;
  t1 = $.getInterceptor$x(ctx);
  t1.moveTo$2(ctx, 0, 0);
  t1.lineTo$2(ctx, 1, 0);
  t1.save$0(ctx);
  rightTx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  rightTx.translate$2(rightTx, 1, 0);
  rightTx.scale$2(rightTx, 0.62, 0.62);
  rightTx.rotate$3(rightTx, 1.0471975511965976, 0, 0);
  $.requireArgumentNotNull(ctx, "ctx");
  $.requireArgumentNotNull(rightTx, "tx");
  t1.transform$6(ctx, rightTx.get$scaleX(), rightTx.get$shearY(), rightTx.get$shearX(), rightTx.get$scaleY(), rightTx.get$translateX(), rightTx.get$translateY());
  t2 = levels - 1;
  $.drawBranch(ctx, t2);
  t1.restore$0(ctx);
  t1.save$0(ctx);
  rightTx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  rightTx.translate$2(rightTx, 1, 0);
  rightTx.scale$2(rightTx, 0.62, 0.62);
  rightTx.rotate$3(rightTx, -1.0471975511965976, 0, 0);
  $.requireArgumentNotNull(ctx, "ctx");
  $.requireArgumentNotNull(rightTx, "tx");
  t1.transform$6(ctx, rightTx.get$scaleX(), rightTx.get$shearY(), rightTx.get$shearX(), rightTx.get$scaleY(), rightTx.get$translateX(), rightTx.get$translateY());
  $.drawBranch(ctx, t2);
  t1.restore$0(ctx);
};

$.drawBranch$bailout = function(state0, ctx, levels) {
  var t1, t2, rightTx;
  t1 = $.getInterceptor(levels);
  if (t1.$eq(levels, 0) === true)
    return;
  t2 = $.getInterceptor$x(ctx);
  t2.moveTo$2(ctx, 0, 0);
  t2.lineTo$2(ctx, 1, 0);
  t2.save$0(ctx);
  rightTx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  rightTx.translate$2(rightTx, 1, 0);
  rightTx.scale$2(rightTx, 0.62, 0.62);
  rightTx.rotate$3(rightTx, 1.0471975511965976, 0, 0);
  $.requireArgumentNotNull(ctx, "ctx");
  $.requireArgumentNotNull(rightTx, "tx");
  t2.transform$6(ctx, rightTx.get$scaleX(), rightTx.get$shearY(), rightTx.get$shearX(), rightTx.get$scaleY(), rightTx.get$translateX(), rightTx.get$translateY());
  $.drawBranch(ctx, t1.$sub(levels, 1));
  t2.restore$0(ctx);
  t2.save$0(ctx);
  rightTx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  rightTx.translate$2(rightTx, 1, 0);
  rightTx.scale$2(rightTx, 0.62, 0.62);
  rightTx.rotate$3(rightTx, -1.0471975511965976, 0, 0);
  $.requireArgumentNotNull(ctx, "ctx");
  $.requireArgumentNotNull(rightTx, "tx");
  t2.transform$6(ctx, rightTx.get$scaleX(), rightTx.get$shearY(), rightTx.get$shearX(), rightTx.get$scaleY(), rightTx.get$translateX(), rightTx.get$translateY());
  $.drawBranch(ctx, t1.$sub(levels, 1));
  t2.restore$0(ctx);
};

$.ListIterator$ = function(iterable) {
  return new $.ListIterator(iterable, iterable.length, 0, null);
};

$.ToString__emitCollection = function(c, result, visiting) {
  var isList, t1, first, t2;
  visiting.push(c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || !!$.getInterceptor(c).$isList);
  result.write$1(isList ? "[" : "{");
  for (t1 = $.get$iterator$a(c), first = true; t1.moveNext$0(); first = false) {
    t2 = t1.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(t2, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  if (0 >= visiting.length)
    throw $.ioore(0);
  visiting.pop();
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isCollection))
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else
    result.write$1(o);
};

$.ToString__containsRef = function(c, ref) {
  var t1;
  for (t1 = $.JSArray_methods.get$iterator(c); t1.moveNext$0();)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.getNativeInterceptor = function(object) {
  return object[$.dispatchPropertyName]();
};

$.setNativeInterceptor = function($prototype, $function) {
  $prototype[$.dispatchPropertyName]=$function;
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + (value);
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.C_NullThrownError;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return new $.invokeClosure_anon(closure).call$0();
  else if (t1.$eq(numberOfArguments, 1) === true)
    return new $.invokeClosure_anon0(closure, arg1).call$0();
  else if (t1.$eq(numberOfArguments, 2) === true)
    return new $.invokeClosure_anon1(closure, arg1, arg2).call$0();
  else
    throw $.$$throw($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($, $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.getFunctionForTypeNameOf = function() {
  if (typeof(navigator) !== "object")
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.toStringForNativeObject = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $._getTypeNameOf.call$1(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, $name, methods, $arguments) {
  var hasOwnPropertyFunction, tag, method, secondTag, nameOfObjectClass, proto;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if (!((obj) instanceof ($.Object))) {
    if ($._getTypeNameOf == null)
      $._getTypeNameOf = $.getFunctionForTypeNameOf();
    tag = $._getTypeNameOf.call$1(obj);
    method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
    if (method == null) {
      secondTag = $.alternateTag(obj, tag);
      if (secondTag != null)
        method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
    }
  } else
    method = null;
  if (method == null) {
    if ($._getTypeNameOf == null)
      $._getTypeNameOf = $.getFunctionForTypeNameOf();
    nameOfObjectClass = $._getTypeNameOf.call$1($.C_Object);
    method = hasOwnPropertyFunction.call(methods, nameOfObjectClass) ? methods[nameOfObjectClass] : null;
  }
  if (method == null)
    (function(){throw new TypeError($name + " is not a function");})();
  else {
    proto = Object.getPrototypeOf(obj);
    if (!hasOwnPropertyFunction.call(proto, $name) || proto === Object.prototype)
      Object.defineProperty(proto, $name, {value: method, enumerable: false, writable: true, configurable: true});
  }
  return method.apply(obj, $arguments);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, t1, i, entry;
  method = hasOwnPropertyFunction.call(methods, tag) ? methods[tag] : null;
  if (method == null) {
    if (typeof($dynamicMetadata) === "undefined")
      $._dynamicMetadata([]);
    t1 = $dynamicMetadata != null;
  } else
    t1 = false;
  if (t1) {
    i = 0;
    while (true) {
      if (typeof($dynamicMetadata) === "undefined")
        $._dynamicMetadata([]);
      if (!(i < $dynamicMetadata.length))
        break;
      if (typeof($dynamicMetadata) === "undefined")
        $._dynamicMetadata([]);
      entry = $dynamicMetadata[i];
      if (hasOwnPropertyFunction.call(entry.get$_set(), tag)) {
        t1 = entry.get$_tag();
        method = hasOwnPropertyFunction.call(methods, t1) ? methods[t1] : null;
        if (method != null)
          break;
      }
      ++i;
    }
  }
  return method;
};

$.dynamicFunction = function($name) {
  var table, f, methods, bind;
  table = $.dynamicFunctionTable;
  if (table == null) {
    table = {};
    $.dynamicFunctionTable = table;
  }
  f = table[$name];
  if (f != null && !!f.methods)
    return f.methods;
  methods = {};
  bind = function() {return $.dynamicBind.call$4(this, $name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  Object.defineProperty(Object.prototype, $name, {value: bind, enumerable: false, writable: true, configurable: true});
  Object.defineProperty(table, $name, {value: bind, enumerable: false, writable: true, configurable: true});
  return methods;
};

$.defineNativeMethods = function(tag, interceptorClass) {
  var methods = interceptorClass.prototype;
  $.dynamicFunction($.dispatchPropertyName)[tag]=function(){return methods};
};

$.defineNativeMethodsNonleaf = function(tag, interceptorClass) {
  var methods, method;
  methods = interceptorClass.prototype;
  method = $.dispatchPropertyName;
  $.dynamicFunction(method)[tag]=function(){if(Object.getPrototypeOf(this).hasOwnProperty(method))return methods;return $._redispatchGetNativeInterceptorHook(method,this);};
};

$.defineNativeMethodsFinish = function() {
  var t1, t2;
  t1 = $.dispatchPropertyName;
  t2 = Object.getPrototypeOf($.C_Interceptor);
  Object.prototype[t1]=function(){if (Object.getPrototypeOf(this) === Object.prototype)return t2;return $._redispatchGetNativeInterceptorHook(t1,this);};
};

$._redispatchGetNativeInterceptorHook = function($name, receiver) {
  return $.dynamicFunctionTable[$name].call(receiver);
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.Error_safeToString = function(object) {
  if (false)
    return $.JSArray_methods.toString$0(object);
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.List_List = function($length) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  $.JSNull_methods.forEach$1(dict, new $.convertDartToNative_Dictionary_anon(object));
  return object;
};

$.InvalidOperationError$ = function(message) {
  return new $.InvalidOperationError(message);
};

$.NullArgumentError$ = function(argument) {
  var t1 = new $.NullArgumentError(argument, "cannot be null");
  t1.DetailedArgumentError$2(argument, "cannot be null");
  return t1;
};

$.AffineTransform$ = function(scaleX, shearY, shearX, scaleY, translateX, translateY) {
  return new $.AffineTransform(scaleX, shearY, shearX, scaleY, translateX, translateY);
};

$.requireArgumentNotNull = function(argument, argName) {
  $._metaRequireArgumentNotNullOrEmpty(argName);
  if (argument == null)
    throw $.$$throw($.NullArgumentError$(argName));
};

$._metaRequireArgumentNotNullOrEmpty = function(argName) {
  if (argName.length === 0)
    throw $.$$throw($.InvalidOperationError$("That's just sad. Give me a good argName"));
};

$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$._redispatchGetNativeInterceptorHook.call$2 = $._redispatchGetNativeInterceptorHook;
$._redispatchGetNativeInterceptorHook.$name = "_redispatchGetNativeInterceptorHook";
$.num = {builtin$cls: "num"};
$.String = {builtin$cls: "String"};
$.C_Object = new $.Object();
$.C_NullThrownError = new $.NullThrownError();
$.JSInt_methods = $.JSInt.prototype;
$.C_Interceptor = new $.Interceptor();
$.JSArray_methods = $.JSArray.prototype;
$.JSNull_methods = $.JSNull.prototype;
$.dispatchPropertyName = "_zzyzx";
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.dynamicFunctionTable = null;
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (!(typeof receiver == "object"))
    return !(a0 == null) && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.get$context2d$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$context2d(receiver);
};
$.get$iterator$a = function(receiver) {
  return $.getInterceptor$a(receiver).get$iterator(receiver);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$a = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return receiver;
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
// Native classes
(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  toString$0: function(_) {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function(_) {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(_, a) {
    return this === a;
  }
});

$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethods("CanvasGradient", $.CanvasGradient);

$.defineNativeMethods("CanvasPattern", $.CanvasPattern);

$.defineNativeMethodsNonleaf("CanvasRenderingContext", $.CanvasRenderingContext);

$.defineNativeMethods("CanvasRenderingContext2D", $.CanvasRenderingContext2D);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("XMLHttpRequestException", $.HttpRequestException);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("RangeException", $.RangeException);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("HTMLAppletElement", $._HTMLAppletElement);

$.defineNativeMethods("HTMLBaseFontElement", $._HTMLBaseFontElement);

$.defineNativeMethods("HTMLDirectoryElement", $._HTMLDirectoryElement);

$.defineNativeMethods("HTMLFontElement", $._HTMLFontElement);

$.defineNativeMethods("HTMLFrameElement", $._HTMLFrameElement);

$.defineNativeMethods("HTMLFrameSetElement", $._HTMLFrameSetElement);

$.defineNativeMethods("HTMLMarqueeElement", $._HTMLMarqueeElement);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethods("SVGAnimatedTransformList", $.AnimatedTransformList);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGAltGlyphDefElement", $._SVGAltGlyphDefElement);

$.defineNativeMethods("SVGAltGlyphItemElement", $._SVGAltGlyphItemElement);

$.defineNativeMethods("SVGAnimateColorElement", $._SVGAnimateColorElement);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("SVGCursorElement", $._SVGCursorElement);

$.defineNativeMethods("SVGFEDropShadowElement", $._SVGFEDropShadowElement);

$.defineNativeMethods("SVGFontElement", $._SVGFontElement);

$.defineNativeMethods("SVGFontFaceElement", $._SVGFontFaceElement);

$.defineNativeMethods("SVGFontFaceFormatElement", $._SVGFontFaceFormatElement);

$.defineNativeMethods("SVGFontFaceNameElement", $._SVGFontFaceNameElement);

$.defineNativeMethods("SVGFontFaceSrcElement", $._SVGFontFaceSrcElement);

$.defineNativeMethods("SVGFontFaceUriElement", $._SVGFontFaceUriElement);

$.defineNativeMethods("SVGGlyphElement", $._SVGGlyphElement);

$.defineNativeMethods("SVGGlyphRefElement", $._SVGGlyphRefElement);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._SVGGradientElement);

$.defineNativeMethods("SVGHKernElement", $._SVGHKernElement);

$.defineNativeMethods("SVGMPathElement", $._SVGMPathElement);

$.defineNativeMethods("SVGMissingGlyphElement", $._SVGMissingGlyphElement);

$.defineNativeMethods("SVGTRefElement", $._SVGTRefElement);

$.defineNativeMethods("SVGVKernElement", $._SVGVKernElement);

$.defineNativeMethods("WebGLRenderingContext", $.RenderingContext);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);

// 192 dynamic classes.
// 192 classes
// 14 !leaf
(function() {
  var v0_TextPositioningElement = "SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement", v1__SVGGradientElement = "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement", v2_TextContentElement = [v0_TextPositioningElement, "SVGTextContentElement|SVGTextPathElement"].join("|"), v3_StyledElement = [v1__SVGGradientElement, v2_TextContentElement, "SVGAElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFESpecularLightingElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGForeignObjectElement|SVGGElement|SVGGlyphRefElement|SVGImageElement|SVGLineElement|SVGMarkerElement|SVGMaskElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGSVGElement|SVGStopElement|SVGStyledElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement"].join("|"), v4__SVGComponentTransferFunctionElement = "SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement", v5_AnimationElement = "SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement", v6_SvgElement = [v3_StyledElement, v4__SVGComponentTransferFunctionElement, v5_AnimationElement, "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGCursorElement|SVGElement|SVGFEDistantLightElement|SVGFEMergeNodeElement|SVGFEPointLightElement|SVGFESpotLightElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMPathElement|SVGMetadataElement|SVGScriptElement|SVGStyleElement|SVGVKernElement|SVGViewElement"].join("|"), v7_MediaElement = "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement", v8_Element = [v6_SvgElement, v7_MediaElement, "Element|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement"].join("|"), v9_Document = "Document|HTMLDocument|SVGDocument", v10_Node = [v8_Element, v9_Document, "Node"].join("|");
  $.dynamicSetMetadata([["CanvasRenderingContext", "CanvasRenderingContext|CanvasRenderingContext2D|WebGLRenderingContext"], ["Document", v9_Document], ["SVGGradientElement", v1__SVGGradientElement], ["SVGTextPositioningElement", v0_TextPositioningElement], ["SVGTextContentElement", v2_TextContentElement], ["SVGStyledElement", v3_StyledElement], ["SVGComponentTransferFunctionElement", v4__SVGComponentTransferFunctionElement], ["SVGAnimationElement", v5_AnimationElement], ["SVGElement", v6_SvgElement], ["HTMLMediaElement", v7_MediaElement], ["Element", v8_Element], ["Event", "ErrorEvent|Event|SpeechRecognitionError"], ["Node", v10_Node], ["EventTarget", [v10_Node, "EventTarget"].join("|")]]);
})();

var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.main(); });
      } else {
        $.main();
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.main(); });
  } else {
    $.main();
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = cls;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", ["f?"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var fields = desc[""], supr;
        if (typeof fields == "string") {
          var s = fields.split(";");
          supr = s[0];
          fields = s[1] == "" ? [] : s[1].split(",");
        } else {
          supr = desc.super;
        }
        isolateProperties[cls] = defineClass(cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if ((!superclass || typeof superclass) != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=fract_demo.dart.js.map
