// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.JSSyntaxRegExp = {"": ["_lib0_pattern", "_multiLine", "_ignoreCase"],
 "super": "Object",
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 get$pattern: function() {
  return this._lib0_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$RegExp: true
};

$$.ArgumentError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return 'Illegal argument(s): ' + $.S(t1);
  return 'Illegal argument(s)';
}
};

$$.RangeError = {"": ["message"],
 "super": "ArgumentError",
 toString$0: function() {
  return 'RangeError: ' + $.S(this.message);
},
 is$Exception: true
};

$$.IllegalArgumentException = {"": ["message"],
 "super": "ArgumentError"
};

$$.NoSuchMethodError = {"": ["_receiver", "_memberName", "_arguments", "_namedArguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var t1, t2, t3, t4, actualParameters, i, formalParameters;
  t1 = {};
  t1.sb_1 = $.StringBuffer_StringBuffer('');
  t1.i_2 = 0;
  t2 = this._arguments;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(1, t1, t2);
  for (; $.ltB(t1.i_2, t2.length); t1.i_2 = $.add(t1.i_2, 1)) {
    if ($.gtB(t1.i_2, 0))
      $.add$1(t1.sb_1, ', ');
    t3 = t1.sb_1;
    t4 = t1.i_2;
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= t2.length)
      throw $.ioore(t4);
    $.add$1(t3, $.NoSuchMethodError_safeToString(t2[t4]));
  }
  t2 = this._namedArguments;
  if (!(t2 == null))
    $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
  t2 = this._existingArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(2, t1, t2);
  actualParameters = $.toString(t1.sb_1);
  t1.sb_1 = $.StringBuffer_StringBuffer('');
  for (i = 0; i < t2.length; ++i) {
    if (i > 0)
      $.add$1(t1.sb_1, ', ');
    t3 = t1.sb_1;
    if (i >= t2.length)
      throw $.ioore(i);
    $.add$1(t3, t2[i]);
  }
  formalParameters = $.toString(t1.sb_1);
  t2 = this._memberName;
  return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t2) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t2) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t2) + '(' + $.S(formalParameters) + ')';
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t2 = env1;
      t1 = env0;
      break;
    case 2:
      t2 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.sb_1 = $.StringBuffer_StringBuffer('');
      t1.i_2 = 0;
      t2 = this._arguments;
    case 1:
      state0 = 0;
      if (!(t2 == null))
        for (; $.ltB(t1.i_2, $.get$length(t2)); t1.i_2 = $.add(t1.i_2, 1)) {
          if ($.gtB(t1.i_2, 0))
            $.add$1(t1.sb_1, ', ');
          $.add$1(t1.sb_1, $.NoSuchMethodError_safeToString($.index(t2, t1.i_2)));
        }
      t2 = this._namedArguments;
      if (!(t2 == null))
        $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
      t2 = this._existingArgumentNames;
    case 2:
      var t1, t2, actualParameters, i, formalParameters;
      state0 = 0;
      if (t2 == null)
        return 'NoSuchMethodError : method not found: \'' + $.S(this._memberName) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Arguments: [' + $.S(t1.sb_1) + ']';
      else {
        actualParameters = $.toString(t1.sb_1);
        t1.sb_1 = $.StringBuffer_StringBuffer('');
        for (i = 0; $.ltB(i, $.get$length(t2)); ++i) {
          if (i > 0)
            $.add$1(t1.sb_1, ', ');
          $.add$1(t1.sb_1, $.index(t2, i));
        }
        formalParameters = $.toString(t1.sb_1);
        t2 = this._memberName;
        return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t2) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t2) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t2) + '(' + $.S(formalParameters) + ')';
      }
  }
}
};

$$.UnsupportedError = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  return 'Unsupported operation: ' + $.S(this.get$message());
}
};

$$.UnimplementedError = {"": ["message?"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return !(t1 == null) ? 'UnimplementedError: ' + $.S(t1) : 'UnimplementedError';
},
 is$Exception: true
};

$$.StateError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return 'Bad state: ' + this.message;
}
};

$$.StackOverflowError = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Stack Overflow';
}
};

$$._ExceptionImplementation = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return t1 == null ? 'Exception' : 'Exception: ' + $.S(t1);
},
 is$Exception: true
};

$$.FormatException = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return 'FormatException: ' + $.S(this.message);
},
 is$Exception: true
};

$$.NullPointerException = {"": ["functionName", "arguments"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.functionName;
  if (t1 == null)
    return this.get$exceptionName();
  else
    return $.S(this.get$exceptionName()) + ' : method: \'' + $.S(t1) + '\'\n' + 'Receiver: null\n' + 'Arguments: ' + $.S(this.arguments);
},
 get$exceptionName: function() {
  return 'NullPointerException';
},
 is$Exception: true
};

$$.IllegalJSRegExpException = {"": ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return 'IllegalJSRegExpException: \'' + $.S(this._pattern) + '\' \'' + this._errmsg + '\'';
},
 is$Exception: true
};

$$.RuntimeError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return 'RuntimeError: ' + this.message;
},
 is$Exception: true
};

$$.FutureNotCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future has not been completed';
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future already completed';
},
 is$Exception: true
};

$$.FutureUnhandledException = {"": ["source", "stackTrace?"],
 "super": "Object",
 toString$0: function() {
  return 'FutureUnhandledException: exception while executing Future\n  ' + $.S($.replaceAll($.toString(this.source), '\n', '\n  ')) + '\n' + 'original stack trace:\n  ' + $.S($.replaceAll($.toString(this.stackTrace), '\n', '\n  '));
},
 is$Exception: true
};

$$._FutureImpl = {"": ["_isComplete", "_value", "_exception", "_stackTrace", "_exceptionHandled", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw($.FutureUnhandledException$(t1, this.get$stackTrace()));
  return this._value;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true)
    this._successListeners.push(onSuccess);
  else if (this._exceptionHandled !== true)
    throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
},
 handleException$1: function(onException) {
  var t1;
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete) {
    t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else
    this._exceptionHandlers.push(onException);
},
 _complete$0: function(exception) {
  var t1, handler, listener, listener0;
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (t1 = $.iterator(this._exceptionHandlers); t1.get$hasNext() === true;) {
        handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = $.iterator(this._successListeners); t1.get$hasNext() === true;) {
        listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && this._successListeners.length > 0)
      throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
  } finally {
    for (t1 = $.iterator(this._completionListeners); t1.get$hasNext() === true;) {
      listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
}
};

$$._CompleterImpl = {"": ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
}
};

$$._HashMapImpl = {"": ["_keys", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  var t1, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.CTC0);
  t1 = $.get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  hash = (t1 & this._keys.length - 1) >>> 0;
  for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CTC2)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForAdding$1$bailout: function(state0, key, t1) {
  var hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
  hash = $.and(t1, this._keys.length - 1);
  for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CTC2)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForLookup$1: function(key) {
  var hash, numberOfProbes, t1, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.CTC0);
  hash = $.and($.get$hashCode(key), this._keys.length - 1);
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  var numberOfProbes, t1, existingKey, numberOfProbes0;
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries, capacity, numberOfFreeOrDeleted, t1;
  newNumberOfEntries = this._numberOfEntries + 1;
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1(this._keys.length * 2);
    return;
  }
  capacity = this._keys.length;
  numberOfFreeOrDeleted = capacity - newNumberOfEntries;
  t1 = this._numberOfDeleted;
  if (t1 > numberOfFreeOrDeleted - t1)
    this._grow$1(capacity);
},
 _grow$1: function(newCapacity) {
  var capacity, oldKeys, oldValues, t1, t2, i, key, value, newIndex, t3;
  capacity = this._keys.length;
  this._loadLimit = $.tdiv(newCapacity * 3, 4);
  oldKeys = this._keys;
  oldValues = this._values;
  this._keys = $._ListImpl_List(newCapacity);
  this._values = $._ListImpl_List(newCapacity);
  for (t1 = oldKeys.length, t2 = oldValues.length, i = 0; i < capacity; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    key = oldKeys[i];
    if (key == null || key === $.CTC2)
      continue;
    if (i >= t2)
      throw $.ioore(i);
    value = oldValues[i];
    newIndex = this._probeForAdding$1(key);
    t3 = this._keys;
    if (newIndex !== (newIndex | 0))
      throw $.iae(newIndex);
    if (newIndex < 0 || newIndex >= t3.length)
      throw $.ioore(newIndex);
    t3[newIndex] = key;
    t3 = this._values;
    if (newIndex >= t3.length)
      throw $.ioore(newIndex);
    t3[newIndex] = value;
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  var t1, length$, t2, t3, i;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  t1 = this._keys;
  length$ = t1.length;
  for (t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
    t1[i] = null;
    if (i >= t3)
      throw $.ioore(i);
    t2[i] = null;
  }
},
 operator$indexSet$2: function(key, value) {
  var index, t1;
  this._ensureCapacity$0();
  index = this._probeForAdding$1(key);
  t1 = this._keys;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1 = t1[index];
  if (t1 == null || t1 === $.CTC2)
    this._numberOfEntries = this._numberOfEntries + 1;
  t1 = this._keys;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = key;
  t1 = this._values;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = value;
},
 operator$index$1: function(key) {
  var index, t1;
  index = this._probeForLookup$1(key);
  if ($.ltB(index, 0))
    return;
  t1 = this._values;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 putIfAbsent$2: function(key, ifAbsent) {
  var index, t1, value;
  index = this._probeForLookup$1(key);
  if ($.geB(index, 0)) {
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  }
  value = ifAbsent.call$0();
  this.operator$indexSet$2(key, value);
  return value;
},
 remove$1: function(key) {
  var index, t1, value;
  index = this._probeForLookup$1(key);
  if ($.geB(index, 0)) {
    this._numberOfEntries = this._numberOfEntries - 1;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    value = t1[index];
    t1[index] = null;
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = $.CTC2;
    this._numberOfDeleted = this._numberOfDeleted + 1;
    return value;
  }
  return;
},
 get$isEmpty: function() {
  return this._numberOfEntries === 0;
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var length$, i, t1, key;
  length$ = this._keys.length;
  for (i = 0; i < length$; ++i) {
    t1 = this._keys;
    if (i >= t1.length)
      throw $.ioore(i);
    key = t1[i];
    if (!(key == null) && !(key === $.CTC2)) {
      t1 = this._values;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$2(key, t1[i]);
    }
  }
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.i_10 = 0;
  this.forEach$1(new $._HashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.i_1 = 0;
  this.forEach$1(new $._HashMapImpl_values_anon(t1, list));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _HashMapImpl$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
  this._keys = $._ListImpl_List(8);
  this._values = $._ListImpl_List(8);
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {"": [],
 "super": "Object"
};

$$._KeyValuePair = {"": ["key?", "value="],
 "super": "Object"
};

$$._LinkedHashMapImpl = {"": ["_list", "_map"],
 "super": "Object",
 operator$indexSet$2: function(key, value) {
  if (this._map.containsKey$1(key) === true)
    $.index(this._map, key).get$element().set$value(value);
  else {
    this._list.addLast$1($._KeyValuePair$(key, value));
    $.indexSet(this._map, key, this._list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = $.index(this._map, key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 putIfAbsent$2: function(key, ifAbsent) {
  var value = this.operator$index$1(key);
  if (this.operator$index$1(key) == null && this._map.containsKey$1(key) !== true) {
    value = ifAbsent.call$0();
    this.operator$indexSet$2(key, value);
  }
  return value;
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.index_10 = 0;
  this._list.forEach$1(new $._LinkedHashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.index_1 = 0;
  this._list.forEach$1(new $._LinkedHashMapImpl_values_anon(t1, list));
  return list;
},
 forEach$1: function(f) {
  this._list.forEach$1(new $._LinkedHashMapImpl_forEach_anon(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  return $.get$length(this._map);
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 clear$0: function() {
  $.clear(this._map);
  this._list.clear$0();
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _LinkedHashMapImpl$0: function() {
  this._map = $.HashMap_HashMap();
  this._list = $.DoubleLinkedQueue$();
},
 is$Map: function() { return true; }
};

$$.Object = {"": [],
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
}
};

$$.DoubleLinkedQueueEntry = {"": ["_previous!", "_next=", "_element?"],
 "super": "Object",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"": ["_previous", "_next", "_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.StateError$('Empty queue'));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$('Empty queue'));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"": ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this._sentinel.prepend$1(value);
},
 removeLast$0: function() {
  return this._sentinel._previous.remove$0();
},
 removeFirst$0: function() {
  return this._sentinel._next.remove$0();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length_anon(t1));
  return t1.counter_1;
},
 get$isEmpty: function() {
  var t1 = this._sentinel;
  return t1._next === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1._next = t1;
  t1 = this._sentinel;
  t1._previous = t1;
},
 forEach$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
  }
},
 map$1: function(f) {
  var other, entry, nextEntry;
  other = $.Queue_Queue();
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    $.addLast(other, f.call$1(entry.get$_element()));
  }
  return other;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
},
 is$Collection: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"": ["_sentinel", "_currentEntry"],
 "super": "Object",
 get$hasNext: function() {
  return !(this._currentEntry.get$_next() === this._sentinel);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$._StringBufferImpl = {"": ["_buffer", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return $.eq(this._length, 0);
},
 add$1: function(obj) {
  var str = $.toString(obj);
  if (str == null || $.get$isEmpty(str) === true)
    return this;
  $.add$1(this._buffer, str);
  this._length = $.add(this._length, $.get$length(str));
  return this;
},
 clear$0: function() {
  this._buffer = $._ListImpl_List(null);
  this._length = 0;
  return this;
},
 toString$0: function() {
  if ($.eqB($.get$length(this._buffer), 0))
    return '';
  if ($.eqB($.get$length(this._buffer), 1))
    return $.index(this._buffer, 0);
  var result = $.stringJoinUnchecked($.Strings__toJsStringArray(this._buffer), '');
  $.clear(this._buffer);
  $.add$1(this._buffer, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.ListIterator = {"": ["i", "list"],
 "super": "Object",
 get$hasNext: function() {
  return this.i < this.list.length;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var value = this.list[this.i];
  this.i = this.i + 1;
  return value;
}
};

$$.StackTrace = {"": ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : '';
}
};

$$.Closure = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
}
};

$$.ConstantMap = {"": ["length?", "_jsObject", "_lib4_keys"],
 "super": "Object",
 containsKey$1: function(key) {
  if ($.eqB(key, '__proto__'))
    return false;
  return this._jsObject.hasOwnProperty(key);
},
 operator$index$1: function(key) {
  if (this.containsKey$1(key) !== true)
    return;
  return this._jsObject[key];
},
 forEach$1: function(f) {
  $.forEach(this._lib4_keys, new $.ConstantMap_forEach_anon(this, f));
},
 get$keys: function() {
  return this._lib4_keys;
},
 get$values: function() {
  var result = [];
  $.forEach(this._lib4_keys, new $.ConstantMap_values_anon(this, result));
  return result;
},
 get$isEmpty: function() {
  return $.eq(this.length, 0);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _throwUnmodifiable$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot modify unmodifiable Map'));
},
 operator$indexSet$2: function(key, val) {
  return this._throwUnmodifiable$0();
},
 putIfAbsent$2: function(key, ifAbsent) {
  return this._throwUnmodifiable$0();
},
 remove$1: function(key) {
  return this._throwUnmodifiable$0();
},
 clear$0: function() {
  return this._throwUnmodifiable$0();
},
 is$Map: function() { return true; }
};

$$.MetaInfo = {"": ["_tag?", "_tags", "_lib4_set?"],
 "super": "Object",
 _lib4_set$2: function(arg0, arg1) { return this._lib4_set.call$2(arg0, arg1); }
};

$$.ClickDemo = {"": ["_lib3_canvas?", "_lib3_stage", "_clickMan"],
 "super": "Object",
 requestFrame$0: function() {
  $.window().requestAnimationFrame$1(this.get$_onFrame());
},
 _onFrame$1: function(highResTime) {
  this._lib3_stage.draw$0();
  $.window().requestAnimationFrame$1(this.get$_onFrame());
},
 get$_onFrame: function() { return new $.BoundClosure(this, '_onFrame$1'); }
};

$$.AbstractWorkerEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.AudioContextEvents = {"": ["_ptr"],
 "super": "Events",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$.BatteryManagerEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.BodyElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.DOMApplicationCacheEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.DedicatedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents"
};

$$.DocumentEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.AttributeMap = {"": [],
 "super": "Object",
 is$Map: function() { return true; }
};

$$._ElementAttributeMap = {"": ["_lib_element?"],
 "super": "AttributeMap",
 containsKey$1: function(key) {
  return this._lib_element.$dom_hasAttribute$1(key);
},
 operator$index$1: function(key) {
  return this._lib_element.$dom_getAttribute$1(key);
},
 operator$indexSet$2: function(key, value) {
  this._lib_element.$dom_setAttribute$2(key, $.S(value));
},
 putIfAbsent$2: function(key, ifAbsent) {
  if (this._lib_element.$dom_hasAttribute$1(key) !== true)
    this.operator$indexSet$2(key, ifAbsent.call$0());
  return this.operator$index$1(key);
},
 remove$1: function(key) {
  var t1, value;
  t1 = this._lib_element;
  value = t1.$dom_getAttribute$1(key);
  t1.$dom_removeAttribute$1(key);
  return value;
},
 clear$0: function() {
  var attributes, i;
  attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.clear$0$bailout(1, attributes);
  for (i = attributes.length - 1; i >= 0; --i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    this.remove$1(attributes[i].get$name());
  }
},
 clear$0$bailout: function(state0, attributes) {
  var i;
  for (i = $.sub($.get$length(attributes), 1); $.geB(i, 0); i = $.sub(i, 1))
    this.remove$1($.index(attributes, i).get$name());
},
 forEach$1: function(f) {
  var attributes, len, i, item;
  attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.forEach$1$bailout(1, f, attributes);
  for (len = attributes.length, i = 0; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    item = attributes[i];
    f.call$2(item.get$name(), item.get$value());
  }
},
 forEach$1$bailout: function(state0, f, attributes) {
  var len, i, item;
  for (len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    item = $.index(attributes, i);
    f.call$2(item.get$name(), item.get$value());
  }
},
 get$keys: function() {
  var attributes, t2, keys, len, i, t1;
  attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.get$keys$bailout(1, attributes);
  t2 = attributes.length;
  keys = $._ListImpl_List(t2);
  for (len = attributes.length, i = 0; i < len; ++i) {
    t1 = attributes[i].get$name();
    if (i >= t2)
      throw $.ioore(i);
    keys[i] = t1;
  }
  return keys;
},
 get$keys$bailout: function(state0, attributes) {
  var keys, len, i, t1;
  keys = $._ListImpl_List($.get$length(attributes));
  for (len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    t1 = $.index(attributes, i).get$name();
    if (i >= keys.length)
      throw $.ioore(i);
    keys[i] = t1;
  }
  return keys;
},
 get$values: function() {
  var attributes, t2, values, len, i, t1;
  attributes = this._lib_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.get$values$bailout(1, attributes);
  t2 = attributes.length;
  values = $._ListImpl_List(t2);
  for (len = attributes.length, i = 0; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    t1 = attributes[i].get$value();
    if (i >= t2)
      throw $.ioore(i);
    values[i] = t1;
  }
  return values;
},
 get$values$bailout: function(state0, attributes) {
  var values, len, i, t1;
  values = $._ListImpl_List($.get$length(attributes));
  for (len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    t1 = $.index(attributes, i).get$value();
    if (i >= values.length)
      throw $.ioore(i);
    values[i] = t1;
  }
  return values;
},
 get$length: function() {
  return $.get$length(this._lib_element.get$$$dom_attributes());
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
}
};

$$.ElementEvents = {"": ["_ptr"],
 "super": "Events",
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.EventSourceEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.Events = {"": ["_ptr"],
 "super": "Object",
 operator$index$1: function(type) {
  return $.EventListenerList$(this._ptr, type);
}
};

$$.EventListenerList = {"": ["_ptr", "_type"],
 "super": "Object",
 add$2: function(listener, useCapture) {
  this._ptr.$dom_addEventListener$3(this._type, listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener,false)
},
 remove$2: function(listener, useCapture) {
  this._ptr.$dom_removeEventListener$3(this._type, listener, useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener,false)
}
};

$$.FileReaderEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.FileWriterEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.FrameSetElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.HttpRequestEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.HttpRequestUploadEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBDatabaseEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBOpenDBRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.IDBRequestEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBTransactionEvents = {"": ["_ptr"],
 "super": "Events",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$.IDBVersionChangeRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.InputElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.LocalWindowEvents = {"": ["_ptr"],
 "super": "Events",
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.MediaElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.MediaStreamEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MessagePortEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.NotificationEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$.PeerConnection00Events = {"": ["_ptr"],
 "super": "Events"
};

$$.RTCDataChannelEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$.RTCPeerConnectionEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.ScriptProcessorNodeEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.SharedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents"
};

$$.SpeechRecognitionEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackCueEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.WebSocketEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$.WorkerEvents = {"": ["_ptr"],
 "super": "AbstractWorkerEvents"
};

$$.WorkerContextEvents = {"": ["_ptr"],
 "super": "Events"
};

$$._DOMWindowCrossFrame = {"": ["_window"],
 "super": "Object",
 get$top: function() {
  return $._DOMWindowCrossFrame__createSafe(this._window.top);
},
 close$0: function() {
  return this._window.close();
}
};

$$.FixedSizeListIterator = {"": ["_lib_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 get$hasNext: function() {
  return $.gt(this._lib_length, this._pos);
}
};

$$._VariableSizeListIterator = {"": [],
 "super": "Object",
 get$hasNext: function() {
  return $.gt($.get$length(this._array), this._pos);
},
 next$0: function() {
  var t1, t3;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  t3 = this._pos;
  this._pos = t3 + 1;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state0, t1) {
  var t3 = this._pos;
  this._pos = t3 + 1;
  return $.index(t1, t3);
}
};

$$._Manager = {"": ["nextIsolateId=", "currentManagerId?", "nextManagerId", "currentContext=", "rootContext=", "topEventLoop?", "fromCommandLine?", "isWorker?", "supportsWorkers", "isolates?", "mainManager?", "managers?"],
 "super": "Object",
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
  this.isWorker = $isWorker;
  this.supportsWorkers = $supportsWorkers;
  this.fromCommandLine = typeof(window) == 'undefined';
},
 _nativeInitWorkerMessageHandler$0: function() {
  $globalThis.onmessage = function (e) {
  _IsolateNatives._processWorkerMessage(this.mainManager, e);
};
},
 maybeCloseWorker$0: function() {
  if ($.get$isEmpty(this.isolates) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'close'])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.Map_Map();
  this.managers = $.Map_Map();
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {"": ["id?", "ports?", "isolateStatics"],
 "super": "Object",
 initGlobals$0: function() {
  $initGlobals(this);
},
 eval$1: function(code) {
  var old, result, t1;
  old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  result = null;
  try {
    result = code.call$0();
  } finally {
    t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
  $setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  if (this.ports.containsKey$1(portId) === true)
    throw $.$$throw($._ExceptionImplementation$('Registry: ports must be registered only once.'));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  this.ports.remove$1(portId);
  if ($.get$isEmpty(this.ports) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1, t2;
  t1 = $._globalState();
  t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.Map_Map();
  this.initGlobals$0();
}
};

$$._EventLoop = {"": ["events"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  $.addLast(this.events, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.get$isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else if (!($._globalState().get$rootContext() == null) && $._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true && $._globalState().get$fromCommandLine() === true && $.get$isEmpty($._globalState().get$rootContext().get$ports()) === true)
      throw $.$$throw($._ExceptionImplementation$('Program exited with open ReceivePorts.'));
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function(exception) {
  var t1, e, trace;
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'error', 'msg', $.S(e) + '\n' + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {"": ["isolate", "fn", "message"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"": [],
 "super": "Object",
 get$id: function() {
  return 0;
},
 postMessage$1: function(msg) {
  $globalThis.postMessage(msg);
}
};

$$._BaseSendPort = {"": ["_isolateId?"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($._ExceptionImplementation$('SendPort.send: Illegal replyTo port type'));
},
 call$1: function(message) {
  var completer, port;
  completer = $.Completer_Completer();
  port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(completer, port));
  return completer.get$future();
},
 is$SendPort: true
};

$$._NativeJsSendPort = {"": ["_receivePort?", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(replyTo, this, message));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
},
 get$hashCode: function() {
  return this._receivePort.get$_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"": ["_workerId?", "_receivePortId", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(replyTo, message, this));
},
 operator$eq$1: function(other) {
  var t1;
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 get$hashCode: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"": ["_id?", "_callback?"],
 "super": "Object",
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 receive$1: function(onMessage) {
  this._callback = onMessage;
},
 close$0: function() {
  this._callback = null;
  $._globalState().get$currentContext().unregister$1(this._id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._id, this);
}
};

$$._PendingSendPortFinder = {"": ["ports?", "_visited"],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  if (!($.index(this._visited, list) == null))
    return;
  $.indexSet(this._visited, list, true);
  $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  if (!($.index(this._visited, map) == null))
    return;
  $.indexSet(this._visited, map, true);
  $.forEach(map.get$values(), new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  if (!!port.is$_BufferingSendPort && port._port == null)
    this.ports.push(port.get$_futurePort());
},
 _PendingSendPortFinder$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsSerializer = {"": ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return ['sendport', x._workerId, x._isolateId, x._receivePortId];
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ['sendport', $._globalState().get$currentManagerId(), port._isolateId, port._receivePort.get$_id()];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsSerializer$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"": ["_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsCopier$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer = {"": ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  var managerId, isolateId, receivePortId, isolate;
  managerId = $.index(x, 1);
  isolateId = $.index(x, 2);
  receivePortId = $.index(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"": ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return object['__MessageTraverser__attached_info__'];
},
 operator$indexSet$2: function(object, info) {
  $.add$1(this.tagged, object);
  object['__MessageTraverser__attached_info__'] = info;
},
 reset$0: function() {
  this.tagged = $._ListImpl_List(null);
},
 cleanup$0: function() {
  var length$, i;
  length$ = $.get$length(this.tagged);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  i = 0;
  for (; i < length$; ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
},
 cleanup$0$bailout: function(state0, length$) {
  var i = 0;
  for (; $.ltB(i, length$); ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
}
};

$$._MessageTraverserVisitedMap = {"": [],
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 operator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {"": [],
 "super": "Object",
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw('Message serialization: Illegal value ' + $.S(x) + ' passed');
}
};

$$._Copier = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copy, len, i;
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
    return this.visitList$1$bailout(1, list);
  copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  len = list.length;
  copy = $._ListImpl_List(len);
  $.indexSet(this._visited, list, copy);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    copy[i] = this._dispatch$1(list[i]);
  }
  return copy;
},
 visitList$1$bailout: function(state0, list) {
  var copy, len, i, t1;
  copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  len = $.get$length(list);
  copy = $._ListImpl_List(len);
  $.indexSet(this._visited, list, copy);
  for (i = 0; $.ltB(i, len); ++i) {
    t1 = this._dispatch$1($.index(list, i));
    if (i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitMap$1: function(map) {
  var t1, t2;
  t1 = {};
  t1.copy_10 = $.index(this._visited, map);
  t2 = t1.copy_10;
  if (!(t2 == null))
    return t2;
  t1.copy_10 = $.Map_Map();
  $.indexSet(this._visited, map, t1.copy_10);
  map.forEach$1(new $._Copier_visitMap_anon(this, t1));
  return t1.copy_10;
}
};

$$._Serializer = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId, id;
  copyId = $.index(this._visited, list);
  if (!(copyId == null))
    return ['ref', copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, list, id);
  return ['list', id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId, id;
  copyId = $.index(this._visited, map);
  if (!(copyId == null))
    return ['ref', copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, map, id);
  return ['map', id, this._serializeList$1(map.get$keys()), this._serializeList$1(map.get$values())];
},
 _serializeList$1: function(list) {
  var len, result, i;
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._serializeList$1$bailout(1, list);
  len = list.length;
  result = $._ListImpl_List(len);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._dispatch$1(list[i]);
  }
  return result;
},
 _serializeList$1$bailout: function(state0, list) {
  var len, result, i, t1;
  len = $.get$length(list);
  result = $._ListImpl_List(len);
  for (i = 0; $.ltB(i, len); ++i) {
    t1 = this._dispatch$1($.index(list, i));
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
}
};

$$._Deserializer = {"": [],
 "super": "Object",
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._deserialized = $.HashMap_HashMap();
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  switch ($.index(x, 0)) {
    case 'ref':
      return this._deserializeRef$1(x);
    case 'list':
      return this._deserializeList$1(x);
    case 'map':
      return this._deserializeMap$1(x);
    case 'sendport':
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._deserialized, id);
},
 _deserializeList$1: function(x) {
  var id, dartList, len, i, t1;
  id = $.index(x, 1);
  dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  len = dartList.length;
  for (i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    t1 = this._deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state0, dartList, id) {
  var len, i;
  $.indexSet(this._deserialized, id, dartList);
  len = $.get$length(dartList);
  for (i = 0; $.ltB(i, len); ++i)
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeMap$1: function(x) {
  var result, id, keys, values, len, i, key;
  result = $.Map_Map();
  id = $.index(x, 1);
  $.indexSet(this._deserialized, id, result);
  keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(1, x, result, keys);
  values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  len = keys.length;
  for (i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    key = this._deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    $.indexSet(result, key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      keys = env2;
      result = env1;
      x = env0;
      break;
    case 2:
      keys = env2;
      result = env1;
      values = env0;
      break;
  }
  switch (state0) {
    case 0:
      result = $.Map_Map();
      id = $.index(x, 1);
      $.indexSet(this._deserialized, id, result);
      keys = $.index(x, 2);
    case 1:
      state0 = 0;
      values = $.index(x, 3);
    case 2:
      var result, id, keys, x, values, len, i;
      state0 = 0;
      len = $.get$length(keys);
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(result, this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw('Unexpected serialized object');
}
};

$$._Timer = {"": ["_once", "_handle"],
 "super": "Object",
 _Timer$repeating$2: function(milliSeconds, callback) {
  this._handle = $._window().setInterval$2(new $.anon0(callback, this), milliSeconds);
},
 _Timer$2: function(milliSeconds, callback) {
  this._handle = $._window().setTimeout$2(new $.anon(this, callback), milliSeconds);
}
};

$$.SVGElementInstanceEvents = {"": ["_ptr"],
 "super": "Events",
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.Attachable = {"": ["name?"],
 "super": "Object"
};

$$.AttachableObject = {"": [],
 "super": "DisposableImpl",
 _addHandler$2: function(property, watcher) {
  this.validateNotDisposed$0();
  return $.add$1(this._eventHandlers.putIfAbsent$2(property, new $.AttachableObject__addHandler_anon()), watcher);
},
 _fireEvent$2: function(attachable, args) {
  var handle;
  this.validateNotDisposed$0();
  handle = $.index(this._eventHandlers, attachable);
  if (!(handle == null))
    handle.fireEvent$1(args);
},
 _set$2: function(key, value) {
  this.validateNotDisposed$0();
  $.indexSet(this._propertyValues, key, value);
  this._fireChange$1(key);
},
 get$_set: function() { return new $.BoundClosure0(this, '_set$2'); },
 _isSet$1: function(key) {
  this.validateNotDisposed$0();
  return this._propertyValues.containsKey$1(key);
},
 _remove$1: function(key) {
  this.validateNotDisposed$0();
  if (this._isSet$1(key) === true) {
    this._propertyValues.remove$1(key);
    this._fireChange$1(key);
  }
},
 _getValueOrUndefined$3: function(key, obj, ifAbsent) {
  var value;
  this.validateNotDisposed$0();
  if (this._isSet$1(key) === true)
    return $.index(this._propertyValues, key);
  else if (!(ifAbsent == null)) {
    value = ifAbsent.call$1(obj);
    this._set$2(key, value);
    return value;
  } else
    return $.CTC8;
},
 _fireChange$1: function(key) {
  var handle;
  this.validateNotDisposed$0();
  handle = $.index(this._eventHandlers, key);
  if (!(handle == null))
    handle.fireEvent$1(key);
}
};

$$.AttachedEvent = {"": ["name"],
 "super": "Attachable",
 addHandler$2: function(obj, handler) {
  return obj._addHandler$2(this, handler);
},
 fireEvent$2: function(obj, args) {
  return obj._fireEvent$2(this, args);
}
};

$$.Property = {"": ["defaultValue", "name"],
 "super": "Attachable",
 get$2: function(obj, ifAbsent) {
  var coreValue = this.getCore$2(obj, ifAbsent);
  if (!(coreValue === $.CTC8))
    return coreValue;
  else
    return this.defaultValue;
},
 get$1: function(obj) {
  return this.get$2(obj,null)
},
 getCore$2: function(obj, ifAbsent) {
  return obj._getValueOrUndefined$3(this, obj, ifAbsent);
},
 set$2: function(obj, value) {
  obj._set$2(this, value);
},
 clear$1: function(obj) {
  return obj._remove$1(this);
},
 addHandler$2: function(obj, handler) {
  return obj._addHandler$2(this, handler);
},
 toString$0: function() {
  return 'Property \'' + $.S(this.name) + '\'';
}
};

$$._UndefinedValue = {"": [],
 "super": "Object"
};

$$.Enumerable = {"": [],
 "super": "Object",
 get$isEmpty: function() {
  return this.some$1(new $.Enumerable_isEmpty_anon()) !== true;
},
 some$1: function(f) {
  var t1;
  $.requireArgumentNotNull(f, 'f');
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
},
 join$1: function(separator) {
  var sb, t1, t2;
  sb = $.StringBuffer_StringBuffer('');
  for (t1 = $.iterator(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if ($.gtB($.get$length(sb), 0))
      $.add$1(sb, separator);
    $.add$1(sb, t2);
  }
  return $.toString(sb);
},
 join$0: function() {
  return this.join$1(', ')
},
 map$1: function(f) {
  $.requireArgumentNotNull(f, 'f');
  return $._FuncEnumerable$(this, new $.Enumerable_map_anon(f));
},
 firstOrDefault$2: function(f, defaultValue) {
  var iter;
  if (f == null)
    f = new $.Enumerable_firstOrDefault_anon();
  iter = $._WhereIterator$(this.iterator$0(), f);
  if (iter.get$hasNext() !== true)
    return defaultValue;
  return iter.next$0();
},
 firstOrDefault$1: function(f) {
  return this.firstOrDefault$2(f,null)
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 toList$0: function() {
  return $._ListImpl_List$from(this);
},
 toString$0: function() {
  return '[' + $.S(this.join$0()) + ']';
},
 is$Enumerable: true
};

$$._SimpleEnumerable = {"": ["_source"],
 "super": "Enumerable",
 iterator$0: function() {
  return $.iterator(this._source);
}
};

$$._FuncEnumerable = {"": ["_source", "_func"],
 "super": "Enumerable",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 iterator$0: function() {
  return this._func$1(this._source.iterator$0());
}
};

$$._SelectIterator = {"": ["_source", "_func"],
 "super": "Object",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 get$hasNext: function() {
  return this._source.get$hasNext();
},
 next$0: function() {
  return this._func$1(this._source.next$0());
}
};

$$._WhereIterator = {"": ["_source", "_func", "_lib2_next=", "_current"],
 "super": "Object",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 get$hasNext: function() {
  if (this._lib2_next == null) {
    this._lib2_next = false;
    for (var t1 = this._source; t1.get$hasNext() === true;) {
      this._current = t1.next$0();
      if (this._func$1(this._current) === true) {
        this._lib2_next = true;
        break;
      }
    }
  }
  return this._lib2_next;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  this._lib2_next = null;
  return this._current;
}
};

$$.DisposableImpl = {"": [],
 "super": "Object",
 validateNotDisposed$0: function() {
}
};

$$.EventArgs = {"": [],
 "super": "Object"
};

$$.EventHandle = {"": ["_handlers", "_disposed"],
 "super": "DisposableImpl",
 fireEvent$1: function(args) {
  var t1 = this._handlers;
  if (!(t1 == null))
    $.forEach(t1, new $.EventHandle_fireEvent_anon(args));
},
 add$1: function(handler) {
  var id = $.GlobalId_GlobalId();
  if (this._handlers == null)
    this._handlers = $.HashMap_HashMap();
  $.indexSet(this._handlers, id, handler);
  return id;
},
 remove$1: function(id) {
  var t1 = this._handlers;
  if (!(t1 == null))
    return !(t1.remove$1(id) == null);
  else
    return false;
}
};

$$.DetailedIllegalArgumentException = {"": ["argument", "message"],
 "super": "ArgumentError",
 toString$0: function() {
  var t1, t2, t3;
  t1 = this.message;
  t2 = t1 == null || $.eqB($.get$length(t1), 0);
  t3 = this.argument;
  if (t2)
    return 'Illegal argument: ' + $.S(t3);
  else
    return 'Illegal argument: ' + $.S(t3) + ' -- ' + $.S(t1);
}
};

$$.NullArgumentException = {"": ["arg", "message"],
 "super": "ArgumentError",
 toString$0: function() {
  return 'Null argument: ' + $.S(this.arg);
}
};

$$.GlobalId = {"": ["id?", "_hashCode"],
 "super": "Object",
 get$hashCode: function() {
  return this._hashCode;
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(other.get$id(), this.id);
}
};

$$.AffineTransform = {"": ["_m00?", "_m10?", "_m01?", "_m11?", "_m02?", "_m12?"],
 "super": "Object",
 get$scaleX: function() {
  return this._m00;
},
 get$scaleY: function() {
  return this._m11;
},
 get$translateX: function() {
  return this._m02;
},
 get$translateY: function() {
  return this._m12;
},
 get$shearX: function() {
  return this._m01;
},
 get$shearY: function() {
  return this._m10;
},
 get$determinant: function() {
  return $.sub($.mul(this._m00, this._m11), $.mul(this._m01, this._m10));
},
 concatenate$1: function(tx) {
  var m0, m1, m00, m10;
  m0 = this._m00;
  m1 = this._m01;
  this._m00 = $.add($.mul(tx.get$_m00(), m0), $.mul(tx.get$_m10(), m1));
  this._m01 = $.add($.mul(tx.get$_m01(), m0), $.mul(tx.get$_m11(), m1));
  this._m02 = $.add(this._m02, $.add($.mul(tx.get$_m02(), m0), $.mul(tx.get$_m12(), m1)));
  m00 = this._m10;
  m10 = this._m11;
  this._m10 = $.add($.mul(tx.get$_m00(), m00), $.mul(tx.get$_m10(), m10));
  this._m11 = $.add($.mul(tx.get$_m01(), m00), $.mul(tx.get$_m11(), m10));
  this._m12 = $.add(this._m12, $.add($.mul(tx.get$_m02(), m00), $.mul(tx.get$_m12(), m10)));
  return this;
},
 get$concatenate: function() { return new $.BoundClosure(this, 'concatenate$1'); },
 translate$2: function(dx, dy) {
  this._m02 = $.add(this._m02, $.add($.mul(dx, this._m00), $.mul(dy, this._m01)));
  this._m12 = $.add(this._m12, $.add($.mul(dx, this._m10), $.mul(dy, this._m11)));
  return this;
},
 setToTranslation$2: function(dx, dy) {
  return this.setTransform$6(1, 0, 0, 1, dx, dy);
},
 setTransform$6: function(m00, m10, m01, m11, m02, m12) {
  this._m00 = m00;
  this._m10 = m10;
  this._m01 = m01;
  this._m11 = m11;
  this._m02 = m02;
  this._m12 = m12;
  return this;
},
 transformCoordinate$1: function(point) {
  return $.Coordinate$($.add($.add($.mul(point.get$x(), this._m00), $.mul(point.get$y(), this._m01)), this._m02), $.add($.add($.mul(point.get$x(), this._m10), $.mul(point.get$y(), this._m11)), this._m12));
},
 createInverse$0: function() {
  var det = this.get$determinant();
  return $.AffineTransform$($.div(this._m11, det), $.div($.neg(this._m10), det), $.div($.neg(this._m01), det), $.div(this._m00, det), $.div($.sub($.mul(this._m01, this._m12), $.mul(this._m11, this._m02)), det), $.div($.sub($.mul(this._m10, this._m02), $.mul(this._m00, this._m12)), det));
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this._m00, other.get$_m00()) && $.eqB(this._m01, other.get$_m01()) && $.eqB(this._m02, other.get$_m02()) && $.eqB(this._m10, other.get$_m10()) && $.eqB(this._m11, other.get$_m11()) && $.eqB(this._m12, other.get$_m12());
},
 toString$0: function() {
  return $.Strings_join($.map($.$$([this.get$translateX(), this.get$translateY(), this.get$scaleX(), this.get$scaleY(), this.get$shearX(), this.get$shearY()]), new $.AffineTransform_toString_anon()).toList$0(), ', ');
}
};

$$.Coordinate = {"": ["x?", "y?"],
 "super": "Object",
 get$isValid: function() {
  return $.isValidNumber(this.x) && $.isValidNumber(this.y);
},
 operator$sub$1: function(other) {
  return $.Vector$($.sub(this.x, other.get$x()), $.sub(this.y, other.get$y()));
},
 operator$add$1: function(other) {
  return $.Coordinate$($.add(this.x, other.get$x()), $.add(this.y, other.get$y()));
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this.x, other.get$x()) && $.eqB(this.y, other.get$y());
},
 toString$0: function() {
  return '{x:' + $.S(this.x) + ', y:' + $.S(this.y) + '}';
}
};

$$.Box = {"": ["left?", "top?", "width?", "height?"],
 "super": "Object",
 get$topLeft: function() {
  return $.Coordinate$(this.left, this.top);
},
 get$size: function() {
  return $.Size$(this.width, this.height);
},
 get$isValid: function() {
  return this.get$topLeft().get$isValid() === true && this.get$size().get$isValid() === true;
},
 contains$1: function(point) {
  var t1, t2, t3;
  t1 = point.get$x();
  t2 = this.left;
  if ($.geB(t1, t2)) {
    t1 = point.get$x();
    t3 = this.width;
    if (typeof t3 !== 'number')
      throw $.iae(t3);
    if ($.leB(t1, t2 + t3)) {
      t1 = point.get$y();
      t2 = this.top;
      if ($.geB(t1, t2)) {
        t1 = point.get$y();
        t3 = this.height;
        if (typeof t3 !== 'number')
          throw $.iae(t3);
        t1 = $.leB(t1, t2 + t3);
      } else
        t1 = false;
    } else
      t1 = false;
  } else
    t1 = false;
  return t1;
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(other.get$left(), this.left) && $.eqB(other.get$top(), this.top) && $.eqB(other.get$width(), this.width) && $.eqB(other.get$height(), this.height);
},
 toString$0: function() {
  return 'Location: ' + $.S(this.get$topLeft()) + ', Size: ' + $.S(this.get$size());
},
 get$hashCode: function() {
  return $.Util_getHashCode([this.left, this.top, this.width, this.height]);
}
};

$$.Size = {"": ["width?", "height?"],
 "super": "Object",
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this.width, other.get$width()) && $.eqB(this.height, other.get$height());
},
 get$area: function() {
  return $.mul(this.width, this.height);
},
 isEmpty$0: function() {
  return $.eq(this.get$area(), 0);
},
 get$isEmpty: function() { return new $.BoundClosure1(this, 'isEmpty$0'); },
 get$isValid: function() {
  var t1, t2;
  t1 = this.width;
  if ($.isValidNumber(t1)) {
    t2 = this.height;
    t1 = $.isValidNumber(t2) && $.geB(t1, 0) && $.geB(t2, 0);
  } else
    t1 = false;
  return t1;
},
 scale$1: function(magnitude) {
  return $.Size$($.mul(this.width, magnitude), $.mul(this.height, magnitude));
},
 operator$mul$1: function(magnitude) {
  return this.scale$1(magnitude);
},
 toString$0: function() {
  return '(' + $.S(this.width) + ' x ' + $.S(this.height) + ')';
}
};

$$.Vector = {"": ["x", "y"],
 "super": "Coordinate",
 get$length: function() {
  var t1, t2;
  t1 = this.x;
  t1 = $.mul(t1, t1);
  t2 = this.y;
  return $.sqrt($.add(t1, $.mul(t2, t2)));
},
 operator$add$1: function(other) {
  return $.Vector$($.add(this.x, other.get$x()), $.add(this.y, other.get$y()));
},
 operator$mul$1: function(magnitude) {
  return this.scale$1(magnitude);
},
 scale$1: function(magnitude) {
  return $.Vector$($.mul(this.x, magnitude), $.mul(this.y, magnitude));
}
};

$$.ClickManager = {"": ["_stage", "_mouseDownElement"],
 "super": "Object",
 _mouseMove$1: function(e) {
  var t1, items;
  t1 = $.getMouseEventCoordinate(e);
  items = $.Mouse_markMouseOver(this._stage, t1);
  if ($.gtB($.get$length(items), 0))
    $.forEach(items, new $.ClickManager__mouseMove_anon($.ElementMouseEventArgs_ElementMouseEventArgs($.index(items, 0), e)));
},
 get$_mouseMove: function() { return new $.BoundClosure(this, '_mouseMove$1'); },
 _mouseOut$1: function(e) {
  var t1 = this._stage;
  $.Mouse_markMouseOver(t1, null);
  $.get$ClickManager__mouseOutEvent().fireEvent$2(t1, $.CTC10);
},
 get$_mouseOut: function() { return new $.BoundClosure(this, '_mouseOut$1'); },
 _mouseUp$1: function(e) {
  var t1, upElement;
  t1 = $.getMouseEventCoordinate(e);
  upElement = $.$$($.Mouse_markMouseOver(this._stage, t1)).firstOrDefault$1(new $.ClickManager__mouseUp_anon());
  if (!(upElement == null)) {
    this._doMouseUp$2(upElement, e);
    if ($.eqB(upElement, this._mouseDownElement))
      this._doClick$2(upElement, e);
    this._mouseDownElement = null;
  }
},
 get$_mouseUp: function() { return new $.BoundClosure(this, '_mouseUp$1'); },
 _mouseDown$1: function(e) {
  var coord, t1;
  coord = $.getMouseEventCoordinate(e);
  this._mouseDownElement = $.$$($.Mouse_markMouseOver(this._stage, coord)).firstOrDefault$1(new $.ClickManager__mouseDown_anon());
  t1 = this._mouseDownElement;
  if (!(t1 == null))
    this._doMouseDown$2(t1, e);
},
 get$_mouseDown: function() { return new $.BoundClosure(this, '_mouseDown$1'); },
 _doMouseDown$2: function(element, e) {
  var args = $.ElementMouseEventArgs_ElementMouseEventArgs(element, e);
  $.get$ClickManager__mouseDownEvent().fireEvent$2(element, args);
},
 _doMouseUp$2: function(element, e) {
  var args = $.ElementMouseEventArgs_ElementMouseEventArgs(element, e);
  $.get$ClickManager__mouseUpEvent().fireEvent$2(element, args);
},
 _doClick$2: function(element, e) {
  var args = $.ElementMouseEventArgs_ElementMouseEventArgs(element, e);
  $.get$ClickManager__clickEvent().fireEvent$2(element, args);
},
 ClickManager$_internal$1: function(_stage) {
  var t1 = this._stage;
  $.add$1(t1.get$_canvas().get$on().get$mouseMove(), this.get$_mouseMove());
  $.add$1(t1.get$_canvas().get$on().get$mouseOut(), this.get$_mouseOut());
  $.add$1(t1.get$_canvas().get$on().get$mouseUp(), this.get$_mouseUp());
  $.add$1(t1.get$_canvas().get$on().get$mouseDown(), this.get$_mouseDown());
}
};

$$.ElementMouseEventArgs = {"": ["element?", "shiftKey?"],
 "super": "EventArgs"
};

$$.Panel = {"": [],
 "super": "ParentElement",
 addElement$1: function(element) {
  this.insertAt$2(element, this._children.length);
},
 insertAt$2: function(element, index) {
  if (index == null)
    index = 0;
  element.registerParent$1(this);
  $.insertRange$3(this._children, index, 1, element);
  $.get$Panel__containerTransformProperty().set$2(element, element.addTransform$0());
  this.onChildrenChanged$0();
},
 getVisualChild$1: function(index) {
  var t1 = this._children;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 get$visualChildCount: function() {
  return this._children.length;
},
 getChildTransform$1: function(child) {
  return $.get$Panel__containerTransformProperty().get$1(child);
},
 drawOverride$1: function(ctx) {
  var t1 = this.background;
  if (!(t1 == null)) {
    ctx.set$fillStyle(t1);
    ctx.fillRect$4(0, 0, this.get$width(), this.get$height());
  }
  $.ParentElement.prototype.drawOverride$1.call(this, ctx);
}
};

$$.ParentElement = {"": [],
 "super": "PElement",
 onChildrenChanged$0: function() {
  this.invalidateDraw$0();
},
 childInvalidated$1: function(child) {
  this.invalidateDraw$0();
},
 update$0: function() {
  this._forEach$1(new $.ParentElement_update_anon());
  $.PElement.prototype.update$0.call(this);
},
 drawOverride$1: function(ctx) {
  this._forEach$1(new $.ParentElement_drawOverride_anon(ctx));
},
 _forEach$1: function(f) {
  var length$, i;
  length$ = this.get$visualChildCount();
  if (typeof length$ !== 'number')
    return this._forEach$1$bailout(1, f, length$);
  for (i = 0; i < length$; ++i)
    f.call$1(this.getVisualChild$1(i));
},
 _forEach$1$bailout: function(state0, f, length$) {
  var i;
  for (i = 0; $.ltB(i, length$); ++i)
    f.call$1(this.getVisualChild$1(i));
},
 is$ParentElement: true
};

$$.PCanvas = {"": ["_children", "background", "_transforms", "cacheEnabled", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_lib1_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "Panel",
 setTopLeft$2: function(element, value) {
  this.getChildTransform$1(element).setToTranslation$2(value.get$x(), value.get$y());
},
 setCenter$2: function(element, value) {
  this.setTopLeft$2(element, $.Coordinate_difference(value, $.Vector$($.div(element.get$width(), 2), $.div(element.get$height(), 2))));
}
};

$$.PElement = {"": [],
 "super": "AttachableObject",
 clip$0: function() { return this.clip.call$0(); },
 get$width: function() {
  return this._width;
},
 set$width: function(value) {
  this._width = value;
  this.invalidateDraw$0();
},
 get$height: function() {
  return this._height;
},
 set$height: function(value) {
  this._height = value;
  this.invalidateDraw$0();
},
 get$size: function() {
  return $.Size$(this._width, this._height);
},
 getTransform$0: function() {
  var tx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  $.forEach(this._transforms, tx.get$concatenate());
  return tx;
},
 update$0: function() {
},
 drawCore$1: function(ctx) {
  if (this.cacheEnabled === true)
    this._drawCached$1(ctx);
  else
    this._drawNormal$1(ctx);
},
 addTransform$0: function() {
  this.validateNotDisposed$0();
  var tx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  this._transforms.push(tx);
  return tx;
},
 invalidateDraw$0: function() {
  this.validateNotDisposed$0();
  if (!(this._lastDrawSize == null)) {
    this._lastDrawSize = null;
    this._invalidateParent$0();
  }
},
 registerParent$1: function(parent$) {
  this._lib1_parent = parent$;
},
 _stageDraw$1: function(ctx) {
  var dirty;
  this.update$0();
  dirty = this._lastDrawSize == null;
  this.drawCore$1(ctx);
  return dirty;
},
 _drawCached$1: function(ctx) {
  var t1, intLastDrawSize;
  if (this._cacheCanvas == null)
    this._cacheCanvas = $.CanvasElement_CanvasElement($, $);
  t1 = this._lastDrawSize;
  intLastDrawSize = t1 == null ? null : $.Size$($.toInt(t1.get$width()), $.toInt(this._lastDrawSize.get$height()));
  t1 = this._cacheCanvas;
  if (!$.eqB($.Size$(t1.get$width(), t1.get$height()), intLastDrawSize)) {
    $.indexSet(this._cacheCanvas.get$attributes(), 'width', this.get$width());
    $.indexSet(this._cacheCanvas.get$attributes(), 'height', this.get$height());
    this._drawInternal$1(this._cacheCanvas.get$context2d());
  }
  ctx.save$0();
  $.CanvasUtil_transform(ctx, this.getTransform$0());
  ctx.drawImage$3(this._cacheCanvas, 0, 0);
  ctx.restore$0();
},
 _drawNormal$1: function(ctx) {
  var tx = this.getTransform$0();
  if (this._isClipped$2(tx, ctx) === true)
    return;
  ctx.save$0();
  $.CanvasUtil_transform(ctx, tx);
  if (this.clip) {
    ctx.beginPath$0();
    ctx.rect$4(0, 0, this.get$width(), this.get$height());
    ctx.clip$0();
  }
  this._drawInternal$1(ctx);
  ctx.restore$0();
},
 _drawInternal$1: function(ctx) {
  var t1 = this._alpha;
  if (!(t1 == null))
    ctx.set$globalAlpha(t1);
  this.drawOverride$1(ctx);
  this._lastDrawSize = this.get$size();
},
 _isClipped$2: function(tx, ctx) {
  if (this.clip)
    ;
  return false;
},
 _invalidateParent$0: function() {
  this._invalidatedEventHandle.fireEvent$1($.CTC10);
  this._lib1_parent.childInvalidated$1(this);
}
};

$$.Shape = {"": ["_fillStyle", "shapeType", "_transforms", "cacheEnabled", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_lib1_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "PElement",
 get$fillStyle: function() {
  return this._fillStyle;
},
 set$fillStyle: function(value) {
  this._fillStyle = value;
  this.invalidateDraw$0();
},
 drawOverride$1: function(ctx) {
  ctx.set$fillStyle(this._fillStyle);
  switch (this.shapeType) {
    case $.CTC4:
      ctx.fillRect$4(0, 0, this.get$size().get$width(), this.get$size().get$height());
      break;
    case $.CTC6:
      $.CanvasUtil_ellipse(ctx, 0, 0, this.get$width(), this.get$height());
      ctx.fill$0();
      break;
    default:
      throw $.$$throw('shape not known...');
  }
},
 toString$0: function() {
  return 'Shape [' + $.S(this._fillStyle) + ', ' + $.S(this.shapeType.get$name()) + ']';
}
};

$$.ShapeType = {"": ["name?"],
 "super": "Object"
};

$$.Stage = {"": ["_invalidatedEventHandle", "_canvas?", "_lib1_element?", "_ctx", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "AttachableObject",
 get$rootElement: function() {
  return this._lib1_element;
},
 draw$0: function() {
  var t1, t2, t3;
  this.validateNotDisposed$0();
  t1 = this._ctx;
  t2 = t1 == null;
  t3 = this._canvas;
  if (t2)
    this._ctx = t3.get$context2d();
  else
    t1.clearRect$4(0, 0, t3.get$width(), t3.get$height());
  return this._lib1_element._stageDraw$1(this._ctx);
},
 childInvalidated$1: function(child) {
  this.validateNotDisposed$0();
  this._invalidatedEventHandle.fireEvent$1($.CTC10);
},
 Stage$2: function(_canvas, _element) {
  this._lib1_element.registerParent$1(this);
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": ["copies_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, length$, i, t2;
  t1 = this.values_2;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout(1, value, t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_3, null);
  return length$;
},
 call$1$bailout: function(state0, value, t1) {
  var length$, i, t2;
  length$ = $.get$length(t1);
  for (i = 0; $.ltB(i, length$); ++i) {
    t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.add$1(t1, value);
  $.add$1(this.copies_3, null);
  return length$;
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_4, i);
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_5, i, x);
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": [],
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": ["readSlot_8", "writeSlot_7", "findSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1, slot, t2, length$, copy, t3, i, element, elementCopy, j, t4;
  t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.UnimplementedError$('structured clone of Date'));
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
  if (typeof e === 'object' && e !== null && e.is$File())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    return e;
  if (typeof e === 'object' && e !== null && e.is$_FileList())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    slot = this.findSlot_6.call$1(e);
    t1.copy_1 = this.readSlot_8.call$1(slot);
    t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_7.call$2(slot, t1.copy_1);
    e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    length$ = e.length;
    slot = this.findSlot_6.call$1(e);
    t2 = this.readSlot_8;
    copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_7.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    t3 = this.writeSlot_7;
    if (t1) {
      t3.call$2(slot, true);
      for (i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        element = e[i];
        elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy = t2.call$1(slot);
          if (true === copy) {
            copy = new Array(length$);
            t3.call$2(slot, copy);
          }
          if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(2, e, t3, elementCopy, length$, copy, slot, i);
          for (t1 = e.length, t2 = copy.length, j = 0; j < i; ++j) {
            if (j >= t1)
              throw $.ioore(j);
            t4 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy[j] = t4;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy[i] = elementCopy;
          ++i;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(3, e, length$, copy, i);
    for (; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.UnimplementedError$('structured clone of other type'));
},
 call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      i = env6;
      slot = env5;
      copy = env4;
      length$ = env3;
      elementCopy = env2;
      t3 = env1;
      e = env0;
      break;
    case 3:
      i = env3;
      copy = env2;
      length$ = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.UnimplementedError$('structured clone of Date'));
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
      if (typeof e === 'object' && e !== null && e.is$File())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        return e;
      if (typeof e === 'object' && e !== null && e.is$_FileList())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        slot = this.findSlot_6.call$1(e);
        t1.copy_1 = this.readSlot_8.call$1(slot);
        t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_7.call$2(slot, t1.copy_1);
        e.forEach$1(new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
        return t1.copy_1;
      }
    default:
      var t1, slot, t2, e, length$, copy, t3, i, element, elementCopy, j;
      if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            length$ = $.get$length(e);
            slot = this.findSlot_6.call$1(e);
            t2 = this.readSlot_8;
            copy = t2.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_7.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            t3 = this.writeSlot_7;
          case 2:
            if (state0 === 2 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t3.call$2(slot, true);
                  i = 0;
                case 2:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          element = $.index(e, i);
                          elementCopy = this.call$1(element);
                        case 2:
                          if (state0 === 2 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy = t2.call$1(slot);
                                if (true === copy) {
                                  copy = new Array(length$);
                                  t3.call$2(slot, copy);
                                }
                              case 2:
                                state0 = 0;
                                for (j = 0; j < i; ++j)
                                  $.indexSet(copy, j, $.index(e, j));
                                $.indexSet(copy, i, elementCopy);
                                ++i;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t3.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t3.call$2(slot, copy);
              i = 0;
            }
          case 3:
            state0 = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.UnimplementedError$('structured clone of other type'));
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": ["box_0", "walk_9"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.Maps__emitMap_anon = {"": ["box_0", "result_3", "visiting_2"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1, t2;
  t1 = this.box_0;
  if (t1.first_1 !== true)
    $.add$1(this.result_3, ', ');
  t1.first_1 = false;
  t1 = this.result_3;
  t2 = this.visiting_2;
  $.Collections__emitObject(k, t1, t2);
  $.add$1(t1, ': ');
  $.Collections__emitObject(v, t1, t2);
}
};

$$.DoubleLinkedQueue_length_anon = {"": ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.add(t1.counter_1, 1);
}
};

$$._LinkedHashMapImpl_forEach_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$.NoSuchMethodError_toString_anon = {"": ["box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.box_0;
  if ($.gtB(t1.i_2, 0))
    $.add$1(t1.sb_1, ', ');
  $.add$1(t1.sb_1, key);
  $.add$1(t1.sb_1, ': ');
  $.add$1(t1.sb_1, $.NoSuchMethodError_safeToString(value));
  t1.i_2 = $.add(t1.i_2, 1);
}
};

$$.ClickDemo_ClickDemo_anon = {"": ["blue_0"],
 "super": "Closure",
 call$1: function(args) {
  var t1 = this.blue_0;
  t1.set$fillStyle($.eqB(t1.get$fillStyle(), 'blue') ? 'lightblue' : 'blue');
}
};

$$.ClickDemo_ClickDemo_anon0 = {"": [],
 "super": "Closure",
 call$1: function(args) {
  return $.print(['up', args]);
}
};

$$.ClickDemo_ClickDemo_anon1 = {"": [],
 "super": "Closure",
 call$1: function(args) {
  return $.print(['down', args]);
}
};

$$.ClickManager_ClickManager_anon = {"": [],
 "super": "Closure",
 call$1: function(s) {
  return $.ClickManager$_internal(s);
}
};

$$.ClickManager__mouseDown_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.get$ClickManager__isClickableProperty().get$1(e);
}
};

$$.Mouse_markMouseOver_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  $.get$Mouse_isMouseOverProperty().clear$1(e);
  $.get$Mouse_isMouseDirectlyOverProperty().clear$1(e);
}
};

$$.Mouse_markMouseOver_anon0 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  $.get$Mouse_isMouseOverProperty().set$2(e, true);
}
};

$$.AffineTransform_toString_anon = {"": [],
 "super": "Closure",
 call$1: function(n) {
  return $.toString(n);
}
};

$$.Enumerable_firstOrDefault_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return true;
}
};

$$.Enumerable_map_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(s) {
  return $._SelectIterator$(s, this.f_0);
}
};

$$.Enumerable_isEmpty_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return true;
}
};

$$.invokeClosure_anon = {"": ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"": ["arg1_2", "closure_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_1.call$1(this.arg1_2);
}
};

$$.invokeClosure_anon1 = {"": ["arg1_5", "arg2_4", "closure_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_3.call$2(this.arg1_5, this.arg2_4);
}
};

$$.ClickManager__mouseUp_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.get$ClickManager__isClickableProperty().get$1(e);
}
};

$$.ClickManager__mouseMove_anon = {"": ["args_0"],
 "super": "Closure",
 call$1: function(e) {
  return $.get$ClickManager__mouseMoveEvent().fireEvent$2(e, this.args_0);
}
};

$$.ParentElement_drawOverride_anon = {"": ["ctx_0"],
 "super": "Closure",
 call$1: function(e) {
  return e.drawCore$1(this.ctx_0);
}
};

$$.ConstantMap_forEach_anon = {"": ["this_1", "f_0"],
 "super": "Closure",
 call$1: function(key) {
  return this.f_0.call$2(key, $.index(this.this_1, key));
}
};

$$.ParentElement_update_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return e.update$0();
}
};

$$.EventHandle_fireEvent_anon = {"": ["args_0"],
 "super": "Closure",
 call$2: function(id, handler) {
  handler.call$1(this.args_0);
}
};

$$.AttachableObject__addHandler_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.EventHandle$();
}
};

$$.startRootIsolate_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $._timerFactory;
  return;
}
};

$$._BaseSendPort_call_anon = {"": ["completer_1", "port_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  var t1, t2;
  this.port_0.close$0();
  t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  t2 = this.completer_1;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._WorkerSendPort_send_anon = {"": ["replyTo_2", "message_1", "this_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, workerMessage, t3;
  t1 = this.this_0;
  t2 = this.replyTo_2;
  t1._checkReplyTo$1(t2);
  workerMessage = $._serializeMessage($.makeLiteralMap(['command', 'message', 'port', t1, 'msg', this.message_1, 'replyTo', t2]));
  t2 = $._globalState().get$isWorker() === true;
  t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else
    $.index(t3().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._waitForPendingPorts_anon = {"": ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$.Futures_wait_anon = {"": ["box_0", "values_5", "pos_4", "result_3", "completer_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, t2, remaining;
  t1 = this.values_5;
  $.indexSet(t1, this.pos_4, value);
  t2 = this.box_0;
  remaining = $.sub(t2.remaining_1, 1);
  t2.remaining_1 = remaining;
  if ($.eqB(remaining, 0) && this.result_3.get$isComplete() !== true)
    this.completer_2.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"": ["future_8", "result_7", "completer_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (this.result_7.get$isComplete() !== true)
    this.completer_6.completeException$2(exception, this.future_8.get$stackTrace());
  return true;
}
};

$$._PendingSendPortFinder_visitMap_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$.Storage_values_anon = {"": ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return $.add$1(this.values_0, v);
}
};

$$._LinkedHashMapImpl_values_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_1;
  t2.index_1 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$value());
}
};

$$._HashMapImpl_values_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_1;
  t2.i_1 = $.add(t3, 1);
  $.indexSet(t1, t3, value);
}
};

$$.ConstantMap_values_anon = {"": ["this_1", "result_0"],
 "super": "Closure",
 call$1: function(key) {
  return $.add$1(this.result_0, $.index(this.this_1, key));
}
};

$$._PendingSendPortFinder_visitList_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._NativeJsSendPort_send_anon = {"": ["replyTo_5", "this_4", "message_3"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, t3, isolate, shouldSerialize, msg;
  t1 = {};
  t2 = this.this_4;
  t3 = this.replyTo_5;
  t2._checkReplyTo$1(t3);
  isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_receivePort().get$_callback() == null)
    return;
  shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  msg = this.message_3;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send_anon0(t2, shouldSerialize, t1), 'receive ' + $.S(msg));
}
};

$$._NativeJsSendPort_send_anon0 = {"": ["this_7", "shouldSerialize_6", "box_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = this.this_7;
  if (!(t1.get$_receivePort().get$_callback() == null)) {
    if (this.shouldSerialize_6 === true) {
      t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_receivePort();
    t2 = this.box_0;
    t1._callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$.Storage_keys_anon = {"": ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  return $.add$1(this.keys_0, k);
}
};

$$._LinkedHashMapImpl_keys_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_10;
  t2.index_10 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$key());
}
};

$$._HashMapImpl_keys_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_10;
  t2.i_10 = $.add(t3, 1);
  $.indexSet(t1, t3, key);
}
};

$$._Copier_visitMap_anon = {"": ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1, t2;
  t1 = this.box_0.copy_10;
  t2 = this.this_2;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._EventLoop__runHelper_next = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.anon = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.anon0 = {"": ["callback_1", "this_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_1.call$1(this.this_0);
}
};

$$.BoundClosure = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure0 = {'':
['self', 'target'],
'super': 'Closure',
call$2: function(p0, p1) { return this.self[this.target](p0, p1); }
};
$$.BoundClosure1 = {'':
['self', 'target'],
'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$.Collections_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer('');
  $.Collections__emitCollection(c, result, $._ListImpl_List(null));
  return $.toString(result);
};

$.Collections__emitObject = function(o, result, visiting) {
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? '[...]' : '{...}');
    else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.add$1(result, '{...}');
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.add$1(result, o);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var isList, t1, first, t2;
  $.add$1(visiting, c);
  isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  $.add$1(result, isList ? '[' : '{');
  for (t1 = $.iterator(c), first = true; t1.get$hasNext() === true; first = false) {
    t2 = t1.next$0();
    if (!first)
      $.add$1(result, ', ');
    $.Collections__emitObject(t2, result, visiting);
  }
  $.add$1(result, isList ? ']' : '}');
  $.removeLast(visiting);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.iterator(c); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.Collections_map = function(source, destination, f) {
  var t1;
  for (t1 = $.iterator(source); t1.get$hasNext() === true;)
    destination.push(f.call$1(t1.next$0()));
  return destination;
};

$.ScriptProcessorNodeEvents$ = function(_ptr) {
  return new $.ScriptProcessorNodeEvents(_ptr);
};

$.CanvasElement_CanvasElement = function(height, width) {
  var t1, t2;
  t1 = $ === height;
  if (t1)
    height = null;
  t2 = $ === width;
  if (t2)
    width = null;
  if (t2)
    return $._Elements_createCanvasElement(null, null);
  if (t1)
    return $._Elements_createCanvasElement(width, null);
  return $._Elements_createCanvasElement(width, height);
};

$.FutureUnhandledException$ = function(source, stackTrace) {
  return new $.FutureUnhandledException(source, stackTrace);
};

$.WorkerEvents$ = function(_ptr) {
  return new $.WorkerEvents(_ptr);
};

$.AbstractWorkerEvents$ = function(_ptr) {
  return new $.AbstractWorkerEvents(_ptr);
};

$._Collections_map = function(source, destination, f) {
  var t1;
  for (t1 = $.iterator(source); t1.get$hasNext() === true;)
    destination.push(f.call$1(t1.next$0()));
  return destination;
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator($.get$length(array), array, 0);
};

$.print = function(object) {
  $.Primitives_printString($.toString(object));
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.Strings_join = function(strings, separator) {
  $.checkNull(strings);
  $.checkNull(separator);
  return $.stringJoinUnchecked($.Strings__toJsStringArray(strings), separator);
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string, array;
  if (typeof strings !== 'object' || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $._ListImpl_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      array[i] = string;
    }
  }
  return array;
};

$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.div = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a / b : $.div$slow(a, b);
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.leB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b) === true;
};

$.index = function(a, index) {
  var key;
  if (typeof a == "string" || a.constructor === Array) {
    key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.indexSet = function(a, index, value) {
  var key;
  if (a.constructor === Array && !a.immutable$list) {
    key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else {
      $.checkNull(b);
      throw $.$$throw($.ArgumentError$(b));
    }
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.truncate(a / b);
  return a.operator$tdiv$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.div$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a / b;
  return a.operator$div$1(b);
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.neg = function(a) {
  if (typeof a === "number")
    return -a;
  return a.negate$0();
};

$.index$slow = function(a, index) {
  var t1;
  if (!(typeof a === 'string'))
    t1 = !(a == null) && a.constructor === Array;
  else
    t1 = true;
  if (t1) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.truncate(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.indexSet$slow = function(a, index, value) {
  if (!(a == null) && a.constructor === Array) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    $.checkMutable(a, 'indexed set');
    a[index] = value;
    return;
  }
  a.operator$indexSet$2(index, value);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.toString(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.NullPointerException$(null, $.CTC1));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.substringUnchecked = function(receiver, startIndex, endIndex) {
  return receiver.substring(startIndex, endIndex);
};

$.$$throw = function(ex) {
  var jsError;
  if (ex == null)
    ex = $.CTC0;
  jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  return $.toString(this.dartException);
};

$.checkString = function(value) {
  if (!(typeof value === 'string')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if ($.eqB(type, 'property_not_function') || $.eqB(type, 'called_non_callable') || $.eqB(type, 'non_object_property_call') || $.eqB(type, 'non_object_property_load'))
      return $.NullPointerException$(null, $.CTC1);
    else if ($.eqB(type, 'undefined_method'))
      return $.NoSuchMethodError$('', name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.endsWith(message, 'is null') === true || $.endsWith(message, 'is undefined') === true || $.endsWith(message, 'is null or undefined') === true)
        return $.NullPointerException$(null, $.CTC1);
      else {
        if ($.contains$1(message, ' is not a function') !== true)
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$('', '<unknown>', [], $.makeLiteralMap([]), null);
      }
    return $._ExceptionImplementation$(typeof message === 'string' ? message : '');
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && $.contains$1(message, 'call stack') === true)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === 'too much recursion')
      return $.StackOverflowError$();
  return ex;
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result;
  iterator = $.iterator(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (; iterator.get$hasNext() === true;)
    $.indexSet(result, iterator.next$0(), iterator.next$0());
  return result;
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(arg1, closure));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(arg1, arg2, closure));
  else
    throw $.$$throw($._ExceptionImplementation$('Unsupported number of arguments for wrapped closure'));
};

$.listInsertRange = function(receiver, start, length$, initialValue) {
  var receiverLength, t1, t2, t3, i;
  if (typeof receiver !== 'object' || receiver === null || (receiver.constructor !== Array || !!receiver.immutable$list) && !receiver.is$JavaScriptIndexingBehavior())
    return $.listInsertRange$bailout(1, receiver, start, length$, initialValue);
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  receiverLength = receiver.length;
  if (start < 0 || start > receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = receiverLength + length$;
  $.set$length(receiver, t1);
  t2 = start + length$;
  $.Arrays_copy(receiver, start, receiver, t2, receiverLength - start);
  if (!(initialValue == null))
    for (t3 = receiver.length, i = start; i < t2; ++i) {
      if (i < 0 || i >= t3)
        throw $.ioore(i);
      receiver[i] = initialValue;
    }
  $.set$length(receiver, t1);
};

$.LocalWindowEvents$ = function(_ptr) {
  return new $.LocalWindowEvents(_ptr);
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$('Cyclic initialization for static ' + $.S(staticName)));
};

$.FrameSetElementEvents$ = function(_ptr) {
  return new $.FrameSetElementEvents(_ptr);
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'AudioChannelMerger')
    return 'ChannelMergerNode';
  if (name$ === 'AudioChannelSplitter')
    return 'ChannelSplitterNode';
  if (name$ === 'AudioGainNode')
    return 'GainNode';
  if (name$ === 'AudioPannerNode')
    return 'PannerNode';
  if (name$ === 'JavaScriptAudioNode')
    return 'ScriptProcessorNode';
  if (name$ === 'Oscillator')
    return 'OscillatorNode';
  if (name$ === 'RealtimeAnalyserNode')
    return 'AnalyserNode';
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return 'Null';
  constructor$ = object.constructor;
  if (typeof(constructor$) === 'function') {
    name$ = constructor$.name;
    if (typeof name$ === 'string')
      t1 = !(name$ === '') && !(name$ === 'Object') && !(name$ === 'Function.prototype');
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'AudioChannelMerger')
    return 'ChannelMergerNode';
  if (name$ === 'AudioChannelSplitter')
    return 'ChannelSplitterNode';
  if (name$ === 'AudioGainNode')
    return 'GainNode';
  if (name$ === 'AudioPannerNode')
    return 'PannerNode';
  if (name$ === 'JavaScriptAudioNode')
    return 'ScriptProcessorNode';
  if (name$ === 'Oscillator')
    return 'OscillatorNode';
  if (name$ === 'RealtimeAnalyserNode')
    return 'AnalyserNode';
  return name$;
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === 'object'))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf('Chrome') !== -1 || userAgent.indexOf('DumpRenderTree') !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf('Firefox') !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf('MSIE') !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf('Opera') !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf('AppleWebKit') !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document') {
    if (!!obj.xmlVersion)
      return 'Document';
    return 'HTMLDocument';
  }
  if (name$ === 'ApplicationCache')
    return 'DOMApplicationCache';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'HTMLDDElement')
    return 'HTMLElement';
  if (name$ === 'HTMLDTElement')
    return 'HTMLElement';
  if (name$ === 'HTMLTableDataCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLTableHeaderCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLPhraseElement')
    return 'HTMLElement';
  if (name$ === 'MSStyleCSSProperties')
    return 'CSSStyleDeclaration';
  if (name$ === 'MouseWheelEvent')
    return 'WheelEvent';
  return name$;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return 'Instance of ' + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property,
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CTC12)[name$];
  if (!(dartMethod == null))
    methods['Object'] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  return !$.eqB($.indexOf$2(receiver, other, startIndex), -1);
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, i;
  if (from === '')
    if (receiver === '')
      return to;
    else {
      result = $.StringBuffer_StringBuffer('');
      length$ = receiver.length;
      $.add$1(result, to);
      for (i = 0; i < length$; ++i) {
        $.add$1(result, receiver[i]);
        $.add$1(result, to);
      }
      return $.toString(result);
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.CTC3, true), "\\$&"), false, false), true), to);
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$.regExpMakeNative = function(regExp, global, exception) {
  var pattern, multiLine, ignoreCase, sb, t1, e;
  pattern = regExp.get$pattern();
  multiLine = regExp.get$multiLine();
  ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer('');
  if (multiLine === true)
    $.add$1(sb, 'm');
  if (ignoreCase === true)
    $.add$1(sb, 'i');
  if (global === true)
    $.add$1(sb, 'g');
  try {
    t1 = new RegExp(pattern, $.toString(sb));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.add$1 = function(receiver, value) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'add');
    receiver.push(value);
    return;
  }
  return receiver.add$1(value);
};

$.removeLast = function(receiver) {
  if ($.isJsArray(receiver)) {
    $.checkGrowable(receiver, 'removeLast');
    if ($.eqB($.get$length(receiver), 0))
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  }
  return receiver.removeLast$0();
};

$.get$length = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length;
  else
    return receiver.get$length();
};

$.set$length = function(receiver, newLength) {
  if ($.isJsArray(receiver)) {
    $.checkNull(newLength);
    if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, 'set length');
    receiver.length = newLength;
  } else
    receiver.set$length(newLength);
  return newLength;
};

$.toString = function(value) {
  if (typeof value == "object" && value != null)
    if ($.isJsArray(value))
      return $.Collections_collectionToString(value);
    else
      return value.toString$0();
  if (value === 0 && (1 / value) < 0)
    return '-0.0';
  if (value == null)
    return 'null';
  if (typeof value == "function")
    return 'Closure';
  return String(value);
};

$.iterator = function(receiver) {
  if ($.isJsArray(receiver))
    return $.ListIterator$(receiver);
  return receiver.iterator$0();
};

$.charCodeAt = function(receiver, index) {
  if (typeof receiver === 'string') {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  } else
    return receiver.charCodeAt$1(index);
};

$.get$isEmpty = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length === 0;
  return receiver.get$isEmpty();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.clear = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.clear$0();
  $.set$length(receiver, 0);
};

$.forEach = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.forEach$1(f);
  else
    return $.Collections_forEach(receiver, f);
};

$.map = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.map$1(f);
  else
    return $.Collections_map(receiver, [], f);
};

$.addLast = function(receiver, value) {
  if (!$.isJsArray(receiver))
    return receiver.addLast$1(value);
  $.checkGrowable(receiver, 'addLast');
  receiver.push(value);
};

$.indexOf$2 = function(receiver, element, start) {
  if ($.isJsArray(receiver))
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  else {
    $.checkNull(element);
    if (start < 0)
      return -1;
    return receiver.indexOf(element, start);
  }
  return receiver.indexOf$2(element, start);
};

$.get$last = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.get$last();
  return receiver.operator$index$1($.sub($.get$length(receiver), 1));
};

$.insertRange$3 = function(receiver, start, length$, initialValue) {
  if (!$.isJsArray(receiver))
    return receiver.insertRange$3(start, length$, initialValue);
  return $.listInsertRange(receiver, start, length$, initialValue);
};

$.get$isNaN = function(receiver) {
  if (typeof receiver === 'number')
    return isNaN(receiver);
  else
    return receiver.get$isNaN();
};

$.ceil = function(receiver) {
  return Math.ceil(receiver);
};

$.floor = function(receiver) {
  return Math.floor(receiver);
};

$.get$isInfinite = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.get$isInfinite();
  return receiver == Infinity || receiver == -Infinity;
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === 'undefined') {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$._WhereIterator$ = function(_source, _func) {
  return new $._WhereIterator(_source, _func, null, null);
};

$.truncate = function(receiver) {
  return receiver < 0 ? $.ceil(receiver) : $.floor(receiver);
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document')
    return 'HTMLDocument';
  if (name$ === 'XMLDocument')
    return 'Document';
  if (name$ === 'WorkerMessageEvent')
    return 'MessageEvent';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'MouseScrollEvent')
    return 'WheelEvent';
  if (name$ === 'OfflineResourceList')
    return 'DOMApplicationCache';
  return name$;
};

$.contains$1 = function(receiver, other) {
  return $.contains$2(receiver, other, 0);
  return receiver.contains$1(other);
};

$.contains$2 = function(receiver, other, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.contains$2(other, startIndex);
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
};

$.endsWith = function(receiver, other) {
  var receiverLength, otherLength;
  $.checkString(other);
  receiverLength = receiver.length;
  otherLength = other.length;
  if (otherLength > receiverLength)
    return false;
  return other === $.substring$1(receiver, receiverLength - otherLength);
};

$.replaceAll = function(receiver, from, to) {
  if (!(typeof receiver === 'string'))
    return receiver.replaceAll$2(from, to);
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.substring$1 = function(receiver, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.substring$1(startIndex);
  return $.substring$2(receiver, startIndex, null);
};

$.substring$2 = function(receiver, startIndex, endIndex) {
  var length$;
  $.checkNum(startIndex);
  length$ = receiver.length;
  if (endIndex == null)
    endIndex = length$;
  $.checkNum(endIndex);
  if (startIndex < 0)
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(endIndex, length$))
    throw $.$$throw($.RangeError$value(endIndex));
  return $.substringUnchecked(receiver, startIndex, endIndex);
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(0, list);
};

$.get$hashCode = function(receiver) {
  var length$, i, hash, hash0, hash1;
  if (receiver == null)
    return 0;
  if (typeof receiver === 'number')
    return receiver & 536870911;
  if (typeof receiver === 'boolean')
    return receiver ? 1077375012 : 3247177846;
  if ($.isJsArray(receiver))
    return $.Primitives_objectHashCode(receiver);
  if (!(typeof receiver === 'string'))
    return receiver.get$hashCode();
  length$ = receiver.length;
  for (i = 0, hash = 0; i < length$; ++i, hash = hash1) {
    hash0 = 536870911 & hash + receiver.charCodeAt(i);
    hash1 = 536870911 & hash0 + (524287 & hash0) << 10;
    hash1 = hash1 ^ (hash1 >> 6);
  }
  hash0 = 536870911 & hash + (67108863 & hash) << 3;
  hash0 = hash0 ^ (hash0 >> 11);
  return 536870911 & hash0 + (16383 & hash0) << 15;
};

$._SimpleEnumerable$ = function(_source) {
  return new $._SimpleEnumerable(_source);
};

$._DoubleLinkedQueueIterator$ = function(_sentinel) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.Mouse_markMouseOver = function(stage, coordinate) {
  var t1, items, hits;
  $.requireArgumentNotNull(stage, 'stage');
  t1 = !(coordinate == null);
  $.requireArgument(coordinate == null || coordinate.get$isValid() === true, 'coordinate', null);
  items = $.get$Mouse__stageMouseCacheProperty().get$1(stage);
  if (!(items == null)) {
    $.forEach(items, new $.Mouse_markMouseOver_anon());
    $.get$Mouse__stageMouseCacheProperty().clear$1(stage);
  }
  if (t1) {
    hits = $.RetainedUtil__hitTest(stage.get$rootElement(), coordinate);
    $.get$Mouse__stageMouseCacheProperty().set$2(stage, hits);
    $.forEach(hits, new $.Mouse_markMouseOver_anon0());
    if (hits.length > 0) {
      t1 = $.get$Mouse_isMouseDirectlyOverProperty();
      if (0 >= hits.length)
        throw $.ioore(0);
      t1.set$2(hits[0], true);
    }
    return hits;
  }
  return;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split('|');
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.toInt = function(receiver) {
  var truncated;
  if (!(typeof receiver === 'number'))
    return receiver.toInt$0();
  if ($.get$isNaN(receiver) === true)
    throw $.$$throw($.FormatException$('NaN'));
  if ($.get$isInfinite(receiver) === true)
    throw $.$$throw($.FormatException$('Infinity'));
  truncated = $.truncate(receiver);
  return truncated == -0.0 ? 0 : truncated;
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.RetainedUtil__hitTest = function(element, point) {
  var bounds, hits, length$, t1, i;
  point = $.RetainedUtil_transformPointGlobalToLocal(element, point);
  bounds = $.Box$(0, 0, element.get$width(), element.get$height());
  hits = $._ListImpl_List(null);
  if (bounds.contains$1(point) === true) {
    if (typeof element === 'object' && element !== null && !!element.is$ParentElement) {
      length$ = element.get$visualChildCount();
      if (typeof length$ !== 'number')
        return $.RetainedUtil__hitTest$bailout(1, element, point, hits, length$);
      for (t1 = length$ - 1, i = 0; i < length$; ++i) {
        hits = $.RetainedUtil__hitTest(element.getVisualChild$1(t1 - i), point);
        if (hits.length > 0)
          break;
      }
      element = element;
    }
    hits.push(element);
  }
  return hits;
};

$.RetainedUtil_transformPointGlobalToLocal = function(element, point) {
  return element.getTransform$0().createInverse$0().transformCoordinate$1(point);
};

$.NullArgumentException$ = function(arg) {
  return new $.NullArgumentException(arg, 'Null argument: ' + $.S(arg));
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  return name$;
};

$.main = function() {
  $.ClickDemo_ClickDemo($.document().query$1('#content')).requestFrame$0();
};

$.FileWriterEvents$ = function(_ptr) {
  return new $.FileWriterEvents(_ptr);
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.Box$ = function(left, top$, width, height) {
  return new $.Box(left, top$, width, height);
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, method, i, entry, proto;
  tag = $.getTypeNameOf(obj);
  method = methods[tag];
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if (entry.get$_lib4_set()[tag]) {
        method = methods[entry.get$_tag()];
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = methods['Object'];
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!proto.hasOwnProperty(name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.CanvasUtil_transform = function(ctx, tx) {
  $.requireArgumentNotNull(ctx, 'ctx');
  $.requireArgumentNotNull(tx, 'tx');
  ctx.transform$6(tx.get$scaleX(), tx.get$shearY(), tx.get$shearX(), tx.get$scaleY(), tx.get$translateX(), tx.get$translateY());
};

$.WebSocketEvents$ = function(_ptr) {
  return new $.WebSocketEvents(_ptr);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = '-moz-';
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = '-ms-';
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = '-o-';
    else
      $._cachedBrowserPrefix = '-webkit-';
  return $._cachedBrowserPrefix;
};

$.CanvasUtil_ellipse = function(ctx, x, y, width, height) {
  var hB, vB, eX, eY, mX, mY, t1, t2, t3;
  hB = $.mul($.div(width, 2), 0.5522847498307935);
  vB = $.mul($.div(height, 2), 0.5522847498307935);
  if (typeof width !== 'number')
    throw $.iae(width);
  eX = x + width;
  if (typeof height !== 'number')
    throw $.iae(height);
  eY = y + height;
  mX = x + width / 2;
  mY = y + height / 2;
  ctx.beginPath$0();
  ctx.moveTo$2(x, mY);
  if (typeof vB !== 'number')
    throw $.iae(vB);
  t1 = mY - vB;
  if (typeof hB !== 'number')
    throw $.iae(hB);
  t2 = mX - hB;
  ctx.bezierCurveTo$6(x, t1, t2, y, mX, y);
  t3 = mX + hB;
  ctx.bezierCurveTo$6(t3, y, eX, t1, eX, mY);
  t1 = mY + vB;
  ctx.bezierCurveTo$6(eX, t1, t3, eY, mX, eY);
  ctx.bezierCurveTo$6(t2, eY, x, t1, x, mY);
  ctx.closePath$0();
};

$.FileReaderEvents$ = function(_ptr) {
  return new $.FileReaderEvents(_ptr);
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isOpera = function() {
  return $.contains$2($._Device_userAgent(), 'Opera', 0);
};

$._Device_isIE = function() {
  return $._Device_isOpera() !== true && $.contains$2($._Device_userAgent(), 'MSIE', 0) === true;
};

$._Device_isFirefox = function() {
  return $.contains$2($._Device_userAgent(), 'Firefox', 0);
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.SVGElementInstanceEvents$ = function(_ptr) {
  return new $.SVGElementInstanceEvents(_ptr);
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.RTCPeerConnectionEvents$ = function(_ptr) {
  return new $.RTCPeerConnectionEvents(_ptr);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$._Elements_createCanvasElement = function(width, height) {
  var _e = $.document().$dom_createElement$1('canvas');
  if (!(width == null))
    _e.set$width(width);
  if (!(height == null))
    _e.set$height(height);
  return _e;
};

$.TextTrackListEvents$ = function(_ptr) {
  return new $.TextTrackListEvents(_ptr);
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return (currentProbe + numberOfProbes & length$ - 1) >>> 0;
};

$.Util_getHashCode = function(source) {
  var t1, hash, t2, next, hash0, hash1;
  for (t1 = $.iterator(source), hash = 0; t1.get$hasNext() === true; hash = hash1) {
    t2 = t1.next$0();
    next = t2 == null ? 0 : $.get$hashCode(t2);
    if (typeof next !== 'number')
      throw $.iae(next);
    hash0 = 536870911 & hash + next;
    hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
    hash1 = (hash1 ^ $.shr(hash1, 6)) >>> 0;
  }
  hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash0 = (hash0 ^ $.shr(hash0, 11)) >>> 0;
  return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
};

$.EventSourceEvents$ = function(_ptr) {
  return new $.EventSourceEvents(_ptr);
};

$.RTCDataChannelEvents$ = function(_ptr) {
  return new $.RTCDataChannelEvents(_ptr);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$._ElementAttributeMap$ = function(_element) {
  return new $._ElementAttributeMap(_element);
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.TextTrackCueEvents$ = function(_ptr) {
  return new $.TextTrackCueEvents(_ptr);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== 'string' && (typeof src !== 'object' || src === null || src.constructor !== Array && !src.is$JavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== 'object' || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var t1, i;
  t1 = a.length;
  if (startIndex >= t1)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= t1)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.TextTrackEvents$ = function(_ptr) {
  return new $.TextTrackEvents(_ptr);
};

$.Future_Future$immediate = function(value) {
  return $._FutureImpl__FutureImpl$immediate(value);
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.NoSuchMethodError_safeToString = function(object) {
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.toString(object);
  if (typeof object === 'string')
    return '"' + $.S($.replaceAll($.replaceAll($.replaceAll($.replaceAll(object, '\\', '\\\\'), '\n', '\\n'), '\r', '\\r'), '"', '\\"')) + '"';
  return $.Primitives_objectToString(object);
};

$.PeerConnection00Events$ = function(_ptr) {
  return new $.PeerConnection00Events(_ptr);
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t2, t3, t1).call$1(value);
  t4.call$0();
  return copy;
};

$._convertNativeToDart_EventTarget = function(e) {
  if ("setInterval" in e)
    return $._DOMWindowCrossFrame__createSafe(e);
  else
    return e;
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$._FuncEnumerable$ = function(_source, _func) {
  return new $._FuncEnumerable(_source, _func);
};

$.ClickDemo_ClickDemo = function(canvas) {
  var pCanvas, blue, green, red, rootPanel, stage;
  pCanvas = $.PCanvas$(200, 200, false);
  pCanvas.background = 'yellow';
  blue = $.Shape$(100, 100, 'blue', $.CTC4);
  $.ClickManager_setClickable(blue, true);
  $.ClickManager_addHandler(blue, new $.ClickDemo_ClickDemo_anon(blue));
  pCanvas.addElement$1(blue);
  green = $.Shape$(70, 70, 'green', $.CTC4);
  pCanvas.addElement$1(green);
  pCanvas.setTopLeft$2(green, $.CTC5);
  red = $.Shape$(40, 40, 'red', $.CTC6);
  pCanvas.addElement$1(red);
  pCanvas.setCenter$2(red, $.CTC7);
  $.ClickManager_setClickable(red, true);
  $.ClickManager_addMouseUpHandler(red, new $.ClickDemo_ClickDemo_anon0());
  $.ClickManager_addMouseDownHandler(red, new $.ClickDemo_ClickDemo_anon1());
  pCanvas.addTransform$0().translate$2($.div($.sub(canvas.get$width(), pCanvas.get$width()), 2), $.div($.sub(canvas.get$height(), pCanvas.get$height()), 2));
  rootPanel = $.PCanvas$(500, 500, false);
  rootPanel.addElement$1(pCanvas);
  stage = $.Stage$(canvas, rootPanel);
  return $.ClickDemo$_internal(canvas, stage, $.ClickManager_ClickManager(stage));
};

$.ClickDemo$_internal = function(_canvas, _stage, _clickMan) {
  return new $.ClickDemo(_canvas, _stage, _clickMan);
};

$._SelectIterator$ = function(_source, _func) {
  return new $._SelectIterator(_source, _func);
};

$.LinkedHashMap_LinkedHashMap = function() {
  return $._LinkedHashMapImpl$();
};

$.Stage$ = function(_canvas, _element) {
  var t1 = new $.Stage($.EventHandle$(), _canvas, _element, null, $.HashMap_HashMap(), $.HashMap_HashMap(), false);
  t1.Stage$2(_canvas, _element);
  return t1;
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $globals = rootContext.isolateStatics;
  $static_init();
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.IllegalArgumentException$ = function(argument) {
  return new $.IllegalArgumentException(argument);
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.DetailedIllegalArgumentException$ = function(arg, message) {
  return new $.DetailedIllegalArgumentException(arg, message);
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$.BatteryManagerEvents$ = function(_ptr) {
  return new $.BatteryManagerEvents(_ptr);
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$.ClickManager$_internal = function(_stage) {
  var t1 = new $.ClickManager(_stage, null);
  t1.ClickManager$_internal$1(_stage);
  return t1;
};

$.ClickManager_ClickManager = function(stage) {
  $.requireArgumentNotNull(stage, 'stage');
  return $.get$ClickManager__clickManagerProperty().get$2(stage, new $.ClickManager_ClickManager_anon());
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  return new $.DedicatedWorkerContextEvents(_ptr);
};

$.ClickManager_addHandler = function(element, handler) {
  return $.get$ClickManager__clickEvent().addHandler$2(element, handler);
};

$.ClickManager_addMouseUpHandler = function(obj, handler) {
  return $.get$ClickManager__mouseUpEvent().addHandler$2(obj, handler);
};

$.ClickManager_addMouseDownHandler = function(obj, handler) {
  return $.get$ClickManager__mouseDownEvent().addHandler$2(obj, handler);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.ClickManager_setClickable = function(element, value) {
  if (value)
    $.get$ClickManager__isClickableProperty().set$2(element, true);
  else
    $.get$ClickManager__isClickableProperty().clear$1(element);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$._timerFactory = function(millis, callback, repeating) {
  return repeating === true ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.PCanvas$ = function(w, h, enableCache) {
  return new $.PCanvas($._ListImpl_List(null), null, $._ListImpl_List(null), enableCache, $.EventHandle$(), null, w, h, null, null, false, null, $.HashMap_HashMap(), $.HashMap_HashMap(), false);
};

$.IDBVersionChangeRequestEvents$ = function(_ptr) {
  return new $.IDBVersionChangeRequestEvents(_ptr);
};

$.IDBRequestEvents$ = function(_ptr) {
  return new $.IDBRequestEvents(_ptr);
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.AudioContextEvents$ = function(_ptr) {
  return new $.AudioContextEvents(_ptr);
};

$.IDBTransactionEvents$ = function(_ptr) {
  return new $.IDBTransactionEvents(_ptr);
};

$.Coordinate$ = function(x, y) {
  return new $.Coordinate(x, y);
};

$.Coordinate_difference = function(a, b) {
  return $.Vector$($.sub(a.x, b.x), $.sub(a.y, b.y));
};

$.Property$ = function(name$, defaultValue) {
  return new $.Property(defaultValue, name$);
};

$.AffineTransform$ = function(scaleX, shearY, shearX, scaleY, translateX, translateY) {
  return new $.AffineTransform(scaleX, shearY, shearX, scaleY, translateX, translateY);
};

$.IDBOpenDBRequestEvents$ = function(_ptr) {
  return new $.IDBOpenDBRequestEvents(_ptr);
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$.NotificationEvents$ = function(_ptr) {
  return new $.NotificationEvents(_ptr);
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue());
};

$.EventHandle$ = function() {
  return new $.EventHandle(null, false);
};

$.Size$ = function(width, height) {
  return new $.Size(width, height);
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  return new $.SpeechRecognitionEvents(_ptr);
};

$._Timer$ = function(milliSeconds, callback) {
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$._Timer$repeating = function(milliSeconds, callback) {
  var t1 = new $._Timer(false, null);
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$.GlobalId$_internal = function(value) {
  return new $.GlobalId(value, $.Util_getHashCode([value]));
};

$.$$ = function(source) {
  if (typeof source === 'object' && source !== null && !!source.is$Enumerable)
    return source;
  else
    return $.Enumerable_Enumerable$fromIterable(source);
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$.GlobalId_GlobalId = function() {
  var t1 = $.GlobalId__globalId;
  $.GlobalId__globalId = $.add(t1, 1);
  return $.GlobalId$_internal(t1);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.Shape$ = function(w, h, fillStyle, shapeType) {
  return new $.Shape(fillStyle, shapeType, $._ListImpl_List(null), true, $.EventHandle$(), null, w, h, null, null, false, null, $.HashMap_HashMap(), $.HashMap_HashMap(), false);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$.isValidNumber = function(value) {
  return !(value == null) && $.get$isInfinite(value) !== true && $.get$isNaN(value) !== true;
};

$.DOMApplicationCacheEvents$ = function(_ptr) {
  return new $.DOMApplicationCacheEvents(_ptr);
};

$.requireArgument = function(truth, arg, message) {
  if (truth !== true)
    if (!(message == null))
      throw $.$$throw($.DetailedIllegalArgumentException$(arg, message));
    else
      throw $.$$throw($.IllegalArgumentException$(arg));
};

$.requireArgumentNotNull = function(argument, argName) {
  if (argument == null)
    throw $.$$throw($.NullArgumentException$(argName));
};

$.ElementMouseEventArgs_ElementMouseEventArgs = function(element, mouseEvent) {
  return $.ElementMouseEventArgs$_internal(element, mouseEvent.get$shiftKey());
};

$.ElementMouseEventArgs$_internal = function(element, shiftKey) {
  return new $.ElementMouseEventArgs(element, shiftKey);
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$.Vector$ = function(x, y) {
  return new $.Vector(x, y);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.getMouseEventCoordinate = function(event$) {
  return $.Coordinate$(event$.get$offsetX(), event$.get$offsetY());
};

$.AttachedEvent$ = function(name$) {
  return new $.AttachedEvent(name$);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$.IDBDatabaseEvents$ = function(_ptr) {
  return new $.IDBDatabaseEvents(_ptr);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._ListImpl_List = function(length$) {
  return $.Primitives_newList(length$);
};

$._ListImpl_List$from = function(other) {
  var result, t1;
  result = $._ListImpl_List(null);
  for (t1 = $.iterator(other); t1.get$hasNext() === true;)
    result.push(t1.next$0());
  return result;
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  return new $.SharedWorkerContextEvents(_ptr);
};

$.Map_Map = function() {
  return $._HashMapImpl$();
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.Enumerable_Enumerable$fromIterable = function(source) {
  $.requireArgumentNotNull(source, 'source');
  return $._SimpleEnumerable$(source);
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  return new $.HttpRequestUploadEvents(_ptr);
};

$.MessagePortEvents$ = function(_ptr) {
  return new $.MessagePortEvents(_ptr);
};

$.WorkerContextEvents$ = function(_ptr) {
  return new $.WorkerContextEvents(_ptr);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $._ReceivePortImpl(t1, null);
  t1._ReceivePortImpl$0();
  return t1;
};

$.Futures_wait = function(futures) {
  var t1, completer, result, values, i, future;
  t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior()))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC1);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_1 = futures.length;
  values = $._ListImpl_List(futures.length);
  for (i = 0; i < futures.length; ++i) {
    future = futures[i];
    future.then$1(new $.Futures_wait_anon(t1, values, i, result, completer));
    future.handleException$1(new $.Futures_wait_anon0(future, result, completer));
  }
  return result;
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if ('\nThis program is using an experimental feature called "mirrors".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n' === string)
    $.Primitives_mirrorsEnabled = true;
  else if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, 'Object')) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.charCodeAt(name$, 0) === 36 ? $.substring$1(name$, 1) : name$;
};

$.Primitives_objectToString = function(object) {
  return 'Instance of \'' + $.S($.Primitives_objectTypeName(object)) + '\'';
};

$.Primitives_newList = function(length$) {
  var result;
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.HttpRequestEvents$ = function(_ptr) {
  return new $.HttpRequestEvents(_ptr);
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$());
};

$.MediaStreamTrackListEvents$ = function(_ptr) {
  return new $.MediaStreamTrackListEvents(_ptr);
};

$.RangeError$value = function(value) {
  return new $.RangeError('value ' + $.S(value));
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  return new $.MediaStreamTrackEvents(_ptr);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(false, null, null, null, false, [], [], []);
};

$._FutureImpl__FutureImpl$immediate = function(value) {
  var res = $._FutureImpl$();
  res._setValue$1(value);
  return res;
};

$.NullPointerException$ = function(functionName, arguments$) {
  return new $.NullPointerException(functionName, arguments$);
};

$.MediaStreamEvents$ = function(_ptr) {
  return new $.MediaStreamEvents(_ptr);
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer('');
  $.Maps__emitMap(m, result, $._ListImpl_List(null));
  return $.toString(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.add$1(visiting, m);
  $.add$1(result, '{');
  t1.first_1 = true;
  $.forEach(m, new $.Maps__emitMap_anon(t1, result, visiting));
  $.add$1(result, '}');
  $.removeLast(visiting);
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$.Futures_wait$bailout = function(state0, futures, t1) {
  var completer, result, values, i, future;
  if ($.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC1);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_1 = $.get$length(futures);
  values = $._ListImpl_List($.get$length(futures));
  for (i = 0; $.ltB(i, $.get$length(futures)); ++i) {
    future = $.index(futures, i);
    future.then$1(new $.Futures_wait_anon(t1, values, i, result, completer));
    future.handleException$1(new $.Futures_wait_anon0(future, result, completer));
  }
  return result;
};

$.RetainedUtil__hitTest$bailout = function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      length$ = env3;
      hits = env2;
      point = env1;
      element = env0;
      break;
  }
  switch (state0) {
    case 0:
      point = $.RetainedUtil_transformPointGlobalToLocal(element, point);
      bounds = $.Box$(0, 0, element.get$width(), element.get$height());
      hits = $._ListImpl_List(null);
    case 1:
      var point, bounds, hits, length$, element, i;
      if (state0 === 1 || state0 === 0 && bounds.contains$1(point) === true)
        switch (state0) {
          case 0:
          case 1:
            if (state0 === 1 || state0 === 0 && typeof element === 'object' && element !== null && !!element.is$ParentElement)
              switch (state0) {
                case 0:
                  length$ = element.get$visualChildCount();
                case 1:
                  state0 = 0;
                  for (i = 0; $.ltB(i, length$); ++i) {
                    hits = $.RetainedUtil__hitTest(element.getVisualChild$1($.sub($.sub(length$, 1), i)), point);
                    if (hits.length > 0)
                      break;
                  }
                  element = element;
              }
            hits.push(element);
        }
      return hits;
  }
};

$.listInsertRange$bailout = function(state0, receiver, start, length$, initialValue) {
  var receiverLength, t1, t2, i;
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  receiverLength = receiver.length;
  if (start < 0 || start > receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = receiverLength + length$;
  $.set$length(receiver, t1);
  t2 = start + length$;
  $.Arrays_copy(receiver, start, receiver, t2, receiverLength - start);
  if (!(initialValue == null))
    for (i = start; i < t2; ++i)
      $.indexSet(receiver, i, initialValue);
  $.set$length(receiver, t1);
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j)
      $.indexSet(dst, j, $.index(src, i));
  else
    for (j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j)
      $.indexSet(dst, j, $.index(src, i));
};

$.Strings__toJsStringArray$bailout = function(state0, strings) {
  var length$, i, string, array;
  $.checkNull(strings);
  length$ = $.get$length(strings);
  if ($.isJsArray(strings)) {
    for (i = 0; $.ltB(i, length$); ++i) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $._ListImpl_List(length$);
    for (i = 0; $.ltB(i, length$); ++i) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      if (i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
Isolate.$finishClasses($$);
$$ = {};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC1 = Isolate.makeConstantList([]);
$.CTC0 = new Isolate.$isolateProperties.NullPointerException(null, Isolate.$isolateProperties.CTC1);
$.CTC7 = new Isolate.$isolateProperties.Coordinate(50, 150);
$.CTC8 = new Isolate.$isolateProperties._UndefinedValue();
$.CTC5 = new Isolate.$isolateProperties.Coordinate(110, 15);
$.CTC13 = new Isolate.$isolateProperties.Coordinate(0, 0);
$.CTC11 = new Isolate.$isolateProperties.ConstantMap(0, {}, Isolate.$isolateProperties.CTC1);
$.CTC9 = new Isolate.$isolateProperties._ExceptionImplementation('Incorrect number or type of arguments');
$.CTC3 = new Isolate.$isolateProperties.JSSyntaxRegExp('[-[\\]{}()*+?.,\\\\^$|#\\s]', false, false);
$.CTC6 = new Isolate.$isolateProperties.ShapeType('Ellipse');
$.CTC = new Isolate.$isolateProperties.JSSyntaxRegExp('^#[_a-zA-Z]\\w*$', false, false);
$.CTC2 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC4 = new Isolate.$isolateProperties.ShapeType('Rect');
$.CTC10 = new Isolate.$isolateProperties.EventArgs();
$.CTC12 = new Isolate.$isolateProperties.Object();
$.GlobalId__globalId = 0;
$._cachedBrowserPrefix = null;
$.ShapeType_rect = Isolate.$isolateProperties.CTC4;
$.ShapeType_ellipse = Isolate.$isolateProperties.CTC6;
$.ClickDemo__blueColor = 'blue';
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CTC2;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$._ReceivePortImpl__nextFreeId = 1;
$._getTypeNameOf = null;
$.Property_Undefined = Isolate.$isolateProperties.CTC8;
$.MIRROR_OPT_IN_MESSAGE = '\nThis program is using an experimental feature called "mirrors".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n';
$.Primitives_hashCodeSeed = 0;
$.Primitives_mirrorsEnabled = false;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$._TimerFactory__factory = null;
Isolate.$lazy($, '_stageMouseCacheProperty', 'Mouse__stageMouseCacheProperty', 'get$Mouse__stageMouseCacheProperty', function() {
  return $.Property$('_stageMouseCacheProperty', null);
});
Isolate.$lazy($, '_mouseMoveEvent', 'ClickManager__mouseMoveEvent', 'get$ClickManager__mouseMoveEvent', function() {
  return $.AttachedEvent$('mouseMove');
});
Isolate.$lazy($, '_mouseOutEvent', 'ClickManager__mouseOutEvent', 'get$ClickManager__mouseOutEvent', function() {
  return $.AttachedEvent$('mouseOut');
});
Isolate.$lazy($, '_clickManagerProperty', 'ClickManager__clickManagerProperty', 'get$ClickManager__clickManagerProperty', function() {
  return $.Property$('_clickManager', null);
});
Isolate.$lazy($, '_containerTransformProperty', 'Panel__containerTransformProperty', 'get$Panel__containerTransformProperty', function() {
  return $.Property$('panelTransform', null);
});
Isolate.$lazy($, '_isClickableProperty', 'ClickManager__isClickableProperty', 'get$ClickManager__isClickableProperty', function() {
  return $.Property$('isClickable', false);
});
Isolate.$lazy($, '_clickEvent', 'ClickManager__clickEvent', 'get$ClickManager__clickEvent', function() {
  return $.AttachedEvent$('clickEvent');
});
Isolate.$lazy($, 'isMouseOverProperty', 'Mouse_isMouseOverProperty', 'get$Mouse_isMouseOverProperty', function() {
  return $.Property$('IsMouseOver', false);
});
Isolate.$lazy($, '_mouseDownEvent', 'ClickManager__mouseDownEvent', 'get$ClickManager__mouseDownEvent', function() {
  return $.AttachedEvent$('mouseDown');
});
Isolate.$lazy($, 'isMouseDirectlyOverProperty', 'Mouse_isMouseDirectlyOverProperty', 'get$Mouse_isMouseDirectlyOverProperty', function() {
  return $.Property$('IsMouseDirectlyOver', false);
});
Isolate.$lazy($, '_mouseUpEvent', 'ClickManager__mouseUpEvent', 'get$ClickManager__mouseUpEvent', function() {
  return $.AttachedEvent$('mouseUp');
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''] || [];
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method !== '') {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$_FileList: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$IDBKeyRange: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$Blob: function() { return false; },
 is$File: function() { return false; },
 is$Element: function() { return false; },
 is$Map: function() { return false; },
 is$ImageData: function() { return false; },
 get$hashCode: function() { return $.hashCodeForNativeObject(this); },
 is$Collection: function() { return false; },
 is$List: function() { return false; }
});

$.$defineNativeClass('HTMLElement', {"": []
});

$.$defineNativeClass('AbstractWorker', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.AbstractWorkerEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('AnalyserNode', {"": []
});

$.$defineNativeClass('HTMLAnchorElement', {"": ["name?"],
 toString$0: function() {
  return this.toString();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('WebKitAnimation', {"": ["name?"]
});

$.$defineNativeClass('WebKitAnimationEvent', {"": []
});

$.$defineNativeClass('HTMLAppletElement', {"": ["height=", "name?", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ArrayBuffer', {"": [],
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {"": [],
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {"": ["name?", "value="]
});

$.$defineNativeClass('AudioBuffer', {"": ["length?"]
});

$.$defineNativeClass('AudioBufferSourceNode', {"": []
});

$.$defineNativeClass('AudioContext', {"": [],
 get$on: function() {
  return $.AudioContextEvents$(this);
}
});

$.$defineNativeClass('AudioDestinationNode', {"": []
});

$.$defineNativeClass('HTMLAudioElement', {"": []
});

$.$defineNativeClass('AudioGain', {"": []
});

$.$defineNativeClass('AudioListener', {"": []
});

$.$defineNativeClass('AudioNode', {"": []
});

$.$defineNativeClass('AudioParam', {"": ["name?", "value="]
});

$.$defineNativeClass('AudioProcessingEvent', {"": []
});

$.$defineNativeClass('AudioSourceNode', {"": []
});

$.$defineNativeClass('HTMLBRElement', {"": [],
 clear$0: function() { return this.clear.call$0(); },
 clear$1: function(arg0) { return this.clear.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('BarInfo', {"": []
});

$.$defineNativeClass('HTMLBaseElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLBaseFontElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('BatteryManager', {"": [],
 get$on: function() {
  return $.BatteryManagerEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('BeforeLoadEvent', {"": []
});

$.$defineNativeClass('BiquadFilterNode', {"": []
});

$.$defineNativeClass('Blob', {"": [],
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {"": [],
 get$on: function() {
  return $.BodyElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', {"": ["name?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('CDATASection', {"": []
});

$.$defineNativeClass('CSSCharsetRule', {"": []
});

$.$defineNativeClass('CSSFontFaceRule', {"": []
});

$.$defineNativeClass('CSSImportRule', {"": []
});

$.$defineNativeClass('WebKitCSSKeyframeRule', {"": []
});

$.$defineNativeClass('WebKitCSSKeyframesRule', {"": ["name?"]
});

$.$defineNativeClass('WebKitCSSMatrix', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSMediaRule', {"": []
});

$.$defineNativeClass('CSSPageRule', {"": []
});

$.$defineNativeClass('CSSPrimitiveValue', {"": []
});

$.$defineNativeClass('CSSRule', {"": []
});

$.$defineNativeClass('CSSStyleDeclaration', {"": ["length?"],
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : '';
},
 setProperty$3: function(propertyName, value, priority) {
  this.setProperty(propertyName, value, priority);
  if (!!this.setAttribute)
    this.setAttribute(propertyName, value);
},
 get$clear: function() {
  return this.getPropertyValue$1('clear');
},
 clear$0: function() { return this.get$clear().call$0(); },
 clear$1: function(arg0) { return this.get$clear().call$1(arg0); },
 get$clip: function() {
  return this.getPropertyValue$1('clip');
},
 clip$0: function() { return this.get$clip().call$0(); },
 get$height: function() {
  return this.getPropertyValue$1('height');
},
 set$height: function(value) {
  this.setProperty$3('height', value, '');
},
 get$left: function() {
  return this.getPropertyValue$1('left');
},
 get$top: function() {
  return this.getPropertyValue$1('top');
},
 get$transform: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'transform');
},
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.get$transform().call$6(arg0, arg1, arg2, arg3, arg4, arg5); },
 get$width: function() {
  return this.getPropertyValue$1('width');
},
 set$width: function(value) {
  this.setProperty$3('width', value, '');
}
});

$.$defineNativeClass('CSSStyleRule', {"": []
});

$.$defineNativeClass('CSSStyleSheet', {"": []
});

$.$defineNativeClass('WebKitCSSTransformValue', {"": []
});

$.$defineNativeClass('CSSUnknownRule', {"": []
});

$.$defineNativeClass('CSSValue', {"": []
});

$.$defineNativeClass('HTMLCanvasElement', {"": ["height=", "width="],
 getContext$1: function(contextId) {
  return this.getContext(contextId);
},
 get$context2d: function() {
  return this.getContext$1('2d');
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('CanvasGradient', {"": []
});

$.$defineNativeClass('CanvasPattern', {"": []
});

$.$defineNativeClass('CanvasRenderingContext', {"": []
});

$.$defineNativeClass('CanvasRenderingContext2D', {"": ["fillStyle=", "globalAlpha!"],
 beginPath$0: function() {
  return this.beginPath();
},
 bezierCurveTo$6: function(cp1x, cp1y, cp2x, cp2y, x, y) {
  return this.bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y);
},
 clearRect$4: function(x, y, width, height) {
  return this.clearRect(x,y,width,height);
},
 clip$0: function() {
  return this.clip();
},
 closePath$0: function() {
  return this.closePath();
},
 drawImage$9: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh, dx, dy, dw, dh) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh,dx,dy,dw,dh);
},
 drawImage$3: function(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y);
},
 fill$0: function() {
  return this.fill();
},
 fillRect$4: function(x, y, width, height) {
  return this.fillRect(x,y,width,height);
},
 moveTo$2: function(x, y) {
  return this.moveTo(x,y);
},
 rect$4: function(x, y, width, height) {
  return this.rect(x,y,width,height);
},
 restore$0: function() {
  return this.restore();
},
 save$0: function() {
  return this.save();
},
 transform$6: function(m11, m12, m21, m22, dx, dy) {
  return this.transform(m11,m12,m21,m22,dx,dy);
},
 translate$2: function(tx, ty) {
  return this.translate(tx,ty);
}
});

$.$defineNativeClass('ChannelMergerNode', {"": []
});

$.$defineNativeClass('ChannelSplitterNode', {"": []
});

$.$defineNativeClass('CharacterData', {"": ["length?"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ClientRect', {"": ["height?", "left?", "top?", "width?"]
});

$.$defineNativeClass('Clipboard', {"": []
});

$.$defineNativeClass('CloseEvent', {"": []
});

$.$defineNativeClass('Comment', {"": []
});

$.$defineNativeClass('CompositionEvent', {"": []
});

Console = (typeof console == 'undefined' ? {} : console);
$.$defineNativeClass('HTMLContentElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ConvolverNode', {"": []
});

$.$defineNativeClass('Coordinates', {"": []
});

$.$defineNativeClass('Counter', {"": []
});

$.$defineNativeClass('Crypto', {"": []
});

$.$defineNativeClass('CustomEvent', {"": []
});

$.$defineNativeClass('HTMLDListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DOMApplicationCache', {"": [],
 get$on: function() {
  return $.DOMApplicationCacheEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 update$0: function() {
  return this.update();
}
});

$.$defineNativeClass('DOMError', {"": ["name?"]
});

$.$defineNativeClass('DOMException', {"": ["name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMFileSystem', {"": ["name?"]
});

$.$defineNativeClass('DOMFileSystemSync', {"": ["name?"]
});

$.$defineNativeClass('DOMImplementation', {"": []
});

$.$defineNativeClass('MimeType', {"": []
});

$.$defineNativeClass('MimeTypeArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMParser', {"": []
});

$.$defineNativeClass('Plugin', {"": ["length?", "name?"]
});

$.$defineNativeClass('PluginArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Selection', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {"": ["value="]
});

$.$defineNativeClass('DOMTokenList', {"": ["length?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('HTMLDataListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DataTransferItem', {"": []
});

$.$defineNativeClass('DataTransferItemList', {"": ["length?"],
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DataView', {"": []
});

$.$defineNativeClass('Database', {"": []
});

$.$defineNativeClass('DatabaseSync', {"": []
});

$.$defineNativeClass('DedicatedWorkerContext', {"": [],
 get$on: function() {
  return $.DedicatedWorkerContextEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('DelayNode', {"": []
});

$.$defineNativeClass('HTMLDetailsElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DeviceMotionEvent', {"": []
});

$.$defineNativeClass('DeviceOrientationEvent', {"": []
});

$.$defineNativeClass('HTMLDirectoryElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DirectoryEntry', {"": []
});

$.$defineNativeClass('DirectoryEntrySync', {"": []
});

$.$defineNativeClass('DirectoryReader', {"": []
});

$.$defineNativeClass('DirectoryReaderSync', {"": []
});

$.$defineNativeClass('HTMLDivElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', {"": [],
 get$on: function() {
  return $.DocumentEvents$(this);
},
 $dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 $dom_getElementById$1: function(elementId) {
  return this.getElementById(elementId);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 query$1: function(selectors) {
  if ($.CTC.hasMatch$1(selectors) === true)
    return this.$dom_getElementById$1($.substring$1(selectors, 1));
  return this.$dom_querySelector$1(selectors);
}
});

$.$defineNativeClass('DocumentFragment', {"": [],
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$translate: function() {
  return false;
},
 translate$2: function(arg0, arg1) { return this.get$translate().call$2(arg0, arg1); },
 get$id: function() {
  return '';
},
 get$parent: function() {
  return;
},
 get$attributes: function() {
  return $.CTC11;
},
 get$on: function() {
  return $.ElementEvents$(this);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
}
});

$.$defineNativeClass('DocumentType', {"": ["name?"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('DynamicsCompressorNode', {"": []
});

$.$defineNativeClass('EXTTextureFilterAnisotropic', {"": []
});

$.$defineNativeClass('Element', {"": ["id?"],
 get$attributes: function() {
  return $._ElementAttributeMap$(this);
},
 query$1: function(selectors) {
  return this.$dom_querySelector$1(selectors);
},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.ElementEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 translate$2: function(arg0, arg1) { return this.translate.call$2(arg0, arg1); },
 $dom_getAttribute$1: function(name) {
  return this.getAttribute(name);
},
 getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 $dom_hasAttribute$1: function(name) {
  return this.hasAttribute(name);
},
 $dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $dom_removeAttribute$1: function(name) {
  return this.removeAttribute(name);
},
 $dom_setAttribute$2: function(name, value) {
  return this.setAttribute(name,value);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', {"": ["height=", "name?", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('EntityReference', {"": []
});

$.$defineNativeClass('Entry', {"": ["name?"],
 moveTo$4: function(parent, name, successCallback, errorCallback) {
  return this.moveTo(parent,name,$.convertDartClosureToJS(successCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
},
 moveTo$2: function(parent$,name$) {
  return this.moveTo(parent$,name$);
},
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
}
});

$.$defineNativeClass('EntrySync', {"": ["name?"],
 moveTo$2: function(parent, name) {
  return this.moveTo(parent,name);
},
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ErrorEvent', {"": []
});

$.$defineNativeClass('Event', {"": [],
 get$target: function() {
  return $._convertNativeToDart_EventTarget(this.get$_target());
},
 get$_target: function() {
  return this.target;
}
});

$.$defineNativeClass('EventException', {"": ["name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('EventSource', {"": [],
 get$on: function() {
  return $.EventSourceEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.Events$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('HTMLFieldSetElement', {"": ["name?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('File', {"": ["name?"],
 is$File: function() { return true; }
});

$.$defineNativeClass('FileEntry', {"": []
});

$.$defineNativeClass('FileEntrySync', {"": []
});

$.$defineNativeClass('FileError', {"": []
});

$.$defineNativeClass('FileException', {"": ["name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('FileReader', {"": [],
 get$on: function() {
  return $.FileReaderEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileReaderSync', {"": []
});

$.$defineNativeClass('FileWriter', {"": ["length?"],
 get$on: function() {
  return $.FileWriterEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', {"": ["length?"]
});

$.$defineNativeClass('Float32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Float64Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('FormData', {"": []
});

$.$defineNativeClass('HTMLFormElement', {"": ["length?", "name?"],
 reset$0: function() {
  return this.reset();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', {"": ["height?", "name?", "width?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameSetElement', {"": [],
 get$on: function() {
  return $.FrameSetElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('GainNode', {"": []
});

$.$defineNativeClass('Gamepad', {"": ["id?"]
});

$.$defineNativeClass('Geolocation', {"": []
});

$.$defineNativeClass('Geoposition', {"": []
});

$.$defineNativeClass('HTMLHRElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', {"": [],
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = value;
},
 remove$1: function(index) {
  return this.remove(index);
}
});

$.$defineNativeClass('HashChangeEvent', {"": []
});

$.$defineNativeClass('HTMLHeadElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHeadingElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHtmlElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequest', {"": [],
 get$on: function() {
  return $.HttpRequestEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('XMLHttpRequestException', {"": ["name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequestProgressEvent', {"": []
});

$.$defineNativeClass('XMLHttpRequestUpload', {"": [],
 get$on: function() {
  return $.HttpRequestUploadEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBAny', {"": []
});

$.$defineNativeClass('IDBCursor', {"": ["key?"]
});

$.$defineNativeClass('IDBCursorWithValue', {"": ["value?"]
});

$.$defineNativeClass('IDBDatabase', {"": ["name?"],
 get$on: function() {
  return $.IDBDatabaseEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBDatabaseException', {"": ["name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBFactory', {"": []
});

$.$defineNativeClass('IDBIndex', {"": ["name?"],
 get$1: function(key) {
  var t1, t2;
  t1 = $ === key;
  if (t1)
    key = null;
  t1 = !t1;
  if (t1)
    t2 = typeof key === 'object' && key !== null && key.is$IDBKeyRange() || key == null;
  else
    t2 = false;
  if (t2)
    return this._get_1$1(key);
  if (t1)
    return this._get_2$1(key);
  throw $.$$throw($.CTC9);
},
 _get_1$1: function(key) {
  return this.get(key);
},
 _get_2$1: function(key) {
  return this.get(key);
}
});

$.$defineNativeClass('IDBKey', {"": []
});

$.$defineNativeClass('IDBKeyRange', {"": [],
 is$IDBKeyRange: function() { return true; }
});

$.$defineNativeClass('IDBObjectStore', {"": ["name?"],
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_PrepareForStructuredClone(value), key);
  return this._add_2$1($._convertDartToNative_PrepareForStructuredClone(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('IDBOpenDBRequest', {"": [],
 get$on: function() {
  return $.IDBOpenDBRequestEvents$(this);
}
});

$.$defineNativeClass('IDBRequest', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.IDBRequestEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBTransaction', {"": [],
 get$on: function() {
  return $.IDBTransactionEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeRequest', {"": [],
 get$on: function() {
  return $.IDBVersionChangeRequestEvents$(this);
}
});

$.$defineNativeClass('HTMLIFrameElement', {"": ["height=", "name?", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('IceCandidate', {"": []
});

$.$defineNativeClass('ImageData', {"": ["height?", "width?"],
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {"": ["height=", "name?", "width=", "x?", "y?"],
 complete$1: function(arg0) { return this.complete.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', {"": ["height=", "name?", "pattern?", "value=", "width="],
 get$on: function() {
  return $.InputElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('Int16Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int8Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('JavaScriptCallFrame', {"": []
});

$.$defineNativeClass('KeyboardEvent', {"": ["shiftKey?"]
});

$.$defineNativeClass('HTMLKeygenElement', {"": ["name?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLabelElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLegendElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('History', {"": ["length?"]
});

$.$defineNativeClass('Location', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('LocalMediaStream', {"": []
});

$.$defineNativeClass('DOMWindow', {"": ["name?", "navigator?"],
 requestAnimationFrame$1: function(callback) {
  this._ensureRequestAnimationFrame$0();
  return this._requestAnimationFrame$1(callback);
},
 _requestAnimationFrame$1: function(callback) {
  return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
},
 _ensureRequestAnimationFrame$0: function() {
  if (!!(this.requestAnimationFrame && this.cancelAnimationFrame))
    return;
    (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(this);
},
 get$on: function() {
  return $.LocalWindowEvents$(this);
},
 get$top: function() {
  return $._convertNativeToDart_Window(this.get$_top());
},
 get$_top: function() {
  return this.top;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 moveTo$2: function(x, y) {
  return this.moveTo(x,y);
},
 _postMessage_1$2: function(message, targetOrigin) {
  return this.postMessage(message,targetOrigin);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('HTMLMapElement', {"": ["name?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLMarqueeElement', {"": ["height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaController', {"": [],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMediaElement', {"": [],
 get$on: function() {
  return $.MediaElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaElementAudioSourceNode', {"": []
});

$.$defineNativeClass('MediaError', {"": []
});

$.$defineNativeClass('MediaKeyError', {"": []
});

$.$defineNativeClass('MediaKeyEvent', {"": []
});

$.$defineNativeClass('MediaList', {"": ["length?"]
});

$.$defineNativeClass('MediaQueryList', {"": []
});

$.$defineNativeClass('MediaSource', {"": [],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStream', {"": [],
 get$on: function() {
  return $.MediaStreamEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamAudioSourceNode', {"": []
});

$.$defineNativeClass('MediaStreamEvent', {"": []
});

$.$defineNativeClass('MediaStreamTrack', {"": [],
 get$on: function() {
  return $.MediaStreamTrackEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackEvent', {"": []
});

$.$defineNativeClass('MediaStreamTrackList', {"": ["length?"],
 get$on: function() {
  return $.MediaStreamTrackListEvents$(this);
},
 add$1: function(track) {
  return this.add(track);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 remove$1: function(track) {
  return this.remove(track);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MemoryInfo', {"": []
});

$.$defineNativeClass('HTMLMenuElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MessageChannel', {"": []
});

$.$defineNativeClass('MessageEvent', {"": ["ports?"]
});

$.$defineNativeClass('MessagePort', {"": [],
 get$on: function() {
  return $.MessagePortEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMetaElement', {"": ["name?"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Metadata', {"": []
});

$.$defineNativeClass('HTMLMeterElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLModElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MouseEvent', {"": ["shiftKey?", "x?", "y?"],
 get$offsetX: function() {
  if (!!this.offsetX)
    return this.offsetX;
  else {
    var target = this.get$target();
    if (!(typeof target === 'object' && target !== null && target.is$Element()))
      throw $.$$throw($.UnsupportedError$('offsetX is only supported on elements'));
    return $.sub(this.clientX, this.get$target().getBoundingClientRect$0().get$left());
  }
},
 get$offsetY: function() {
  if (!!this.offsetY)
    return this.offsetY;
  else {
    var target = this.get$target();
    if (!(typeof target === 'object' && target !== null && target.is$Element()))
      throw $.$$throw($.UnsupportedError$('offsetY is only supported on elements'));
    return $.sub(this.clientY, this.get$target().getBoundingClientRect$0().get$top());
  }
}
});

$.$defineNativeClass('MutationEvent', {"": []
});

$.$defineNativeClass('MutationObserver', {"": []
});

$.$defineNativeClass('MutationRecord', {"": []
});

$.$defineNativeClass('NamedNodeMap', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Navigator', {"": ["userAgent?"]
});

$.$defineNativeClass('NavigatorUserMediaError', {"": []
});

$.$defineNativeClass('Node', {"": [],
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
  {
  if (!(this.get$parent() == null))
    this.get$parent().$dom_removeChild$1(this);
}
  } else {
    return Object.prototype.remove$0.call(this);
  }

},
 get$$$dom_attributes: function() {
  return this.attributes;
},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
  return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
  this.textContent = value;
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_appendChild$1: function(newChild) {
  return this.appendChild(newChild);
},
 $dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild(newChild,oldChild);
}
});

$.$defineNativeClass('NodeFilter', {"": []
});

$.$defineNativeClass('NodeIterator', {"": []
});

$.$defineNativeClass('NodeList', {"": ["length?"],
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  this._parent.$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._parent.$dom_appendChild$1(value);
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    this._parent.$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._parent.set$text('');
},
 operator$indexSet$2: function(index, value) {
  this._parent.$dom_replaceChild$2(value, this.operator$index$1(index));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 operator$index$1: function(index) {
  return this[index];
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Notation', {"": []
});

$.$defineNativeClass('Notification', {"": [],
 get$on: function() {
  return $.NotificationEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('NotificationCenter', {"": []
});

$.$defineNativeClass('OESElementIndexUint', {"": []
});

$.$defineNativeClass('OESStandardDerivatives', {"": []
});

$.$defineNativeClass('OESTextureFloat', {"": []
});

$.$defineNativeClass('OESVertexArrayObject', {"": []
});

$.$defineNativeClass('HTMLOListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLObjectElement', {"": ["height=", "name?", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OfflineAudioCompletionEvent', {"": []
});

$.$defineNativeClass('HTMLOptGroupElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOptionElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OscillatorNode', {"": []
});

$.$defineNativeClass('HTMLOutputElement', {"": ["name?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OverflowEvent', {"": []
});

$.$defineNativeClass('PagePopupController', {"": []
});

$.$defineNativeClass('PageTransitionEvent', {"": []
});

$.$defineNativeClass('PannerNode', {"": []
});

$.$defineNativeClass('HTMLParagraphElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', {"": ["name?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('PeerConnection00', {"": [],
 get$on: function() {
  return $.PeerConnection00Events$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Performance', {"": []
});

$.$defineNativeClass('PerformanceNavigation', {"": []
});

$.$defineNativeClass('PerformanceTiming', {"": []
});

$.$defineNativeClass('WebKitPoint', {"": ["x?", "y?"]
});

$.$defineNativeClass('PopStateEvent', {"": []
});

$.$defineNativeClass('PositionError', {"": []
});

$.$defineNativeClass('HTMLPreElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ProcessingInstruction', {"": []
});

$.$defineNativeClass('HTMLProgressElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ProgressEvent', {"": []
});

$.$defineNativeClass('HTMLQuoteElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('RGBColor', {"": []
});

$.$defineNativeClass('RTCDataChannel', {"": [],
 get$on: function() {
  return $.RTCDataChannelEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCDataChannelEvent', {"": []
});

$.$defineNativeClass('RTCIceCandidate', {"": []
});

$.$defineNativeClass('RTCIceCandidateEvent', {"": []
});

$.$defineNativeClass('RTCPeerConnection', {"": [],
 get$on: function() {
  return $.RTCPeerConnectionEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCSessionDescription', {"": []
});

$.$defineNativeClass('RTCStatsElement', {"": []
});

$.$defineNativeClass('RTCStatsReport', {"": []
});

$.$defineNativeClass('RTCStatsResponse', {"": []
});

$.$defineNativeClass('RadioNodeList', {"": ["value="]
});

$.$defineNativeClass('Range', {"": [],
 getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RangeException', {"": ["name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Rect', {"": ["left?", "top?"]
});

$.$defineNativeClass('SQLError', {"": []
});

$.$defineNativeClass('SQLException', {"": []
});

$.$defineNativeClass('SQLResultSet', {"": []
});

$.$defineNativeClass('SQLResultSetRowList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SQLTransaction', {"": []
});

$.$defineNativeClass('SQLTransactionSync', {"": []
});

$.$defineNativeClass('Screen', {"": ["height?", "width?"]
});

$.$defineNativeClass('HTMLScriptElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ScriptProcessorNode', {"": [],
 get$on: function() {
  return $.ScriptProcessorNodeEvents$(this);
}
});

$.$defineNativeClass('ScriptProfile', {"": []
});

$.$defineNativeClass('ScriptProfileNode', {"": []
});

$.$defineNativeClass('HTMLSelectElement', {"": ["length=", "name?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SessionDescription', {"": []
});

$.$defineNativeClass('HTMLShadowElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ShadowRoot', {"": []
});

$.$defineNativeClass('SharedWorker', {"": []
});

$.$defineNativeClass('SharedWorkerContext', {"": ["name?"],
 get$on: function() {
  return $.SharedWorkerContextEvents$(this);
}
});

$.$defineNativeClass('SourceBuffer', {"": []
});

$.$defineNativeClass('SourceBufferList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLSpanElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SpeechGrammar', {"": []
});

$.$defineNativeClass('SpeechGrammarList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputEvent', {"": []
});

$.$defineNativeClass('SpeechInputResult', {"": []
});

$.$defineNativeClass('SpeechRecognition', {"": [],
 get$on: function() {
  return $.SpeechRecognitionEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('SpeechRecognitionAlternative', {"": []
});

$.$defineNativeClass('SpeechRecognitionError', {"": []
});

$.$defineNativeClass('SpeechRecognitionEvent', {"": []
});

$.$defineNativeClass('SpeechRecognitionResult', {"": ["length?"]
});

$.$defineNativeClass('Storage', {"": [],
 containsKey$1: function(key) {
  return !(this.$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$dom_getItem$1(key);
},
 operator$indexSet$2: function(key, value) {
  return this.$dom_setItem$2(key, value);
},
 putIfAbsent$2: function(key, ifAbsent) {
  if (this.$dom_getItem$1(key) == null)
    this.operator$indexSet$2(key, ifAbsent.call$0());
  return this.operator$index$1(key);
},
 remove$1: function(key) {
  var value = this.operator$index$1(key);
  this.$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$dom_clear$0();
},
 forEach$1: function(f) {
  var i, key;
  for (i = 0; true; ++i) {
    key = this.$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 get$keys: function() {
  var keys = [];
  this.forEach$1(new $.Storage_keys_anon(keys));
  return keys;
},
 get$values: function() {
  var values = [];
  this.forEach$1(new $.Storage_values_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 get$isEmpty: function() {
  return this.$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
  return this.length;
},
 $dom_clear$0: function() {
  return this.clear();
},
 $dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $dom_key$1: function(index) {
  return this.key(index);
},
 $dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {"": ["key?"]
});

$.$defineNativeClass('StorageInfo', {"": []
});

$.$defineNativeClass('HTMLStyleElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('StyleMedia', {"": []
});

$.$defineNativeClass('StyleSheet', {"": []
});

$.$defineNativeClass('HTMLTableCaptionElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableCellElement', {"": ["height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableColElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableRowElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Text', {"": []
});

$.$defineNativeClass('HTMLTextAreaElement', {"": ["name?", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TextEvent', {"": []
});

$.$defineNativeClass('TextMetrics', {"": ["width?"]
});

$.$defineNativeClass('TextTrack', {"": [],
 get$on: function() {
  return $.TextTrackEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCue', {"": ["id?", "text!"],
 get$on: function() {
  return $.TextTrackCueEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('TextTrackList', {"": ["length?"],
 get$on: function() {
  return $.TextTrackListEvents$(this);
},
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {"": ["length?"]
});

$.$defineNativeClass('HTMLTitleElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Touch', {"": [],
 get$_target: function() {
  return this.target;
}
});

$.$defineNativeClass('TouchEvent', {"": ["shiftKey?"]
});

$.$defineNativeClass('TouchList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TrackEvent', {"": []
});

$.$defineNativeClass('WebKitTransitionEvent', {"": []
});

$.$defineNativeClass('TreeWalker', {"": []
});

$.$defineNativeClass('UIEvent', {"": []
});

$.$defineNativeClass('HTMLUListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Uint16Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8ClampedArray', {"": []
});

$.$defineNativeClass('HTMLUnknownElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('URL', {"": []
});

$.$defineNativeClass('ValidityState', {"": []
});

$.$defineNativeClass('HTMLVideoElement', {"": ["height=", "width="]
});

$.$defineNativeClass('WaveShaperNode', {"": []
});

$.$defineNativeClass('WaveTable', {"": []
});

$.$defineNativeClass('WebGLActiveInfo', {"": ["name?"]
});

$.$defineNativeClass('WebGLBuffer', {"": []
});

$.$defineNativeClass('WebGLCompressedTextureS3TC', {"": []
});

$.$defineNativeClass('WebGLContextAttributes', {"": []
});

$.$defineNativeClass('WebGLContextEvent', {"": []
});

$.$defineNativeClass('WebGLDebugRendererInfo', {"": []
});

$.$defineNativeClass('WebGLDebugShaders', {"": []
});

$.$defineNativeClass('WebGLDepthTexture', {"": []
});

$.$defineNativeClass('WebGLFramebuffer', {"": []
});

$.$defineNativeClass('WebGLLoseContext', {"": []
});

$.$defineNativeClass('WebGLProgram', {"": []
});

$.$defineNativeClass('WebGLRenderbuffer', {"": []
});

$.$defineNativeClass('WebGLRenderingContext', {"": [],
 clear$1: function(mask) {
  return this.clear(mask);
}
});

$.$defineNativeClass('WebGLShader', {"": []
});

$.$defineNativeClass('WebGLShaderPrecisionFormat', {"": []
});

$.$defineNativeClass('WebGLTexture', {"": []
});

$.$defineNativeClass('WebGLUniformLocation', {"": []
});

$.$defineNativeClass('WebGLVertexArrayObjectOES', {"": []
});

$.$defineNativeClass('WebKitCSSFilterValue', {"": []
});

$.$defineNativeClass('WebKitNamedFlow', {"": ["name?"],
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {"": [],
 get$on: function() {
  return $.WebSocketEvents$(this);
},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WheelEvent', {"": []
});

$.$defineNativeClass('Worker', {"": [],
 get$on: function() {
  return $.WorkerEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('WorkerContext', {"": ["navigator?"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.WorkerContextEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('WorkerLocation', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WorkerNavigator', {"": ["userAgent?"]
});

$.$defineNativeClass('XMLSerializer', {"": []
});

$.$defineNativeClass('XPathEvaluator', {"": []
});

$.$defineNativeClass('XPathException', {"": ["name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XPathExpression', {"": []
});

$.$defineNativeClass('XPathNSResolver', {"": []
});

$.$defineNativeClass('XPathResult', {"": []
});

$.$defineNativeClass('XSLTProcessor', {"": [],
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('CSSRuleList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSValueList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('ClientRectList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMStringList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArray', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('FileList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$_FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('GamepadList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Worker', {"": [],
 get$id: function() {
  return this.id;
},
 postMessage$1: function(msg) {
  return this.postMessage(msg);
}
});

$.$defineNativeClass('DOMWindow', {"": [],
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('SVGAElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGAltGlyphDefElement', {"": []
});

$.$defineNativeClass('SVGAltGlyphElement', {"": []
});

$.$defineNativeClass('SVGAltGlyphItemElement', {"": []
});

$.$defineNativeClass('SVGAngle', {"": ["value="]
});

$.$defineNativeClass('SVGAnimateColorElement', {"": []
});

$.$defineNativeClass('SVGAnimateElement', {"": []
});

$.$defineNativeClass('SVGAnimateMotionElement', {"": []
});

$.$defineNativeClass('SVGAnimateTransformElement', {"": []
});

$.$defineNativeClass('SVGAnimatedAngle', {"": []
});

$.$defineNativeClass('SVGAnimatedBoolean', {"": []
});

$.$defineNativeClass('SVGAnimatedEnumeration', {"": []
});

$.$defineNativeClass('SVGAnimatedInteger', {"": []
});

$.$defineNativeClass('SVGAnimatedLength', {"": []
});

$.$defineNativeClass('SVGAnimatedLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumber', {"": []
});

$.$defineNativeClass('SVGAnimatedNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGAnimatedRect', {"": []
});

$.$defineNativeClass('SVGAnimatedString', {"": []
});

$.$defineNativeClass('SVGAnimatedTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimationElement', {"": []
});

$.$defineNativeClass('SVGCircleElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGClipPathElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGColor', {"": []
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', {"": []
});

$.$defineNativeClass('SVGCursorElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGDefsElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGDescElement', {"": []
});

$.$defineNativeClass('SVGDocument', {"": ["rootElement?"]
});

$.$defineNativeClass('SVGElement', {"": [],
 get$id: function() {
  return this.id;
}
});

$.$defineNativeClass('SVGElementInstance', {"": [],
 get$on: function() {
  return $.SVGElementInstanceEvents$(this);
}
});

$.$defineNativeClass('SVGEllipseElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGException', {"": ["name?"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGFEBlendElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFEColorMatrixElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFEComponentTransferElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFECompositeElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFEDisplacementMapElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFEDistantLightElement', {"": []
});

$.$defineNativeClass('SVGFEDropShadowElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFEFloodElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFEFuncAElement', {"": []
});

$.$defineNativeClass('SVGFEFuncBElement', {"": []
});

$.$defineNativeClass('SVGFEFuncGElement', {"": []
});

$.$defineNativeClass('SVGFEFuncRElement', {"": []
});

$.$defineNativeClass('SVGFEGaussianBlurElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFEImageElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFEMergeElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFEMergeNodeElement', {"": []
});

$.$defineNativeClass('SVGFEMorphologyElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFEOffsetElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFEPointLightElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFESpecularLightingElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFESpotLightElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGFETileElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFETurbulenceElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFilterElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGFontElement', {"": []
});

$.$defineNativeClass('SVGFontFaceElement', {"": []
});

$.$defineNativeClass('SVGFontFaceFormatElement', {"": []
});

$.$defineNativeClass('SVGFontFaceNameElement', {"": []
});

$.$defineNativeClass('SVGFontFaceSrcElement', {"": []
});

$.$defineNativeClass('SVGFontFaceUriElement', {"": []
});

$.$defineNativeClass('SVGForeignObjectElement', {"": ["height?", "width?", "x?", "y?"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGGElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGGlyphElement', {"": []
});

$.$defineNativeClass('SVGGlyphRefElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGGradientElement', {"": []
});

$.$defineNativeClass('SVGHKernElement', {"": []
});

$.$defineNativeClass('SVGImageElement', {"": ["height?", "width?", "x?", "y?"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGLength', {"": ["value="]
});

$.$defineNativeClass('SVGLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGLineElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGLinearGradientElement', {"": []
});

$.$defineNativeClass('SVGMPathElement', {"": []
});

$.$defineNativeClass('SVGMarkerElement', {"": []
});

$.$defineNativeClass('SVGMaskElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGMatrix', {"": [],
 translate$2: function(x, y) {
  return this.translate(x,y);
}
});

$.$defineNativeClass('SVGMetadataElement', {"": []
});

$.$defineNativeClass('SVGMissingGlyphElement', {"": []
});

$.$defineNativeClass('SVGNumber', {"": ["value="]
});

$.$defineNativeClass('SVGNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPaint', {"": []
});

$.$defineNativeClass('SVGPathElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGPathSeg', {"": []
});

$.$defineNativeClass('SVGPathSegArcAbs', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPathSegArcRel', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPathSegClosePath', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPathSegLinetoAbs', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', {"": ["x?"]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', {"": ["x?"]
});

$.$defineNativeClass('SVGPathSegLinetoRel', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', {"": ["y?"]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', {"": ["y?"]
});

$.$defineNativeClass('SVGPathSegList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPathSegMovetoRel', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPatternElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGPoint', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGPointList', {"": [],
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGPolygonElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGPolylineElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGRadialGradientElement', {"": []
});

$.$defineNativeClass('SVGRect', {"": ["height=", "width=", "x?", "y?"]
});

$.$defineNativeClass('SVGRectElement', {"": ["height?", "width?", "x?", "y?"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGRenderingIntent', {"": []
});

$.$defineNativeClass('SVGSVGElement', {"": ["height?", "width?", "x?", "y?"]
});

$.$defineNativeClass('SVGScriptElement', {"": []
});

$.$defineNativeClass('SVGSetElement', {"": []
});

$.$defineNativeClass('SVGStopElement', {"": []
});

$.$defineNativeClass('SVGStringList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', {"": []
});

$.$defineNativeClass('SVGSwitchElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGSymbolElement', {"": []
});

$.$defineNativeClass('SVGTRefElement', {"": []
});

$.$defineNativeClass('SVGTSpanElement', {"": []
});

$.$defineNativeClass('SVGTextContentElement', {"": []
});

$.$defineNativeClass('SVGTextElement', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGTextPathElement', {"": []
});

$.$defineNativeClass('SVGTextPositioningElement', {"": ["x?", "y?"]
});

$.$defineNativeClass('SVGTitleElement', {"": []
});

$.$defineNativeClass('SVGTransform', {"": []
});

$.$defineNativeClass('SVGTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGUnitTypes', {"": []
});

$.$defineNativeClass('SVGUseElement', {"": ["height?", "width?", "x?", "y?"],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGVKernElement', {"": []
});

$.$defineNativeClass('SVGViewElement', {"": []
});

$.$defineNativeClass('SVGViewSpec', {"": [],
 transform$6: function(arg0, arg1, arg2, arg3, arg4, arg5) { return this.transform.call$6(arg0, arg1, arg2, arg3, arg4, arg5); }
});

$.$defineNativeClass('SVGZoomEvent', {"": []
});

$.$defineNativeClass('SVGElementInstanceList', {"": ["length?"],
 operator$index$1: function(index) {
  return this[index];
},
 operator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

// 527 dynamic classes.
// 527 classes
// 41 !leaf
(function(){
  var v0/*class(Uint8Array)*/ = 'Uint8Array|Uint8ClampedArray|Uint8ClampedArray';
  var v1/*class(AudioSourceNode)*/ = 'AudioSourceNode|OscillatorNode|MediaStreamAudioSourceNode|MediaElementAudioSourceNode|AudioBufferSourceNode|OscillatorNode|MediaStreamAudioSourceNode|MediaElementAudioSourceNode|AudioBufferSourceNode';
  var v2/*class(_CSSValueList)*/ = 'CSSValueList|WebKitCSSFilterValue|WebKitCSSTransformValue|WebKitCSSFilterValue|WebKitCSSTransformValue';
  var v3/*class(SVGColor)*/ = 'SVGColor|SVGPaint|SVGPaint';
  var v4/*class(Text)*/ = 'Text|CDATASection|CDATASection';
  var v5/*class(SVGTextPositioningElement)*/ = 'SVGTextPositioningElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement|SVGTextElement|SVGTSpanElement|SVGTRefElement|SVGAltGlyphElement';
  var v6/*class(SVGTextContentElement)*/ = [v5/*class(SVGTextPositioningElement)*/,v5/*class(SVGTextPositioningElement)*/,'SVGTextContentElement|SVGTextPathElement|SVGTextPathElement'].join('|');
  var v7/*class(SVGGradientElement)*/ = 'SVGGradientElement|SVGRadialGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGLinearGradientElement';
  var v8/*class(SVGComponentTransferFunctionElement)*/ = 'SVGComponentTransferFunctionElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement|SVGFEFuncRElement|SVGFEFuncGElement|SVGFEFuncBElement|SVGFEFuncAElement';
  var v9/*class(SVGAnimationElement)*/ = 'SVGAnimationElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement|SVGSetElement|SVGAnimateTransformElement|SVGAnimateMotionElement|SVGAnimateElement|SVGAnimateColorElement';
  var v10/*class(MediaElement)*/ = 'HTMLMediaElement|HTMLVideoElement|HTMLAudioElement|HTMLVideoElement|HTMLAudioElement';
  var v11/*class(SVGElement)*/ = [v6/*class(SVGTextContentElement)*/,v7/*class(SVGGradientElement)*/,v8/*class(SVGComponentTransferFunctionElement)*/,v9/*class(SVGAnimationElement)*/,v6/*class(SVGTextContentElement)*/,v7/*class(SVGGradientElement)*/,v8/*class(SVGComponentTransferFunctionElement)*/,v9/*class(SVGAnimationElement)*/,'SVGElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement|SVGViewElement|SVGVKernElement|SVGUseElement|SVGTitleElement|SVGSymbolElement|SVGSwitchElement|SVGStyleElement|SVGStopElement|SVGScriptElement|SVGSVGElement|SVGRectElement|SVGPolylineElement|SVGPolygonElement|SVGPatternElement|SVGPathElement|SVGMissingGlyphElement|SVGMetadataElement|SVGMaskElement|SVGMarkerElement|SVGMPathElement|SVGLineElement|SVGImageElement|SVGHKernElement|SVGGlyphRefElement|SVGGlyphElement|SVGGElement|SVGForeignObjectElement|SVGFontFaceUriElement|SVGFontFaceSrcElement|SVGFontFaceNameElement|SVGFontFaceFormatElement|SVGFontFaceElement|SVGFontElement|SVGFilterElement|SVGFETurbulenceElement|SVGFETileElement|SVGFESpotLightElement|SVGFESpecularLightingElement|SVGFEPointLightElement|SVGFEOffsetElement|SVGFEMorphologyElement|SVGFEMergeNodeElement|SVGFEMergeElement|SVGFEImageElement|SVGFEGaussianBlurElement|SVGFEFloodElement|SVGFEDropShadowElement|SVGFEDistantLightElement|SVGFEDisplacementMapElement|SVGFEDiffuseLightingElement|SVGFEConvolveMatrixElement|SVGFECompositeElement|SVGFEComponentTransferElement|SVGFEColorMatrixElement|SVGFEBlendElement|SVGEllipseElement|SVGDescElement|SVGDefsElement|SVGCursorElement|SVGClipPathElement|SVGCircleElement|SVGAltGlyphItemElement|SVGAltGlyphDefElement|SVGAElement'].join('|');
  var v12/*class(MouseEvent)*/ = 'MouseEvent|WheelEvent|WheelEvent';
  var v13/*class(UIEvent)*/ = [v12/*class(MouseEvent)*/,v12/*class(MouseEvent)*/,'UIEvent|TouchEvent|TextEvent|KeyboardEvent|CompositionEvent|SVGZoomEvent|TouchEvent|TextEvent|KeyboardEvent|CompositionEvent|SVGZoomEvent'].join('|');
  var v14/*class(ProgressEvent)*/ = 'ProgressEvent|XMLHttpRequestProgressEvent|XMLHttpRequestProgressEvent';
  var v15/*class(Element)*/ = [v10/*class(MediaElement)*/,v11/*class(SVGElement)*/,v10/*class(MediaElement)*/,v11/*class(SVGElement)*/,'Element|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement|HTMLUnknownElement|HTMLUListElement|HTMLTrackElement|HTMLTitleElement|HTMLTextAreaElement|HTMLTableSectionElement|HTMLTableRowElement|HTMLTableElement|HTMLTableColElement|HTMLTableCellElement|HTMLTableCaptionElement|HTMLStyleElement|HTMLSpanElement|HTMLSourceElement|HTMLShadowElement|HTMLSelectElement|HTMLScriptElement|HTMLQuoteElement|HTMLProgressElement|HTMLPreElement|HTMLParamElement|HTMLParagraphElement|HTMLOutputElement|HTMLOptionElement|HTMLOptGroupElement|HTMLObjectElement|HTMLOListElement|HTMLModElement|HTMLMeterElement|HTMLMetaElement|HTMLMenuElement|HTMLMarqueeElement|HTMLMapElement|HTMLLinkElement|HTMLLegendElement|HTMLLabelElement|HTMLLIElement|HTMLKeygenElement|HTMLInputElement|HTMLImageElement|HTMLIFrameElement|HTMLHtmlElement|HTMLHeadingElement|HTMLHeadElement|HTMLHRElement|HTMLFrameSetElement|HTMLFrameElement|HTMLFormElement|HTMLFontElement|HTMLFieldSetElement|HTMLEmbedElement|HTMLDivElement|HTMLDirectoryElement|HTMLDetailsElement|HTMLDataListElement|HTMLDListElement|HTMLContentElement|HTMLCanvasElement|HTMLButtonElement|HTMLBodyElement|HTMLBaseFontElement|HTMLBaseElement|HTMLBRElement|HTMLAreaElement|HTMLAppletElement|HTMLAnchorElement|HTMLElement'].join('|');
  var v16/*class(DocumentFragment)*/ = 'DocumentFragment|ShadowRoot|ShadowRoot';
  var v17/*class(Document)*/ = 'HTMLDocument|SVGDocument|SVGDocument';
  var v18/*class(CharacterData)*/ = [v4/*class(Text)*/,v4/*class(Text)*/,'CharacterData|Comment|Comment'].join('|');
  var v19/*class(WorkerContext)*/ = 'WorkerContext|SharedWorkerContext|DedicatedWorkerContext|SharedWorkerContext|DedicatedWorkerContext';
  var v20/*class(Node)*/ = [v15/*class(Element)*/,v16/*class(DocumentFragment)*/,v17/*class(Document)*/,v18/*class(CharacterData)*/,v15/*class(Element)*/,v16/*class(DocumentFragment)*/,v17/*class(Document)*/,v18/*class(CharacterData)*/,'Node|ProcessingInstruction|Notation|EntityReference|DocumentType|Attr|ProcessingInstruction|Notation|EntityReference|DocumentType|Attr'].join('|');
  var v21/*class(MediaStream)*/ = 'MediaStream|LocalMediaStream|LocalMediaStream';
  var v22/*class(IDBRequest)*/ = 'IDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest|IDBVersionChangeRequest|IDBOpenDBRequest';
  var v23/*class(AbstractWorker)*/ = 'AbstractWorker|Worker|SharedWorker|Worker|SharedWorker';
  var table = [
    // [dynamic-dispatch-tag, tags of classes implementing dynamic-dispatch-tag]
    ['AbstractWorker', v23/*class(AbstractWorker)*/],
    ['Uint8Array', v0/*class(Uint8Array)*/],
    ['ArrayBufferView', [v0/*class(Uint8Array)*/,v0/*class(Uint8Array)*/,'ArrayBufferView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView|Uint32Array|Uint16Array|Int8Array|Int32Array|Int16Array|Float64Array|Float32Array|DataView'].join('|')],
    ['AudioSourceNode', v1/*class(AudioSourceNode)*/],
    ['AudioNode', [v1/*class(AudioSourceNode)*/,v1/*class(AudioSourceNode)*/,'AudioNode|WaveShaperNode|ScriptProcessorNode|PannerNode|GainNode|DynamicsCompressorNode|DelayNode|ConvolverNode|ChannelSplitterNode|ChannelMergerNode|BiquadFilterNode|AudioDestinationNode|AnalyserNode|WaveShaperNode|ScriptProcessorNode|PannerNode|GainNode|DynamicsCompressorNode|DelayNode|ConvolverNode|ChannelSplitterNode|ChannelMergerNode|BiquadFilterNode|AudioDestinationNode|AnalyserNode'].join('|')],
    ['AudioParam', 'AudioParam|AudioGain|AudioGain'],
    ['Blob', 'Blob|File|File'],
    ['CSSRule', 'CSSRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule|CSSUnknownRule|CSSStyleRule|CSSPageRule|CSSMediaRule|WebKitCSSKeyframesRule|WebKitCSSKeyframeRule|CSSImportRule|CSSFontFaceRule|CSSCharsetRule'],
    ['CSSValueList', v2/*class(_CSSValueList)*/],
    ['SVGColor', v3/*class(SVGColor)*/],
    ['CSSValue', [v2/*class(_CSSValueList)*/,v3/*class(SVGColor)*/,v2/*class(_CSSValueList)*/,v3/*class(SVGColor)*/,'CSSValue|CSSPrimitiveValue|CSSPrimitiveValue'].join('|')],
    ['CanvasRenderingContext', 'CanvasRenderingContext|WebGLRenderingContext|CanvasRenderingContext2D|WebGLRenderingContext|CanvasRenderingContext2D'],
    ['Text', v4/*class(Text)*/],
    ['CharacterData', v18/*class(CharacterData)*/],
    ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList|DOMSettableTokenList'],
    ['HTMLDocument', v17/*class(Document)*/],
    ['DocumentFragment', v16/*class(DocumentFragment)*/],
    ['HTMLMediaElement', v10/*class(MediaElement)*/],
    ['SVGTextPositioningElement', v5/*class(SVGTextPositioningElement)*/],
    ['SVGTextContentElement', v6/*class(SVGTextContentElement)*/],
    ['SVGGradientElement', v7/*class(SVGGradientElement)*/],
    ['SVGComponentTransferFunctionElement', v8/*class(SVGComponentTransferFunctionElement)*/],
    ['SVGAnimationElement', v9/*class(SVGAnimationElement)*/],
    ['SVGElement', v11/*class(SVGElement)*/],
    ['Element', v15/*class(Element)*/],
    ['Entry', 'Entry|FileEntry|DirectoryEntry|FileEntry|DirectoryEntry'],
    ['EntrySync', 'EntrySync|FileEntrySync|DirectoryEntrySync|FileEntrySync|DirectoryEntrySync'],
    ['MouseEvent', v12/*class(MouseEvent)*/],
    ['UIEvent', v13/*class(UIEvent)*/],
    ['ProgressEvent', v14/*class(ProgressEvent)*/],
    ['Event', [v13/*class(UIEvent)*/,v14/*class(ProgressEvent)*/,v13/*class(UIEvent)*/,v14/*class(ProgressEvent)*/,'Event|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|RTCDataChannelEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent|WebGLContextEvent|WebKitTransitionEvent|TrackEvent|StorageEvent|SpeechRecognitionEvent|SpeechRecognitionError|SpeechInputEvent|RTCIceCandidateEvent|RTCDataChannelEvent|PopStateEvent|PageTransitionEvent|OverflowEvent|OfflineAudioCompletionEvent|MutationEvent|MessageEvent|MediaStreamTrackEvent|MediaStreamEvent|MediaKeyEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|HashChangeEvent|ErrorEvent|DeviceOrientationEvent|DeviceMotionEvent|CustomEvent|CloseEvent|BeforeLoadEvent|AudioProcessingEvent|WebKitAnimationEvent'].join('|')],
    ['WorkerContext', v19/*class(WorkerContext)*/],
    ['Node', v20/*class(Node)*/],
    ['MediaStream', v21/*class(MediaStream)*/],
    ['IDBRequest', v22/*class(IDBRequest)*/],
    ['EventTarget', [v19/*class(WorkerContext)*/,v20/*class(Node)*/,v21/*class(MediaStream)*/,v22/*class(IDBRequest)*/,v23/*class(AbstractWorker)*/,v19/*class(WorkerContext)*/,v20/*class(Node)*/,v21/*class(MediaStream)*/,v22/*class(IDBRequest)*/,v23/*class(AbstractWorker)*/,'EventTarget|WebSocket|WebKitNamedFlow|TextTrackList|TextTrackCue|TextTrack|SpeechRecognition|SourceBufferList|RTCPeerConnection|RTCDataChannel|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|DOMWindow|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext|SVGElementInstance|WebSocket|WebKitNamedFlow|TextTrackList|TextTrackCue|TextTrack|SpeechRecognition|SourceBufferList|RTCPeerConnection|RTCDataChannel|Performance|PeerConnection00|Notification|MessagePort|MediaStreamTrackList|MediaStreamTrack|MediaSource|MediaController|DOMWindow|IDBTransaction|IDBDatabase|XMLHttpRequestUpload|XMLHttpRequest|FileWriter|FileReader|EventSource|DOMApplicationCache|BatteryManager|AudioContext|SVGElementInstance'].join('|')],
    ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection|HTMLOptionsCollection'],
    ['IDBCursor', 'IDBCursor|IDBCursorWithValue|IDBCursorWithValue'],
    ['NodeList', 'NodeList|RadioNodeList|RadioNodeList'],
    ['StyleSheet', 'StyleSheet|CSSStyleSheet|CSSStyleSheet'],
    ['SVGPathSeg', 'SVGPathSeg|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs|SVGPathSegMovetoRel|SVGPathSegMovetoAbs|SVGPathSegLinetoVerticalRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoRel|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicAbs|SVGPathSegClosePath|SVGPathSegArcRel|SVGPathSegArcAbs']];
$.dynamicSetMetadata(table);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document != 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner == 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner == 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastChar = field[len - 1];
    var needsGetter = lastChar == '?' || lastChar == '=';
    var needsSetter = lastChar == '!' || lastChar == '=';
    if (needsGetter || needsSetter) field = field.substring(0, len - 1);
    if (needsGetter) {
      var getterString = "return this." + field + ";";
        prototype["get$" + field] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + field] = new Function("v", setterString);
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== "undefined") supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  var getter = new Function("{ return $." + fieldName + ";}");
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=click_demo.dart.js.map