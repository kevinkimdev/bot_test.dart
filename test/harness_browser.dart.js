// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.ListIterator = {"": ["i", "list"],
 "super": "Object",
 get$hasNext: function() {
  return this.i < this.list.length;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var value = this.list[this.i];
  this.i = this.i + 1;
  return value;
}
};

$$.StackTrace = {"": ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : '';
}
};

$$.Closure = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
},
 is$Function: true
};

$$.ConstantMap = {"": ["length>", "_jsObject", "_liblib0$_keys"],
 "super": "Object",
 containsKey$1: function(key) {
  if ($.eqB(key, '__proto__'))
    return false;
  return this._jsObject.hasOwnProperty(key);
},
 operator$index$1: function(key) {
  if (this.containsKey$1(key) !== true)
    return;
  return this._jsObject[key];
},
 forEach$1: function(f) {
  var t1 = this._liblib0$_keys;
  $.getInterceptor(t1).forEach$1(t1, new $.ConstantMap_forEach_anon(f, this));
},
 get$keys: function() {
  return this._liblib0$_keys;
},
 get$values: function() {
  var result, t1;
  result = [];
  t1 = this._liblib0$_keys;
  $.getInterceptor(t1).forEach$1(t1, new $.ConstantMap_values_anon(this, result));
  return result;
},
 get$isEmpty: function() {
  return $.eq(this.length, 0);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _throwUnmodifiable$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot modify unmodifiable Map'));
},
 oprator$indexSet$2: function(key, val) {
  return this._throwUnmodifiable$0();
},
 putIfAbsent$2: function(key, ifAbsent) {
  return this._throwUnmodifiable$0();
},
 remove$1: function(key) {
  return this._throwUnmodifiable$0();
},
 clear$0: function() {
  return this._throwUnmodifiable$0();
},
 is$Map: function() { return true; }
};

$$.MetaInfo = {"": ["_tag>", "_tags", "_liblib0$_set>"],
 "super": "Object",
 _liblib0$_set$2: function(arg0, arg1) { return this._liblib0$_set.call$2(arg0, arg1); }
};

$$.JSSyntaxRegExp = {"": ["_liblib0$_pattern", "_multiLine", "_ignoreCase"],
 "super": "Object",
 firstMatch$1: function(str) {
  var m, matchStart, t1, matchEnd;
  m = $.regExpExec(this, $.checkString(str));
  if (m == null)
    return;
  matchStart = m.index;
  t1 = $.get$length($.index(m, 0));
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  matchEnd = matchStart + t1;
  return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchEnd, m);
},
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 allMatches$1: function(str) {
  $.checkString(str);
  return $._AllMatchesIterable$(this, str);
},
 get$pattern: function() {
  return this._liblib0$_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$JSSyntaxRegExp: true,
 is$RegExp: true
};

$$._MatchImplementation = {"": ["pattern>", "str", "start", "end", "_groups"],
 "super": "Object",
 group$1: function(index) {
  return $.index(this._groups, index);
},
 operator$index$1: function(index) {
  return $.index(this._groups, index);
}
};

$$._AllMatchesIterable = {"": ["_re", "_str"],
 "super": "Object",
 iterator$0: function() {
  return $._AllMatchesIterator$(this._re, this._str);
},
 is$Iterable: function() { return true; }
};

$$._AllMatchesIterator = {"": ["_re", "_str", "_liblib0$_next=", "_done"],
 "super": "Object",
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var next = this._liblib0$_next;
  this._liblib0$_next = null;
  return next;
},
 get$hasNext: function() {
  if (this._done)
    return false;
  else if (!(this._liblib0$_next == null))
    return true;
  this._liblib0$_next = this._re.firstMatch$1(this._str);
  if (this._liblib0$_next == null) {
    this._done = true;
    return false;
  } else
    return true;
}
};

$$.StringMatch = {"": ["start", "str", "pattern>"],
 "super": "Object",
 operator$index$1: function(g) {
  return this.group$1(g);
},
 group$1: function(group_) {
  if (!$.eqB(group_, 0))
    throw $.$$throw($.RangeError$value(group_));
  return this.pattern;
}
};

$$._DateImpl = {"": ["millisecondsSinceEpoch>", "isUtc"],
 "super": "Object",
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Date))
    return false;
  return $.eq(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$lt$1: function(other) {
  return $.lt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$le$1: function(other) {
  return $.le(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$gt$1: function(other) {
  return $.gt(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 operator$ge$1: function(other) {
  return $.ge(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 compareTo$1: function(other) {
  return $.compareTo(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
},
 get$hashCode: function() {
  return this.millisecondsSinceEpoch;
},
 toString$0: function() {
  var t1, t2, t3, y, m, d, h, min, sec, ms;
  t1 = new $._DateImpl_toString_fourDigits();
  t2 = new $._DateImpl_toString_threeDigits();
  t3 = new $._DateImpl_toString_twoDigits();
  y = t1.call$1(this.get$year());
  m = t3.call$1(this.get$month());
  d = t3.call$1(this.get$day());
  h = t3.call$1(this.get$hour());
  min = t3.call$1(this.get$minute());
  sec = t3.call$1(this.get$second());
  ms = t2.call$1(this.get$millisecond());
  if (this.isUtc === true)
    return $.S(y) + '-' + $.S(m) + '-' + $.S(d) + ' ' + $.S(h) + ':' + $.S(min) + ':' + $.S(sec) + '.' + $.S(ms) + 'Z';
  else
    return $.S(y) + '-' + $.S(m) + '-' + $.S(d) + ' ' + $.S(h) + ':' + $.S(min) + ':' + $.S(sec) + '.' + $.S(ms);
},
 add$1: function(duration) {
  var ms, t2;
  ms = this.millisecondsSinceEpoch;
  if (typeof ms !== 'number')
    return this.add$1$bailout0(1, duration, ms);
  t2 = duration.get$inMilliseconds();
  if (typeof t2 !== 'number')
    return this.add$1$bailout0(2, ms, t2);
  return $.Date_Date$fromMillisecondsSinceEpoch(ms + t2, this.isUtc);
},
 add$1$bailout0: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      ms = env1;
      duration = env0;
      break;
    case 2:
      t2 = env1;
      ms = env0;
      break;
  }
  switch (state0) {
    case 0:
      ms = this.millisecondsSinceEpoch;
    case 1:
      state0 = 0;
      t2 = duration.get$inMilliseconds();
    case 2:
      var ms, duration, t2;
      state0 = 0;
      return $.Date_Date$fromMillisecondsSinceEpoch($.add(ms, t2), this.isUtc);
  }
},
 get$year: function() {
  return $.Primitives_getYear(this);
},
 get$month: function() {
  return $.Primitives_getMonth(this);
},
 get$day: function() {
  return $.Primitives_getDay(this);
},
 get$hour: function() {
  return $.Primitives_getHours(this);
},
 get$minute: function() {
  return $.Primitives_getMinutes(this);
},
 get$second: function() {
  return $.Primitives_getSeconds(this);
},
 get$millisecond: function() {
  return $.Primitives_getMilliseconds(this);
},
 _DateImpl$fromMillisecondsSinceEpoch$2: function(millisecondsSinceEpoch, isUtc) {
  var t1 = this.millisecondsSinceEpoch;
  if ($.gtB($.abs(t1), 8640000000000000))
    throw $.$$throw($.ArgumentError$(t1));
  t1 = this.isUtc;
  if (t1 == null)
    throw $.$$throw($.ArgumentError$(t1));
},
 _DateImpl$now$0: function() {
  $.Primitives_lazyAsJsDate(this);
},
 is$Date: true
};

$$.Duration = {"": ["inMilliseconds>"],
 "super": "Object",
 get$inHours: function() {
  return $.tdiv(this.inMilliseconds, 3600000);
},
 get$inMinutes: function() {
  return $.tdiv(this.inMilliseconds, 60000);
},
 get$inSeconds: function() {
  return $.tdiv(this.inMilliseconds, 1000);
},
 operator$eq$1: function(other) {
  if (!(typeof other === 'object' && other !== null && !!other.is$Duration))
    return false;
  return $.eq(this.inMilliseconds, other.inMilliseconds);
},
 get$hashCode: function() {
  return $.get$hashCode(this.inMilliseconds);
},
 compareTo$1: function(other) {
  return $.compareTo(this.inMilliseconds, other.get$inMilliseconds());
},
 toString$0: function() {
  var t1, t2, t3, twoDigitMinutes, twoDigitSeconds, threeDigitMs;
  t1 = new $.Duration_toString_threeDigits();
  t2 = new $.Duration_toString_twoDigits();
  t3 = this.inMilliseconds;
  if ($.ltB(t3, 0))
    return '-' + $.S($.Duration$(0, 0, $.neg(t3), 0, 0));
  twoDigitMinutes = t2.call$1($.remainder(this.get$inMinutes(), 60));
  twoDigitSeconds = t2.call$1($.remainder(this.get$inSeconds(), 60));
  threeDigitMs = t1.call$1($.remainder(t3, 1000));
  return $.S(this.get$inHours()) + ':' + $.S(twoDigitMinutes) + ':' + $.S(twoDigitSeconds) + '.' + $.S(threeDigitMs);
},
 is$Duration: true
};

$$.ArgumentError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return 'Illegal argument(s): ' + $.S(t1);
  return 'Illegal argument(s)';
},
 is$ArgumentError: true
};

$$.RangeError = {"": ["message"],
 "super": "ArgumentError",
 toString$0: function() {
  return 'RangeError: ' + $.S(this.message);
}
};

$$.NoSuchMethodError = {"": ["_receiver", "_memberName", "_arguments", "_namedArguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
  t1 = {};
  t1.sb_1 = $.StringBuffer_StringBuffer('');
  t1.i_2 = 0;
  t2 = this._arguments;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(1, t1, t2);
  for (; $.ltB(t1.i_2, t2.length); t1.i_2 = $.add(t1.i_2, 1)) {
    if ($.gtB(t1.i_2, 0)) {
      t3 = t1.sb_1;
      $.getInterceptor(t3).add$1(t3, ', ');
    }
    t3 = t1.sb_1;
    t4 = $.getInterceptor(t3);
    t5 = t1.i_2;
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= t2.length)
      throw $.ioore(t5);
    t4.add$1(t3, $.NoSuchMethodError_safeToString(t2[t5]));
  }
  t2 = this._namedArguments;
  if (!(t2 == null))
    $.getInterceptor(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
  t2 = this._existingArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(2, t1, t2);
  actualParameters = $.toString(t1.sb_1);
  t1.sb_1 = $.StringBuffer_StringBuffer('');
  for (i = 0; i < t2.length; ++i) {
    if (i > 0) {
      t3 = t1.sb_1;
      $.getInterceptor(t3).add$1(t3, ', ');
    }
    t3 = t1.sb_1;
    t4 = $.getInterceptor(t3);
    if (i >= t2.length)
      throw $.ioore(i);
    t4.add$1(t3, t2[i]);
  }
  formalParameters = $.toString(t1.sb_1);
  t2 = this._memberName;
  return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t2) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t2) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t2) + '(' + $.S(formalParameters) + ')';
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t2 = env1;
      t1 = env0;
      break;
    case 2:
      t2 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.sb_1 = $.StringBuffer_StringBuffer('');
      t1.i_2 = 0;
      t2 = this._arguments;
    case 1:
      state0 = 0;
      if (!(t2 == null))
        for (; $.ltB(t1.i_2, $.get$length(t2)); t1.i_2 = $.add(t1.i_2, 1)) {
          if ($.gtB(t1.i_2, 0)) {
            t3 = t1.sb_1;
            $.getInterceptor(t3).add$1(t3, ', ');
          }
          t3 = t1.sb_1;
          $.getInterceptor(t3).add$1(t3, $.NoSuchMethodError_safeToString($.index(t2, t1.i_2)));
        }
      t2 = this._namedArguments;
      if (!(t2 == null))
        $.getInterceptor(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
      t2 = this._existingArgumentNames;
    case 2:
      var t1, t2, t3, actualParameters, i, formalParameters;
      state0 = 0;
      if (t2 == null)
        return 'NoSuchMethodError : method not found: \'' + $.S(this._memberName) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Arguments: [' + $.S(t1.sb_1) + ']';
      else {
        actualParameters = $.toString(t1.sb_1);
        t1.sb_1 = $.StringBuffer_StringBuffer('');
        for (i = 0; $.ltB(i, $.get$length(t2)); ++i) {
          if (i > 0) {
            t3 = t1.sb_1;
            $.getInterceptor(t3).add$1(t3, ', ');
          }
          t3 = t1.sb_1;
          $.getInterceptor(t3).add$1(t3, $.index(t2, i));
        }
        formalParameters = $.toString(t1.sb_1);
        t2 = this._memberName;
        return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t2) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t2) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t2) + '(' + $.S(formalParameters) + ')';
      }
  }
}
};

$$.UnsupportedError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  return 'Unsupported operation: ' + $.S(this.get$message());
},
 is$UnsupportedError: true
};

$$.UnimplementedError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return !(t1 == null) ? 'UnimplementedError: ' + $.S(t1) : 'UnimplementedError';
},
 is$UnsupportedError: true
};

$$.StateError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  return 'Bad state: ' + this.message;
}
};

$$.StackOverflowError = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Stack Overflow';
}
};

$$._ExceptionImplementation = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return t1 == null ? 'Exception' : 'Exception: ' + $.S(t1);
},
 is$Exception: true
};

$$.FormatException = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  return 'FormatException: ' + $.S(this.message);
},
 is$Exception: true
};

$$.NullPointerException = {"": ["functionName", "arguments"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.functionName;
  if (t1 == null)
    return this.get$exceptionName();
  else
    return $.S(this.get$exceptionName()) + ' : method: \'' + $.S(t1) + '\'\n' + 'Receiver: null\n' + 'Arguments: ' + $.S(this.arguments);
},
 get$exceptionName: function() {
  return 'NullPointerException';
},
 is$NullPointerException: true,
 is$Exception: true
};

$$.IllegalJSRegExpException = {"": ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return 'IllegalJSRegExpException: \'' + $.S(this._pattern) + '\' \'' + this._errmsg + '\'';
},
 is$Exception: true
};

$$.RuntimeError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  return 'RuntimeError: ' + this.message;
},
 is$Exception: true
};

$$.ExpectException = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  return this.message;
},
 is$ExpectException: true,
 is$Exception: true
};

$$.Function = {"": [],
 "super": "Object",
 is$Function: true
};

$$.FutureNotCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future has not been completed';
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future already completed';
},
 is$Exception: true
};

$$.FutureUnhandledException = {"": ["source", "stackTrace>"],
 "super": "Object",
 toString$0: function() {
  var t1, t2, t3;
  t1 = $.toString(this.source);
  t2 = 'FutureUnhandledException: exception while executing Future\n  ' + $.S($.getInterceptor(t1).replaceAll$2(t1, '\n', '\n  ')) + '\n' + 'original stack trace:\n  ';
  t3 = $.toString(this.stackTrace);
  return t2 + $.S($.getInterceptor(t3).replaceAll$2(t3, '\n', '\n  '));
},
 is$Exception: true
};

$$._FutureImpl = {"": ["_isComplete", "_liblib3$_value", "_exception", "_stackTrace", "_exceptionHandled", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw($.FutureUnhandledException$(t1, this.get$stackTrace()));
  return this._liblib3$_value;
},
 get$exception: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._exception;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  var t1;
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true) {
    t1 = this._successListeners;
    $.getInterceptor(t1).add$1(t1, onSuccess);
  } else if (this._exceptionHandled !== true)
    throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
},
 handleException$1: function(onException) {
  var t1;
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete) {
    t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else {
    t1 = this._exceptionHandlers;
    $.getInterceptor(t1).add$1(t1, onException);
  }
},
 onComplete$1: function(complete, exception) {
  var t1;
  if (this._isComplete)
    try {
      complete.call$1(this);
    } catch (exception) {
      $.unwrapException(exception);
    }

  else {
    t1 = this._completionListeners;
    $.getInterceptor(t1).add$1(t1, complete);
  }
},
 _liblib3$_complete$0: function(exception) {
  var t1, handler, listener, listener0;
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (t1 = $.iterator(this._exceptionHandlers); t1.get$hasNext() === true;) {
        handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = $.iterator(this._successListeners); t1.get$hasNext() === true;) {
        listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && this._successListeners.length > 0)
      throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
  } finally {
    for (t1 = $.iterator(this._completionListeners); t1.get$hasNext() === true;) {
      listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._liblib3$_value = value;
  this._liblib3$_complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._liblib3$_complete$0();
},
 is$Future: true
};

$$._CompleterImpl = {"": ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
}
};

$$.List = {"": [],
 "super": "Object",
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._HashMapImpl = {"": ["_keys", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  var t1, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.CTC0);
  t1 = $.get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  hash = (t1 & this._keys.length - 1) >>> 0;
  for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CTC5)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForAdding$1$bailout: function(state0, key, t1) {
  var hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
  hash = $.and(t1, this._keys.length - 1);
  for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CTC5)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForLookup$1: function(key) {
  var hash, numberOfProbes, t1, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.CTC0);
  hash = $.and($.get$hashCode(key), this._keys.length - 1);
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  var numberOfProbes, t1, existingKey, numberOfProbes0;
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries, capacity, numberOfFreeOrDeleted, t1;
  newNumberOfEntries = this._numberOfEntries + 1;
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1(this._keys.length * 2);
    return;
  }
  capacity = this._keys.length;
  numberOfFreeOrDeleted = capacity - newNumberOfEntries;
  t1 = this._numberOfDeleted;
  if (t1 > numberOfFreeOrDeleted - t1)
    this._grow$1(capacity);
},
 _grow$1: function(newCapacity) {
  var capacity, oldKeys, oldValues, t1, t2, i, key, value, newIndex, t3;
  capacity = this._keys.length;
  this._loadLimit = $.tdiv(newCapacity * 3, 4);
  oldKeys = this._keys;
  oldValues = this._values;
  this._keys = $._ListImpl_List(newCapacity);
  this._values = $._ListImpl_List(newCapacity);
  for (t1 = oldKeys.length, t2 = oldValues.length, i = 0; i < capacity; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    key = oldKeys[i];
    if (key == null || key === $.CTC5)
      continue;
    if (i >= t2)
      throw $.ioore(i);
    value = oldValues[i];
    newIndex = this._probeForAdding$1(key);
    t3 = this._keys;
    if (newIndex !== (newIndex | 0))
      throw $.iae(newIndex);
    if (newIndex < 0 || newIndex >= t3.length)
      throw $.ioore(newIndex);
    t3[newIndex] = key;
    t3 = this._values;
    if (newIndex >= t3.length)
      throw $.ioore(newIndex);
    t3[newIndex] = value;
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  var t1, length$, t2, t3, i;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  t1 = this._keys;
  length$ = t1.length;
  for (t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
    t1[i] = null;
    if (i >= t3)
      throw $.ioore(i);
    t2[i] = null;
  }
},
 oprator$indexSet$2: function(key, value) {
  var index, t1;
  this._ensureCapacity$0();
  index = this._probeForAdding$1(key);
  t1 = this._keys;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1 = t1[index];
  if (t1 == null || t1 === $.CTC5)
    this._numberOfEntries = this._numberOfEntries + 1;
  t1 = this._keys;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = key;
  t1 = this._values;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = value;
},
 operator$index$1: function(key) {
  var index, t1;
  index = this._probeForLookup$1(key);
  if (typeof index !== 'number')
    return this.operator$index$1$bailout(1, index);
  if (index < 0)
    return;
  t1 = this._values;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 operator$index$1$bailout: function(state0, index) {
  var t1;
  if ($.ltB(index, 0))
    return;
  t1 = this._values;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 putIfAbsent$2: function(key, ifAbsent) {
  var index, t1, value;
  index = this._probeForLookup$1(key);
  if ($.geB(index, 0)) {
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  }
  value = ifAbsent.call$0();
  this.oprator$indexSet$2(key, value);
  return value;
},
 remove$1: function(key) {
  var index, t1, value;
  index = this._probeForLookup$1(key);
  if ($.geB(index, 0)) {
    this._numberOfEntries = this._numberOfEntries - 1;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    value = t1[index];
    t1[index] = null;
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = $.CTC5;
    this._numberOfDeleted = this._numberOfDeleted + 1;
    return value;
  }
  return;
},
 get$isEmpty: function() {
  return this._numberOfEntries === 0;
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var length$, i, t1, key;
  length$ = this._keys.length;
  for (i = 0; i < length$; ++i) {
    t1 = this._keys;
    if (i >= t1.length)
      throw $.ioore(i);
    key = t1[i];
    if (!(key == null) && !(key === $.CTC5)) {
      t1 = this._values;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$2(key, t1[i]);
    }
  }
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.i_1 = 0;
  this.forEach$1(new $._HashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.i_10 = 0;
  this.forEach$1(new $._HashMapImpl_values_anon(list, t1));
  return list;
},
 containsKey$1: function(key) {
  var t1 = this._probeForLookup$1(key);
  if (typeof t1 !== 'number')
    return this.containsKey$1$bailout(1, t1);
  return !(t1 === -1);
},
 containsKey$1$bailout: function(state0, t1) {
  return !$.eqB(t1, -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _HashMapImpl$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
  this._keys = $._ListImpl_List(8);
  this._values = $._ListImpl_List(8);
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {"": [],
 "super": "Object"
};

$$._KeyValuePair = {"": ["key>", "value="],
 "super": "Object"
};

$$._LinkedHashMapImpl = {"": ["_list", "_map"],
 "super": "Object",
 oprator$indexSet$2: function(key, value) {
  var t1;
  if (this._map.containsKey$1(key) === true)
    $.index(this._map, key).get$element().set$value(value);
  else {
    t1 = this._list;
    $.getInterceptor(t1).addLast$1(t1, $._KeyValuePair$(key, value));
    $.indexSet(this._map, key, this._list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var t1, entry;
  t1 = this._map;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.operator$index$1$bailout0(1, key, t1);
  if (key !== (key | 0))
    throw $.iae(key);
  if (key < 0 || key >= t1.length)
    throw $.ioore(key);
  entry = t1[key];
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 operator$index$1$bailout0: function(state0, key, t1) {
  var entry = $.index(t1, key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 putIfAbsent$2: function(key, ifAbsent) {
  var value = this.operator$index$1(key);
  if (this.operator$index$1(key) == null && this._map.containsKey$1(key) !== true) {
    value = ifAbsent.call$0();
    this.oprator$indexSet$2(key, value);
  }
  return value;
},
 get$keys: function() {
  var t1, list, t2;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.index_1 = 0;
  t2 = this._list;
  $.getInterceptor(t2).forEach$1(t2, new $._LinkedHashMapImpl_keys_anon(list, t1));
  return list;
},
 get$values: function() {
  var t1, list, t2;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.index_10 = 0;
  t2 = this._list;
  $.getInterceptor(t2).forEach$1(t2, new $._LinkedHashMapImpl_values_anon(list, t1));
  return list;
},
 forEach$1: function(f) {
  var t1 = this._list;
  $.getInterceptor(t1).forEach$1(t1, new $._LinkedHashMapImpl_forEach_anon(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  return $.get$length(this._map);
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 clear$0: function() {
  var t1 = this._map;
  $.getInterceptor(t1).clear$0(t1);
  t1 = this._list;
  $.getInterceptor(t1).clear$0(t1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _LinkedHashMapImpl$0: function() {
  this._map = $.HashMap_HashMap();
  this._list = $.DoubleLinkedQueue$();
},
 is$Map: function() { return true; }
};

$$.Object = {"": [],
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
}
};

$$.DoubleLinkedQueueEntry = {"": ["_previous<", "_next=", "_element>"],
 "super": "Object",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"": ["_previous", "_next", "_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.StateError$('Empty queue'));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$('Empty queue'));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"": ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this._sentinel.prepend$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.iterator(collection); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    this._sentinel.prepend$1(t2);
  }
},
 removeLast$0: function() {
  return this._sentinel._previous.remove$0();
},
 removeFirst$0: function() {
  return this._sentinel._next.remove$0();
},
 get$first: function() {
  return this._sentinel._next.get$element();
},
 first$0: function() { return this.get$first().call$0(); },
 first$1: function(arg0) { return this.get$first().call$1(arg0); },
 get$last: function() {
  return this._sentinel._previous.get$element();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length_anon(t1));
  return t1.counter_1;
},
 get$isEmpty: function() {
  var t1 = this._sentinel;
  return t1._next === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1._next = t1;
  t1 = this._sentinel;
  t1._previous = t1;
},
 forEach$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
  }
},
 every$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) !== true)
      return false;
  }
  return true;
},
 some$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) === true)
      return true;
  }
  return false;
},
 map$1: function(f) {
  var other, entry, nextEntry;
  other = $.Queue_Queue();
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    $.getInterceptor(other).addLast$1(other, f.call$1(entry.get$_element()));
  }
  return other;
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 filter$1: function(f) {
  var other, entry, nextEntry;
  other = $.Queue_Queue();
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) === true)
      $.getInterceptor(other).addLast$1(other, entry.get$_element());
  }
  return other;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
},
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"": ["_sentinel", "_currentEntry"],
 "super": "Object",
 get$hasNext: function() {
  return !(this._currentEntry.get$_next() === this._sentinel);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$.SequenceCollection = {"": [],
 "super": "Object",
 iterator$0: function() {
  return $.SequenceIterator$(this.get$sequence());
},
 forEach$1: function(f) {
  var i;
  for (i = 0; $.ltB(i, $.get$length(this)); ++i)
    f.call$1(this.operator$index$1(i));
},
 map$1: function(f) {
  var result, i;
  result = $._ListImpl_List(null);
  for (i = 0; $.ltB(i, $.get$length(this)); ++i)
    $.getInterceptor(result).add$1(result, f.call$1(this.operator$index$1(i)));
  return result;
},
 contains$1: function(value) {
  var i;
  for (i = 0; $.ltB(i, $.get$length(this.get$sequence())); ++i)
    if ($.eqB($.index(this.get$sequence(), i), value))
      return true;
  return false;
},
 reduce$2: function(initialValue, combine) {
  var value, i;
  for (value = initialValue, i = 0; $.ltB(i, $.get$length(this)); ++i)
    value = combine.call$2(value, this.operator$index$1(i));
  return value;
},
 filter$1: function(f) {
  var result, i, element;
  result = [];
  for (i = 0; $.ltB(i, $.get$length(this)); ++i) {
    element = this.operator$index$1(i);
    if (f.call$1(element) === true)
      $.getInterceptor(result).add$1(result, element);
  }
  return result;
},
 every$1: function(f) {
  var i;
  for (i = 0; $.ltB(i, $.get$length(this)); ++i)
    if (f.call$1(this.operator$index$1(i)) !== true)
      return false;
  return true;
},
 some$1: function(f) {
  var i;
  for (i = 0; $.ltB(i, $.get$length(this)); ++i)
    if (f.call$1(this.operator$index$1(i)) === true)
      return true;
  return false;
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$.SequenceList = {"": ["sequence>"],
 "super": "SequenceCollection",
 get$length: function() {
  return this.sequence.length;
},
 operator$index$1: function(index) {
  var t1 = this.sequence;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 indexOf$2: function(value, start) {
  var t1, i, t2;
  if (start !== (start | 0))
    return this.indexOf$2$bailout0(1, value, start);
  for (t1 = this.sequence, i = start; t2 = t1.length, i < t2; ++i) {
    if (i < 0)
      throw $.ioore(i);
    if ($.eqB(t1[i], value))
      return i;
  }
  return -1;
},
 indexOf$2$bailout0: function(state0, value, start) {
  var t1, i;
  for (t1 = this.sequence, i = start; $.ltB(i, t1.length); ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    if ($.eqB(t1[i], value))
      return i;
  }
  return -1;
},
 indexOf$1: function(value) {
  return this.indexOf$2(value,0)
},
 lastIndexOf$2: function(value, start) {
  var t1, i;
  if (start !== (start | 0))
    return this.lastIndexOf$2$bailout0(1, value, start);
  for (t1 = this.sequence, i = start; i >= 0; --i) {
    if (i >= t1.length)
      throw $.ioore(i);
    if ($.eqB(t1[i], value))
      return i;
  }
  return -1;
},
 lastIndexOf$2$bailout0: function(state0, value, start) {
  var t1, i;
  if (start == null)
    start = this.sequence.length - 1;
  for (t1 = this.sequence, i = start; $.geB(i, 0); --i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    if ($.eqB(t1[i], value))
      return i;
  }
  return -1;
},
 lastIndexOf$1: function(value) {
  return this.lastIndexOf$2(value,null)
},
 get$last: function() {
  var t1, t2, t3;
  t1 = this.sequence;
  t2 = t1.length;
  t3 = t2 - 1;
  if (t3 < 0)
    throw $.ioore(t3);
  return t1[t3];
},
 getRange$2: function(start, length$) {
  var result, t1, i, t2, t3;
  if (start !== (start | 0))
    return this.getRange$2$bailout0(1, start, length$);
  if (typeof length$ !== 'number')
    return this.getRange$2$bailout0(1, start, length$);
  result = [];
  for (t1 = this.sequence, i = 0; i < length$; ++i) {
    t2 = $.getInterceptor(result);
    t3 = start + i;
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t2.add$1(result, t1[t3]);
  }
  return result;
},
 getRange$2$bailout0: function(state0, start, length$) {
  var result, t1, i, t2, t3;
  result = [];
  for (t1 = this.sequence, i = 0; $.ltB(i, length$); ++i) {
    t2 = $.getInterceptor(result);
    t3 = $.add(start, i);
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t2.add$1(result, t1[t3]);
  }
  return result;
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot modify an unmodifiable list'));
},
 set$length: function(newLength) {
  throw $.$$throw($.UnsupportedError$('Cannot change the length of an unmodifiable list'));
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to an unmodifiable list'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to an unmodifiable list'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to an unmodifiable list'));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot modify an unmodifiable list'));
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot clear an unmodifiable list'));
},
 removeAt$1: function(index) {
  throw $.$$throw($.UnsupportedError$('Cannot remove in an unmodifiable list'));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot remove in an unmodifiable list'));
},
 removeRange$2: function(start, length$) {
  throw $.$$throw($.UnsupportedError$('Cannot remove in an unmodifiable list'));
},
 insertRange$3: function(start, length$, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insert range in an unmodifiable list'));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$.SequenceIterator = {"": ["_sequence", "_position"],
 "super": "Object",
 get$hasNext: function() {
  return $.lt(this._position, $.get$length(this._sequence));
},
 next$0: function() {
  var t1, t3;
  if (this.get$hasNext() === true) {
    t1 = this._sequence;
    if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
      return this.next$0$bailout0(1, t1);
    t3 = this._position;
    this._position = t3 + 1;
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  }
  throw $.$$throw($.StateError$('No more elements'));
},
 next$0$bailout0: function(state0, env0) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      var t1, t3;
      if (state0 === 1 || state0 === 0 && this.get$hasNext() === true)
        switch (state0) {
          case 0:
            t1 = this._sequence;
          case 1:
            state0 = 0;
            t3 = this._position;
            this._position = t3 + 1;
            return $.index(t1, t3);
        }
      throw $.$$throw($.StateError$('No more elements'));
  }
}
};

$$._HashSetImpl = {"": ["_backingMap>"],
 "super": "Object",
 clear$0: function() {
  var t1 = this._backingMap;
  $.getInterceptor(t1).clear$0(t1);
},
 add$1: function(value) {
  this._backingMap.oprator$indexSet$2(value, value);
},
 contains$1: function(value) {
  return this._backingMap.containsKey$1(value);
},
 remove$1: function(value) {
  if (this._backingMap.containsKey$1(value) !== true)
    return false;
  this._backingMap.remove$1(value);
  return true;
},
 addAll$1: function(collection) {
  $.getInterceptor(collection).forEach$1(collection, new $._HashSetImpl_addAll_anon(this));
},
 forEach$1: function(f) {
  var t1 = this._backingMap;
  $.getInterceptor(t1).forEach$1(t1, new $._HashSetImpl_forEach_anon(f));
},
 map$1: function(f) {
  var result, t1;
  result = $.Set_Set();
  t1 = this._backingMap;
  $.getInterceptor(t1).forEach$1(t1, new $._HashSetImpl_map_anon(f, result));
  return result;
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 filter$1: function(f) {
  var result, t1;
  result = $.Set_Set();
  t1 = this._backingMap;
  $.getInterceptor(t1).forEach$1(t1, new $._HashSetImpl_filter_anon(f, result));
  return result;
},
 every$1: function(f) {
  return $.every(this._backingMap.get$keys(), f);
},
 some$1: function(f) {
  return $.some(this._backingMap.get$keys(), f);
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._backingMap);
},
 get$length: function() {
  return $.get$length(this._backingMap);
},
 iterator$0: function() {
  return $._HashSetIterator$(this);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 _HashSetImpl$0: function() {
  this._backingMap = $._HashMapImpl$();
},
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._HashSetIterator = {"": ["_entries", "_nextValidIndex"],
 "super": "Object",
 get$hasNext: function() {
  var t1, t2, t3;
  t1 = this._nextValidIndex;
  t2 = this._entries;
  t3 = t2.length;
  if (t1 >= t3)
    return false;
  if (t1 < 0)
    throw $.ioore(t1);
  if (t2[t1] === $.CTC5)
    this._advance$0();
  return this._nextValidIndex < t3;
},
 next$0: function() {
  var t1, t2, res;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  t1 = this._entries;
  t2 = this._nextValidIndex;
  if (t2 < 0 || t2 >= t1.length)
    throw $.ioore(t2);
  res = t1[t2];
  this._advance$0();
  return res;
},
 _advance$0: function() {
  var t1, length$, t2, entry;
  t1 = this._entries;
  length$ = t1.length;
  do {
    t2 = this._nextValidIndex + 1;
    this._nextValidIndex = t2;
    if (t2 >= length$)
      break;
    t2 = this._nextValidIndex;
    if (t2 < 0 || t2 >= length$)
      throw $.ioore(t2);
    entry = t1[t2];
  } while (entry == null || entry === $.CTC5);
},
 _HashSetIterator$1: function(set_) {
  this._advance$0();
}
};

$$.String = {"": [],
 "super": "Object",
 is$String: true
};

$$._StringBufferImpl = {"": ["_buffer", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return $.eq(this._length, 0);
},
 add$1: function(obj) {
  var str, t1, t3;
  str = $.toString(obj);
  if (str == null || $.get$isEmpty(str) === true)
    return this;
  t1 = this._buffer;
  $.getInterceptor(t1).add$1(t1, str);
  t1 = this._length;
  if (typeof t1 !== 'number')
    return this.add$1$bailout(1, t1, str);
  t3 = $.get$length(str);
  if (typeof t3 !== 'number')
    return this.add$1$bailout(2, t1, t3);
  this._length = t1 + t3;
  return this;
},
 add$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      str = env1;
      t1 = env0;
      break;
    case 2:
      t3 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      str = $.toString(obj);
      if (str == null || $.get$isEmpty(str) === true)
        return this;
      t1 = this._buffer;
      $.getInterceptor(t1).add$1(t1, str);
      t1 = this._length;
    case 1:
      state0 = 0;
      t3 = $.get$length(str);
    case 2:
      var str, t1, t3;
      state0 = 0;
      this._length = $.add(t1, t3);
      return this;
  }
},
 addAll$1: function(objects) {
  var t1;
  for (t1 = $.iterator(objects); t1.get$hasNext() === true;)
    this.add$1(t1.next$0());
  return this;
},
 clear$0: function() {
  this._buffer = $._ListImpl_List(null);
  this._length = 0;
  return this;
},
 toString$0: function() {
  var result, t1;
  if ($.eqB($.get$length(this._buffer), 0))
    return '';
  if ($.eqB($.get$length(this._buffer), 1))
    return $.index(this._buffer, 0);
  result = $.stringJoinUnchecked($.Strings__toJsStringArray(this._buffer), '');
  t1 = this._buffer;
  $.getInterceptor(t1).clear$0(t1);
  t1 = this._buffer;
  $.getInterceptor(t1).add$1(t1, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.ObjectInterceptor = {"": [],
 "super": "Object",
 removeLast$0: function(receiver) { return receiver.removeLast$0(); },
 charCodeAt$1: function(receiver, a0) { return receiver.charCodeAt$1(a0); },
 substring$1: function(receiver, a0) { return receiver.substring$1(a0); },
 clear$0: function(receiver) { return receiver.clear$0(); },
 add$1: function(receiver, a0) { return receiver.add$1(a0); },
 replaceAll$2: function(receiver, a0, a1) { return receiver.replaceAll$2(a0, a1); },
 toLowerCase$0: function(receiver) { return receiver.toLowerCase$0(); },
 endsWith$1: function(receiver, a0) { return receiver.endsWith$1(a0); },
 reduce$2: function(receiver, a0, a1) { return receiver.reduce$2(a0, a1); },
 removeAt$1: function(receiver, a0) { return receiver.removeAt$1(a0); },
 toUpperCase$0: function(receiver) { return receiver.toUpperCase$0(); },
 forEach$1: function(receiver, a0) { return receiver.forEach$1(a0); },
 getRange$2: function(receiver, a0, a1) { return receiver.getRange$2(a0, a1); },
 filter$1: function(receiver, a0) { return receiver.filter$1(a0); },
 concat$1: function(receiver, a0) { return receiver.concat$1(a0); },
 startsWith$1: function(receiver, a0) { return receiver.startsWith$1(a0); },
 substring$2: function(receiver, a0, a1) { return receiver.substring$2(a0, a1); },
 addLast$1: function(receiver, a0) { return receiver.addLast$1(a0); },
 allMatches$1: function(receiver, a0) { return receiver.allMatches$1(a0); },
 split$1: function(receiver, a0) { return receiver.split$1(a0); },
 addAll$1: function(receiver, a0) { return receiver.addAll$1(a0); },
 map$1: function(receiver, a0) { return receiver.map$1(a0); }
};

$$.JSArray = {"": [],
 "super": "Object",
 add$1: function(receiver, value) {
  $.checkGrowable(receiver, 'add');
  receiver.push(value);
},
 removeAt$1: function(receiver, index) {
  if (!(typeof index === 'number' && Math.floor(index) === index))
    throw $.$$throw($.ArgumentError$(index));
  if (index < 0 || $.geB(index, $.get$length(receiver)))
    throw $.$$throw($.RangeError$value(index));
  $.checkGrowable(receiver, 'removeAt');
  return receiver.splice(index, 1)[0];
},
 removeLast$0: function(receiver) {
  $.checkGrowable(receiver, 'removeLast');
  if ($.eqB($.get$length(receiver), 0))
    throw $.$$throw($.RangeError$value(-1));
  return receiver.pop();
},
 filter$1: function(receiver, f) {
  return $.Collections_filter(receiver, [], f);
},
 addAll$1: function(receiver, collection) {
  var t1, t2;
  for (t1 = $.iterator(collection); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(receiver).add$1(receiver, t2);
  }
},
 addLast$1: function(receiver, value) {
  $.checkGrowable(receiver, 'addLast');
  receiver.push(value);
},
 clear$0: function(receiver) {
  $.set$length(receiver, 0);
},
 forEach$1: function(receiver, f) {
  return $.Collections_forEach(receiver, f);
},
 map$1: function(receiver, f) {
  return $.Collections_map(receiver, [], f);
},
 reduce$2: function(receiver, initialValue, combine) {
  return $.Collections_reduce(receiver, initialValue, combine);
},
 getRange$2: function(receiver, start, length$) {
  var t1, end;
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  end = start + length$;
  if ($.gtB(end, $.get$length(receiver)))
    throw $.$$throw($.RangeError$value(length$));
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  return receiver.slice(start, end);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$.JSString = {"": [],
 "super": "Object",
 charCodeAt$1: function(receiver, index) {
  if (!(typeof index === 'number'))
    throw $.$$throw($.ArgumentError$(index));
  if (index < 0)
    throw $.$$throw($.RangeError$value(index));
  if ($.geB(index, $.get$length(receiver)))
    throw $.$$throw($.RangeError$value(index));
  return receiver.charCodeAt(index);
},
 allMatches$1: function(receiver, str) {
  $.checkString(str);
  return $.allMatchesInStringUnchecked(receiver, str);
},
 concat$1: function(receiver, other) {
  if (!(typeof other === 'string'))
    throw $.$$throw($.ArgumentError$(other));
  return receiver + other;
},
 endsWith$1: function(receiver, other) {
  var otherLength;
  $.checkString(other);
  otherLength = $.get$length(other);
  if ($.gtB(otherLength, $.get$length(receiver)))
    return false;
  return $.eq(other, this.substring$1(receiver, $.sub($.get$length(receiver), otherLength)));
},
 replaceAll$2: function(receiver, from, to) {
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
},
 split$1: function(receiver, pattern) {
  $.checkNull(pattern);
  return $.stringSplitUnchecked(receiver, pattern);
},
 startsWith$1: function(receiver, other) {
  var otherLength;
  $.checkString(other);
  otherLength = $.get$length(other);
  if ($.gtB(otherLength, $.get$length(receiver)))
    return false;
  return other == receiver.substring(0, otherLength);
},
 substring$2: function(receiver, startIndex, endIndex) {
  $.checkNum(startIndex);
  if (endIndex == null)
    endIndex = $.get$length(receiver);
  $.checkNum(endIndex);
  if ($.ltB(startIndex, 0))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(endIndex, $.get$length(receiver)))
    throw $.$$throw($.RangeError$value(endIndex));
  return receiver.substring(startIndex, endIndex);
},
 substring$1: function($,startIndex) {
  return this.substring$2($,startIndex,null)
},
 toLowerCase$0: function(receiver) {
  return receiver.toLowerCase();
},
 toUpperCase$0: function(receiver) {
  return receiver.toUpperCase();
},
 is$String: true
};

$$.HtmlEnhancedConfiguration = {"": ["_isLayoutTest", "_onErrorClosure", "_onMessageClosure", "currentTestCase"],
 "super": "Configuration",
 _installHandlers$0: function() {
  if (this._onErrorClosure == null) {
    this._onErrorClosure = new $.HtmlEnhancedConfiguration__installHandlers_anon(this);
    var t1 = $.window().get$on().get$error();
    $.getInterceptor(t1).add$1(t1, this._onErrorClosure);
  }
  if (this._onMessageClosure == null) {
    this._onMessageClosure = new $.HtmlEnhancedConfiguration__installHandlers_anon0(this);
    t1 = $.window().get$on().get$message();
    $.getInterceptor(t1).add$1(t1, this._onMessageClosure);
  }
},
 _uninstallHandlers$0: function() {
  if (!(this._onErrorClosure == null)) {
    $.window().get$on().get$error().remove$1(this._onErrorClosure);
    this._onErrorClosure = null;
  }
  if (!(this._onMessageClosure == null)) {
    $.window().get$on().get$message().remove$1(this._onMessageClosure);
    this._onMessageClosure = null;
  }
},
 processMessage$1: function(e) {
  if ('unittest-suite-external-error' === e.get$data())
    this.handleExternalError$2('<unknown>', '(external error detected)');
},
 onInit$0: function() {
  var cssElement, t1;
  this._installHandlers$0();
  cssElement = $.document().get$head().query$1('#_unittestcss_');
  if (cssElement == null) {
    t1 = $.document().get$head().get$elements();
    $.getInterceptor(t1).add$1(t1, $.Element_Element$html('<style id="_unittestcss_"></style>'));
    cssElement = $.document().get$head().query$1('#_unittestcss_');
  }
  cssElement.set$innerHTML(this.get$_htmlTestCSS());
},
 onStart$0: function() {
  $.window().postMessage$2('unittest-suite-wait-for-done', '*');
  var t1 = $.window().get$on().get$error();
  $.getInterceptor(t1).add$1(t1, this._onErrorClosure);
},
 onTestResult$1: function(testCase) {
},
 onDone$5: function(passed, failed, errors, results, uncaughtError) {
  this._uninstallHandlers$0();
  this._showInteractiveResultsInPage$6(passed, failed, errors, results, this._isLayoutTest, uncaughtError);
  $.window().postMessage$2('unittest-suite-done', '*');
},
 _showInteractiveResultsInPage$6: function(passed, failed, errors, results, isLayoutTest, uncaughtError) {
  var t1, te, t2, t3, t4, t5, groupedBy, flattened, nonAlphanumeric, groupPassFail, safeGroup, testsInGroup, groupTotalTestCount, groupTestPassedCount, passFailClass, t6, t7, grp;
  t1 = {};
  if (isLayoutTest === true && passed === $.get$length(results))
    $.document().get$body().set$innerHTML('PASS');
  else {
    te = $.Element_Element$html('<div class="unittest-table"></div>');
    t2 = te.get$elements();
    t3 = $.getInterceptor(t2);
    t3.add$1(t2, $.Element_Element$html(passed === $.get$length(results) ? '<div class=\'unittest-overall unittest-pass\'>PASS</div>' : '<div class=\'unittest-overall unittest-fail\'>FAIL</div>'));
    if (passed === $.get$length(results) && uncaughtError == null) {
      t2 = te.get$elements();
      $.getInterceptor(t2).add$1(t2, $.Element_Element$html('          <div class=\'unittest-pass\'>All ' + $.S(passed) + ' tests passed</div>'));
    } else {
      t2 = uncaughtError == null;
      if (!t2) {
        t3 = te.get$elements();
        $.getInterceptor(t3).add$1(t3, $.Element_Element$html('            <div class=\'unittest-summary\'>\n              <span class=\'unittest-error\'>Uncaught error: ' + $.S(uncaughtError) + '</span>\n            </div>'));
      }
      t3 = te.get$elements();
      t4 = $.getInterceptor(t3);
      t5 = '          <div class=\'unittest-summary\'>\n            <span class=\'unittest-pass\'>Total ' + $.S(passed) + ' passed</span>,\n            <span class=\'unittest-fail\'>' + $.S(failed) + ' failed</span>,\n            <span class=\'unittest-error\'>\n            ';
      t2 = t2 ? 0 : 1;
      t4.add$1(t3, $.Element_Element$html(t5 + $.S(errors + t2) + ' errors</span>\n          </div>'));
    }
    t2 = te.get$elements();
    $.getInterceptor(t2).add$1(t2, $.Element_Element$html('        <div><button id=\'btnCollapseAll\'>Collapse All</button></div>\n       '));
    t2 = te.query$1('#btnCollapseAll').get$on().get$click();
    $.getInterceptor(t2).add$1(t2, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon());
    t1.previousGroup_1 = '';
    groupedBy = $.LinkedHashMap_LinkedHashMap();
    if (typeof groupedBy !== 'object' || groupedBy === null || (groupedBy.constructor !== Array || !!groupedBy.immutable$list) && !groupedBy.is$JavaScriptIndexingBehavior())
      return this._showInteractiveResultsInPage$6$bailout(1, te, results, groupedBy, t1);
    for (t2 = $.iterator(results); t2.get$hasNext() === true;) {
      t3 = t2.next$0();
      if (groupedBy.containsKey$1(t3.get$currentGroup()) !== true) {
        t4 = t3.get$currentGroup();
        t5 = $._ListImpl_List(null);
        if (t4 !== (t4 | 0))
          throw $.iae(t4);
        if (t4 < 0 || t4 >= groupedBy.length)
          throw $.ioore(t4);
        groupedBy[t4] = t5;
      }
      t4 = t3.get$currentGroup();
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= groupedBy.length)
        throw $.ioore(t4);
      t4 = groupedBy[t4];
      $.getInterceptor(t4).add$1(t4, t3);
    }
    flattened = $._ListImpl_List(null);
    t2 = groupedBy.get$values();
    $.getInterceptor(t2).forEach$1(t2, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon0(flattened));
    nonAlphanumeric = $.RegExp_RegExp('[^a-z0-9A-Z]', false, false);
    for (t2 = $.iterator(flattened), groupPassFail = true; t2.get$hasNext() === true;) {
      t3 = t2.next$0();
      t4 = t3.get$currentGroup();
      safeGroup = $.getInterceptor(t4).replaceAll$2(t4, nonAlphanumeric, '_');
      if (!$.eqB(t3.get$currentGroup(), t1.previousGroup_1)) {
        t1.previousGroup_1 = t3.get$currentGroup();
        testsInGroup = $.getInterceptor(results).filter$1(results, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon1(t1));
        groupTotalTestCount = $.get$length(testsInGroup);
        groupTestPassedCount = $.get$length($.getInterceptor(testsInGroup).filter$1(testsInGroup, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon2()));
        groupPassFail = $.eq(groupTotalTestCount, groupTestPassedCount);
        passFailClass = 'unittest-group-status unittest-group-status-' + (groupPassFail === true ? 'pass' : 'fail');
        t4 = te.get$elements();
        t5 = $.getInterceptor(t4);
        t6 = '            <div>\n              <div id=\'' + $.S(safeGroup) + '\'\n                   class=\'unittest-group ' + $.S(safeGroup) + ' test' + $.S(safeGroup) + '\'>\n                <div ';
        t7 = t6 + ($.HtmlEnhancedConfiguration__isIE() === true ? 'style=\'display:inline-block\' ' : '') + '\n                     class=\'unittest-row-status\'>\n                  <div class=\'' + passFailClass + '\'></div>\n                </div>\n                <div ';
        t6 = t7 + ($.HtmlEnhancedConfiguration__isIE() === true ? 'style=\'display:inline-block\' ' : '') + '>\n                    ' + $.S(t3.get$currentGroup()) + '</div>\n                &nbsp;\n                <div ';
        t5.add$1(t4, $.Element_Element$html(t6 + ($.HtmlEnhancedConfiguration__isIE() === true ? 'style=\'display:inline-block\' ' : '') + '>\n                    (' + $.S(groupTestPassedCount) + '/' + $.S(groupTotalTestCount) + ')</div>\n              </div>\n            </div>'));
        grp = $.eqB(safeGroup, '') ? null : te.query$1('#' + $.S(safeGroup));
        if (!(grp == null)) {
          t4 = grp.get$on().get$click();
          $.getInterceptor(t4).add$1(t4, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon3(safeGroup));
        }
      }
      this._buildRow$4(t3, te, safeGroup, groupPassFail !== true);
    }
    t1 = $.document().get$body().get$elements();
    $.getInterceptor(t1).clear$0(t1);
    t1 = $.document().get$body().get$elements();
    $.getInterceptor(t1).add$1(t1, te);
  }
},
 _showInteractiveResultsInPage$6$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env3;
      groupedBy = env2;
      results = env1;
      te = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
    case 1:
      var t1, te, t2, t3, t4, t5, groupedBy, results, flattened, nonAlphanumeric, groupPassFail, safeGroup, testsInGroup, groupTotalTestCount, groupTestPassedCount, passFailClass, t6, t7, grp;
      if (state0 === 0 && isLayoutTest === true && passed === $.get$length(results))
        $.document().get$body().set$innerHTML('PASS');
      else
        switch (state0) {
          case 0:
            te = $.Element_Element$html('<div class="unittest-table"></div>');
            t2 = te.get$elements();
            t3 = $.getInterceptor(t2);
            t3.add$1(t2, $.Element_Element$html(passed === $.get$length(results) ? '<div class=\'unittest-overall unittest-pass\'>PASS</div>' : '<div class=\'unittest-overall unittest-fail\'>FAIL</div>'));
            if (passed === $.get$length(results) && uncaughtError == null) {
              t2 = te.get$elements();
              $.getInterceptor(t2).add$1(t2, $.Element_Element$html('          <div class=\'unittest-pass\'>All ' + $.S(passed) + ' tests passed</div>'));
            } else {
              t2 = uncaughtError == null;
              if (!t2) {
                t3 = te.get$elements();
                $.getInterceptor(t3).add$1(t3, $.Element_Element$html('            <div class=\'unittest-summary\'>\n              <span class=\'unittest-error\'>Uncaught error: ' + $.S(uncaughtError) + '</span>\n            </div>'));
              }
              t3 = te.get$elements();
              t4 = $.getInterceptor(t3);
              t5 = '          <div class=\'unittest-summary\'>\n            <span class=\'unittest-pass\'>Total ' + $.S(passed) + ' passed</span>,\n            <span class=\'unittest-fail\'>' + $.S(failed) + ' failed</span>,\n            <span class=\'unittest-error\'>\n            ';
              t2 = t2 ? 0 : 1;
              t4.add$1(t3, $.Element_Element$html(t5 + $.S(errors + t2) + ' errors</span>\n          </div>'));
            }
            t2 = te.get$elements();
            $.getInterceptor(t2).add$1(t2, $.Element_Element$html('        <div><button id=\'btnCollapseAll\'>Collapse All</button></div>\n       '));
            t2 = te.query$1('#btnCollapseAll').get$on().get$click();
            $.getInterceptor(t2).add$1(t2, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon());
            t1.previousGroup_1 = '';
            groupedBy = $.LinkedHashMap_LinkedHashMap();
          case 1:
            state0 = 0;
            for (t2 = $.iterator(results); t2.get$hasNext() === true;) {
              t3 = t2.next$0();
              if (groupedBy.containsKey$1(t3.get$currentGroup()) !== true)
                $.indexSet(groupedBy, t3.get$currentGroup(), $._ListImpl_List(null));
              t4 = $.index(groupedBy, t3.get$currentGroup());
              $.getInterceptor(t4).add$1(t4, t3);
            }
            flattened = $._ListImpl_List(null);
            t2 = groupedBy.get$values();
            $.getInterceptor(t2).forEach$1(t2, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon0(flattened));
            nonAlphanumeric = $.RegExp_RegExp('[^a-z0-9A-Z]', false, false);
            for (t2 = $.iterator(flattened), groupPassFail = true; t2.get$hasNext() === true;) {
              t3 = t2.next$0();
              t4 = t3.get$currentGroup();
              safeGroup = $.getInterceptor(t4).replaceAll$2(t4, nonAlphanumeric, '_');
              if (!$.eqB(t3.get$currentGroup(), t1.previousGroup_1)) {
                t1.previousGroup_1 = t3.get$currentGroup();
                testsInGroup = $.getInterceptor(results).filter$1(results, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon1(t1));
                groupTotalTestCount = $.get$length(testsInGroup);
                groupTestPassedCount = $.get$length($.getInterceptor(testsInGroup).filter$1(testsInGroup, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon2()));
                groupPassFail = $.eq(groupTotalTestCount, groupTestPassedCount);
                passFailClass = 'unittest-group-status unittest-group-status-' + (groupPassFail === true ? 'pass' : 'fail');
                t4 = te.get$elements();
                t5 = $.getInterceptor(t4);
                t6 = '            <div>\n              <div id=\'' + $.S(safeGroup) + '\'\n                   class=\'unittest-group ' + $.S(safeGroup) + ' test' + $.S(safeGroup) + '\'>\n                <div ';
                t7 = t6 + ($.HtmlEnhancedConfiguration__isIE() === true ? 'style=\'display:inline-block\' ' : '') + '\n                     class=\'unittest-row-status\'>\n                  <div class=\'' + passFailClass + '\'></div>\n                </div>\n                <div ';
                t6 = t7 + ($.HtmlEnhancedConfiguration__isIE() === true ? 'style=\'display:inline-block\' ' : '') + '>\n                    ' + $.S(t3.get$currentGroup()) + '</div>\n                &nbsp;\n                <div ';
                t5.add$1(t4, $.Element_Element$html(t6 + ($.HtmlEnhancedConfiguration__isIE() === true ? 'style=\'display:inline-block\' ' : '') + '>\n                    (' + $.S(groupTestPassedCount) + '/' + $.S(groupTotalTestCount) + ')</div>\n              </div>\n            </div>'));
                grp = $.eqB(safeGroup, '') ? null : te.query$1('#' + $.S(safeGroup));
                if (!(grp == null)) {
                  t4 = grp.get$on().get$click();
                  $.getInterceptor(t4).add$1(t4, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon3(safeGroup));
                }
              }
              this._buildRow$4(t3, te, safeGroup, groupPassFail !== true);
            }
            t1 = $.document().get$body().get$elements();
            $.getInterceptor(t1).clear$0(t1);
            t1 = $.document().get$body().get$elements();
            $.getInterceptor(t1).add$1(t1, te);
        }
  }
},
 _buildRow$4: function(test_, te, groupID, isVisible) {
  var t1, background, display, t2, t3, t4;
  t1 = test_.get$id();
  if (typeof t1 !== 'number')
    return this._buildRow$4$bailout(1, test_, te, groupID, isVisible, t1);
  background = 'unittest-row-' + ($.mod(t1, 2) === 0 ? 'even' : 'odd');
  display = isVisible ? 'unittest-row' : 'unittest-row-hidden';
  t1 = new $.HtmlEnhancedConfiguration__buildRow__htmlEscape();
  t2 = new $.HtmlEnhancedConfiguration__buildRow_addRowElement(te, test_, display, background, groupID);
  if (test_.get$isComplete() !== true) {
    t2.call$3($.S(test_.get$id()), 'NO STATUS', 'Test did not complete.');
    return;
  }
  t3 = $.S(test_.get$id());
  t4 = test_.get$result();
  t2.call$3(t3, $.S($.getInterceptor(t4).toUpperCase$0(t4)), $.S(test_.get$description()) + '. ' + $.S(t1.call$1(test_.get$message())));
  if (!(test_.get$stackTrace() == null))
    t2.call$3('', '', '<pre>' + $.S(t1.call$1(test_.get$stackTrace())) + '</pre>');
},
 _buildRow$4$bailout: function(state0, test_, te, groupID, isVisible, t1) {
  var background, display, t2, t3, t4;
  background = 'unittest-row-' + ($.eqB($.mod(t1, 2), 0) ? 'even' : 'odd');
  display = isVisible ? 'unittest-row' : 'unittest-row-hidden';
  t1 = new $.HtmlEnhancedConfiguration__buildRow__htmlEscape();
  t2 = new $.HtmlEnhancedConfiguration__buildRow_addRowElement(te, test_, display, background, groupID);
  if (test_.get$isComplete() !== true) {
    t2.call$3($.S(test_.get$id()), 'NO STATUS', 'Test did not complete.');
    return;
  }
  t3 = $.S(test_.get$id());
  t4 = test_.get$result();
  t2.call$3(t3, $.S($.getInterceptor(t4).toUpperCase$0(t4)), $.S(test_.get$description()) + '. ' + $.S(t1.call$1(test_.get$message())));
  if (!(test_.get$stackTrace() == null))
    t2.call$3('', '', '<pre>' + $.S(t1.call$1(test_.get$stackTrace())) + '</pre>');
},
 get$_htmlTestCSS: function() {
  var t1 = '  body{\n    font-size: 14px;\n    font-family: \'Open Sans\', \'Lucida Sans Unicode\', \'Lucida Grande\', sans-serif;\n    background: WhiteSmoke;\n  }\n\n  .unittest-group\n  {\n    background: rgb(75,75,75);\n    width:98%;\n    color: WhiteSmoke;\n    font-weight: bold;\n    padding: 6px;\n    cursor: pointer;\n\n    /* Provide some visual separation between groups for IE */\n    ' + ($.HtmlEnhancedConfiguration__isIE() === true ? 'border-bottom:solid black 1px;' : '') + '\n    ';
  return t1 + ($.HtmlEnhancedConfiguration__isIE() === true ? 'border-top:solid #777777 1px;' : '') + '\n\n    background-image: -webkit-linear-gradient(bottom, rgb(50,50,50) 0%, ' + 'rgb(100,100,100) 100%);\n    background-image: -moz-linear-gradient(bottom, rgb(50,50,50) 0%, ' + 'rgb(100,100,100) 100%);\n    background-image: -ms-linear-gradient(bottom, rgb(50,50,50) 0%, ' + 'rgb(100,100,100) 100%);\n    background-image: linear-gradient(bottom, rgb(50,50,50) 0%, ' + 'rgb(100,100,100) 100%);\n\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-box;\n    display: box;\n\n    -webkit-box-orient: horizontal;\n    -moz-box-orient: horizontal;\n    -ms-box-orient: horizontal;\n    box-orient: horizontal;\n\n    -webkit-box-align: center;\n    -moz-box-align: center;\n    -ms-box-align: center;\n    box-align: center;\n   }\n\n  .unittest-group-status\n  {\n    width: 20px;\n    height: 20px;\n    border-radius: 20px;\n    margin-left: 10px;\n  }\n\n  .unittest-group-status-pass{\n    background: Green;\n    background: ' + '-webkit-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: ' + '-moz-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: ' + '-ms-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: ' + 'radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n  }\n\n  .unittest-group-status-fail{\n    background: Red;\n    background: ' + '-webkit-radial-gradient(center, ellipse cover, #FFAAAA 0%,Red 100%);\n    background: ' + '-moz-radial-gradient(center, ellipse cover, #FFAAAA 0%,Red 100%);\n    background: ' + '-ms-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: radial-gradient(center, ellipse cover, #FFAAAA 0%,Red 100%);\n  }\n\n  .unittest-overall{\n    font-size: 20px;\n  }\n\n  .unittest-summary{\n    font-size: 18px;\n  }\n\n  .unittest-pass{\n    color: Green;\n  }\n\n  .unittest-fail, .unittest-error\n  {\n    color: Red;\n  }\n\n  .unittest-row\n  {\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-box;\n    display: box;\n    -webkit-box-orient: horizontal;\n    -moz-box-orient: horizontal;\n    -ms-box-orient: horizontal;\n    box-orient: horizontal;\n    width: 100%;\n  }\n\n  .unittest-row-hidden\n  {\n    display: none;\n  }\n\n  .unittest-row-odd\n  {\n    background: WhiteSmoke;\n  }\n\n  .unittest-row-even\n  {\n    background: #E5E5E5;\n  }\n\n  .unittest-row-id\n  {\n    width: 3em;\n  }\n\n  .unittest-row-status\n  {\n    width: 4em;\n  }\n\n  .unittest-row-description\n  {\n  }\n\n  ';
}
};

$$.AbstractWorkerEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$.AudioContextEvents = {"": ["_ptr"],
 "super": "Events",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$.BatteryManagerEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.BodyElementEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$.DOMApplicationCacheEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$.DedicatedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents",
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$.DocumentEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._ChildrenElementList = {"": ["_liblib$_element>", "_childElements"],
 "super": "Object",
 _toList$0: function() {
  var t1, t3, output, len, i, t2;
  t1 = this._childElements;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._toList$0$bailout(1, t1);
  t3 = t1.length;
  output = $._ListImpl_List(t3);
  for (len = t1.length, i = 0; i < len; ++i) {
    t2 = t1[i];
    if (i >= t3)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 _toList$0$bailout: function(state0, t1) {
  var output, len, i, t2;
  output = $._ListImpl_List($.get$length(t1));
  for (len = $.get$length(t1), i = 0; $.ltB(i, len); ++i) {
    t2 = $.index(t1, i);
    if (i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 contains$1: function(element) {
  return $.contains$1(this._childElements, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this._childElements); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var output, t1, t2;
  output = [];
  t1 = new $._ChildrenElementList_filter_anon(f, output);
  for (t2 = $.iterator(this._childElements); t2.get$hasNext() === true;)
    t1.call$1(t2.next$0());
  return $._FrozenElementList$_wrap(output);
},
 every$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) !== true)
      return false;
  return true;
},
 some$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
},
 map$1: function(f) {
  var out, t1, t2;
  out = [];
  for (t1 = $.iterator(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(out).add$1(out, f.call$1(t2));
  }
  return out;
},
 get$isEmpty: function() {
  return this._liblib$_element.get$$$dom_firstElementChild() == null;
},
 get$length: function() {
  return $.get$length(this._childElements);
},
 operator$index$1: function(index) {
  return $.index(this._childElements, index);
},
 oprator$indexSet$2: function(index, value) {
  this._liblib$_element.$$dom_replaceChild$2(value, $.index(this._childElements, index));
},
 set$length: function(newLength) {
  throw $.$$throw($.UnsupportedError$(''));
},
 add$1: function(value) {
  this._liblib$_element.$$dom_appendChild$1(value);
  return value;
},
 addLast$1: function(value) {
  this._liblib$_element.$$dom_appendChild$1(value);
  return value;
},
 iterator$0: function() {
  return $.iterator(this._toList$0());
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.iterator(collection), t2 = this._liblib$_element; t1.get$hasNext() === true;)
    t2.$$dom_appendChild$1(t1.next$0());
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('TODO(jacobr): should we impl?'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnimplementedError$(null));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnimplementedError$(null));
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($._Lists_getRange(this, start, rangeLength, []));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 clear$0: function() {
  this._liblib$_element.set$text('');
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    this._liblib$_element.$$dom_removeChild$1(result);
  return result;
},
 get$last: function() {
  return this._liblib$_element.get$$$dom_lastElementChild();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._FrozenElementList = {"": ["_nodeList"],
 "super": "Object",
 get$first: function() {
  return $.index(this._nodeList, 0);
},
 first$0: function() { return this.get$first().call$0(); },
 first$1: function(arg0) { return this.get$first().call$1(arg0); },
 contains$1: function(element) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), element))
      return true;
  return false;
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 map$1: function(f) {
  var out, t1, t2;
  out = [];
  for (t1 = $.iterator(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(out).add$1(out, f.call$1(t2));
  }
  return out;
},
 filter$1: function(f) {
  var out, t1, t2;
  out = [];
  for (t1 = $.iterator(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      $.getInterceptor(out).add$1(out, t2);
  }
  return out;
},
 every$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) !== true)
      return false;
  return true;
},
 some$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._nodeList);
},
 get$length: function() {
  return $.get$length(this._nodeList);
},
 operator$index$1: function(index) {
  return $.index(this._nodeList, index);
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 set$length: function(newLength) {
  $.set$length(this._nodeList, newLength);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 iterator$0: function() {
  return $._FrozenElementListIterator$(this);
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$(''));
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$(''));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$(''));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$(''));
},
 getRange$2: function(start, rangeLength) {
  var t1 = this._nodeList;
  return $._FrozenElementList$_wrap($.getInterceptor(t1).getRange$2(t1, start, rangeLength));
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this._nodeList, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  return $.lastIndexOf$2(this._nodeList, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$(''));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$(''));
},
 get$last: function() {
  return $.get$last(this._nodeList);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._FrozenElementListIterator = {"": ["_liblib$_list", "_index"],
 "super": "Object",
 next$0: function() {
  var t1, t2;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  t1 = this._liblib$_list;
  t2 = this._index;
  this._index = t2 + 1;
  return t1.operator$index$1(t2);
},
 get$hasNext: function() {
  return $.lt(this._index, $.get$length(this._liblib$_list));
}
};

$$.AttributeMap = {"": [],
 "super": "Object",
 is$Map: function() { return true; }
};

$$._ElementAttributeMap = {"": ["_liblib$_element>"],
 "super": "AttributeMap",
 containsKey$1: function(key) {
  return this._liblib$_element.$$dom_hasAttribute$1(key);
},
 operator$index$1: function(key) {
  return this._liblib$_element.$$dom_getAttribute$1(key);
},
 oprator$indexSet$2: function(key, value) {
  this._liblib$_element.$$dom_setAttribute$2(key, $.S(value));
},
 putIfAbsent$2: function(key, ifAbsent) {
  if (this._liblib$_element.$$dom_hasAttribute$1(key) !== true)
    this.oprator$indexSet$2(key, ifAbsent.call$0());
  return this.operator$index$1(key);
},
 remove$1: function(key) {
  var t1, value;
  t1 = this._liblib$_element;
  value = t1.$$dom_getAttribute$1(key);
  t1.$$dom_removeAttribute$1(key);
  return value;
},
 clear$0: function() {
  var attributes, i;
  attributes = this._liblib$_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.clear$0$bailout(1, attributes);
  for (i = attributes.length - 1; i >= 0; --i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    this.remove$1(attributes[i].get$name());
  }
},
 clear$0$bailout: function(state0, attributes) {
  var i;
  for (i = $.sub($.get$length(attributes), 1); $.geB(i, 0); i = $.sub(i, 1))
    this.remove$1($.index(attributes, i).get$name());
},
 forEach$1: function(f) {
  var attributes, len, i, item;
  attributes = this._liblib$_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.forEach$1$bailout(1, f, attributes);
  for (len = attributes.length, i = 0; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    item = attributes[i];
    f.call$2(item.get$name(), item.get$value());
  }
},
 forEach$1$bailout: function(state0, f, attributes) {
  var len, i, item;
  for (len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    item = $.index(attributes, i);
    f.call$2(item.get$name(), item.get$value());
  }
},
 get$keys: function() {
  var attributes, t2, keys, len, i, t1;
  attributes = this._liblib$_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.get$keys$bailout(1, attributes);
  t2 = attributes.length;
  keys = $._ListImpl_List(t2);
  for (len = attributes.length, i = 0; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    t1 = attributes[i].get$name();
    if (i >= t2)
      throw $.ioore(i);
    keys[i] = t1;
  }
  return keys;
},
 get$keys$bailout: function(state0, attributes) {
  var keys, len, i, t1;
  keys = $._ListImpl_List($.get$length(attributes));
  for (len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    t1 = $.index(attributes, i).get$name();
    if (i >= keys.length)
      throw $.ioore(i);
    keys[i] = t1;
  }
  return keys;
},
 get$values: function() {
  var attributes, t2, values, len, i, t1;
  attributes = this._liblib$_element.get$$$dom_attributes();
  if (typeof attributes !== 'string' && (typeof attributes !== 'object' || attributes === null || attributes.constructor !== Array && !attributes.is$JavaScriptIndexingBehavior()))
    return this.get$values$bailout(1, attributes);
  t2 = attributes.length;
  values = $._ListImpl_List(t2);
  for (len = attributes.length, i = 0; i < len; ++i) {
    if (i >= attributes.length)
      throw $.ioore(i);
    t1 = attributes[i].get$value();
    if (i >= t2)
      throw $.ioore(i);
    values[i] = t1;
  }
  return values;
},
 get$values$bailout: function(state0, attributes) {
  var values, len, i, t1;
  values = $._ListImpl_List($.get$length(attributes));
  for (len = $.get$length(attributes), i = 0; $.ltB(i, len); ++i) {
    t1 = $.index(attributes, i).get$value();
    if (i >= values.length)
      throw $.ioore(i);
    values[i] = t1;
  }
  return values;
},
 get$length: function() {
  return $.get$length(this._liblib$_element.get$$$dom_attributes());
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
}
};

$$.ElementEvents = {"": ["_ptr"],
 "super": "Events",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.EventSourceEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$.Events = {"": ["_ptr"],
 "super": "Object",
 operator$index$1: function(type) {
  return $.EventListenerList$(this._ptr, type);
}
};

$$.EventListenerList = {"": ["_ptr", "_type"],
 "super": "Object",
 add$2: function(listener, useCapture) {
  this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener,false)
},
 remove$2: function(listener, useCapture) {
  this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener,false)
}
};

$$.FileReaderEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$.FileWriterEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$.FrameSetElementEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$.HttpRequestEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$.HttpRequestUploadEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$.IDBDatabaseEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$.IDBOpenDBRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.IDBRequestEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$.IDBTransactionEvents = {"": ["_ptr"],
 "super": "Events",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); },
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$.IDBVersionChangeRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.InputElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.LocalWindowEvents = {"": ["_ptr"],
 "super": "Events",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$message: function() {
  return this.operator$index$1('message');
},
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$.MediaElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.MediaStreamEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MessagePortEvents = {"": ["_ptr"],
 "super": "Events",
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$._ChildNodeListLazy = {"": ["_this"],
 "super": "Object",
 get$first: function() {
  return this._this.firstChild;
},
 first$0: function() { return this.get$first().call$0(); },
 first$1: function(arg0) { return this.get$first().call$1(arg0); },
 get$last: function() {
  return this._this.lastChild;
},
 add$1: function(value) {
  this._this.$$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._this.$$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.iterator(collection), t2 = this._this; t1.get$hasNext() === true;)
    t2.$$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.get$last();
  if (!(result == null))
    this._this.$$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._this.set$text('');
},
 oprator$indexSet$2: function(index, value) {
  this._this.$$dom_replaceChild$2(value, this.operator$index$1(index));
},
 iterator$0: function() {
  return $.iterator(this._this.get$$$dom_childNodes());
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,0)
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 get$length: function() {
  return $.get$length(this._this.get$$$dom_childNodes());
},
 operator$index$1: function(index) {
  return $.index(this._this.get$$$dom_childNodes(), index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._ListWrapper = {"": [],
 "super": "Object",
 iterator$0: function() {
  return $.iterator(this._liblib$_list);
},
 contains$1: function(element) {
  return $.contains$1(this._liblib$_list, element);
},
 forEach$1: function(f) {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).forEach$1(t1, f);
},
 map$1: function(f) {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).map$1(t1, f);
},
 filter$1: function(f) {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).filter$1(t1, f);
},
 every$1: function(f) {
  return $.every(this._liblib$_list, f);
},
 some$1: function(f) {
  return $.some(this._liblib$_list, f);
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._liblib$_list);
},
 get$length: function() {
  return $.get$length(this._liblib$_list);
},
 operator$index$1: function(index) {
  return $.index(this._liblib$_list, index);
},
 oprator$indexSet$2: function(index, value) {
  $.indexSet(this._liblib$_list, index, value);
},
 set$length: function(newLength) {
  $.set$length(this._liblib$_list, newLength);
},
 add$1: function(value) {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).add$1(t1, value);
},
 addLast$1: function(value) {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).addLast$1(t1, value);
},
 addAll$1: function(collection) {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).addAll$1(t1, collection);
},
 sort$1: function(compare) {
  return $.sort$1(this._liblib$_list, compare);
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this._liblib$_list, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  return $.lastIndexOf$2(this._liblib$_list, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,0)
},
 clear$0: function() {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).clear$0(t1);
},
 removeLast$0: function() {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).removeLast$0(t1);
},
 get$last: function() {
  return $.get$last(this._liblib$_list);
},
 getRange$2: function(start, rangeLength) {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).getRange$2(t1, start, rangeLength);
},
 removeRange$2: function(start, rangeLength) {
  return $.removeRange(this._liblib$_list, start, rangeLength);
},
 insertRange$3: function(start, rangeLength, initialValue) {
  return $.insertRange$3(this._liblib$_list, start, rangeLength, initialValue);
},
 get$first: function() {
  return $.index(this._liblib$_list, 0);
},
 first$0: function() { return this.get$first().call$0(); },
 first$1: function(arg0) { return this.get$first().call$1(arg0); },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._NodeListWrapper = {"": ["_liblib$_list"],
 "super": "_ListWrapper",
 filter$1: function(f) {
  var t1 = this._liblib$_list;
  return $._NodeListWrapper$($.getInterceptor(t1).filter$1(t1, f));
},
 getRange$2: function(start, rangeLength) {
  var t1 = this._liblib$_list;
  return $._NodeListWrapper$($.getInterceptor(t1).getRange$2(t1, start, rangeLength));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$.NotificationEvents = {"": ["_ptr"],
 "super": "Events",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$.PeerConnection00Events = {"": ["_ptr"],
 "super": "Events"
};

$$.RTCDataChannelEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$.RTCPeerConnectionEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.ScriptProcessorNodeEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.SharedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents"
};

$$.SpeechRecognitionEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$result: function() {
  return this.operator$index$1('result');
}
};

$$.TextTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackCueEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.WebSocketEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$.WorkerEvents = {"": ["_ptr"],
 "super": "AbstractWorkerEvents",
 get$message: function() {
  return this.operator$index$1('message');
}
};

$$.WorkerContextEvents = {"": ["_ptr"],
 "super": "Events",
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); }
};

$$.FilteredElementList = {"": ["_node", "_childNodes"],
 "super": "Object",
 get$_filtered: function() {
  var t1 = this._childNodes;
  return $._ListImpl_List$from($.getInterceptor(t1).filter$1(t1, new $.FilteredElementList__filtered_anon()));
},
 forEach$1: function(f) {
  var t1 = this.get$_filtered();
  $.getInterceptor(t1).forEach$1(t1, f);
},
 oprator$indexSet$2: function(index, value) {
  this.operator$index$1(index).replaceWith$1(value);
},
 set$length: function(newLength) {
  var len = $.get$length(this);
  if ($.geB(newLength, len))
    return;
  else if ($.ltB(newLength, 0))
    throw $.$$throw($.ArgumentError$('Invalid list length'));
  this.removeRange$2($.sub(newLength, 1), $.sub(len, newLength));
},
 add$1: function(value) {
  var t1 = this._childNodes;
  $.getInterceptor(t1).add$1(t1, value);
},
 get$add: function() { return new $.BoundClosure(this, 'add$1'); },
 addAll$1: function(collection) {
  $.getInterceptor(collection).forEach$1(collection, this.get$add());
},
 addLast$1: function(value) {
  var t1 = this._childNodes;
  $.getInterceptor(t1).add$1(t1, value);
},
 contains$1: function(element) {
  return typeof element === 'object' && element !== null && element.is$Element() && $.contains$1(this._childNodes, element) === true;
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('TODO(jacobr): should we impl?'));
},
 removeRange$2: function(start, rangeLength) {
  var t1 = this.get$_filtered();
  t1 = $.getInterceptor(t1).getRange$2(t1, start, rangeLength);
  $.getInterceptor(t1).forEach$1(t1, new $.FilteredElementList_removeRange_anon());
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnimplementedError$(null));
},
 clear$0: function() {
  var t1 = this._childNodes;
  $.getInterceptor(t1).clear$0(t1);
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    result.remove$0();
  return result;
},
 map$1: function(f) {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).map$1(t1, f);
},
 filter$1: function(f) {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).filter$1(t1, f);
},
 every$1: function(f) {
  return $.every(this.get$_filtered(), f);
},
 some$1: function(f) {
  return $.some(this.get$_filtered(), f);
},
 get$isEmpty: function() {
  return $.get$isEmpty(this.get$_filtered());
},
 get$length: function() {
  return $.get$length(this.get$_filtered());
},
 operator$index$1: function(index) {
  return $.index(this.get$_filtered(), index);
},
 iterator$0: function() {
  return $.iterator(this.get$_filtered());
},
 getRange$2: function(start, rangeLength) {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).getRange$2(t1, start, rangeLength);
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this.get$_filtered(), element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $.lastIndexOf$2(this.get$_filtered(), element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return $.get$last(this.get$_filtered());
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$._DOMWindowCrossFrame = {"": ["_window>"],
 "super": "Object",
 get$parent: function() {
  return $._DOMWindowCrossFrame__createSafe(this._window.parent);
},
 get$top: function() {
  return $._DOMWindowCrossFrame__createSafe(this._window.top);
},
 close$0: function() {
  return this._window.close();
},
 postMessage$3: function(message, targetOrigin, messagePorts) {
  var t1, t2;
  t1 = messagePorts == null;
  t2 = this._window;
  if (t1)
    t2.postMessage(message,targetOrigin);
  else
    t2.postMessage(message,targetOrigin,messagePorts);
},
 postMessage$2: function(message,targetOrigin) {
  return this.postMessage$3(message,targetOrigin,null)
}
};

$$.FixedSizeListIterator = {"": ["_liblib$_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 get$hasNext: function() {
  return $.gt(this._liblib$_length, this._pos);
}
};

$$._VariableSizeListIterator = {"": [],
 "super": "Object",
 get$hasNext: function() {
  return $.gt($.get$length(this._array), this._pos);
},
 next$0: function() {
  var t1, t3;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  t3 = this._pos;
  this._pos = t3 + 1;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state0, t1) {
  var t3 = this._pos;
  this._pos = t3 + 1;
  return $.index(t1, t3);
}
};

$$._Manager = {"": ["nextIsolateId=", "currentManagerId=", "nextManagerId=", "currentContext=", "rootContext=", "topEventLoop>", "fromCommandLine>", "isWorker>", "supportsWorkers", "isolates>", "mainManager>", "managers>"],
 "super": "Object",
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
  this.isWorker = $isWorker;
  this.supportsWorkers = $supportsWorkers;
  this.fromCommandLine = typeof(window) == 'undefined';
},
 _nativeInitWorkerMessageHandler$0: function() {
  $globalThis.onmessage = function (e) {
  _IsolateNatives._processWorkerMessage(this.mainManager, e);
};
},
 maybeCloseWorker$0: function() {
  if ($.get$isEmpty(this.isolates) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'close'])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.Map_Map();
  this.managers = $.Map_Map();
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {"": ["id=", "ports>", "isolateStatics"],
 "super": "Object",
 initGlobals$0: function() {
  $initGlobals(this);
},
 eval$1: function(code) {
  var old, result, t1;
  old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  result = null;
  try {
    result = code.call$0();
  } finally {
    t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
  $setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  if (this.ports.containsKey$1(portId) === true)
    throw $.$$throw($._ExceptionImplementation$('Registry: ports must be registered only once.'));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  this.ports.remove$1(portId);
  if ($.get$isEmpty(this.ports) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1, t2;
  t1 = $._globalState();
  t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.Map_Map();
  this.initGlobals$0();
}
};

$$._EventLoop = {"": ["events"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  var t1 = this.events;
  $.getInterceptor(t1).addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.get$isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else if (!($._globalState().get$rootContext() == null) && $._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true && $._globalState().get$fromCommandLine() === true && $.get$isEmpty($._globalState().get$rootContext().get$ports()) === true)
      throw $.$$throw($._ExceptionImplementation$('Program exited with open ReceivePorts.'));
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function(exception) {
  var t1, e, trace;
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'error', 'msg', $.S(e) + '\n' + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {"": ["isolate", "fn", "message>"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"": [],
 "super": "Object",
 get$id: function() {
  return 0;
},
 set$id: function(i) {
  throw $.$$throw($.UnimplementedError$(null));
},
 set$onmessage: function(f) {
  throw $.$$throw($._ExceptionImplementation$('onmessage should not be set on MainManagerStub'));
},
 postMessage$1: function(msg) {
  $globalThis.postMessage(msg);
},
 terminate$0: function() {
}
};

$$._BaseSendPort = {"": ["_isolateId>"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($._ExceptionImplementation$('SendPort.send: Illegal replyTo port type'));
},
 call$1: function(message) {
  var completer, port;
  completer = $.Completer_Completer();
  port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(completer, port));
  return completer.get$future();
},
 is$Function: true,
 is$SendPort: true
};

$$._NativeJsSendPort = {"": ["_receivePort>", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, replyTo, message));
},
 send$1: function(message) {
  return this.send$2(message,null)
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
},
 get$hashCode: function() {
  return this._receivePort.get$_liblib2$_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"": ["_workerId>", "_receivePortId", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(message, this, replyTo));
},
 send$1: function(message) {
  return this.send$2(message,null)
},
 operator$eq$1: function(other) {
  var t1;
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 get$hashCode: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._BufferingSendPort = {"": ["_liblib2$_id>", "_port<", "_futurePort>", "pending=", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  var t1 = this._port;
  if (!(t1 == null))
    t1.send$2(message, replyTo);
  else {
    t1 = this.pending;
    $.getInterceptor(t1).add$1(t1, $.makeLiteralMap(['message', message, 'replyTo', replyTo]));
  }
},
 send$1: function(message) {
  return this.send$2(message,null)
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_BufferingSendPort && $.eqB(this._liblib2$_id, other._liblib2$_id);
},
 get$hashCode: function() {
  return this._liblib2$_id;
},
 _BufferingSendPort$2: function(isolateId, _futurePort) {
  $._BufferingSendPort__idCount = $.add($._BufferingSendPort__idCount, 1);
  this._futurePort.then$1(new $.anon5(this));
},
 is$_BufferingSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"": ["_liblib2$_id>", "_liblib2$_callback>"],
 "super": "Object",
 _liblib2$_callback$1: function(arg0) { return this._liblib2$_callback.call$1(arg0); },
 _liblib2$_callback$2: function(arg0, arg1) { return this._liblib2$_callback.call$2(arg0, arg1); },
 receive$1: function(onMessage) {
  this._liblib2$_callback = onMessage;
},
 close$0: function() {
  this._liblib2$_callback = null;
  $._globalState().get$currentContext().unregister$1(this._liblib2$_id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._liblib2$_id, this);
}
};

$$._PendingSendPortFinder = {"": ["ports>", "_visited"],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  if (!($.index(this._visited, list) == null))
    return;
  $.indexSet(this._visited, list, true);
  $.getInterceptor(list).forEach$1(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  var t1;
  if (!($.index(this._visited, map) == null))
    return;
  $.indexSet(this._visited, map, true);
  t1 = map.get$values();
  $.getInterceptor(t1).forEach$1(t1, new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  var t1;
  if (!!port.is$_BufferingSendPort && port._port == null) {
    t1 = this.ports;
    $.getInterceptor(t1).add$1(t1, port.get$_futurePort());
  }
},
 _PendingSendPortFinder$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsSerializer = {"": ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return ['sendport', x._workerId, x._isolateId, x._receivePortId];
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ['sendport', $._globalState().get$currentManagerId(), port._isolateId, port._receivePort.get$_liblib2$_id()];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsSerializer$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"": ["_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsCopier$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer = {"": ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  var managerId, isolateId, receivePortId, isolate;
  managerId = $.index(x, 1);
  isolateId = $.index(x, 2);
  receivePortId = $.index(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"": ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return object['__MessageTraverser__attached_info__'];
},
 oprator$indexSet$2: function(object, info) {
  var t1 = this.tagged;
  $.getInterceptor(t1).add$1(t1, object);
  object['__MessageTraverser__attached_info__'] = info;
},
 reset$0: function() {
  this.tagged = $._ListImpl_List(null);
},
 cleanup$0: function() {
  var length$, i;
  length$ = $.get$length(this.tagged);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  i = 0;
  for (; i < length$; ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
},
 cleanup$0$bailout: function(state0, length$) {
  var i = 0;
  for (; $.ltB(i, length$); ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
}
};

$$._MessageTraverserVisitedMap = {"": [],
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 oprator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {"": [],
 "super": "Object",
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw('Message serialization: Illegal value ' + $.S(x) + ' passed');
}
};

$$._Copier = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copy, len, i;
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
    return this.visitList$1$bailout(1, list);
  copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  len = list.length;
  copy = $._ListImpl_List(len);
  $.indexSet(this._visited, list, copy);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    copy[i] = this._dispatch$1(list[i]);
  }
  return copy;
},
 visitList$1$bailout: function(state0, list) {
  var copy, len, i, t1;
  copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  len = $.get$length(list);
  copy = $._ListImpl_List(len);
  $.indexSet(this._visited, list, copy);
  for (i = 0; $.ltB(i, len); ++i) {
    t1 = this._dispatch$1($.index(list, i));
    if (i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitMap$1: function(map) {
  var t1, t2;
  t1 = {};
  t1.copy_10 = $.index(this._visited, map);
  t2 = t1.copy_10;
  if (!(t2 == null))
    return t2;
  t1.copy_10 = $.Map_Map();
  $.indexSet(this._visited, map, t1.copy_10);
  $.getInterceptor(map).forEach$1(map, new $._Copier_visitMap_anon(t1, this));
  return t1.copy_10;
}
};

$$._Serializer = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId, id;
  copyId = $.index(this._visited, list);
  if (!(copyId == null))
    return ['ref', copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, list, id);
  return ['list', id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId, id;
  copyId = $.index(this._visited, map);
  if (!(copyId == null))
    return ['ref', copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, map, id);
  return ['map', id, this._serializeList$1(map.get$keys()), this._serializeList$1(map.get$values())];
},
 _serializeList$1: function(list) {
  var len, result, i;
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._serializeList$1$bailout(1, list);
  len = list.length;
  result = $._ListImpl_List(len);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._dispatch$1(list[i]);
  }
  return result;
},
 _serializeList$1$bailout: function(state0, list) {
  var len, result, i, t1;
  len = $.get$length(list);
  result = $._ListImpl_List(len);
  for (i = 0; $.ltB(i, len); ++i) {
    t1 = this._dispatch$1($.index(list, i));
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
}
};

$$._Deserializer = {"": [],
 "super": "Object",
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._deserialized = $.HashMap_HashMap();
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  switch ($.index(x, 0)) {
    case 'ref':
      return this._deserializeRef$1(x);
    case 'list':
      return this._deserializeList$1(x);
    case 'map':
      return this._deserializeMap$1(x);
    case 'sendport':
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._deserialized, id);
},
 _deserializeList$1: function(x) {
  var id, dartList, len, i, t1;
  id = $.index(x, 1);
  dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  len = dartList.length;
  for (i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    t1 = this._deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state0, dartList, id) {
  var len, i;
  $.indexSet(this._deserialized, id, dartList);
  len = $.get$length(dartList);
  for (i = 0; $.ltB(i, len); ++i)
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeMap$1: function(x) {
  var result, id, keys, values, len, i, key;
  result = $.Map_Map();
  id = $.index(x, 1);
  $.indexSet(this._deserialized, id, result);
  keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(1, x, result, keys);
  values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  len = keys.length;
  for (i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    key = this._deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    $.indexSet(result, key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      keys = env2;
      result = env1;
      x = env0;
      break;
    case 2:
      keys = env2;
      result = env1;
      values = env0;
      break;
  }
  switch (state0) {
    case 0:
      result = $.Map_Map();
      id = $.index(x, 1);
      $.indexSet(this._deserialized, id, result);
      keys = $.index(x, 2);
    case 1:
      state0 = 0;
      values = $.index(x, 3);
    case 2:
      var result, id, keys, x, values, len, i;
      state0 = 0;
      len = $.get$length(keys);
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(result, this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw('Unexpected serialized object');
}
};

$$._Timer = {"": ["_once", "_handle"],
 "super": "Object",
 _Timer$repeating$2: function(milliSeconds, callback) {
  this._handle = $._window().setInterval$2(new $.anon7(this, callback), milliSeconds);
},
 _Timer$2: function(milliSeconds, callback) {
  this._handle = $._window().setTimeout$2(new $.anon6(this, callback), milliSeconds);
}
};

$$.Uri = {"": ["scheme", "userInfo", "domain", "port", "path", "query", "fragment"],
 "super": "Object",
 query$1: function(arg0) { return this.query.call$1(arg0); },
 isAbsolute$0: function() {
  if ('' === this.scheme)
    return false;
  if (!('' === this.fragment))
    return false;
  return true;
},
 toString$0: function() {
  var sb, t1, t2;
  sb = $.StringBuffer_StringBuffer('');
  t1 = this.scheme;
  $.Uri__addIfNonEmpty(sb, t1, t1, ':');
  t2 = this.userInfo;
  if (!$.eqB(t2, '') || !$.eqB(this.domain, '') || !$.eqB(this.port, 0) || $.eqB(t1, 'file')) {
    $.getInterceptor(sb).add$1(sb, '//');
    $.Uri__addIfNonEmpty(sb, t2, t2, '@');
    t1 = $.getInterceptor(sb);
    t2 = this.domain;
    t1.add$1(sb, t2 == null ? 'null' : t2);
    t1 = this.port;
    if (!$.eqB(t1, 0)) {
      $.getInterceptor(sb).add$1(sb, ':');
      $.getInterceptor(sb).add$1(sb, $.toString(t1));
    }
  }
  t1 = $.getInterceptor(sb);
  t2 = this.path;
  t1.add$1(sb, t2 == null ? 'null' : t2);
  t1 = this.query;
  $.Uri__addIfNonEmpty(sb, t1, '?', t1);
  t1 = this.fragment;
  $.Uri__addIfNonEmpty(sb, t1, '#', t1);
  return $.toString(sb);
}
};

$$._Random = {"": [],
 "super": "Object",
 nextInt$1: function(max) {
  if (max < 0)
    throw $.$$throw($.ArgumentError$('negative max: ' + $.S(max)));
  if (max > 4294967295)
    max = 4294967295;
  return (Math.random() * max) >>> 0;
}
};

$$.SVGElementInstanceEvents = {"": ["_ptr"],
 "super": "Events",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$error: function() {
  return this.operator$index$1('error');
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 get$mouseDown: function() {
  return this.operator$index$1('mousedown');
},
 get$mouseMove: function() {
  return this.operator$index$1('mousemove');
},
 get$mouseOut: function() {
  return this.operator$index$1('mouseout');
},
 get$mouseUp: function() {
  return this.operator$index$1('mouseup');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); }
};

$$._SpreadArgsHelper = {"": ["_callback>", "_expectedCalls", "_actualCalls=", "_testNum", "_testCase", "_shouldCallBack", "_isDone"],
 "super": "Object",
 _callback$1: function(arg0) { return this._callback.call$1(arg0); },
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 _shouldCallBack$0: function() { return this._shouldCallBack.call$0(); },
 _isDone$0: function() { return this._isDone.call$0(); },
 _init$4: function(callback, shouldCallBack, isDone, expectedCalls) {
  var t1;
  $.ensureInitialized();
  if (!($.geB($._currentTest, 0) && $.ltB($._currentTest, $.get$length($._tests)) && !($.index($._tests, $._currentTest) == null)))
    $.print('No valid test, did you forget to run your test inside a call to test()?');
  this._callback = callback;
  this._shouldCallBack = shouldCallBack;
  this._isDone = isDone;
  this._expectedCalls = expectedCalls;
  t1 = $._currentTest;
  this._testNum = t1;
  this._testCase = $.index($._tests, t1);
  if ($.gtB(expectedCalls, 0)) {
    t1 = this._testCase;
    t1.set$callbackFunctionsOutstanding($.add(t1.get$callbackFunctionsOutstanding(), 1));
  }
},
 _after$0: function() {
  if (this._isDone$0() === true)
    $._handleCallbackFunctionComplete(this._testNum);
},
 get$_after: function() { return new $.BoundClosure0(this, '_after$0'); },
 _allCallsDone$0: function() {
  return $.eq(this._actualCalls, this._expectedCalls);
},
 get$_allCallsDone: function() { return new $.BoundClosure0(this, '_allCallsDone$0'); },
 invoke1$1: function(arg1) {
  return $.guardAsync(new $._SpreadArgsHelper_invoke1_anon(this, arg1), this.get$_after(), this._testNum);
},
 get$invoke1: function() { return new $.BoundClosure(this, 'invoke1$1'); },
 _checkCallCount$0: function() {
  if ($.gtB(this._actualCalls, this._expectedCalls)) {
    this._testCase.error$2('Callback called more times than expected (' + $.S(this._actualCalls) + ' > ' + $.S(this._expectedCalls) + ').', '');
    return false;
  }
  return true;
},
 get$_checkCallCount: function() { return new $.BoundClosure0(this, '_checkCallCount$0'); },
 _SpreadArgsHelper$fixedCallCount$2: function(callback, expectedCalls) {
  this._init$4(callback, this.get$_checkCallCount(), this.get$_allCallsDone(), expectedCalls);
}
};

$$.Configuration = {"": ["currentTestCase"],
 "super": "Object",
 get$name: function() {
  return 'Configuration';
},
 get$autoStart: function() {
  return true;
},
 onInit$0: function() {
},
 onStart$0: function() {
  this._postMessage$1('unittest-suite-wait-for-done');
},
 onTestStart$1: function(testCase) {
  this.currentTestCase = testCase;
},
 onTestResult$1: function(testCase) {
  this.currentTestCase = null;
},
 onDone$5: function(passed, failed, errors, results, uncaughtError) {
  var t1, t2, t3, success;
  for (t1 = $.iterator($._tests); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    t3 = t2.get$result();
    $.print($.S($.getInterceptor(t3).toUpperCase$0(t3)) + ': ' + $.S(t2.get$description()));
    if (!$.eqB(t2.get$message(), ''))
      $.print(this._indent$1(t2.get$message()));
    if (!(t2.get$stackTrace() == null) && !$.eqB(t2.get$stackTrace(), ''))
      $.print(this._indent$1(t2.get$stackTrace()));
  }
  $.print('');
  if (passed === 0 && failed === 0 && errors === 0) {
    $.print('No tests found.');
    success = false;
  } else if (failed === 0 && errors === 0 && uncaughtError == null) {
    $.print('All ' + $.S(passed) + ' tests passed.');
    success = true;
  } else {
    if (!(uncaughtError == null))
      $.print('Top-level uncaught error: ' + $.S(uncaughtError));
    $.print($.S(passed) + ' PASSED, ' + $.S(failed) + ' FAILED, ' + $.S(errors) + ' ERRORS');
    success = false;
  }
  if (success)
    this._postMessage$1('unittest-suite-success');
  else
    throw $.$$throw($._ExceptionImplementation$('Some tests failed.'));
},
 _indent$1: function(str) {
  var t1 = $.getInterceptor(str).split$1(str, '\n');
  return $.Strings_join($.getInterceptor(t1).map$1(t1, new $.Configuration__indent_anon()), '\n');
},
 handleExternalError$2: function(e, message) {
  return $._reportTestError(message + '\nCaught ' + $.S(e), '');
},
 _postMessage$1: function(message) {
  $.print(message);
}
};

$$.TestCase = {"": ["id>", "description>", "_setUp", "_tearDown", "test", "callbackFunctionsOutstanding=", "message>", "result>", "stackTrace>", "currentGroup>", "startTime", "runningTime", "enabled", "_doneTeardown"],
 "super": "Object",
 _setUp$0: function() { return this._setUp.call$0(); },
 _tearDown$0: function() { return this._tearDown.call$0(); },
 test$0: function() { return this.test.call$0(); },
 get$isComplete: function() {
  return !this.enabled || !(this.result == null);
},
 run$0: function() {
  if (this.enabled) {
    this.stackTrace = null;
    this.result = null;
    this.message = '';
    this._doneTeardown = false;
    if (!(this._setUp == null))
      this._setUp$0();
    $._config.onTestStart$1(this);
    this.startTime = $.Date_Date$now();
    this.runningTime = null;
    this.test$0();
  }
},
 _complete$0: function() {
  if (this.runningTime == null)
    this.runningTime = $.Duration$(0, 0, 0, 0, 0);
  if (!this._doneTeardown) {
    if (!(this._tearDown == null))
      this._tearDown$0();
    this._doneTeardown = true;
  }
  $._config.onTestResult$1(this);
},
 pass$0: function() {
  this.result = 'pass';
  this._complete$0();
},
 fail$2: function(messageText, stack) {
  var t1 = this.result;
  if (!(t1 == null)) {
    if (t1 === 'pass')
      this.error$2('Test failed after initially passing: ' + $.S(messageText), stack);
    else if (t1 === 'fail')
      this.error$2('Test failed more than once: ' + $.S(messageText), stack);
  } else {
    this.result = 'fail';
    this.message = messageText;
    this.stackTrace = stack;
    this._complete$0();
  }
},
 error$2: function(messageText, stack) {
  this.result = 'error';
  this.message = messageText;
  this.stackTrace = stack;
  this._complete$0();
},
 get$error: function() { return new $.BoundClosure1(this, 'error$2'); }
};

$$.MatchState = {"": ["state="],
 "super": "Object"
};

$$.BaseMatcher = {"": [],
 "super": "Object",
 describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
  return $.getInterceptor(mismatchDescription).add$1(mismatchDescription, 'was ').addDescriptionOf$1(item);
},
 is$Matcher: true
};

$$._EveryElement = {"": ["_matcher>"],
 "super": "_CollectionMatcher",
 _matcher$1: function(arg0) { return this._matcher.call$1(arg0); },
 matches$2: function(item, matchState) {
  var t1, i, t2;
  if (!(typeof item === 'object' && item !== null && (item.constructor === Array || item.is$Iterable())))
    return false;
  for (t1 = $.iterator(item), i = 0; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (this._matcher.matches$2(t2, matchState) !== true) {
      matchState.set$state($.makeLiteralMap(['index', i, 'element', t2, 'state', matchState.get$state()]));
      return false;
    }
    ++i;
  }
  return true;
},
 describe$1: function(description) {
  return $.getInterceptor(description).add$1(description, 'every element ').addDescriptionOf$1(this._matcher);
},
 describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
  var index, element, t1;
  if (!(matchState.get$state() == null)) {
    index = $.index(matchState.get$state(), 'index');
    element = $.index(matchState.get$state(), 'element');
    t1 = this._matcher.describeMismatch$4(element, mismatchDescription, $.index(matchState.get$state(), 'state'), verbose);
    return $.getInterceptor(t1).add$1(t1, ' at position ' + $.S(index));
  }
  return $._CollectionMatcher.prototype.describeMismatch$4.call(this, item, mismatchDescription, matchState, verbose);
}
};

$$._OrderedEquals = {"": ["_expected>", "_matcher>"],
 "super": "BaseMatcher",
 _matcher$1: function(arg0) { return this._matcher.call$1(arg0); },
 matches$2: function(item, matchState) {
  return typeof item === 'object' && item !== null && (item.constructor === Array || item.is$Iterable()) && this._matcher.matches$2(item, matchState) === true;
},
 describe$1: function(description) {
  var t1 = $.getInterceptor(description).add$1(description, 'equals ').addDescriptionOf$1(this._expected);
  return $.getInterceptor(t1).add$1(t1, ' ordered');
},
 describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
  if (!(typeof item === 'object' && item !== null && (item.constructor === Array || item.is$Iterable())))
    return $.getInterceptor(mismatchDescription).add$1(mismatchDescription, 'not an Iterable');
  else
    return this._matcher.describeMismatch$4(item, mismatchDescription, matchState, verbose);
},
 _OrderedEquals$1: function(_expected) {
  this._matcher = $.equals(this._expected, 1);
}
};

$$._UnorderedEquals = {"": ["_expected>"],
 "super": "BaseMatcher",
 _test$1: function(item) {
  var t1, expectedLength, t2, actualLength, matched, i, expectedPosition, t3, actualPosition, gotMatch, t4, reason;
  if (!(typeof item === 'object' && item !== null && (item.constructor === Array || item.is$Iterable())))
    return 'not iterable';
  t1 = this._expected;
  if (typeof t1 === 'object' && t1 !== null && (t1.constructor === Array || t1.is$Collection()))
    expectedLength = $.get$length(t1);
  else
    for (t2 = $.iterator(t1), expectedLength = 0; t2.get$hasNext() === true;) {
      t2.next$0();
      ++expectedLength;
    }
  if (typeof item === 'object' && item !== null && (item.constructor === Array || item.is$Collection()))
    actualLength = $.get$length(item);
  else
    for (t2 = $.iterator(item), actualLength = 0; t2.get$hasNext() === true;) {
      t2.next$0();
      ++actualLength;
    }
  if (typeof actualLength !== 'number')
    return this._test$1$bailout(1, item, actualLength, t1, expectedLength);
  if ($.gtB(expectedLength, actualLength))
    return 'has too few elements (' + $.S(actualLength) + ' < ' + $.S(expectedLength) + ')';
  else if ($.ltB(expectedLength, actualLength))
    return 'has too many elements (' + $.S(actualLength) + ' > ' + $.S(expectedLength) + ')';
  matched = $._ListImpl_List(actualLength);
  for (t2 = matched.length, i = 0; i < actualLength; ++i) {
    if (i >= t2)
      throw $.ioore(i);
    matched[i] = false;
  }
  for (t1 = $.iterator(t1), expectedPosition = 0; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    for (t3 = $.iterator(item), actualPosition = 0; gotMatch = false, t3.get$hasNext() === true;) {
      t4 = t3.next$0();
      if (actualPosition >= matched.length)
        throw $.ioore(actualPosition);
      if (matched[actualPosition] !== true)
        if ($.eqB(t2, t4)) {
          if (actualPosition >= matched.length)
            throw $.ioore(actualPosition);
          matched[actualPosition] = true;
          gotMatch = true;
          break;
        }
      ++actualPosition;
    }
    if (!gotMatch) {
      reason = $.StringDescription$('');
      t1 = $.getInterceptor(reason).add$1(reason, 'has no match for element ').addDescriptionOf$1(t2);
      $.getInterceptor(t1).add$1(t1, ' at position ' + $.S(expectedPosition));
      return reason.toString$0();
    }
    ++expectedPosition;
  }
  return;
},
 _test$1$bailout: function(state0, item, actualLength, t1, expectedLength) {
  var matched, i, expectedPosition, t2, t3, actualPosition, gotMatch, t4, reason;
  if ($.gtB(expectedLength, actualLength))
    return 'has too few elements (' + $.S(actualLength) + ' < ' + $.S(expectedLength) + ')';
  else if ($.ltB(expectedLength, actualLength))
    return 'has too many elements (' + $.S(actualLength) + ' > ' + $.S(expectedLength) + ')';
  matched = $._ListImpl_List(actualLength);
  for (i = 0; $.ltB(i, actualLength); ++i) {
    if (i >= matched.length)
      throw $.ioore(i);
    matched[i] = false;
  }
  for (t1 = $.iterator(t1), expectedPosition = 0; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    for (t3 = $.iterator(item), actualPosition = 0; gotMatch = false, t3.get$hasNext() === true;) {
      t4 = t3.next$0();
      if (actualPosition >= matched.length)
        throw $.ioore(actualPosition);
      if (matched[actualPosition] !== true)
        if ($.eqB(t2, t4)) {
          if (actualPosition >= matched.length)
            throw $.ioore(actualPosition);
          matched[actualPosition] = true;
          gotMatch = true;
          break;
        }
      ++actualPosition;
    }
    if (!gotMatch) {
      reason = $.StringDescription$('');
      t1 = $.getInterceptor(reason).add$1(reason, 'has no match for element ').addDescriptionOf$1(t2);
      $.getInterceptor(t1).add$1(t1, ' at position ' + $.S(expectedPosition));
      return reason.toString$0();
    }
    ++expectedPosition;
  }
  return;
},
 matches$2: function(item, mismatchState) {
  return this._test$1(item) == null;
},
 describe$1: function(description) {
  var t1 = $.getInterceptor(description).add$1(description, 'equals ').addDescriptionOf$1(this._expected);
  return $.getInterceptor(t1).add$1(t1, ' unordered');
},
 describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
  return $.getInterceptor(mismatchDescription).add$1(mismatchDescription, this._test$1(item));
}
};

$$._CollectionMatcher = {"": [],
 "super": "BaseMatcher",
 describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
  var t1;
  if (!(typeof item === 'object' && item !== null && (item.constructor === Array || item.is$Collection()))) {
    t1 = mismatchDescription.addDescriptionOf$1(item);
    return $.getInterceptor(t1).add$1(t1, ' not a collection');
  } else
    return $.BaseMatcher.prototype.describeMismatch$4.call(this, item, mismatchDescription, matchState, verbose);
}
};

$$._IsNull = {"": [],
 "super": "BaseMatcher",
 matches$2: function(item, matchState) {
  return item == null;
},
 describe$1: function(description) {
  return $.getInterceptor(description).add$1(description, 'null');
}
};

$$._IsNotNull = {"": [],
 "super": "BaseMatcher",
 matches$2: function(item, matchState) {
  return !(item == null);
},
 describe$1: function(description) {
  return $.getInterceptor(description).add$1(description, 'not null');
}
};

$$._IsTrue = {"": [],
 "super": "BaseMatcher",
 matches$2: function(item, matchState) {
  return $.eq(item, true);
},
 describe$1: function(description) {
  return $.getInterceptor(description).add$1(description, 'true');
}
};

$$._IsFalse = {"": [],
 "super": "BaseMatcher",
 matches$2: function(item, matchState) {
  return $.eq(item, false);
},
 describe$1: function(description) {
  return $.getInterceptor(description).add$1(description, 'false');
}
};

$$._IsSameAs = {"": ["_expected>"],
 "super": "BaseMatcher",
 matches$2: function(item, matchState) {
  var t1 = this._expected;
  return item == null ? t1 == null : item === t1;
},
 describe$1: function(description) {
  return $.getInterceptor(description).add$1(description, 'same instance as ').addDescriptionOf$1(this._expected);
}
};

$$._DeepMatcher = {"": ["_expected>", "_limit", "count"],
 "super": "BaseMatcher",
 count$0: function() { return this.count.call$0(); },
 count$1: function(arg0) { return this.count.call$1(arg0); },
 _compareIterables$4: function(expected, actual, matcher, depth) {
  var expectedIterator, actualIterator, position, reason, r;
  if (!(typeof actual === 'object' && actual !== null && (actual.constructor === Array || actual.is$Iterable())))
    return 'is not Iterable';
  expectedIterator = $.iterator(expected);
  actualIterator = $.iterator(actual);
  for (position = 0, reason = null; reason == null;)
    if (expectedIterator.get$hasNext() === true)
      if (actualIterator.get$hasNext() === true) {
        r = matcher.call$4(expectedIterator.next$0(), actualIterator.next$0(), 'mismatch at position ' + $.S(position), depth);
        if (!(r == null))
          reason = $.toString(r);
        ++position;
      } else
        reason = 'shorter than expected';
    else {
      if (actualIterator.get$hasNext() === true)
        ;
      else
        return;
      reason = 'longer than expected';
    }
  return reason;
},
 _recursiveMatch$4: function(expected, actual, location$, depth) {
  var t1, canRecurse, reason, r, t2, t3;
  if (typeof expected !== 'string' && (typeof expected !== 'object' || expected === null || expected.constructor !== Array && !expected.is$JavaScriptIndexingBehavior()))
    return this._recursiveMatch$4$bailout(1, expected, actual, location$, depth);
  if (depth !== 0) {
    t1 = this._limit;
    if (typeof t1 !== 'number')
      return this._recursiveMatch$4$bailout(2, expected, actual, location$, depth, t1);
    canRecurse = t1 > 1;
  } else
    canRecurse = true;
  if (expected === actual)
    reason = null;
  else {
    t1 = this._limit;
    if (typeof t1 !== 'number')
      return this._recursiveMatch$4$bailout(3, expected, actual, location$, depth, canRecurse, t1);
    if (depth > t1)
      reason = $.StringDescription$('recursion depth limit exceeded');
    else if (typeof expected === 'object' && expected !== null && (expected.constructor === Array || expected.is$Iterable()) && canRecurse) {
      r = this._compareIterables$4(expected, actual, this.get$_recursiveMatch(), depth + 1);
      reason = !(r == null) ? $.StringDescription$(r) : null;
    } else if (typeof expected === 'object' && expected !== null && expected.is$Map() && canRecurse)
      if (!(typeof actual === 'object' && actual !== null && actual.is$Map()))
        reason = $.StringDescription$('expected a map');
      else if (!(expected.length === $.get$length(actual)))
        reason = $.StringDescription$('different map lengths');
      else
        for (t1 = $.iterator(expected.get$keys()), t2 = depth + 1, reason = null; t1.get$hasNext() === true;) {
          t3 = t1.next$0();
          if (actual.containsKey$1(t3) !== true) {
            reason = $.StringDescription$('missing map key ');
            reason.addDescriptionOf$1(t3);
            break;
          }
          if (t3 !== (t3 | 0))
            throw $.iae(t3);
          if (t3 < 0 || t3 >= expected.length)
            throw $.ioore(t3);
          reason = this._recursiveMatch$4(expected[t3], actual.operator$index$1(t3), 'with key <' + $.S(t3) + '> ' + location$, t2);
          if (!(reason == null))
            break;
        }
    else {
      reason = $.StringDescription$('');
      if (depth > 1) {
        t1 = $.getInterceptor(reason).add$1(reason, 'expected ').addDescriptionOf$1(expected);
        $.getInterceptor(t1).add$1(t1, ' but was ').addDescriptionOf$1(actual);
      } else
        $.getInterceptor(reason).add$1(reason, 'was ').addDescriptionOf$1(actual);
    }
  }
  if (!(reason == null) && location$.length > 0) {
    t1 = $.getInterceptor(reason).add$1(reason, ' ');
    $.getInterceptor(t1).add$1(t1, location$);
  }
  return reason;
},
 _recursiveMatch$4$bailout: function(state0, env0, env1, env2, env3, env4, env5) {
  switch (state0) {
    case 1:
      depth = env3;
      location$ = env2;
      actual = env1;
      expected = env0;
      break;
    case 2:
      t1 = env4;
      depth = env3;
      location$ = env2;
      actual = env1;
      expected = env0;
      break;
    case 3:
      t1 = env5;
      canRecurse = env4;
      depth = env3;
      location$ = env2;
      actual = env1;
      expected = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
    case 2:
      if (state0 === 2 || state0 === 0 && depth !== 0)
        switch (state0) {
          case 0:
            t1 = this._limit;
          case 2:
            state0 = 0;
            canRecurse = $.gtB(t1, 1);
        }
      else
        canRecurse = true;
    case 3:
      var depth, location$, actual, expected, t1, canRecurse, reason, r, t2, t3;
      if (state0 === 0 && $.eqB(expected, actual))
        reason = null;
      else
        switch (state0) {
          case 0:
            t1 = this._limit;
          case 3:
            state0 = 0;
            if ($.gtB(depth, t1))
              reason = $.StringDescription$('recursion depth limit exceeded');
            else if (typeof expected === 'object' && expected !== null && (expected.constructor === Array || expected.is$Iterable()) && canRecurse) {
              r = this._compareIterables$4(expected, actual, this.get$_recursiveMatch(), depth + 1);
              reason = !(r == null) ? $.StringDescription$(r) : null;
            } else if (typeof expected === 'object' && expected !== null && expected.is$Map() && canRecurse)
              if (!(typeof actual === 'object' && actual !== null && actual.is$Map()))
                reason = $.StringDescription$('expected a map');
              else if (!$.eqB($.get$length(expected), $.get$length(actual)))
                reason = $.StringDescription$('different map lengths');
              else
                for (t1 = $.iterator(expected.get$keys()), t2 = depth + 1, reason = null; t1.get$hasNext() === true;) {
                  t3 = t1.next$0();
                  if (actual.containsKey$1(t3) !== true) {
                    reason = $.StringDescription$('missing map key ');
                    reason.addDescriptionOf$1(t3);
                    break;
                  }
                  reason = this._recursiveMatch$4($.index(expected, t3), actual.operator$index$1(t3), 'with key <' + $.S(t3) + '> ' + location$, t2);
                  if (!(reason == null))
                    break;
                }
            else {
              reason = $.StringDescription$('');
              if (depth > 1) {
                t1 = $.getInterceptor(reason).add$1(reason, 'expected ').addDescriptionOf$1(expected);
                $.getInterceptor(t1).add$1(t1, ' but was ').addDescriptionOf$1(actual);
              } else
                $.getInterceptor(reason).add$1(reason, 'was ').addDescriptionOf$1(actual);
            }
        }
      if (!(reason == null) && location$.length > 0) {
        t1 = $.getInterceptor(reason).add$1(reason, ' ');
        $.getInterceptor(t1).add$1(t1, location$);
      }
      return reason;
  }
},
 get$_recursiveMatch: function() { return new $.BoundClosure2(this, '_recursiveMatch$4'); },
 _match$2: function(expected, actual) {
  var reason = this._recursiveMatch$4(expected, actual, '', 0);
  return reason == null ? null : $.toString(reason);
},
 matches$2: function(item, matchState) {
  return this._match$2(this._expected, item) == null;
},
 describe$1: function(description) {
  return description.addDescriptionOf$1(this._expected);
},
 describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
  return $.getInterceptor(mismatchDescription).add$1(mismatchDescription, this._match$2(this._expected, item));
}
};

$$.Throws = {"": ["_matcher>"],
 "super": "BaseMatcher",
 _matcher$1: function(arg0) { return this._matcher.call$1(arg0); },
 matches$2: function(item, matchState, exception) {
  var t1, e, s;
  t1 = item;
  if (typeof t1 === 'object' && t1 !== null && !!t1.is$Future) {
    item.onComplete$1($.get$wrapAsync().call$1(new $.Throws_matches_anon(this)));
    return true;
  }
  try {
    item.call$0();
    return false;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = $.getTraceFromException(exception);
    t1 = this._matcher;
    if (t1 == null || t1.matches$2(e, matchState) === true)
      return true;
    else {
      t1 = $.makeLiteralMap(['exception', e, 'stack', s]);
      matchState.set$state(t1);
      return false;
    }
  }

},
 describe$1: function(description) {
  var t1 = this._matcher;
  if (t1 == null)
    return $.getInterceptor(description).add$1(description, 'throws an exception');
  else
    return $.getInterceptor(description).add$1(description, 'throws an exception which matches ').addDescriptionOf$1(t1);
},
 describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
  var t1, t2;
  t1 = this._matcher;
  t2 = t1 == null || matchState.get$state() == null;
  if (t2)
    return $.getInterceptor(mismatchDescription).add$1(mismatchDescription, ' no exception');
  else {
    $.getInterceptor(mismatchDescription).add$1(mismatchDescription, ' exception ').addDescriptionOf$1($.index(matchState.get$state(), 'exception'));
    if (verbose === true) {
      t2 = $.getInterceptor(mismatchDescription).add$1(mismatchDescription, ' at ');
      $.getInterceptor(t2).add$1(t2, $.toString($.index(matchState.get$state(), 'stack')));
    }
    $.getInterceptor(mismatchDescription).add$1(mismatchDescription, ' does not match ').addDescriptionOf$1(t1);
    return mismatchDescription;
  }
}
};

$$.TypeMatcher = {"": [],
 "super": "BaseMatcher",
 describe$1: function(description) {
  return $.getInterceptor(description).add$1(description, this._name);
}
};

$$._ArgumentError = {"": ["_name"],
 "super": "TypeMatcher",
 matches$2: function(item, matchState) {
  return typeof item === 'object' && item !== null && !!item.is$ArgumentError;
}
};

$$._NullPointerException = {"": ["_name"],
 "super": "TypeMatcher",
 matches$2: function(item, matchState) {
  return typeof item === 'object' && item !== null && !!item.is$NullPointerException;
}
};

$$._UnsupportedError = {"": ["_name"],
 "super": "TypeMatcher",
 matches$2: function(item, matchState) {
  return typeof item === 'object' && item !== null && !!item.is$UnsupportedError;
}
};

$$._Contains = {"": ["_expected>"],
 "super": "BaseMatcher",
 matches$2: function(item, matchState) {
  var t1;
  if (typeof item === 'string') {
    t1 = $.indexOf$1(item, this._expected);
    if (typeof t1 !== 'number')
      return this.matches$2$bailout(1, t1);
    return t1 >= 0;
  } else if (typeof item === 'object' && item !== null && (item.constructor === Array || item.is$Collection()))
    return $.some(item, new $._Contains_matches_anon(this));
  else if (typeof item === 'object' && item !== null && item.is$Map())
    return item.containsKey$1(this._expected);
  return false;
},
 matches$2$bailout: function(state0, env0) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      var t1;
      if (state0 === 1 || state0 === 0 && typeof item === 'string')
        switch (state0) {
          case 0:
            t1 = $.indexOf$1(item, this._expected);
          case 1:
            state0 = 0;
            return $.ge(t1, 0);
        }
      else if (typeof item === 'object' && item !== null && (item.constructor === Array || item.is$Collection()))
        return $.some(item, new $._Contains_matches_anon(this));
      else if (typeof item === 'object' && item !== null && item.is$Map())
        return item.containsKey$1(this._expected);
      return false;
  }
},
 describe$1: function(description) {
  return $.getInterceptor(description).add$1(description, 'contains ').addDescriptionOf$1(this._expected);
}
};

$$._Predicate = {"": ["_matcher>", "_description"],
 "super": "BaseMatcher",
 _matcher$1: function(arg0) { return this._matcher.call$1(arg0); },
 matches$2: function(item, matchState) {
  return this._matcher$1(item);
},
 describe$1: function(description) {
  return $.getInterceptor(description).add$1(description, this._description);
}
};

$$.StringDescription = {"": ["_out"],
 "super": "Object",
 toString$0: function() {
  return this._out;
},
 add$1: function(text) {
  this._out = $.S(this._out) + $.S(text);
  return this;
},
 addDescriptionOf$1: function(value) {
  var description, t1, t2;
  if (typeof value === 'object' && value !== null && !!value.is$Matcher)
    value.describe$1(this);
  else if (typeof value === 'string')
    this._addEscapedString$1(value);
  else {
    description = value == null ? 'null' : $.toString(value);
    t1 = $.getInterceptor(description).startsWith$1(description, '<') === true && $.getInterceptor(description).endsWith$1(description, '>') === true;
    t2 = this._out;
    if (t1)
      this._out = $.S(t2) + $.S(description);
    else {
      this._out = $.S(t2) + '<';
      this._out = $.S(this._out) + $.S(description);
      this._out = $.S(this._out) + '>';
    }
  }
  return this;
},
 _addEscapedString$1: function(string) {
  var t1, i, t2;
  this._out = $.S(this._out) + '\'';
  for (t1 = string.length, i = 0; i < t1; ++i) {
    t2 = this._escape$1(string[i]);
    this._out = $.S(this._out) + $.S(t2);
  }
  this._out = $.S(this._out) + '\'';
},
 _escape$1: function(ch) {
  if (typeof ch !== 'string')
    return this._escape$1$bailout(1, ch);
  if (ch === '\'')
    return '\'';
  else if (ch === '\n')
    return '\\n';
  else if (ch === '\r')
    return '\\r';
  else if (ch === '\x09')
    return '\\t';
  else
    return ch;
},
 _escape$1$bailout: function(state0, ch) {
  if ($.eqB(ch, '\''))
    return '\'';
  else if ($.eqB(ch, '\n'))
    return '\\n';
  else if ($.eqB(ch, '\r'))
    return '\\r';
  else if ($.eqB(ch, '\x09'))
    return '\\t';
  else
    return ch;
},
 StringDescription$1: function(init) {
  this._out = init;
}
};

$$.DefaultFailureHandler = {"": [],
 "super": "Object",
 fail$1: function(reason) {
  throw $.$$throw($.ExpectException$(reason));
},
 failMatch$5: function(actual, matcher, reason, matchState, verbose) {
  this.fail$1($._assertErrorFormatter.call$5(actual, matcher, reason, matchState, verbose));
},
 DefaultFailureHandler$0: function() {
  if ($._assertErrorFormatter == null)
    $._assertErrorFormatter = $._defaultErrorFormatter;
}
};

$$._IsCloseTo = {"": ["_value", "_delta"],
 "super": "BaseMatcher",
 matches$2: function(item, matchState) {
  var diff;
  if (typeof item !== 'number')
    return this.matches$2$bailout0(1, item);
  if (!(typeof item === 'number' && Math.floor(item) === item || typeof item === 'number'))
    return false;
  diff = item - this._value;
  if (diff < 0)
    diff = -diff;
  return diff <= this._delta;
},
 matches$2$bailout0: function(state0, item) {
  var diff;
  if (!(typeof item === 'number' && Math.floor(item) === item || typeof item === 'number'))
    return false;
  diff = $.sub(item, this._value);
  if ($.ltB(diff, 0))
    diff = $.neg(diff);
  return $.le(diff, this._delta);
},
 describe$1: function(description) {
  var t1 = $.getInterceptor(description).add$1(description, 'a numeric value within ').addDescriptionOf$1(this._delta);
  return $.getInterceptor(t1).add$1(t1, ' of ').addDescriptionOf$1(this._value);
},
 describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
  var t1, diff;
  if (!(typeof item === 'number')) {
    t1 = mismatchDescription.addDescriptionOf$1(item);
    return $.getInterceptor(t1).add$1(t1, ' not numeric');
  } else {
    diff = item - this._value;
    if (diff < 0)
      diff = -diff;
    t1 = mismatchDescription.addDescriptionOf$1(item);
    return $.getInterceptor(t1).add$1(t1, ' differed by ').addDescriptionOf$1(diff);
  }
}
};

$$._IsNot = {"": ["_matcher>"],
 "super": "BaseMatcher",
 _matcher$1: function(arg0) { return this._matcher.call$1(arg0); },
 matches$2: function(item, matchState) {
  return this._matcher.matches$2(item, matchState) !== true;
},
 describe$1: function(description) {
  return $.getInterceptor(description).add$1(description, 'not ').addDescriptionOf$1(this._matcher);
}
};

$$._TestParentElement = {"": ["_transforms", "cacheEnabled", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_liblib5$_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "ParentElement"
};

$$.Attachable = {"": ["name>"],
 "super": "Object"
};

$$.AttachableObject = {"": [],
 "super": "DisposableImpl",
 disposeInternal$0: function() {
  $.DisposableImpl.prototype.disposeInternal$0.call(this);
  var t1 = this._eventHandlers;
  $.getInterceptor(t1).forEach$1(t1, new $.AttachableObject_disposeInternal_anon());
  $.getInterceptor(t1).clear$0(t1);
},
 _addHandler$2: function(property, watcher) {
  var handle;
  this.validateNotDisposed$0();
  handle = this._eventHandlers.putIfAbsent$2(property, new $.AttachableObject__addHandler_anon());
  return $.getInterceptor(handle).add$1(handle, watcher);
},
 _removeHandler$2: function(property, handlerId) {
  var handle;
  this.validateNotDisposed$0();
  $.requireArgumentNotNull(handlerId, 'handlerId');
  handle = $.index(this._eventHandlers, property);
  if (!(handle == null))
    return handle.remove$1(handlerId);
  return false;
},
 _fireEvent$2: function(attachable, args) {
  var handle;
  this.validateNotDisposed$0();
  handle = $.index(this._eventHandlers, attachable);
  if (!(handle == null))
    handle.fireEvent$1(args);
},
 _set$2: function(key, value) {
  this.validateNotDisposed$0();
  $.indexSet(this._propertyValues, key, value);
  this._fireChange$1(key);
},
 get$_set: function() { return new $.BoundClosure3(this, '_set$2'); },
 _isSet$1: function(key) {
  this.validateNotDisposed$0();
  return this._propertyValues.containsKey$1(key);
},
 _remove$1: function(key) {
  this.validateNotDisposed$0();
  if (this._isSet$1(key) === true) {
    this._propertyValues.remove$1(key);
    this._fireChange$1(key);
  }
},
 _getValueOrUndefined$3: function(key, obj, ifAbsent) {
  var value;
  this.validateNotDisposed$0();
  if (this._isSet$1(key) === true)
    return $.index(this._propertyValues, key);
  else if (!(ifAbsent == null)) {
    value = ifAbsent.call$1(obj);
    this._set$2(key, value);
    return value;
  } else
    return $.CTC9;
},
 _fireChange$1: function(key) {
  var handle;
  this.validateNotDisposed$0();
  handle = $.index(this._eventHandlers, key);
  if (!(handle == null))
    handle.fireEvent$1(key);
}
};

$$.AttachedEvent = {"": ["name"],
 "super": "Attachable",
 addHandler$2: function(obj, handler) {
  return obj._addHandler$2(this, handler);
},
 removeHandler$2: function(obj, handlerId) {
  $.requireArgumentNotNull(obj, 'obj');
  return obj._removeHandler$2(this, handlerId);
},
 fireEvent$2: function(obj, args) {
  return obj._fireEvent$2(this, args);
}
};

$$.Property = {"": ["defaultValue", "name"],
 "super": "Attachable",
 get$2: function(obj, ifAbsent) {
  var coreValue = this.getCore$2(obj, ifAbsent);
  if (!(coreValue === $.CTC9))
    return coreValue;
  else
    return this.defaultValue;
},
 get$1: function(obj) {
  return this.get$2(obj,null)
},
 getCore$2: function(obj, ifAbsent) {
  return obj._getValueOrUndefined$3(this, obj, ifAbsent);
},
 getCore$1: function(obj) {
  return this.getCore$2(obj,null)
},
 set$2: function(obj, value) {
  obj._set$2(this, value);
},
 clear$1: function(obj) {
  return obj._remove$1(this);
},
 isSet$1: function(obj) {
  return obj._isSet$1(this);
},
 addHandler$2: function(obj, handler) {
  return obj._addHandler$2(this, handler);
},
 removeHandler$2: function(obj, handlerId) {
  return obj._removeHandler$2(this, handlerId);
},
 toString$0: function() {
  return 'Property \'' + $.S(this.name) + '\'';
}
};

$$._UndefinedValue = {"": [],
 "super": "Object"
};

$$.Array2d = {"": ["width>", "height>", "_source"],
 "super": "ListBase",
 get$length: function() {
  return $.get$length(this._source);
},
 operator$index$1: function(index) {
  var t1 = this._source;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.operator$index$1$bailout3(1, t1, index);
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 operator$index$1$bailout3: function(state0, t1, index) {
  return $.index(t1, index);
},
 oprator$indexSet$2: function(index, value) {
  $.indexSet(this._source, index, value);
},
 get$2: function(x, y) {
  return this.operator$index$1($.add(x, $.mul(y, this.width)));
},
 set$3: function(x, y, value) {
  var t1 = this.width;
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  this.oprator$indexSet$2(x + y * t1, value);
},
 getAdjacent$2: function(x, y) {
  var t1 = this.getAdjacentIndices$2(x, y);
  return $._ListImpl_List$from($.getInterceptor(t1).map$1(t1, new $.Array2d_getAdjacent_anon(this)));
},
 getAdjacentIndices$2: function(x, y) {
  var adj, k, t1, t2, t3, j, t4, t5;
  adj = $._ListImpl_List(null);
  for (k = $.max(0, y - 1), t1 = this.width, t2 = x + 2, t3 = x - 1; k < $.min(this.height, y + 2); ++k)
    for (j = $.max(0, t3), t4 = !(k === y); j < $.min(t1, t2); ++j)
      if (!(j === x) || t4) {
        t5 = $.getInterceptor(adj);
        if (typeof t1 !== 'number')
          throw $.iae(t1);
        t5.add$1(adj, j + k * t1);
      }
  return adj;
},
 Array2d$wrap$2: function(width, source) {
  var t1, t2;
  $.requireArgumentNotNull(width, 'width');
  $.requireArgumentNotNull(source, 'source');
  $.requireArgument($.ge(width, 0), 'width', 'width must be non-zero');
  t1 = $.eqB(width, 0);
  t2 = this._source;
  if (t1)
    $.requireArgument($.eq($.get$length(t2), 0), 'width', 'width must be greater than zero if the source is non-empty');
  else {
    $.requireArgument($.gt($.get$length(t2), 0), 'source', 'if width is non-zero, source must be non-empty');
    $.requireArgument($.eq($.mod($.get$length(t2), width), 0), 'width', 'width must evenly divide the source');
  }
}
};

$$.Enumerable = {"": [],
 "super": "Object",
 every$1: function(f) {
  var t1;
  $.requireArgumentNotNull(f, 'f');
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) !== true)
      return false;
  return true;
},
 contains$1: function(item) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), item))
      return true;
  return false;
},
 get$isEmpty: function() {
  return this.some$1(new $.Enumerable_isEmpty_anon()) !== true;
},
 some$1: function(f) {
  var t1;
  $.requireArgumentNotNull(f, 'f');
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
},
 count$1: function(f) {
  var t1, c;
  if (f == null)
    f = new $.Enumerable_count_anon();
  for (t1 = $.iterator(this), c = 0; t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      ++c;
  return c;
},
 count$0: function() {
  return this.count$1(null)
},
 join$1: function(separator) {
  var sb, t1, t2;
  sb = $.StringBuffer_StringBuffer('');
  for (t1 = $.iterator(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if ($.gtB($.get$length(sb), 0))
      $.getInterceptor(sb).add$1(sb, separator);
    $.getInterceptor(sb).add$1(sb, t2);
  }
  return $.toString(sb);
},
 join$0: function() {
  return this.join$1(', ')
},
 map$1: function(f) {
  $.requireArgumentNotNull(f, 'f');
  return $._FuncEnumerable$(this, new $.Enumerable_map_anon(f));
},
 filter$1: function(f) {
  $.requireArgumentNotNull(f, 'f');
  return $._FuncEnumerable$(this, new $.Enumerable_filter_anon(f));
},
 reduce$2: function(initialValue, combine) {
  return $.Collections_reduce(this, initialValue, combine);
},
 exclude$1: function(items) {
  $.requireArgumentNotNull(items, 'items');
  return $._FuncEnumerable$(this, new $.Enumerable_exclude_anon(new $.Enumerable_exclude_anon0($.$$(items))));
},
 selectMany$1: function(f) {
  $.requireArgumentNotNull(f, 'f');
  return $._FuncEnumerable$(this, new $.Enumerable_selectMany_anon(f));
},
 first$1: function(f) {
  var iter;
  if (f == null)
    f = new $.Enumerable_first_anon();
  iter = $._WhereIterator$(this.iterator$0(), f);
  if (iter.get$hasNext() !== true)
    throw $.$$throw($.CTC15);
  return iter.next$0();
},
 first$0: function() {
  return this.first$1(null)
},
 firstOrDefault$2: function(f, defaultValue) {
  var iter;
  if (f == null)
    f = new $.Enumerable_firstOrDefault_anon();
  iter = $._WhereIterator$(this.iterator$0(), f);
  if (iter.get$hasNext() !== true)
    return defaultValue;
  return iter.next$0();
},
 firstOrDefault$1: function(f) {
  return this.firstOrDefault$2(f,null)
},
 single$1: function(f) {
  var iter, value;
  if (f == null)
    f = new $.Enumerable_single_anon();
  iter = $._WhereIterator$(this.iterator$0(), f);
  if (iter.get$hasNext() !== true)
    throw $.$$throw($.CTC15);
  value = iter.next$0();
  if (iter.get$hasNext() === true)
    throw $.$$throw($.CTC14);
  return value;
},
 single$0: function() {
  return this.single$1(null)
},
 singleOrDefault$2: function(f, defaultValue) {
  var iter, value;
  if (f == null)
    f = new $.Enumerable_singleOrDefault_anon();
  iter = $._WhereIterator$(this.iterator$0(), f);
  if (iter.get$hasNext() !== true)
    return defaultValue;
  value = iter.next$0();
  if (iter.get$hasNext() === true)
    throw $.$$throw($.CTC14);
  return value;
},
 singleOrDefault$1: function(f) {
  return this.singleOrDefault$2(f,null)
},
 distinct$1: function(comparer) {
  var t1 = {};
  t1.comparer_1 = comparer;
  if (t1.comparer_1 == null)
    t1.comparer_1 = new $.Enumerable_distinct_anon();
  return $._FuncEnumerable$(this, new $.Enumerable_distinct_anon0(t1));
},
 distinct$0: function() {
  return this.distinct$1(null)
},
 aggregate$2: function(seed, f) {
  $.requireArgumentNotNull(f, 'f');
  return $.CollectionUtil_aggregate(this, seed, f);
},
 group$1: function(keyFunc) {
  return $.Grouping$(this, keyFunc);
},
 group$0: function() {
  return this.group$1(null)
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 forEachWithIndex$1: function(f) {
  var t1, i, t2, i0;
  for (t1 = $.iterator(this), i = 0; t1.get$hasNext() === true; i = i0) {
    t2 = t1.next$0();
    i0 = i + 1;
    f.call$2(t2, i);
  }
},
 toList$0: function() {
  return $._ListImpl_List$from(this);
},
 toHashSet$1: function(f) {
  if (f == null)
    return $.HashSet_HashSet$from(this);
  else
    return $.HashSet_HashSet$from($.getInterceptor(this).map$1(this, f));
},
 toHashSet$0: function() {
  return this.toHashSet$1(null)
},
 toHashMap$2: function(valueFunc, keyFunc) {
  var map, t1, t2, k;
  if (keyFunc == null)
    keyFunc = new $.Enumerable_toHashMap_anon();
  map = $.HashMap_HashMap();
  if (typeof map !== 'object' || map === null || (map.constructor !== Array || !!map.immutable$list) && !map.is$JavaScriptIndexingBehavior())
    return this.toHashMap$2$bailout(1, valueFunc, keyFunc, map);
  for (t1 = $.iterator(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    k = keyFunc.call$1(t2);
    if (map.containsKey$1(k) === true)
      throw $.$$throw($.UnsupportedError$('The key \'' + $.S(k) + '\' is duplicated'));
    t2 = valueFunc.call$1(t2);
    if (k !== (k | 0))
      throw $.iae(k);
    if (k < 0 || k >= map.length)
      throw $.ioore(k);
    map[k] = t2;
  }
  return map;
},
 toHashMap$2$bailout: function(state0, valueFunc, keyFunc, map) {
  var t1, t2, k;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    k = keyFunc.call$1(t2);
    if (map.containsKey$1(k) === true)
      throw $.$$throw($.UnsupportedError$('The key \'' + $.S(k) + '\' is duplicated'));
    $.indexSet(map, k, valueFunc.call$1(t2));
  }
  return map;
},
 toHashMap$1: function(valueFunc) {
  return this.toHashMap$2(valueFunc,null)
},
 selectNumbers$1: function(f) {
  $.requireArgumentNotNull(f, 'f');
  return $._FuncNumEnumerable$(this, new $.Enumerable_selectNumbers_anon(f));
},
 toString$0: function() {
  return '[' + $.S(this.join$0()) + ']';
},
 is$Enumerable: true,
 is$Iterable: function() { return true; }
};

$$._SimpleEnumerable = {"": ["_source"],
 "super": "Enumerable",
 iterator$0: function() {
  return $.iterator(this._source);
}
};

$$._FuncEnumerable = {"": ["_source", "_func"],
 "super": "Enumerable",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 iterator$0: function() {
  return this._func$1(this._source.iterator$0());
}
};

$$._SelectIterator = {"": ["_source", "_func"],
 "super": "Object",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 get$hasNext: function() {
  return this._source.get$hasNext();
},
 next$0: function() {
  return this._func$1(this._source.next$0());
}
};

$$._WhereIterator = {"": ["_source", "_func", "_liblib1$_next=", "_current>"],
 "super": "Object",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 get$hasNext: function() {
  if (this._liblib1$_next == null) {
    this._liblib1$_next = false;
    for (var t1 = this._source; t1.get$hasNext() === true;) {
      this._current = t1.next$0();
      if (this._func$1(this._current) === true) {
        this._liblib1$_next = true;
        break;
      }
    }
  }
  return this._liblib1$_next;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  this._liblib1$_next = null;
  return this._current;
}
};

$$._DistinctIterator = {"": ["_source", "_comparer", "_found", "_liblib1$_next=", "_current>"],
 "super": "Object",
 _comparer$2: function(arg0, arg1) { return this._comparer.call$2(arg0, arg1); },
 get$hasNext: function() {
  var t1, t2;
  if (this._liblib1$_next == null) {
    this._liblib1$_next = false;
    for (t1 = this._found, t2 = this._source; t2.get$hasNext() === true;) {
      this._current = t2.next$0();
      if ($.every(t1, new $._DistinctIterator_hasNext_anon(this)) === true) {
        this._liblib1$_next = true;
        $.getInterceptor(t1).add$1(t1, this._current);
        break;
      }
    }
  }
  return this._liblib1$_next;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  this._liblib1$_next = null;
  return this._current;
}
};

$$._SelectManyIterator = {"": ["_sourceIterator", "_func", "_outputIterator"],
 "super": "Object",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 get$hasNext: function() {
  var t1 = this._outputIterator;
  if (!(t1 == null))
    if (t1.get$hasNext() === true)
      return true;
    else
      this._outputIterator = null;
  t1 = this._sourceIterator;
  if (t1.get$hasNext() === true) {
    this._outputIterator = $.iterator(this._func$1(t1.next$0()));
    return this._outputIterator.get$hasNext();
  }
  return false;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  return this._outputIterator.next$0();
}
};

$$.Grouping = {"": ["_liblib1$_values"],
 "super": "Object",
 containsKey$1: function(key) {
  return this._liblib1$_values.containsKey$1(key);
},
 operator$index$1: function(key) {
  return $.index(this._liblib1$_values, key);
},
 forEach$1: function(f) {
  var t1 = this._liblib1$_values;
  return $.getInterceptor(t1).forEach$1(t1, f);
},
 getValues$0: function() {
  return $.$$(this._liblib1$_values.get$values()).selectMany$1(new $.Grouping_getValues_anon());
},
 get$length: function() {
  return $.get$length(this._liblib1$_values);
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._liblib1$_values);
},
 toString$0: function() {
  return $.toString(this._liblib1$_values);
},
 Grouping$2: function(source, keyFunc) {
  var t1, t2, t3, values;
  if (keyFunc == null)
    keyFunc = new $.anon2();
  for (t1 = $.iterator(source), t2 = this._liblib1$_values; t1.get$hasNext() === true;) {
    t3 = t1.next$0();
    values = t2.putIfAbsent$2(keyFunc.call$1(t3), new $.anon3());
    $.getInterceptor(values).add$1(values, t3);
  }
}
};

$$.IndexIterator = {"": ["_indexer", "_liblib1$_length", "_liblib1$_pos"],
 "super": "Object",
 get$hasNext: function() {
  return $.gt(this._liblib1$_length, this._liblib1$_pos);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var t1 = this._liblib1$_pos;
  this._liblib1$_pos = t1 + 1;
  return this._indexer$1(t1);
},
 _indexer$1: function(arg0) { return this._indexer.call$1(arg0); },
 IndexIterator$2: function(length$, indexer) {
  $.requireArgumentNotNull(this._indexer, '_indexer');
}
};

$$.ListBase = {"": [],
 "super": "Enumerable",
 iterator$0: function() {
  return $.IndexIterator$(this.get$length(), new $.ListBase_iterator_anon(this));
},
 forEach$1: function(f) {
  var i;
  for (i = 0; $.ltB(i, this.get$length()); ++i)
    f.call$1(this.operator$index$1(i));
},
 every$1: function(f) {
  var i;
  for (i = 0; $.ltB(i, this.get$length()); ++i)
    if (f.call$1(this.operator$index$1(i)) !== true)
      return false;
  return true;
},
 some$1: function(f) {
  var i;
  for (i = 0; $.ltB(i, this.get$length()); ++i)
    if (f.call$1(this.operator$index$1(i)) === true)
      return true;
  return false;
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 indexOf$2: function(element, start) {
  var i;
  if (typeof start !== 'number')
    return this.indexOf$2$bailout(1, element, start);
  for (i = start; $.ltB(i, this.get$length()); ++i)
    if ($.eqB(this.operator$index$1(i), element))
      return i;
  return -1;
},
 indexOf$2$bailout: function(state0, element, start) {
  var i;
  for (i = start; $.ltB(i, this.get$length()); i = $.add(i, 1))
    if ($.eqB(this.operator$index$1(i), element))
      return i;
  return -1;
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  var i, lastIndex, t1;
  if (start !== (start | 0))
    return this.lastIndexOf$2$bailout(1, element, start);
  i = start;
  lastIndex = -1;
  while (true) {
    t1 = this.get$length();
    if (typeof t1 !== 'number')
      return this.lastIndexOf$2$bailout(2, element, lastIndex, i, t1);
    if (!(i < t1))
      break;
    if ($.eqB(this.operator$index$1(i), element))
      lastIndex = i;
    ++i;
  }
  return lastIndex;
},
 lastIndexOf$2$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      start = env1;
      element = env0;
      break;
    case 2:
      t1 = env3;
      i = env2;
      lastIndex = env1;
      element = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      i = start;
      lastIndex = -1;
    case 2:
      var start, element, i, lastIndex, t1;
      L0:
        while (true)
          switch (state0) {
            case 0:
              t1 = this.get$length();
            case 2:
              state0 = 0;
              if (!$.ltB(i, t1))
                break L0;
              if ($.eqB(this.operator$index$1(i), element))
                lastIndex = i;
              i = $.add(i, 1);
          }
      return lastIndex;
  }
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,0)
},
 last$0: function() {
  return this.operator$index$1($.sub($.get$length(this), 1));
},
 get$last: function() { return new $.BoundClosure0(this, 'last$0'); },
 getRange$2: function(start, itemCount) {
  var lastIndex, list, i;
  if (typeof start !== 'number')
    return this.getRange$2$bailout(1, start, itemCount);
  $.requireArgument($.ge(itemCount, 0), 'count', null);
  if (typeof itemCount !== 'number')
    throw $.iae(itemCount);
  lastIndex = start + itemCount - 1;
  if (itemCount > 0)
    if (start < 0)
      throw $.$$throw($.RangeError$(start));
    else if ($.geB(lastIndex, this.get$length()))
      throw $.$$throw($.RangeError$(lastIndex));
  list = $._ListImpl_List(null);
  for (i = start; i <= lastIndex; ++i)
    $.getInterceptor(list).add$1(list, this.operator$index$1(i));
  return list;
},
 getRange$2$bailout: function(state0, start, itemCount) {
  var lastIndex, list, i;
  $.requireArgument($.ge(itemCount, 0), 'count', null);
  lastIndex = $.sub($.add(start, itemCount), 1);
  if ($.gtB(itemCount, 0))
    if ($.ltB(start, 0))
      throw $.$$throw($.RangeError$(start));
    else if ($.geB(lastIndex, this.get$length()))
      throw $.$$throw($.RangeError$(lastIndex));
  list = $._ListImpl_List(null);
  for (i = start; $.leB(i, lastIndex); i = $.add(i, 1))
    $.getInterceptor(list).add$1(list, this.operator$index$1(i));
  return list;
},
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
};

$$.NumberEnumerable = {"": [],
 "super": "Enumerable",
 sum$0: function() {
  var t1, theSum, t2;
  for (t1 = $.iterator(this), theSum = 0; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    theSum += t2;
  }
  return theSum;
},
 average$0: function() {
  var t1, theSum, theCount, t2;
  for (t1 = $.iterator(this), theSum = 0, theCount = 0; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (typeof t2 !== 'number')
      throw $.iae(t2);
    theSum += t2;
    ++theCount;
  }
  return theSum / theCount;
},
 max$0: function() {
  var t1, theMax, theMax0;
  for (t1 = $.iterator(this), theMax = null; t1.get$hasNext() === true;) {
    theMax0 = t1.next$0();
    theMax = theMax == null ? theMax0 : $.max(theMax, theMax0);
  }
  return theMax;
},
 min$0: function() {
  var t1, theMin, theMin0;
  for (t1 = $.iterator(this), theMin = null; t1.get$hasNext() === true;) {
    theMin0 = t1.next$0();
    theMin = theMin == null ? theMin0 : $.min(theMin, theMin0);
  }
  return theMin;
}
};

$$._SimpleNumEnumerable = {"": ["_source"],
 "super": "NumberEnumerable",
 iterator$0: function() {
  return $.iterator(this._source);
}
};

$$._FuncNumEnumerable = {"": ["_source", "_func"],
 "super": "NumberEnumerable",
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 _func$1: function(arg0) { return this._func.call$1(arg0); },
 iterator$0: function() {
  return this._func$1(this._source.iterator$0());
}
};

$$._RangeEnumerable = {"": ["_start", "_count"],
 "super": "NumberEnumerable",
 iterator$0: function() {
  return $._RangeIterator$(this._start, this._count);
}
};

$$._RangeIterator = {"": ["_start", "_count", "_current>"],
 "super": "Object",
 get$hasNext: function() {
  return this._current < this._count;
},
 next$0: function() {
  var t1, t2, val;
  t1 = this._start;
  t2 = this._current;
  val = t1 + t2;
  this._current = t2 + 1;
  return val;
}
};

$$.ReadOnlyCollection = {"": ["_items"],
 "super": "ListBase",
 get$length: function() {
  return this._items.length;
},
 operator$index$1: function(index) {
  var t1 = this._items;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
}
};

$$.HslColor = {"": ["h>", "s>", "l>"],
 "super": "Object",
 toRgb$0: function() {
  var normH, t1, b, g, r, t2, temp2, temp1;
  normH = $.div(this.h, 360);
  t1 = this.s;
  if (t1 === 0) {
    b = this.l * 255;
    g = b;
    r = g;
  } else {
    t2 = this.l;
    temp2 = t2 < 0.5 ? t2 * (1 + t1) : t2 + t1 - t1 * t2;
    temp1 = 2 * t2 - temp2;
    r = 255 * $.HslColor__hueToRgb(temp1, temp2, $.add(normH, 0.3333333333333333));
    g = 255 * $.HslColor__hueToRgb(temp1, temp2, normH);
    b = 255 * $.HslColor__hueToRgb(temp1, temp2, $.sub(normH, 0.3333333333333333));
  }
  return $.RgbColor_RgbColor($.toInt($.round(r)), $.toInt($.round(g)), $.toInt($.round(b)));
},
 get$hashCode: function() {
  return $.Util_getHashCode([this.h, this.s, this.l]);
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(other.get$h(), this.h) && $.eqB(other.get$s(), this.s) && $.eqB(other.get$l(), this.l);
},
 toString$0: function() {
  return '{HslColor: ' + $.S(this.h) + ', ' + $.S(this.s) + ', ' + $.S(this.l) + '}';
}
};

$$.RgbColor = {"": ["r>", "g>", "b>"],
 "super": "Object",
 toHex$0: function() {
  var buffer, t1;
  buffer = $.StringBuffer_StringBuffer('#');
  t1 = [this.r, this.g, this.b];
  $.getInterceptor(t1).forEach$1(t1, new $.RgbColor_toHex_anon(buffer));
  return $.toString(buffer);
},
 toHsl$0: function() {
  var normR, normG, normB, max, min, l, t1, h, t2, s;
  normR = $.div(this.r, 255);
  normG = $.div(this.g, 255);
  normB = $.div(this.b, 255);
  max = $.max(normR, $.max(normG, normB));
  min = $.min(normR, $.min(normG, normB));
  l = 0.5 * (max + min);
  if (!(max === min)) {
    if (max === normR) {
      t1 = $.sub(normG, normB);
      if (typeof t1 !== 'number')
        throw $.iae(t1);
      h = 60 * t1 / (max - min);
    } else if (max === normG) {
      t1 = $.sub(normB, normR);
      if (typeof t1 !== 'number')
        throw $.iae(t1);
      h = 60 * t1 / (max - min) + 120;
    } else if (max === normB) {
      t1 = $.sub(normR, normG);
      if (typeof t1 !== 'number')
        throw $.iae(t1);
      h = 60 * t1 / (max - min) + 240;
    } else
      h = 0;
    t1 = 0 < l && l <= 0.5;
    t2 = 2 * l;
    s = t1 ? (max - min) / t2 : $.min(1, (max - min) / (2 - t2));
  } else {
    s = 0;
    h = 0;
  }
  return $.HslColor_HslColor(h, s, l);
},
 get$hashCode: function() {
  return $.Util_getHashCode([this.r, this.g, this.b]);
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(other.get$r(), this.r) && $.eqB(other.get$g(), this.g) && $.eqB(other.get$b(), this.b);
},
 toString$0: function() {
  return '{RgbColor: ' + $.S(this.r) + ', ' + $.S(this.g) + ', ' + $.S(this.b) + '}';
}
};

$$.DisposableImpl = {"": [],
 "super": "Object",
 dispose$0: function() {
  if (!this._disposed) {
    this._disposed = true;
    this.disposeInternal$0();
  }
},
 validateNotDisposed$0: function() {
},
 disposeInternal$0: function() {
}
};

$$.EventArgs = {"": [],
 "super": "Object"
};

$$.EventHandle = {"": ["_handlers", "_disposed"],
 "super": "DisposableImpl",
 fireEvent$1: function(args) {
  var t1 = this._handlers;
  if (!(t1 == null))
    $.getInterceptor(t1).forEach$1(t1, new $.EventHandle_fireEvent_anon(args));
},
 add$1: function(handler) {
  var id, t1;
  id = $.GlobalId_GlobalId();
  if (this._handlers == null)
    this._handlers = $.HashMap_HashMap();
  t1 = this._handlers;
  if (typeof t1 !== 'object' || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.is$JavaScriptIndexingBehavior())
    return this.add$1$bailout1(1, handler, t1, id);
  if (id !== (id | 0))
    throw $.iae(id);
  if (id < 0 || id >= t1.length)
    throw $.ioore(id);
  t1[id] = handler;
  return id;
},
 add$1$bailout1: function(state0, handler, t1, id) {
  $.indexSet(t1, id, handler);
  return id;
},
 remove$1: function(id) {
  var t1 = this._handlers;
  if (!(t1 == null))
    return !(t1.remove$1(id) == null);
  else
    return false;
},
 disposeInternal$0: function() {
  $.DisposableImpl.prototype.disposeInternal$0.call(this);
  var t1 = this._handlers;
  if (!(t1 == null)) {
    $.getInterceptor(t1).clear$0(t1);
    this._handlers = null;
  }
}
};

$$.DetailedIllegalArgumentException = {"": ["argument", "message"],
 "super": "ArgumentError",
 toString$0: function() {
  var t1, t2, t3;
  t1 = this.message;
  t2 = t1 == null || $.eqB($.get$length(t1), 0);
  t3 = this.argument;
  if (t2)
    return 'Illegal argument: ' + $.S(t3);
  else
    return 'Illegal argument: ' + $.S(t3) + ' -- ' + $.S(t1);
}
};

$$.InvalidOperationException = {"": ["message>"],
 "super": "Object",
 is$InvalidOperationException: true,
 is$Exception: true
};

$$.NullArgumentException = {"": ["arg", "message"],
 "super": "ArgumentError",
 toString$0: function() {
  return 'Null argument: ' + $.S(this.arg);
},
 is$NullArgumentException: true
};

$$.GlobalId = {"": ["id>", "_hashCode"],
 "super": "Object",
 compareTo$1: function(other) {
  return $.compareTo(this.id, other.get$id());
},
 get$hashCode: function() {
  return this._hashCode;
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(other.get$id(), this.id);
}
};

$$.AffineTransform = {"": ["_m00>", "_m10>", "_m01>", "_m11>", "_m02>", "_m12>"],
 "super": "Object",
 get$scaleX: function() {
  return this._m00;
},
 get$scaleY: function() {
  return this._m11;
},
 get$translateX: function() {
  return this._m02;
},
 get$translateY: function() {
  return this._m12;
},
 get$shearX: function() {
  return this._m01;
},
 get$shearY: function() {
  return this._m10;
},
 get$determinant: function() {
  return $.sub($.mul(this._m00, this._m11), $.mul(this._m01, this._m10));
},
 get$isIdentity: function() {
  return $.eqB(this._m00, 1) && $.eqB(this._m10, 0) && $.eqB(this._m01, 0) && $.eqB(this._m11, 1) && $.eqB(this._m02, 0) && $.eqB(this._m12, 0);
},
 concatenate$1: function(tx) {
  var m0, m1, m00, m10;
  m0 = this._m00;
  m1 = this._m01;
  this._m00 = $.add($.mul(tx.get$_m00(), m0), $.mul(tx.get$_m10(), m1));
  this._m01 = $.add($.mul(tx.get$_m01(), m0), $.mul(tx.get$_m11(), m1));
  this._m02 = $.add(this._m02, $.add($.mul(tx.get$_m02(), m0), $.mul(tx.get$_m12(), m1)));
  m00 = this._m10;
  m10 = this._m11;
  this._m10 = $.add($.mul(tx.get$_m00(), m00), $.mul(tx.get$_m10(), m10));
  this._m11 = $.add($.mul(tx.get$_m01(), m00), $.mul(tx.get$_m11(), m10));
  this._m12 = $.add(this._m12, $.add($.mul(tx.get$_m02(), m00), $.mul(tx.get$_m12(), m10)));
  return this;
},
 get$concatenate: function() { return new $.BoundClosure(this, 'concatenate$1'); },
 rotate$3: function(theta, x, y) {
  return this.concatenate$1($.AffineTransform_AffineTransform$fromRotate(theta, x, y));
},
 translate$2: function(dx, dy) {
  var t1, t2, t3, t4, t5, t6;
  t1 = this._m02;
  t2 = this._m00;
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  t2 = dx * t2;
  t3 = this._m01;
  if (typeof t3 !== 'number')
    throw $.iae(t3);
  this._m02 = $.add(t1, t2 + dy * t3);
  t4 = this._m12;
  t5 = this._m10;
  if (typeof t5 !== 'number')
    throw $.iae(t5);
  t5 = dx * t5;
  t6 = this._m11;
  if (typeof t6 !== 'number')
    throw $.iae(t6);
  this._m12 = $.add(t4, t5 + dy * t6);
  return this;
},
 setToScale$2: function(sx, sy) {
  return this.setTransform$6(sx, 0, 0, sy, 0, 0);
},
 setToRotation$3: function(theta, x, y) {
  var cos, sin;
  cos = $.cos(theta);
  sin = $.sin(theta);
  return this.setTransform$6(cos, sin, -sin, cos, x - x * cos + y * sin, y - x * sin - y * cos);
},
 setTransform$6: function(m00, m10, m01, m11, m02, m12) {
  this._m00 = m00;
  this._m10 = m10;
  this._m01 = m01;
  this._m11 = m11;
  this._m02 = m02;
  this._m12 = m12;
  return this;
},
 transformCoordinate$1: function(point) {
  return $.Coordinate$($.add($.add($.mul(point.get$x(), this._m00), $.mul(point.get$y(), this._m01)), this._m02), $.add($.add($.mul(point.get$x(), this._m10), $.mul(point.get$y(), this._m11)), this._m12));
},
 createInverse$0: function() {
  var det = this.get$determinant();
  return $.AffineTransform$($.div(this._m11, det), $.div($.neg(this._m10), det), $.div($.neg(this._m01), det), $.div(this._m00, det), $.div($.sub($.mul(this._m01, this._m12), $.mul(this._m11, this._m02)), det), $.div($.sub($.mul(this._m10, this._m02), $.mul(this._m00, this._m12)), det));
},
 clone$0: function() {
  return $.AffineTransform$(this._m00, this._m10, this._m01, this._m11, this._m02, this._m12);
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this._m00, other.get$_m00()) && $.eqB(this._m01, other.get$_m01()) && $.eqB(this._m02, other.get$_m02()) && $.eqB(this._m10, other.get$_m10()) && $.eqB(this._m11, other.get$_m11()) && $.eqB(this._m12, other.get$_m12());
},
 toString$0: function() {
  var t1 = $.$$([this.get$translateX(), this.get$translateY(), this.get$scaleX(), this.get$scaleY(), this.get$shearX(), this.get$shearY()]);
  return $.Strings_join($.getInterceptor(t1).map$1(t1, new $.AffineTransform_toString_anon()).toList$0(), ', ');
}
};

$$.Coordinate = {"": ["x>", "y>"],
 "super": "Object",
 getDistance$1: function(other) {
  return $.get$length(this.operator$sub$1(other));
},
 get$isValid: function() {
  return $.isValidNumber(this.x) && $.isValidNumber(this.y);
},
 operator$sub$1: function(other) {
  return $.Vector$($.sub(this.x, other.get$x()), $.sub(this.y, other.get$y()));
},
 operator$add$1: function(other) {
  return $.Coordinate$($.add(this.x, other.get$x()), $.add(this.y, other.get$y()));
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this.x, other.get$x()) && $.eqB(this.y, other.get$y());
},
 toString$0: function() {
  return '{x:' + $.S(this.x) + ', y:' + $.S(this.y) + '}';
}
};

$$.Box = {"": ["left>", "top>", "width>", "height>"],
 "super": "Object",
 get$topLeft: function() {
  return $.Coordinate$(this.left, this.top);
},
 get$size: function() {
  return $.Size$(this.width, this.height);
},
 get$isValid: function() {
  return this.get$topLeft().get$isValid() === true && this.get$size().get$isValid() === true;
},
 contains$1: function(point) {
  var t1, t2;
  t1 = point.get$x();
  t2 = this.left;
  if ($.geB(t1, t2))
    if ($.leB(point.get$x(), $.add(t2, this.width))) {
      t1 = point.get$y();
      t2 = this.top;
      t1 = $.geB(t1, t2) && $.leB(point.get$y(), $.add(t2, this.height));
    } else
      t1 = false;
  else
    t1 = false;
  return t1;
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(other.get$left(), this.left) && $.eqB(other.get$top(), this.top) && $.eqB(other.get$width(), this.width) && $.eqB(other.get$height(), this.height);
},
 toString$0: function() {
  return 'Location: ' + $.S(this.get$topLeft()) + ', Size: ' + $.S(this.get$size());
},
 get$hashCode: function() {
  return $.Util_getHashCode([this.left, this.top, this.width, this.height]);
}
};

$$.Size = {"": ["width>", "height>"],
 "super": "Object",
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this.width, other.get$width()) && $.eqB(this.height, other.get$height());
},
 get$area: function() {
  return $.mul(this.width, this.height);
},
 isEmpty$0: function() {
  return $.eq(this.get$area(), 0);
},
 get$isEmpty: function() { return new $.BoundClosure0(this, 'isEmpty$0'); },
 get$isValid: function() {
  var t1, t2;
  t1 = this.width;
  if ($.isValidNumber(t1)) {
    t2 = this.height;
    t1 = $.isValidNumber(t2) && $.geB(t1, 0) && $.geB(t2, 0);
  } else
    t1 = false;
  return t1;
},
 scale$1: function(magnitude) {
  return $.Size$($.mul(this.width, magnitude), $.mul(this.height, magnitude));
},
 operator$mul$1: function(magnitude) {
  return this.scale$1(magnitude);
},
 toString$0: function() {
  return '(' + $.S(this.width) + ' x ' + $.S(this.height) + ')';
}
};

$$.TarjanCycleDetect = {"": ["_liblib1$_index", "_stack", "_scc", "_liblib1$_list"],
 "super": "Object",
 _executeTarjan$0: function() {
  var t1, t2;
  for (t1 = $.iterator($._ListImpl_List$from(this._liblib1$_list.getSourceNodeSet$0())); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if ($.eqB(t2.get$index(), -1))
      this._tarjan$1(t2);
  }
  return this._scc;
},
 _tarjan$1: function(v) {
  var t1, t3, t2, t4, component, n;
  v.set$index(this._liblib1$_index);
  v.set$lowlink(this._liblib1$_index);
  t1 = this._liblib1$_index;
  if (typeof t1 !== 'number')
    return this._tarjan$1$bailout(1, v, t1);
  this._liblib1$_index = t1 + 1;
  t3 = this._stack;
  $.insertRange$3(t3, 0, 1, v);
  for (t1 = $.iterator(this._liblib1$_list.getAdjacent$1(v)); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    t4 = t2.get$index();
    if (typeof t4 !== 'number')
      return this._tarjan$1$bailout(2, v, t3, t2, t4, t1);
    if (t4 === -1) {
      this._tarjan$1(t2);
      v.set$lowlink($.min(v.get$lowlink(), t2.get$lowlink()));
    } else {
      t4 = $.indexOf$1(t3, t2);
      if (typeof t4 !== 'number')
        return this._tarjan$1$bailout(3, v, t3, t2, t1, t4);
      if (t4 >= 0)
        v.set$lowlink($.min(v.get$lowlink(), t2.get$index()));
    }
  }
  if ($.eqB(v.get$lowlink(), v.get$index())) {
    component = $._ListImpl_List(null);
    do {
      if (0 >= t3.length)
        throw $.ioore(0);
      n = t3[0];
      $.removeRange(t3, 0, 1);
      $.getInterceptor(component).add$1(component, n.get$value());
    } while (!$.eqB(n, v));
    t1 = this._scc;
    $.getInterceptor(t1).add$1(t1, component);
  }
},
 _tarjan$1$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t1 = env1;
      v = env0;
      break;
    case 2:
      t1 = env4;
      t4 = env3;
      t2 = env2;
      t3 = env1;
      v = env0;
      break;
    case 3:
      t4 = env4;
      t1 = env3;
      t2 = env2;
      t3 = env1;
      v = env0;
      break;
  }
  switch (state0) {
    case 0:
      v.set$index(this._liblib1$_index);
      v.set$lowlink(this._liblib1$_index);
      t1 = this._liblib1$_index;
    case 1:
      state0 = 0;
      this._liblib1$_index = $.add(t1, 1);
      t3 = this._stack;
      $.insertRange$3(t3, 0, 1, v);
      t1 = $.iterator(this._liblib1$_list.getAdjacent$1(v));
    default:
      var t1, v, t3, t2, t4, component, n;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!(t1.get$hasNext() === true))
                break L0;
              t2 = t1.next$0();
              t4 = t2.get$index();
            case 2:
              state0 = 0;
            case 3:
              if (state0 === 0 && $.eqB(t4, -1)) {
                this._tarjan$1(t2);
                v.set$lowlink($.min(v.get$lowlink(), t2.get$lowlink()));
              } else
                switch (state0) {
                  case 0:
                    t4 = $.indexOf$1(t3, t2);
                  case 3:
                    state0 = 0;
                    if ($.geB(t4, 0))
                      v.set$lowlink($.min(v.get$lowlink(), t2.get$index()));
                }
          }
      if ($.eqB(v.get$lowlink(), v.get$index())) {
        component = $._ListImpl_List(null);
        do {
          if (0 >= t3.length)
            throw $.ioore(0);
          n = t3[0];
          $.removeRange(t3, 0, 1);
          $.getInterceptor(component).add$1(component, n.get$value());
        } while (!$.eqB(n, v));
        t1 = this._scc;
        $.getInterceptor(t1).add$1(t1, component);
      }
  }
}
};

$$._TarjanNode = {"": ["value>", "index=", "lowlink="],
 "super": "Object",
 get$hashCode: function() {
  return $.get$hashCode(this.value);
},
 operator$eq$1: function(other) {
  return $.eq(other.get$value(), this.value);
}
};

$$._TarjanList = {"": ["_nodes"],
 "super": "Object",
 getSourceNodeSet$0: function() {
  return this._nodes.get$keys();
},
 getAdjacent$1: function(v) {
  var nodes = $.index(this._nodes, v);
  if (nodes == null)
    return [];
  else
    return nodes;
}
};

$$.Vector = {"": ["x", "y"],
 "super": "Coordinate",
 get$length: function() {
  var t1, t2;
  t1 = this.x;
  t1 = $.mul(t1, t1);
  t2 = this.y;
  return $.sqrt($.add(t1, $.mul(t2, t2)));
},
 get$normal: function() {
  var t1 = $.get$length(this);
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  return this.scale$1(1 / t1);
},
 operator$add$1: function(other) {
  return $.Vector$($.add(this.x, other.get$x()), $.add(this.y, other.get$y()));
},
 operator$mul$1: function(magnitude) {
  return this.scale$1(magnitude);
},
 scale$1: function(magnitude) {
  return $.Vector$($.mul(this.x, magnitude), $.mul(this.y, magnitude));
},
 dot$1: function(other) {
  return $.add($.mul(this.x, other.x), $.mul(this.y, other.y));
},
 cross$1: function(other) {
  return $.sub($.mul(this.x, other.y), $.mul(this.y, other.x));
},
 rotate$1: function(angle) {
  var cos, sin, t1, t2, t3;
  cos = $.cos(angle);
  sin = $.sin(angle);
  t1 = this.x;
  t2 = $.mul(t1, cos);
  t3 = this.y;
  return $.Vector$($.sub(t2, $.mul(t3, sin)), $.add($.mul(t3, cos), $.mul(t1, sin)));
},
 rotateAroundPoint$2: function(axisPoint, angle) {
  return $.add(this.operator$sub$1(axisPoint).rotate$1(angle), axisPoint);
}
};

$$.Tuple = {"": ["item1>", "item2>"],
 "super": "Object",
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this.item1, other.get$item1()) && $.eqB(this.item2, other.get$item2());
},
 toString$0: function() {
  return '{item1: ' + $.S(this.item1) + ', item2: ' + $.S(this.item2) + '}';
},
 get$hashCode: function() {
  return $.Util_getHashCode([this.item1, this.item2]);
}
};

$$.Tuple3 = {"": ["item3>", "item1", "item2"],
 "super": "Tuple",
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this.item1, other.get$item1()) && $.eqB(this.item2, other.get$item2()) && $.eqB(this.item3, other.get$item3());
},
 toString$0: function() {
  return '{item1: ' + $.S(this.item1) + ', item2: ' + $.S(this.item2) + ', item3: ' + $.S(this.item3) + '}';
},
 get$hashCode: function() {
  return $.Util_getHashCode([this.item1, this.item2, this.item3]);
}
};

$$.ClickManager = {"": ["_stage", "_mouseDownElement"],
 "super": "Object",
 _mouseMove$1: function(e) {
  var t1, items, args;
  t1 = $.getMouseEventCoordinate(e);
  items = $.Mouse_markMouseOver(this._stage, t1);
  if ($.gtB($.get$length(items), 0)) {
    args = $.ElementMouseEventArgs_ElementMouseEventArgs($.index(items, 0), e);
    $.getInterceptor(items).forEach$1(items, new $.ClickManager__mouseMove_anon(args));
  }
},
 get$_mouseMove: function() { return new $.BoundClosure(this, '_mouseMove$1'); },
 _mouseOut$1: function(e) {
  var t1 = this._stage;
  $.Mouse_markMouseOver(t1, null);
  $.get$ClickManager__mouseOutEvent().fireEvent$2(t1, $.CTC10);
},
 get$_mouseOut: function() { return new $.BoundClosure(this, '_mouseOut$1'); },
 _mouseUp$1: function(e) {
  var t1, upElement;
  t1 = $.getMouseEventCoordinate(e);
  upElement = $.$$($.Mouse_markMouseOver(this._stage, t1)).firstOrDefault$1(new $.ClickManager__mouseUp_anon());
  if (!(upElement == null)) {
    this._doMouseUp$2(upElement, e);
    if ($.eqB(upElement, this._mouseDownElement))
      this._doClick$2(upElement, e);
    this._mouseDownElement = null;
  }
},
 get$_mouseUp: function() { return new $.BoundClosure(this, '_mouseUp$1'); },
 _mouseDown$1: function(e) {
  var coord, t1;
  coord = $.getMouseEventCoordinate(e);
  this._mouseDownElement = $.$$($.Mouse_markMouseOver(this._stage, coord)).firstOrDefault$1(new $.ClickManager__mouseDown_anon());
  t1 = this._mouseDownElement;
  if (!(t1 == null))
    this._doMouseDown$2(t1, e);
},
 get$_mouseDown: function() { return new $.BoundClosure(this, '_mouseDown$1'); },
 _doMouseDown$2: function(element, e) {
  var args = $.ElementMouseEventArgs_ElementMouseEventArgs(element, e);
  $.get$ClickManager__mouseDownEvent().fireEvent$2(element, args);
},
 _doMouseUp$2: function(element, e) {
  var args = $.ElementMouseEventArgs_ElementMouseEventArgs(element, e);
  $.get$ClickManager__mouseUpEvent().fireEvent$2(element, args);
},
 _doClick$2: function(element, e) {
  var args = $.ElementMouseEventArgs_ElementMouseEventArgs(element, e);
  $.get$ClickManager__clickEvent().fireEvent$2(element, args);
},
 ClickManager$_internal$1: function(_stage) {
  var t1, t2;
  t1 = this._stage;
  t2 = t1.get$_canvas().get$on().get$mouseMove();
  $.getInterceptor(t2).add$1(t2, this.get$_mouseMove());
  t2 = t1.get$_canvas().get$on().get$mouseOut();
  $.getInterceptor(t2).add$1(t2, this.get$_mouseOut());
  t2 = t1.get$_canvas().get$on().get$mouseUp();
  $.getInterceptor(t2).add$1(t2, this.get$_mouseUp());
  t2 = t1.get$_canvas().get$on().get$mouseDown();
  $.getInterceptor(t2).add$1(t2, this.get$_mouseDown());
}
};

$$.ElementMouseEventArgs = {"": ["element>", "shiftKey>"],
 "super": "EventArgs"
};

$$.Panel = {"": [],
 "super": "ParentElement",
 addElement$1: function(element) {
  this.insertAt$2(element, this._children.length);
},
 insertAt$2: function(element, index) {
  var t1;
  $.requireArgumentNotNull(element, 'element');
  $.requireArgument(element.get$parent() == null, 'element', 'element already has a parent');
  t1 = this._children;
  $.requireArgument($.contains$1(t1, element) !== true, 'element', 'Cannot add the same element twice');
  if (index == null)
    index = 0;
  element.registerParent$1(this);
  $.insertRange$3(t1, index, 1, element);
  $.get$Panel__containerTransformProperty().set$2(element, element.addTransform$0());
  this.onChildrenChanged$0();
},
 removeElement$1: function(element) {
  var t1, index, item;
  $.requireArgumentNotNull(element, 'element');
  t1 = this._children;
  index = $.indexOf$1(t1, element);
  if ($.ltB(index, 0))
    return false;
  else {
    item = $.getInterceptor(t1).removeAt$1(t1, index);
    item.unregisterParent$1(this);
    item.removeTransform$1($.get$Panel__containerTransformProperty().get$1(item));
    $.get$Panel__containerTransformProperty().clear$1(item);
    return true;
  }
},
 getVisualChild$1: function(index) {
  var t1 = this._children;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 get$visualChildCount: function() {
  return this._children.length;
}
};

$$.ParentElement = {"": [],
 "super": "PElement",
 onChildrenChanged$0: function() {
  this.invalidateDraw$0();
},
 childInvalidated$1: function(child) {
  this.invalidateDraw$0();
},
 is$ParentElement: true
};

$$.PCanvas = {"": ["_children", "background", "_transforms", "cacheEnabled", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_liblib5$_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "Panel"
};

$$.PElement = {"": ["_liblib5$_parent>"],
 "super": "AttachableObject",
 get$width: function() {
  return this._width;
},
 set$width: function(value) {
  this._width = value;
  this.invalidateDraw$0();
},
 get$height: function() {
  return this._height;
},
 set$height: function(value) {
  this._height = value;
  this.invalidateDraw$0();
},
 get$parent: function() {
  return this._liblib5$_parent;
},
 getTransform$0: function() {
  var tx, t1;
  tx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  t1 = this._transforms;
  $.getInterceptor(t1).forEach$1(t1, tx.get$concatenate());
  return tx;
},
 addTransform$0: function() {
  var tx, t1;
  this.validateNotDisposed$0();
  tx = $.AffineTransform$(1, 0, 0, 1, 0, 0);
  t1 = this._transforms;
  $.getInterceptor(t1).add$1(t1, tx);
  return tx;
},
 removeTransform$1: function(tx) {
  var t1, index;
  $.requireArgumentNotNull(tx, 'tx');
  t1 = this._transforms;
  index = $.indexOf$1(t1, tx);
  if ($.ltB(index, 0))
    return false;
  else {
    $.getInterceptor(t1).removeAt$1(t1, index);
    return true;
  }
},
 invalidateDraw$0: function() {
  this.validateNotDisposed$0();
  if (!(this._lastDrawSize == null)) {
    this._lastDrawSize = null;
    this._invalidateParent$0();
  }
},
 registerParent$1: function(parent$) {
  $.require(this._liblib5$_parent == null, 'parent already set');
  $.requireArgumentNotNull(parent$, 'parent');
  this._liblib5$_parent = parent$;
},
 unregisterParent$1: function(parent$) {
  $.requireArgumentNotNull(parent$, 'parent');
  $.requireArgument($.eq(parent$, this._liblib5$_parent), 'parent', null);
  this._liblib5$_parent = null;
},
 disposeInternal$0: function() {
  $.AttachableObject.prototype.disposeInternal$0.call(this);
  this._invalidatedEventHandle.dispose$0();
},
 _invalidateParent$0: function() {
  this._invalidatedEventHandle.fireEvent$1($.CTC10);
  this._liblib5$_parent.childInvalidated$1(this);
}
};

$$.Shape = {"": ["_fillStyle", "shapeType", "_transforms", "cacheEnabled", "_invalidatedEventHandle", "_cacheCanvas", "_width", "_height", "_alpha", "_lastDrawSize", "clip", "_liblib5$_parent", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "PElement",
 toString$0: function() {
  return 'Shape [' + $.S(this._fillStyle) + ', ' + $.S(this.shapeType.get$name()) + ']';
}
};

$$.ShapeType = {"": ["name>"],
 "super": "Object"
};

$$.Stage = {"": ["_invalidatedEventHandle", "_canvas>", "_liblib5$_element>", "_ctx", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "AttachableObject",
 get$rootElement: function() {
  return this._liblib5$_element;
},
 childInvalidated$1: function(child) {
  this.validateNotDisposed$0();
  this._invalidatedEventHandle.fireEvent$1($.CTC10);
},
 disposeInternal$0: function() {
  $.AttachableObject.prototype.disposeInternal$0.call(this);
  this._invalidatedEventHandle.dispose$0();
},
 Stage$2: function(_canvas, _element) {
  this._liblib5$_element.registerParent$1(this);
}
};

$$._TestValue = {"": ["_sendPort", "inputSerializer", "outputDeserializer", "_completer", "_innerFuture", "_input", "_future", "_output", "_pending", "_outputChangedHandle", "_inputChangedHandle", "_errorHandle"],
 "super": "SendPortValue"
};

$$._ComplexTestValue = {"": ["_sendPort", "inputSerializer", "outputDeserializer", "_completer", "_innerFuture", "_input", "_future", "_output", "_pending", "_outputChangedHandle", "_inputChangedHandle", "_errorHandle"],
 "super": "SendPortValue"
};

$$.FutureValue = {"": [],
 "super": "Object",
 set$input: function(value) {
  this._input = value;
  if (this._future == null)
    this._startFuture$0();
  else
    this._pending = true;
  this._inputChangedHandle.fireEvent$1($.CTC10);
},
 get$output: function() {
  return this._output;
},
 get$outputChanged: function() {
  return this._outputChangedHandle;
},
 get$error: function() {
  return this._errorHandle;
},
 error$2: function(arg0, arg1) { return this.get$error().call$2(arg0, arg1); },
 _startFuture$0: function() {
  this._future = this.getFuture$1(this._input);
  this._future.handleException$1(this.get$_futureException());
  this._future.then$1(this.get$_futureCompleted());
},
 _futureException$1: function(exception) {
  this._future = null;
  this._errorHandle.fireEvent$1(exception);
  this._cleanup$0();
  return true;
},
 get$_futureException: function() { return new $.BoundClosure(this, '_futureException$1'); },
 _futureCompleted$1: function(value) {
  this._future = null;
  this._output = value;
  this._outputChangedHandle.fireEvent$1($.CTC10);
  this._cleanup$0();
},
 get$_futureCompleted: function() { return new $.BoundClosure(this, '_futureCompleted$1'); },
 _cleanup$0: function() {
  if (this._pending) {
    this._pending = false;
    this._startFuture$0();
  }
}
};

$$.FutureValueResult = {"": ["value>", "exception>", "_outputSerializer"],
 "super": "Object",
 _outputSerializer$1: function(arg0) { return this._outputSerializer.call$1(arg0); },
 get$isException: function() {
  return !(this.exception == null);
},
 toMap$0: function() {
  return $.makeLiteralMap(['value', this._serialize$1(this.value), 'exception', this.exception]);
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(other.get$value(), this.value) && $.eqB(other.get$exception(), this.exception);
},
 _serialize$1: function(output) {
  if (this._outputSerializer == null)
    return output;
  else
    return this._outputSerializer$1(output);
},
 FutureValueResult$fromException$1: function(exception) {
  $.requireArgumentNotNull(this.exception, 'exception');
}
};

$$.SendPortValue = {"": [],
 "super": "FutureValue",
 inputSerializer$1: function(arg0) { return this.inputSerializer.call$1(arg0); },
 outputDeserializer$1: function(arg0) { return this.outputDeserializer.call$1(arg0); },
 getFuture$1: function(value) {
  var t1, t2;
  this._completer = $.Completer_Completer();
  t1 = this.inputSerializer == null;
  t2 = this._sendPort;
  if (t1)
    this._innerFuture = t2.call$1(value);
  else
    this._innerFuture = t2.call$1(this.inputSerializer$1(value));
  this._innerFuture.then$1(this.get$__futureCompleted());
  return this._completer.get$future();
},
 __futureCompleted$1: function(value) {
  this._innerFuture = null;
  if (typeof value === 'object' && value !== null && value.is$Map() && $.FutureValueResult_isMyMap(value))
    this._sendValueResultCompleted$1($.FutureValueResult_FutureValueResult$fromMap(value));
  else
    this._liblib4$_complete$1(value);
},
 get$__futureCompleted: function() { return new $.BoundClosure(this, '__futureCompleted$1'); },
 _sendValueResultCompleted$1: function(value) {
  if (value.get$isException() === true)
    this._completeException$1(value.get$exception());
  else
    this._liblib4$_complete$1(value.get$value());
},
 _liblib4$_complete$1: function(rawValue) {
  var c = this._completer;
  this._completer = null;
  c.complete$1(this._deserializer$1(rawValue));
},
 _completeException$1: function(exception) {
  var c = this._completer;
  this._completer = null;
  c.completeException$1(exception);
},
 _deserializer$1: function(input) {
  if (this.outputDeserializer == null)
    return input;
  else
    return this.outputDeserializer$1(input);
}
};

$$.SendValuePort = {"": ["_liblib4$_func", "inputDeserializer", "outputSerializer>"],
 "super": "Object",
 _liblib4$_func$1: function(arg0) { return this._liblib4$_func.call$1(arg0); },
 _liblib4$_func$1: function(arg0) { return this._liblib4$_func.call$1(arg0); },
 inputDeserializer$1: function(arg0) { return this.inputDeserializer.call$1(arg0); },
 _deserialize$1: function(input) {
  if (this.inputDeserializer == null)
    return input;
  else
    return this.inputDeserializer$1(input);
},
 SendValuePort$3$inputDeserializer$outputSerializer: function(_func, inputDeserializer, outputSerializer) {
  $.port().receive$1(new $.anon4(this));
}
};

$$.EventWatcher = {"": ["_lastArgs", "_eventCount"],
 "super": "Object",
 get$lastArgs: function() {
  return this._lastArgs;
},
 get$eventCount: function() {
  return this._eventCount;
},
 handler$1: function(args) {
  this._lastArgs = args;
  this._eventCount = this._eventCount + 1;
},
 get$handler: function() { return new $.BoundClosure(this, 'handler$1'); }
};

$$._InvalidOperationException = {"": ["_name"],
 "super": "TypeMatcher",
 matches$2: function(item, matchState) {
  return typeof item === 'object' && item !== null && !!item.is$InvalidOperationException;
}
};

$$._NullArgumentException = {"": ["_name"],
 "super": "TypeMatcher",
 matches$2: function(item, matchState) {
  return typeof item === 'object' && item !== null && !!item.is$NullArgumentException;
}
};

$$.TestCloneable = {"": ["_id>"],
 "super": "Object",
 clone$0: function() {
  return $.TestCloneable$internal(this._id);
},
 get$id: function() {
  return this._id;
},
 operator$eq$1: function(other) {
  return !(other == null) && $.eqB(this._id, other.get$_id());
},
 toString$0: function() {
  return 'TestCloneable: ' + $.S(this._id);
}
};

$$.TestEvents = {"": ["_testEventHandle"],
 "super": "Object",
 get$testEvent: function() {
  return this._testEventHandle;
},
 fireTestEvent$1: function(value) {
  this._testEventHandle.fireEvent$1(value);
}
};

$$.TestListBase = {"": ["flip"],
 "super": "ListBase",
 get$length: function() {
  return this.flip === true ? 10 : 5;
},
 operator$index$1: function(index) {
  if (typeof index !== 'number')
    return this.operator$index$1$bailout1(1, index);
  if (index < 5)
    return 5 - index;
  return index - 5 + 1;
},
 operator$index$1$bailout1: function(state0, index) {
  if ($.ltB(index, 5)) {
    if (typeof index !== 'number')
      throw $.iae(index);
    return 5 - index;
  }
  return $.add($.sub(index, 5), 1);
}
};

$$.TestPropertyEventIntegration = {"": ["_nameChangedEventHandle>", "_ageChangedEventHandle>", "_propertyValues", "_eventHandlers", "_disposed"],
 "super": "AttachableObject",
 get$name: function() {
  return $.get$TestPropertyEventIntegration__nameProperty().get$1(this);
},
 set$name: function(value) {
  $.get$TestPropertyEventIntegration__nameProperty().set$2(this, value);
},
 get$nameChanged: function() {
  return this._nameChangedEventHandle;
},
 get$age: function() {
  return $.get$TestPropertyEventIntegration__ageProperty().get$1(this);
},
 set$age: function(value) {
  $.get$TestPropertyEventIntegration__ageProperty().set$2(this, value);
},
 get$ageChanged: function() {
  return this._ageChangedEventHandle;
},
 reset$0: function() {
  $.get$TestPropertyEventIntegration__nameProperty().clear$1(this);
  $.get$TestPropertyEventIntegration__ageProperty().clear$1(this);
},
 TestPropertyEventIntegration$0: function() {
  $.get$TestPropertyEventIntegration__nameProperty().addHandler$2(this, new $.anon(this));
  $.get$TestPropertyEventIntegration__ageProperty().addHandler$2(this, new $.anon0(this));
}
};

$$.TestProperties = {"": ["_propertyValues", "_eventHandlers", "_disposed"],
 "super": "AttachableObject"
};

$$.TestAttachedEvents = {"": ["_propertyValues", "_eventHandlers", "_disposed"],
 "super": "AttachableObject"
};

$$.runAsyncTests_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('simple', $.TestSendPortValue__testSimple);
  $.test('complex', $.TestSendPortValue__testComplex);
  $.TestFutureValueResult_run();
}
};

$$.runBotTests_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.TestTuple_run();
  $.TestEnumerable_run();
  $.TestNumberEnumerable_run();
  $.TestListBase_run();
  $.TestCollectionUtil_run();
  $.TestArray2d_run();
  $.TestCoordinate_run();
  $.TestBox_run();
  $.TestVector_run();
  $.TestAffineTransform_run();
  $.TestUtil_run();
  $.test('Cloneable', $.TestCloneable__test);
  $.TestEvents_run();
  $.TestTarjanCycleDetect_run();
  $.TestRgbColor_run();
  $.TestHslColor_run();
  $.group('attached', new $.runBotTests__anon());
}
};

$$.runBotTests__anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.TestAttachedEvents_run();
  $.TestProperties_run();
  $.test('PropertyObject, EventHandle', $.TestPropertyEventIntegration_doTest);
}
};

$$.TestHslColor_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('Equals', $.TestHslColor__testEquals);
  $.test('Invalid', $.TestHslColor__testInvalid);
}
};

$$.TestRgbColor_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('Equals', $.TestRgbColor__testEquals);
  $.test('Invalid', $.TestRgbColor__testInvalid);
  $.test('HslColor round-trip', $.TestRgbColor__testHslRoundTrip);
  $.test('Hex round-trip', $.TestRgbColor__testHexRoundTrip);
  $.test('fromHex', $.TestRgbColor__testFromHex);
  $.test('invalid hex', $.TestRgbColor__testInvalidHex);
}
};

$$.TestTarjanCycleDetect_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('single item', $.TestTarjanCycleDetect__testSingle);
  $.test('5 isolated items', $.TestTarjanCycleDetect__test5Isolated);
  $.test('5 in a line', $.TestTarjanCycleDetect__test5Line);
  $.test('5 in a loop', $.TestTarjanCycleDetect__test5Loop);
  $.test('5 random', $.TestTarjanCycleDetect__test5Random);
  $.test('implied key', $.TestTarjanCycleDetect__testImpliedKey);
}
};

$$.TestEvents_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  var target, watcher, t1, eventId;
  target = $.TestEvents$();
  watcher = $.EventWatcher$();
  $.expect(watcher.get$lastArgs(), $.CTC6, null, null, false);
  target.fireTestEvent$1('bar');
  $.expect(watcher.get$lastArgs(), $.CTC6, null, null, false);
  t1 = target.get$testEvent();
  eventId = $.getInterceptor(t1).add$1(t1, watcher.get$handler());
  target.fireTestEvent$1('bar');
  $.expect(watcher.get$lastArgs(), $.equals('bar', 100), null, null, false);
  target.fireTestEvent$1('foo');
  $.expect(watcher.get$lastArgs(), $.equals('foo', 100), null, null, false);
  $.expect(target.get$testEvent().remove$1(eventId), $.CTC7, null, null, false);
  $.expect(target.get$testEvent().remove$1(eventId), $.CTC, null, null, false);
  target.fireTestEvent$1('bar');
  $.expect(watcher.get$lastArgs(), $.equals('foo', 100), null, null, false);
}
};

$$.Maps__emitMap_anon = {"": ["box_0", "visiting_3", "result_2"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1, t2;
  t1 = this.box_0;
  if (t1.first_1 !== true) {
    t2 = this.result_2;
    $.getInterceptor(t2).add$1(t2, ', ');
  }
  t1.first_1 = false;
  t1 = this.result_2;
  t2 = this.visiting_3;
  $.Collections__emitObject(k, t1, t2);
  $.getInterceptor(t1).add$1(t1, ': ');
  $.Collections__emitObject(v, t1, t2);
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": ["copies_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, length$, i, t2;
  t1 = this.values_2;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout0(1, value, t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.getInterceptor(t1).add$1(t1, value);
  t1 = this.copies_3;
  $.getInterceptor(t1).add$1(t1, null);
  return length$;
},
 call$1$bailout0: function(state0, value, t1) {
  var length$, i, t2;
  length$ = $.get$length(t1);
  for (i = 0; $.ltB(i, length$); ++i) {
    t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.getInterceptor(t1).add$1(t1, value);
  t1 = this.copies_3;
  $.getInterceptor(t1).add$1(t1, null);
  return length$;
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_4, i);
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_5, i, x);
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": [],
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": ["findSlot_8", "writeSlot_7", "readSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1, slot, t2, length$, copy, t3, i, element, elementCopy, j, t4;
  t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.UnimplementedError$('structured clone of Date'));
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
  if (typeof e === 'object' && e !== null && e.is$File())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    return e;
  if (typeof e === 'object' && e !== null && e.is$_FileList())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    slot = this.findSlot_8.call$1(e);
    t1.copy_1 = this.readSlot_6.call$1(slot);
    t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_7.call$2(slot, t1.copy_1);
    $.getInterceptor(e).forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    length$ = e.length;
    slot = this.findSlot_8.call$1(e);
    t2 = this.readSlot_6;
    copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_7.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    t3 = this.writeSlot_7;
    if (t1) {
      t3.call$2(slot, true);
      for (i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        element = e[i];
        elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy = t2.call$1(slot);
          if (true === copy) {
            copy = new Array(length$);
            t3.call$2(slot, copy);
          }
          if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(2, e, t3, elementCopy, length$, i, copy, slot);
          for (t1 = e.length, t2 = copy.length, j = 0; j < i; ++j) {
            if (j >= t1)
              throw $.ioore(j);
            t4 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy[j] = t4;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy[i] = elementCopy;
          ++i;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(3, e, copy, length$, i);
    for (; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.UnimplementedError$('structured clone of other type'));
},
 call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      slot = env6;
      copy = env5;
      i = env4;
      length$ = env3;
      elementCopy = env2;
      t3 = env1;
      e = env0;
      break;
    case 3:
      i = env3;
      length$ = env2;
      copy = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.UnimplementedError$('structured clone of Date'));
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
      if (typeof e === 'object' && e !== null && e.is$File())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        return e;
      if (typeof e === 'object' && e !== null && e.is$_FileList())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        slot = this.findSlot_8.call$1(e);
        t1.copy_1 = this.readSlot_6.call$1(slot);
        t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_7.call$2(slot, t1.copy_1);
        $.getInterceptor(e).forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
        return t1.copy_1;
      }
    default:
      var t1, slot, t2, e, length$, copy, t3, i, element, elementCopy, j;
      if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            length$ = $.get$length(e);
            slot = this.findSlot_8.call$1(e);
            t2 = this.readSlot_6;
            copy = t2.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_7.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            t3 = this.writeSlot_7;
          case 2:
            if (state0 === 2 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t3.call$2(slot, true);
                  i = 0;
                case 2:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          element = $.index(e, i);
                          elementCopy = this.call$1(element);
                        case 2:
                          if (state0 === 2 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy = t2.call$1(slot);
                                if (true === copy) {
                                  copy = new Array(length$);
                                  t3.call$2(slot, copy);
                                }
                              case 2:
                                state0 = 0;
                                for (j = 0; j < i; ++j)
                                  $.indexSet(copy, j, $.index(e, j));
                                $.indexSet(copy, i, elementCopy);
                                ++i;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t3.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t3.call$2(slot, copy);
              i = 0;
            }
          case 3:
            state0 = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.UnimplementedError$('structured clone of other type'));
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": ["box_0", "walk_9"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.Storage_keys_anon = {"": ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.keys_0;
  return $.getInterceptor(t1).add$1(t1, k);
}
};

$$.DoubleLinkedQueue_length_anon = {"": ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.add(t1.counter_1, 1);
}
};

$$._HashMapImpl_keys_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_1;
  t2.i_1 = $.add(t3, 1);
  $.indexSet(t1, t3, key);
}
};

$$._LinkedHashMapImpl_forEach_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$._LinkedHashMapImpl_keys_anon = {"": ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_1;
  t2.index_1 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$key());
}
};

$$.NoSuchMethodError_toString_anon = {"": ["box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2;
  t1 = this.box_0;
  if ($.gtB(t1.i_2, 0)) {
    t2 = t1.sb_1;
    $.getInterceptor(t2).add$1(t2, ', ');
  }
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, key);
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, ': ');
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, $.NoSuchMethodError_safeToString(value));
  t1.i_2 = $.add(t1.i_2, 1);
}
};

$$.invokeClosure_anon = {"": ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"": ["closure_2", "arg1_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_2.call$1(this.arg1_1);
}
};

$$.invokeClosure_anon1 = {"": ["arg2_5", "arg1_4", "closure_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_3.call$2(this.arg1_4, this.arg2_5);
}
};

$$._DateImpl_toString_fourDigits = {"": [],
 "super": "Closure",
 call$1: function(n) {
  var absN, sign;
  absN = $.abs(n);
  sign = $.ltB(n, 0) ? '-' : '';
  if ($.geB(absN, 1000))
    return $.S(n);
  if ($.geB(absN, 100))
    return sign + '0' + $.S(absN);
  if ($.geB(absN, 10))
    return sign + '00' + $.S(absN);
  return sign + '000' + $.S(absN);
}
};

$$._DateImpl_toString_threeDigits = {"": [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 100))
    return $.S(n);
  if ($.geB(n, 10))
    return '0' + $.S(n);
  return '00' + $.S(n);
}
};

$$._DateImpl_toString_twoDigits = {"": [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 10))
    return $.S(n);
  return '0' + $.S(n);
}
};

$$.EventHandle_fireEvent_anon = {"": ["args_0"],
 "super": "Closure",
 call$2: function(id, handler) {
  handler.call$1(this.args_0);
}
};

$$.TestUtil_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
}
};

$$.TestAffineTransform_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('identity', new $.TestAffineTransform_run__anon());
  $.test('concatenate', new $.TestAffineTransform_run__anon0());
  $.test('rotate', new $.TestAffineTransform_run__anon1());
  $.test('translate', new $.TestAffineTransform_run__anon2());
  $.test('createInverse', new $.TestAffineTransform_run__anon3());
  $.test('equals and clone', new $.TestAffineTransform_run__anon4());
}
};

$$.TestAffineTransform_run__anon = {"": [],
 "super": "Closure",
 call$0: function() {
  var tx = $.AffineTransform$(1, 2, 3, 4, 5, 6);
  $.expect(tx.get$isIdentity(), $.CTC, null, null, false);
  tx.setTransform$6(1, 0, 0, 1, 0, 0);
  $.expect(tx.get$isIdentity(), $.CTC7, null, null, false);
  $.expect($.AffineTransform$(1, 0, 0, 1, 0, 0).get$isIdentity(), $.CTC7, null, null, false);
}
};

$$.TestAffineTransform_run__anon0 = {"": [],
 "super": "Closure",
 call$0: function() {
  var tx = $.AffineTransform$(1, 2, 3, 4, 5, 6);
  tx.concatenate$1($.AffineTransform$(2, 1, 6, 5, 4, 3));
  $.expect(tx.get$scaleX(), $.equals(5, 100), null, null, false);
  $.expect(tx.get$shearY(), $.equals(8, 100), null, null, false);
  $.expect(tx.get$shearX(), $.equals(21, 100), null, null, false);
  $.expect(tx.get$scaleY(), $.equals(32, 100), null, null, false);
  $.expect(tx.get$translateX(), $.equals(18, 100), null, null, false);
  $.expect(tx.get$translateY(), $.equals(26, 100), null, null, false);
}
};

$$.TestAffineTransform_run__anon1 = {"": [],
 "super": "Closure",
 call$0: function() {
  var tx = $.AffineTransform$(1, 2, 3, 4, 5, 6);
  tx.rotate$3(1.5707963267948966, 1, 1);
  $.expect(tx.get$scaleX(), $.closeTo(3, 0.001), null, null, false);
  $.expect(tx.get$shearY(), $.closeTo(4, 0.001), null, null, false);
  $.expect(tx.get$shearX(), $.closeTo(-1, 0.001), null, null, false);
  $.expect(tx.get$scaleY(), $.closeTo(-2, 0.001), null, null, false);
  $.expect(tx.get$translateX(), $.closeTo(7, 0.001), null, null, false);
  $.expect(tx.get$translateY(), $.closeTo(10, 0.001), null, null, false);
}
};

$$.TestAffineTransform_run__anon2 = {"": [],
 "super": "Closure",
 call$0: function() {
  var tx = $.AffineTransform$(1, 2, 3, 4, 5, 6);
  tx.translate$2(2, 3);
  $.expect(tx.get$scaleX(), $.equals(1, 100), null, null, false);
  $.expect(tx.get$shearY(), $.equals(2, 100), null, null, false);
  $.expect(tx.get$shearX(), $.equals(3, 100), null, null, false);
  $.expect(tx.get$scaleY(), $.equals(4, 100), null, null, false);
  $.expect(tx.get$translateX(), $.equals(16, 100), null, null, false);
  $.expect(tx.get$translateY(), $.equals(22, 100), null, null, false);
}
};

$$.TestAffineTransform_run__anon3 = {"": [],
 "super": "Closure",
 call$0: function() {
  var tx, inverse;
  tx = $.AffineTransform_AffineTransform$fromScale(2, 3);
  tx.translate$2(5, 10);
  tx.rotate$3(0.7853981633974483, 5, 10);
  inverse = tx.createInverse$0();
  $.expect(inverse.get$scaleX(), $.closeTo(0.353553, 0.001), null, null, false);
  $.expect(inverse.get$shearY(), $.closeTo(-0.353553, 0.001), null, null, false);
  $.expect(inverse.get$shearX(), $.closeTo(0.235702, 0.001), null, null, false);
  $.expect(inverse.get$scaleY(), $.closeTo(0.235702, 0.001), null, null, false);
  $.expect(inverse.get$translateX(), $.closeTo(-16.213203, 0.001), null, null, false);
  $.expect(inverse.get$translateY(), $.closeTo(2.928932, 0.001), null, null, false);
}
};

$$.TestAffineTransform_run__anon4 = {"": [],
 "super": "Closure",
 call$0: function() {
  var val, val2, val3, clone;
  val = $.AffineTransform$(1, 2, 3, 4, 5, 6);
  $.expect(val, $.equals(val, 100), null, null, false);
  $.expect(val, $.same(val), null, null, false);
  val2 = $.AffineTransform$(7, 8, 9, 10, 11, 12);
  $.expect(val2, $.isNot($.equals(val, 100)), null, null, false);
  $.expect(val2, $.isNot($.same(val)), null, null, false);
  val3 = $.AffineTransform$(1, 2, 3, 4, 5, 6);
  $.expect(val3, $.equals(val, 100), null, null, false);
  $.expect(val3, $.isNot($.same(val)), null, null, false);
  clone = val.clone$0();
  $.expect(clone, $.equals(val, 100), null, null, false);
  $.expect(val, $.isNot($.same(clone)), null, null, false);
  $.expect(val3, $.equals(clone, 100), null, null, false);
  $.expect(clone, $.isNot($.same(val3)), null, null, false);
}
};

$$.TestVector_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('should be sum with other Vector', new $.TestVector_run__anon());
  $.test('should be subtract by other Vector', new $.TestVector_run__anon0());
  $.test('should scale by another number', new $.TestVector_run__anon1());
  $.test('should be compared by other Vector', new $.TestVector_run__anon2());
  $.test('should obey const equality', new $.TestVector_run__anon3());
  $.test('should get length of the vector', new $.TestVector_run__anon4());
  $.test('should calc the dot product', new $.TestVector_run__anon5());
  $.test('should calc the cross product', new $.TestVector_run__anon6());
  $.test('should have valid normal', new $.TestVector_run__anon7());
  $.test('rotate', new $.TestVector_run__anon8());
  $.test('rotateAroundPoint', new $.TestVector_run__anon9());
}
};

$$.TestVector_run__anon = {"": [],
 "super": "Closure",
 call$0: function() {
  var v = $.Vector$(1, 1).operator$add$1($.Vector$(2, 1));
  $.Expect_equals(3, v.get$x(), null);
  $.Expect_equals(2, v.get$y(), null);
}
};

$$.TestVector_run__anon0 = {"": [],
 "super": "Closure",
 call$0: function() {
  var v = $.Vector$(5, 3).operator$sub$1($.Vector$(2, 1));
  $.Expect_equals(3, v.get$x(), null);
  $.Expect_equals(2, v.get$y(), null);
}
};

$$.TestVector_run__anon1 = {"": [],
 "super": "Closure",
 call$0: function() {
  var v = $.Vector$(2, 3).operator$mul$1(5);
  $.Expect_equals(10, v.get$x(), null);
  $.Expect_equals(15, v.get$y(), null);
}
};

$$.TestVector_run__anon2 = {"": [],
 "super": "Closure",
 call$0: function() {
  $.expect($.Vector$(2, 2), $.equals($.Vector$(2, 2), 100), null, null, false);
  $.expect($.Vector$(2, 1), $.isNot($.equals($.Vector$(2, 2), 100)), null, null, false);
}
};

$$.TestVector_run__anon3 = {"": [],
 "super": "Closure",
 call$0: function() {
  $.expect($.Vector$(2, 2), $.Vector$(2, 2), null, null, false);
  $.expect($.CTC25, $.same($.CTC25), null, null, false);
}
};

$$.TestVector_run__anon4 = {"": [],
 "super": "Closure",
 call$0: function() {
  $.Expect_equals(5, $.get$length($.Vector$(3, 4)), null);
}
};

$$.TestVector_run__anon5 = {"": [],
 "super": "Closure",
 call$0: function() {
  $.Expect_equals(23, $.Vector$(2, 3).dot$1($.Vector$(4, 5)), null);
}
};

$$.TestVector_run__anon6 = {"": [],
 "super": "Closure",
 call$0: function() {
  $.Expect_equals(-2, $.Vector$(2, 3).cross$1($.Vector$(4, 5)), null);
}
};

$$.TestVector_run__anon7 = {"": [],
 "super": "Closure",
 call$0: function() {
  var n = $.Vector$(4, 4);
  $.expect($.get$length(n), $.closeTo(5.656854249492381, 0.001), null, null, false);
  $.expect($.get$length(n.get$normal()), $.closeTo(1, 0.001), null, null, false);
}
};

$$.TestVector_run__anon8 = {"": [],
 "super": "Closure",
 call$0: function() {
  var a = $.CTC23.rotate$1(1.5707963267948966);
  $.expect(a.get$x(), $.closeTo(1, 0.000001), null, null, false);
  $.expect(a.get$y(), $.closeTo(1, 0.000001), null, null, false);
  a = a.rotate$1(-3.141592653589793);
  $.expect(a.get$x(), $.closeTo(-1, 0.000001), null, null, false);
  $.expect(a.get$y(), $.closeTo(-1, 0.000001), null, null, false);
}
};

$$.TestVector_run__anon9 = {"": [],
 "super": "Closure",
 call$0: function() {
  var a = $.CTC23.rotateAroundPoint$2($.CTC24, 1.5707963267948966);
  $.expect(a.get$x(), $.closeTo(2, 0.000001), null, null, false);
  $.expect(a.get$y(), $.closeTo(0, 0.000001), null, null, false);
}
};

$$.TestBox_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('equals', $.TestBox__testEquals);
  $.test('size and location', $.TestBox__testSizeLocation);
  $.test('isValid', $.TestBox__testValid);
}
};

$$.TestCoordinate_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('should be subtract by other Coordinate', new $.TestCoordinate_run__anon());
  $.test('should be compared by other Coordinate', new $.TestCoordinate_run__anon0());
  $.test('should obey const equality', new $.TestCoordinate_run__anon1());
  $.test('should get the distance to another point', new $.TestCoordinate_run__anon2());
}
};

$$.TestCoordinate_run__anon = {"": [],
 "super": "Closure",
 call$0: function() {
  var coor = $.Coordinate$(5, 3).operator$sub$1($.Coordinate$(2, 1));
  $.Expect_equals(3, coor.get$x(), null);
  $.Expect_equals(2, coor.get$y(), null);
}
};

$$.TestCoordinate_run__anon0 = {"": [],
 "super": "Closure",
 call$0: function() {
  $.expect($.Coordinate$(2, 2), $.equals($.Coordinate$(2, 2), 100), null, null, false);
  $.expect($.Coordinate$(2, 1), $.isNot($.equals($.Coordinate$(2, 2), 100)), null, null, false);
}
};

$$.TestCoordinate_run__anon1 = {"": [],
 "super": "Closure",
 call$0: function() {
  $.expect($.Coordinate$(2, 2), $.isNot($.same($.Coordinate$(2, 2))), null, null, false);
  $.expect($.CTC21, $.same($.CTC21), null, null, false);
}
};

$$.TestCoordinate_run__anon2 = {"": [],
 "super": "Closure",
 call$0: function() {
  $.Expect_equals(5, $.Coordinate$(0, 0).getDistance$1($.Coordinate$(3, 4)), null);
}
};

$$.TestArray2d_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('test collection', $.TestArray2d__testCollectionEquals);
  $.test('readonlyFrom ctor params', $.TestArray2d__testReadonlyFromCtorParams);
  $.test('set/get', $.TestArray2d__testSetGet);
  $.test('getAdjacent', $.TestArray2d__testGetAdjacent);
}
};

$$.TestCollectionUtil_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('allUnique', $.TestCollectionUtil__testAllUnique);
  $.test('listish', $.TestCollectionUtil__testListish);
}
};

$$.TestListBase_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('filter', $.TestListBase__testFilter);
  $.test('forEach', $.TestListBase__testForEach);
  $.test('getRange', $.TestListBase__testRange);
  $.test('indexOf', $.TestListBase__testIndexOf);
  $.test('map', $.TestListBase__testMap);
  $.test('reduce', $.TestListBase__testReduce);
  $.test('simple', $.TestListBase__testSimple);
  $.test('some and all', $.TestListBase__testSomeAll);
}
};

$$.TestNumberEnumerable_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('sum', $.TestNumberEnumerable__testSum);
  $.test('min', $.TestNumberEnumerable__testMin);
  $.test('max', $.TestNumberEnumerable__testMax);
  $.test('average', $.TestNumberEnumerable__testAverage);
  $.test('range', $.TestNumberEnumerable__testRange);
}
};

$$.TestEnumerable_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('aggregate', $.TestEnumerable__testAggregate);
  $.test('contains', $.TestEnumerable__testContains);
  $.test('count', $.TestEnumerable__testCount);
  $.test('distinct', $.TestEnumerable__testDistinct);
  $.test('exclude', $.TestEnumerable__testExclude);
  $.test('filter', $.TestEnumerable__testFilter);
  $.test('first', $.TestEnumerable__testFirst);
  $.test('forEach', $.TestEnumerable__testForEach);
  $.test('forEachWithIndex', $.TestEnumerable__testForEachWithIndex);
  $.group('group', new $.TestEnumerable_run__anon());
  $.test('isEmpty', $.TestEnumerable__testIsEmpty);
  $.test('join', $.TestEnumerable__testJoin);
  $.test('length', $.TestEnumerable__testLength);
  $.test('map', $.TestEnumerable__testMap);
  $.test('reduce', $.TestEnumerable__testReduce);
  $.test('selectMany', $.TestEnumerable__testSelectMany);
  $.test('selectNumbers', $.TestEnumerable__testSelectNumbers);
  $.test('single', $.TestEnumerable__testSingle);
  $.test('toHashMap', $.TestEnumerable__testToHashMap);
  $.test('toHashSet', $.TestEnumerable__testToHashSet);
}
};

$$.TestEnumerable_run__anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('complex', $.TestEnumerable__testComplexGrouping);
  $.test('simple', $.TestEnumerable__testSimpleGrouping);
}
};

$$.TestTuple_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = $.Tuple$(5, 4);
  $.expect(t1, $.equals(t1, 100), null, null, false);
  $.expect(t1.item1, $.equals(5, 100), null, null, false);
  $.expect(t1.item2, $.equals(4, 100), null, null, false);
  t2 = $.Tuple$(5, 4);
  $.expect(t2, $.equals(t1, 100), null, null, false);
  $.expect(t2, $.isNot($.same(t1)), null, null, false);
  $.expect($.Tuple$(6, 4), $.isNot($.equals(t1, 100)), null, null, false);
}
};

$$.TestTuple_run_anon0 = {"": [],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = $.Tuple3$(5, 4, 'cool');
  $.expect(t1, $.equals(t1, 100), null, null, false);
  $.expect(t1.item1, $.equals(5, 100), null, null, false);
  $.expect(t1.item2, $.equals(4, 100), null, null, false);
  $.expect(t1.item3, $.equals('cool', 100), null, null, false);
  t2 = $.Tuple3$(5, 4, 'cool');
  $.expect(t2, $.equals(t1, 100), null, null, false);
  $.expect(t2, $.isNot($.same(t1)), null, null, false);
  $.expect($.Tuple3$(6, 4, 'beans'), $.isNot($.equals(t1, 100)), null, null, false);
}
};

$$.AttachableObject_disposeInternal_anon = {"": [],
 "super": "Closure",
 call$2: function(a, e) {
  e.dispose$0();
}
};

$$.anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(args) {
  this.this_0.get$_nameChangedEventHandle().fireEvent$1($.CTC10);
}
};

$$.anon0 = {"": ["this_1"],
 "super": "Closure",
 call$1: function(args) {
  this.this_1.get$_ageChangedEventHandle().fireEvent$1($.CTC10);
}
};

$$.AttachableObject__addHandler_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.EventHandle$();
}
};

$$.TestProperties_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('without default', new $.TestProperties_run__anon());
  $.test('with factories', new $.TestProperties_run__anon0());
  $.test('with listeners', new $.TestProperties_run__anon1());
  $.test('with default', new $.TestProperties_run__anon2());
}
};

$$.TestProperties_run__anon = {"": [],
 "super": "Closure",
 call$0: function() {
  var testProperty, object;
  testProperty = $.Property$('Test Property', null);
  object = $.TestProperties$();
  $.expect(testProperty.get$1(object), $.CTC6, null, null, false);
  $.expect(testProperty.getCore$1(object), $.equals($.CTC9, 100), null, null, false);
  $.expect(testProperty.isSet$1(object), $.CTC, null, null, false);
  testProperty.set$2(object, 'the foo!');
  $.expect(testProperty.get$1(object), $.equals('the foo!', 100), null, null, false);
  $.expect(testProperty.isSet$1(object), $.CTC7, null, null, false);
  testProperty.clear$1(object);
  $.expect(testProperty.get$1(object), $.CTC6, null, null, false);
  $.expect(testProperty.getCore$1(object), $.equals($.CTC9, 100), null, null, false);
  $.expect(testProperty.isSet$1(object), $.CTC, null, null, false);
}
};

$$.TestProperties_run__anon0 = {"": [],
 "super": "Closure",
 call$0: function() {
  var prop = $.Property$('withoutDefault', null);
  $.TestProperties_testFactories(prop, 43, 18);
  $.TestProperties_testFactories(prop, 43, null);
  $.TestProperties_testFactories(prop, null, 18);
  $.TestProperties_testFactories(prop, null, null);
  prop = $.Property$('withDefault', 24);
  $.TestProperties_testFactories(prop, 43, 18);
  $.TestProperties_testFactories(prop, 43, 24);
  $.TestProperties_testFactories(prop, 43, null);
  $.TestProperties_testFactories(prop, null, 18);
  $.TestProperties_testFactories(prop, null, 24);
  $.TestProperties_testFactories(prop, null, null);
  $.TestProperties_testFactories(prop, 24, 18);
  $.TestProperties_testFactories(prop, 24, 24);
  $.TestProperties_testFactories(prop, 24, null);
}
};

$$.TestProperties_run__anon1 = {"": [],
 "super": "Closure",
 call$0: function() {
  var testProperty, object, h1, g1, h2, g2;
  testProperty = $.Property$('Test Property', null);
  object = $.TestProperties$();
  $.expect(testProperty.get$1(object), $.CTC6, null, null, false);
  $.expect(testProperty.getCore$1(object), $.equals($.CTC9, 100), null, null, false);
  $.expect(testProperty.isSet$1(object), $.CTC, null, null, false);
  h1 = $.EventWatcher$();
  g1 = testProperty.addHandler$2(object, h1.get$handler());
  $.expect(h1.get$eventCount(), $.equals(0, 100), null, null, false);
  testProperty.set$2(object, 'the foo!');
  $.expect(h1.get$eventCount(), $.equals(1, 100), null, null, false);
  testProperty.clear$1(object);
  $.expect(h1.get$eventCount(), $.equals(2, 100), null, null, false);
  h2 = $.EventWatcher$();
  g2 = testProperty.addHandler$2(object, h2.get$handler());
  $.expect(h2.get$eventCount(), $.equals(0, 100), null, null, false);
  testProperty.set$2(object, 'the foo!');
  $.expect(h1.get$eventCount(), $.equals(3, 100), null, null, false);
  $.expect(h2.get$eventCount(), $.equals(1, 100), null, null, false);
  $.expect(testProperty.removeHandler$2(object, g1), $.CTC7, null, null, false);
  $.expect(testProperty.removeHandler$2(object, g1), $.CTC, null, null, false);
  testProperty.clear$1(object);
  $.expect(h1.get$eventCount(), $.equals(3, 100), null, null, false);
  $.expect(h2.get$eventCount(), $.equals(2, 100), null, null, false);
  $.expect(testProperty.removeHandler$2(object, g2), $.CTC7, null, null, false);
  $.expect(testProperty.removeHandler$2(object, g2), $.CTC, null, null, false);
  testProperty.set$2(object, 'the bar!');
  $.expect(h1.get$eventCount(), $.equals(3, 100), null, null, false);
  $.expect(h2.get$eventCount(), $.equals(2, 100), null, null, false);
}
};

$$.TestProperties_run__anon2 = {"": [],
 "super": "Closure",
 call$0: function() {
  var testProperty, object;
  testProperty = $.Property$('Test Property', 42);
  object = $.TestProperties$();
  $.expect(testProperty.get$1(object), $.equals(42, 100), null, null, false);
  $.expect(testProperty.getCore$1(object), $.equals($.CTC9, 100), null, null, false);
  $.expect(testProperty.isSet$1(object), $.CTC, null, null, false);
  testProperty.set$2(object, 57);
  $.expect(testProperty.get$1(object), $.equals(57, 100), null, null, false);
  $.expect(testProperty.getCore$1(object), $.equals(57, 100), null, null, false);
  $.expect(testProperty.isSet$1(object), $.CTC7, null, null, false);
  testProperty.clear$1(object);
  $.expect(testProperty.get$1(object), $.equals(42, 100), null, null, false);
  $.expect(testProperty.getCore$1(object), $.equals($.CTC9, 100), null, null, false);
  $.expect(testProperty.isSet$1(object), $.CTC, null, null, false);
}
};

$$.TestAttachedEvents_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('whole deal', $.TestAttachedEvents__testWholeDeal);
  $.test('removeHandler', $.TestAttachedEvents__testRemove);
}
};

$$.TestAttachedEvents__testRemove_anon = {"": ["obj_0"],
 "super": "Closure",
 call$0: function() {
  return $.get$TestAttachedEvents__testEvent1().removeHandler$2(this.obj_0, null);
}
};

$$.TestAttachedEvents__testRemove_anon0 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.get$TestAttachedEvents__testEvent1().removeHandler$2(null, $.GlobalId_GlobalId());
}
};

$$._convertNativeToDart_AcceptStructuredClone_findSlot = {"": ["copies_1", "values_0"],
 "super": "Closure",
 call$1: function(value) {
  var t1, length$, i, t2;
  t1 = this.values_0;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout2(1, value, t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.getInterceptor(t1).add$1(t1, value);
  t1 = this.copies_1;
  $.getInterceptor(t1).add$1(t1, null);
  return length$;
},
 call$1$bailout2: function(state0, value, t1) {
  var length$, i, t2;
  length$ = $.get$length(t1);
  for (i = 0; $.ltB(i, length$); ++i) {
    t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.getInterceptor(t1).add$1(t1, value);
  t1 = this.copies_1;
  $.getInterceptor(t1).add$1(t1, null);
  return length$;
}
};

$$._convertNativeToDart_AcceptStructuredClone_readSlot = {"": ["copies_2"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_2, i);
}
};

$$._convertNativeToDart_AcceptStructuredClone_writeSlot = {"": ["copies_3"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_3, i, x);
}
};

$$._convertNativeToDart_AcceptStructuredClone_walk = {"": ["readSlot_7", "mustCopy_6", "writeSlot_5", "findSlot_4"],
 "super": "Closure",
 call$1: function(e) {
  var slot, copy, t1, t2, t3, length$, i;
  if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
    return this.call$1$bailout1(1, e);
  if (e instanceof Date)
    throw $.$$throw($.UnimplementedError$('structured clone of Date'));
  if (e instanceof RegExp)
    throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
  if (Object.getPrototypeOf(e) === Object.prototype) {
    slot = this.findSlot_4.call$1(e);
    copy = this.readSlot_7.call$1(slot);
    if (!(copy == null))
      return copy;
    copy = $.makeLiteralMap([]);
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout1(2, e, copy, slot);
    this.writeSlot_5.call$2(slot, copy);
    for (t1 = $.iterator(Object.keys(e)); t1.get$hasNext() === true;) {
      t2 = t1.next$0();
      t3 = this.call$1(e[t2]);
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= copy.length)
        throw $.ioore(t2);
      copy[t2] = t3;
    }
    return copy;
  }
  if (e instanceof Array) {
    slot = this.findSlot_4.call$1(e);
    copy = this.readSlot_7.call$1(slot);
    if (!(copy == null))
      return copy;
    length$ = e.length;
    if (this.mustCopy_6 === true)
      copy = new Array(length$);
    else
      copy = e;
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout1(3, e, length$, copy, slot);
    this.writeSlot_5.call$2(slot, copy);
    for (i = 0; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  return e;
},
 call$1$bailout1: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      slot = env2;
      copy = env1;
      e = env0;
      break;
    case 3:
      slot = env3;
      copy = env2;
      length$ = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (e instanceof Date)
        throw $.$$throw($.UnimplementedError$('structured clone of Date'));
      if (e instanceof RegExp)
        throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
    case 2:
      if (state0 === 2 || state0 === 0 && Object.getPrototypeOf(e) === Object.prototype)
        switch (state0) {
          case 0:
            slot = this.findSlot_4.call$1(e);
            copy = this.readSlot_7.call$1(slot);
            if (!(copy == null))
              return copy;
            copy = $.makeLiteralMap([]);
          case 2:
            state0 = 0;
            this.writeSlot_5.call$2(slot, copy);
            for (t1 = $.iterator(Object.keys(e)); t1.get$hasNext() === true;) {
              t2 = t1.next$0();
              $.indexSet(copy, t2, this.call$1(e[t2]));
            }
            return copy;
        }
    case 3:
      var e, slot, copy, t1, t2, length$, i;
      if (state0 === 3 || state0 === 0 && e instanceof Array)
        switch (state0) {
          case 0:
            slot = this.findSlot_4.call$1(e);
            copy = this.readSlot_7.call$1(slot);
            if (!(copy == null))
              return copy;
            length$ = $.get$length(e);
            copy = this.mustCopy_6 === true ? new Array(length$) : e;
          case 3:
            state0 = 0;
            this.writeSlot_5.call$2(slot, copy);
            for (i = 0; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      return e;
  }
}
};

$$.Throws_matches_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(future) {
  var t1, stackTrace, reason;
  if (future.get$hasValue() === true)
    $.expect(false, $.CTC7, null, 'Expected future to fail, but succeeded with \'' + $.S(future.get$value()) + '\'.', false);
  else {
    t1 = this.this_0;
    if (!(t1.get$_matcher() == null)) {
      if (!(future.get$stackTrace() == null)) {
        stackTrace = $.toString(future.get$stackTrace());
        reason = 'Actual exception trace:\n' + ('  ' + $.S($.getInterceptor(stackTrace).replaceAll$2(stackTrace, '\n', '\n  ')));
      } else
        reason = null;
      $.expect(future.get$exception(), t1.get$_matcher(), null, reason, false);
    }
  }
}
};

$$.anon1 = {"": [],
 "super": "Closure",
 call$1: function(f) {
  return f;
}
};

$$.TestProperties_testFactories_anon = {"": ["propFactoryValue_0"],
 "super": "Closure",
 call$1: function(obj) {
  return this.propFactoryValue_0;
}
};

$$.TestEnumerable__testToHashSet_anon = {"": [],
 "super": "Closure",
 call$1: function(s) {
  return $.get$length(s);
}
};

$$.TestEnumerable__testToHashSet_anon0 = {"": [],
 "super": "Closure",
 call$1: function(s) {
  return $.get$length(s);
}
};

$$.Enumerable_map_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(s) {
  return $._SelectIterator$(s, this.f_0);
}
};

$$._HashSetImpl_map_anon = {"": ["f_1", "result_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1 = this.result_0;
  $.getInterceptor(t1).add$1(t1, this.f_1.call$1(key));
}
};

$$._HashSetImpl_forEach_anon = {"": ["f_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.f_0.call$1(key);
}
};

$$.Enumerable_isEmpty_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return true;
}
};

$$.TestEnumerable__testToHashMap_anon = {"": [],
 "super": "Closure",
 call$1: function(s) {
  return $.get$length(s);
}
};

$$.TestEnumerable__testToHashMap_anon0 = {"": [],
 "super": "Closure",
 call$2: function(k, v) {
  $.expect($.get$length(k), $.equals(v, 100), null, null, false);
}
};

$$.TestEnumerable__testToHashMap_anon1 = {"": [],
 "super": "Closure",
 call$1: function(s) {
  return s;
}
};

$$.TestEnumerable__testToHashMap_anon2 = {"": [],
 "super": "Closure",
 call$1: function(s) {
  return $.index(s, 0);
}
};

$$.TestEnumerable__testToHashMap_anon3 = {"": [],
 "super": "Closure",
 call$2: function(k, v) {
  $.expect(k, $.equals($.index(v, 0), 100), null, null, false);
}
};

$$.TestEnumerable__testToHashMap_anon4 = {"": ["noDupes_0"],
 "super": "Closure",
 call$0: function() {
  return this.noDupes_0.toHashMap$2(new $.TestEnumerable__testToHashMap__anon0(), new $.TestEnumerable__testToHashMap__anon1());
}
};

$$.TestEnumerable__testToHashMap__anon0 = {"": [],
 "super": "Closure",
 call$1: function(s) {
  return s;
}
};

$$.TestEnumerable__testToHashMap__anon1 = {"": [],
 "super": "Closure",
 call$1: function(s) {
  return $.get$length(s);
}
};

$$.TestEnumerable__testToHashMap_anon5 = {"": ["withDupes_1"],
 "super": "Closure",
 call$0: function() {
  return this.withDupes_1.toHashMap$1(new $.TestEnumerable__testToHashMap__anon());
}
};

$$.TestEnumerable__testToHashMap__anon = {"": [],
 "super": "Closure",
 call$1: function(s) {
  return $.get$length(s);
}
};

$$.Storage_values_anon = {"": ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.values_0;
  return $.getInterceptor(t1).add$1(t1, v);
}
};

$$._LinkedHashMapImpl_values_anon = {"": ["list_2", "box_0"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_10;
  t2.index_10 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$value());
}
};

$$._HashMapImpl_values_anon = {"": ["list_2", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_10;
  t2.i_10 = $.add(t3, 1);
  $.indexSet(t1, t3, value);
}
};

$$.Enumerable_toHashMap_anon = {"": [],
 "super": "Closure",
 call$1: function(a) {
  return a;
}
};

$$.TestEnumerable__testSingle_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.$$([]).single$0();
}
};

$$.TestEnumerable__testSingle_anon0 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.$$([1, 2]).single$0();
}
};

$$.TestEnumerable__testSingle_anon1 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq($.mod(e, 2), 0);
}
};

$$.TestEnumerable__testSingle_anon2 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.$$([3, 4, 5]).single$1(new $.TestEnumerable__testSingle__anon1());
}
};

$$.TestEnumerable__testSingle__anon1 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq($.mod(e, 2), 1);
}
};

$$.TestEnumerable__testSingle_anon3 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.$$([3, 5, 7]).single$1(new $.TestEnumerable__testSingle__anon0());
}
};

$$.TestEnumerable__testSingle__anon0 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq($.mod(e, 2), 0);
}
};

$$.TestEnumerable__testSingle_anon4 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq($.mod(e, 2), 0);
}
};

$$.TestEnumerable__testSingle_anon5 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq(e, 2);
}
};

$$.TestEnumerable__testSingle_anon6 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq(e, 2);
}
};

$$.TestEnumerable__testSingle_anon7 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.$$([3, 5, 7]).singleOrDefault$1(new $.TestEnumerable__testSingle__anon());
}
};

$$.TestEnumerable__testSingle__anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq($.mod(e, 2), 1);
}
};

$$.Enumerable_singleOrDefault_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return true;
}
};

$$.Enumerable_single_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return true;
}
};

$$.TestEnumerable__testSelectNumbers_anon = {"": [],
 "super": "Closure",
 call$1: function(x) {
  return $.get$length(x);
}
};

$$.Enumerable_selectNumbers_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(s) {
  return $._SelectIterator$(s, this.f_0);
}
};

$$.TestEnumerable__testSelectMany_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq(e, 'k');
}
};

$$.TestEnumerable__testSelectMany_anon0 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq(e, 'z');
}
};

$$.TestEnumerable__testSelectMany_anon1 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq(e, 'z');
}
};

$$.TestEnumerable__testSelectMany_anon2 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return !$.eqB(e, 'z');
}
};

$$.anon2 = {"": [],
 "super": "Closure",
 call$1: function(v) {
  return v;
}
};

$$.anon3 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $._ListImpl_List(null);
}
};

$$.Enumerable_selectMany_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(s) {
  return $._SelectManyIterator$_internal(s, this.f_0);
}
};

$$.TestEnumerable__testReduce_anon = {"": [],
 "super": "Closure",
 call$2: function(prev, element) {
  return $.add(prev, element);
}
};

$$.TestEnumerable__testReduce_anon0 = {"": [],
 "super": "Closure",
 call$2: function(prev, element) {
  return $.mul(prev, element);
}
};

$$.TestEnumerable__testMap_anon = {"": [],
 "super": "Closure",
 call$1: function(x) {
  return $.mul(x, 2);
}
};

$$.Enumerable_count_anon = {"": [],
 "super": "Closure",
 call$1: function(a) {
  return true;
}
};

$$.TestEnumerable__testForEachWithIndex_anon = {"": [],
 "super": "Closure",
 call$2: function(e, i) {
  $.expect(i, $.equals(e, 100), null, null, false);
}
};

$$.TestEnumerable__testForEach_anon = {"": ["box_0"],
 "super": "Closure",
 call$1: function(a) {
  var t1, sum;
  t1 = this.box_0;
  sum = $.add(t1.sum_1, a);
  t1.sum_1 = sum;
  return sum;
}
};

$$.TestEnumerable__testFirst_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.$$([]).first$0();
}
};

$$.TestEnumerable__testFirst_anon0 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq(e, 1);
}
};

$$.TestEnumerable__testFirst_anon1 = {"": ["enum_0"],
 "super": "Closure",
 call$0: function() {
  return this.enum_0.first$1(new $.TestEnumerable__testFirst__anon());
}
};

$$.TestEnumerable__testFirst__anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq(e, 4);
}
};

$$.TestEnumerable__testFirst_anon2 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq(e, 1);
}
};

$$.TestEnumerable__testFirst_anon3 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq(e, 4);
}
};

$$.TestEnumerable__testFirst_anon4 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.eq(e, 4);
}
};

$$.Enumerable_firstOrDefault_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return true;
}
};

$$.Enumerable_first_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return true;
}
};

$$.TestEnumerable__testFilter_anon = {"": [],
 "super": "Closure",
 call$1: function(x) {
  return $.eq($.mod(x, 2), 0);
}
};

$$.Enumerable_filter_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(s) {
  return $._WhereIterator$(s, this.f_0);
}
};

$$._HashSetImpl_filter_anon = {"": ["f_1", "result_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1;
  if (this.f_1.call$1(key) === true) {
    t1 = this.result_0;
    $.getInterceptor(t1).add$1(t1, key);
  }
}
};

$$.Enumerable_exclude_anon0 = {"": ["iEnum_0"],
 "super": "Closure",
 call$1: function(e) {
  return $.contains$1(this.iEnum_0, e) !== true;
}
};

$$.Enumerable_exclude_anon = {"": ["f_1"],
 "super": "Closure",
 call$1: function(s) {
  return $._WhereIterator$(s, this.f_1);
}
};

$$.TestEnumerable__testDistinct_anon = {"": [],
 "super": "Closure",
 call$2: function(a, b) {
  return $.eq($.mod(a, 2), $.mod(b, 2));
}
};

$$.Enumerable_distinct_anon = {"": [],
 "super": "Closure",
 call$2: function(a, b) {
  return $.eq(a, b);
}
};

$$.Enumerable_distinct_anon0 = {"": ["box_0"],
 "super": "Closure",
 call$1: function(s) {
  return $._DistinctIterator$(s, this.box_0.comparer_1);
}
};

$$._DistinctIterator_hasNext_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = this.this_0;
  return t1._comparer$2(e, t1.get$_current()) !== true;
}
};

$$.TestEnumerable__testCount_anon = {"": [],
 "super": "Closure",
 call$1: function(x) {
  return $.eq($.mod(x, 2), 0);
}
};

$$.TestEnumerable__testAggregate_anon = {"": [],
 "super": "Closure",
 call$2: function(current, next) {
  return $.add(current, next);
}
};

$$.TestEnumerable__testAggregate_anon0 = {"": [],
 "super": "Closure",
 call$2: function(current, next) {
  return $.getInterceptor(next).concat$1(next, current);
}
};

$$.TestEnumerable__testComplexGrouping_anon = {"": [],
 "super": "Closure",
 call$1: function(str) {
  return $.get$length(str);
}
};

$$.Grouping_getValues_anon = {"": [],
 "super": "Closure",
 call$1: function(a) {
  return a;
}
};

$$._Contains_matches_anon0 = {"": ["matchState_1", "this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0.get$_expected().matches$2(e, this.matchState_1);
}
};

$$._Contains_matches_anon = {"": ["this_2"],
 "super": "Closure",
 call$1: function(e) {
  return $.eq(e, this.this_2.get$_expected());
}
};

$$.TestNumberEnumerable__testAverage_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.n$([1, 2, 3, null]).average$0();
}
};

$$.TestNumberEnumerable__testMax_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.n$([1, 2, 3, null]).max$0();
}
};

$$.TestNumberEnumerable__testMin_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.n$([1, 2, 3, null]).min$0();
}
};

$$.TestNumberEnumerable__testSum_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.n$([1, 2, 3, null]).sum$0();
}
};

$$.TestListBase__testSomeAll_anon = {"": [],
 "super": "Closure",
 call$1: function(f) {
  $.expect($.CTC19.some$1(f), $.CTC, null, null, false);
  $.expect($.CTC19.every$1(f), $.CTC7, null, null, false);
}
};

$$.ListBase_iterator_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.this_0, i);
}
};

$$.TestListBase__testReduce_anon = {"": [],
 "super": "Closure",
 call$2: function(prev, element) {
  return $.add(prev, element);
}
};

$$.TestListBase__testReduce_anon0 = {"": [],
 "super": "Closure",
 call$2: function(prev, element) {
  return $.mul(prev, element);
}
};

$$.TestListBase__testMap_anon = {"": [],
 "super": "Closure",
 call$1: function(i) {
  return $.mul(i, 2);
}
};

$$.TestListBase__testRange_anon = {"": ["mt_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.mt_0;
  return $.getInterceptor(t1).getRange$2(t1, 0, -1);
}
};

$$.TestListBase__testRange_anon0 = {"": ["mt_1"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.mt_1;
  return $.getInterceptor(t1).getRange$2(t1, -1, 1);
}
};

$$.TestListBase__testRange_anon1 = {"": ["mt_2"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.mt_2;
  return $.getInterceptor(t1).getRange$2(t1, 1, 1);
}
};

$$.TestListBase__testRange_anon2 = {"": [],
 "super": "Closure",
 call$0: function() {
  var t1 = $.ReadOnlyCollection$([1]);
  return $.getInterceptor(t1).getRange$2(t1, 0, 2);
}
};

$$.TestListBase__testRange_anon3 = {"": [],
 "super": "Closure",
 call$0: function() {
  var t1 = $.ReadOnlyCollection$([1]);
  return $.getInterceptor(t1).getRange$2(t1, 1, 1);
}
};

$$.TestListBase__testForEach_anon = {"": ["box_0"],
 "super": "Closure",
 call$1: function(e) {
  var t1, sum;
  t1 = this.box_0;
  sum = $.add(t1.sum_10, e);
  t1.sum_10 = sum;
  return sum;
}
};

$$.TestListBase__testForEach_anon0 = {"": ["box_0"],
 "super": "Closure",
 call$1: function(e) {
  var t1, sum;
  t1 = this.box_0;
  sum = $.add(t1.sum_10, e);
  t1.sum_10 = sum;
  return sum;
}
};

$$.Array2d_getAdjacent_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.this_0, i);
}
};

$$.TestArray2d__testReadonlyFromCtorParams_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.Array2d_Array2d$readonlyFrom(null, [0, 1, 2, 3]);
}
};

$$.TestArray2d__testReadonlyFromCtorParams_anon0 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.Array2d_Array2d$readonlyFrom(2, null);
}
};

$$.TestArray2d__testReadonlyFromCtorParams_anon1 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.Array2d_Array2d$readonlyFrom(0, [0, 1, 2, 3]);
}
};

$$.TestArray2d__testReadonlyFromCtorParams_anon2 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.Array2d_Array2d$readonlyFrom(3, [0, 1, 2, 3]);
}
};

$$.TestArray2d__testReadonlyFromCtorParams_anon3 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.Array2d_Array2d$readonlyFrom(3, []);
}
};

$$.AffineTransform_toString_anon = {"": [],
 "super": "Closure",
 call$1: function(n) {
  return $.toString(n);
}
};

$$.runTests_anon = {"": [],
 "super": "Closure",
 call$1: function(t) {
  return $.eq(t, $._soloTest);
}
};

$$.runTests_anon0 = {"": [],
 "super": "Closure",
 call$0: function() {
  $._testRunner.call$0();
}
};

$$._defer_anon = {"": ["callback_1", "port_0"],
 "super": "Closure",
 call$2: function(msg, reply) {
  this.callback_1.call$0();
  this.port_0.close$0();
}
};

$$.filterTests_anon = {"": ["re_0"],
 "super": "Closure",
 call$1: function(t) {
  return this.re_0.hasMatch$1(t.get$description());
}
};

$$.filterTests_anon0 = {"": ["testFilter_1"],
 "super": "Closure",
 call$1: function(t) {
  return this.testFilter_1.hasMatch$1(t.get$description());
}
};

$$._nextBatch_anon = {"": ["testCase_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.testCase_0;
  t1.run$0();
  if (t1.get$isComplete() !== true && $.eqB(t1.get$callbackFunctionsOutstanding(), 0))
    t1.pass$0();
}
};

$$.Duration_toString_threeDigits = {"": [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 100))
    return $.S(n);
  if ($.gtB(n, 10))
    return '0' + $.S(n);
  return '00' + $.S(n);
}
};

$$.Duration_toString_twoDigits = {"": [],
 "super": "Closure",
 call$1: function(n) {
  if ($.geB(n, 10))
    return $.S(n);
  return '0' + $.S(n);
}
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon = {"": [],
 "super": "Closure",
 call$1: function(_) {
  var t1 = $.document().queryAll$1('.unittest-row');
  $.getInterceptor(t1).forEach$1(t1, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon2());
}
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon2 = {"": [],
 "super": "Closure",
 call$1: function(el) {
  var t1, t2;
  t1 = el.get$attributes();
  t2 = $.index(el.get$attributes(), 'class');
  t2 = $.getInterceptor(t2).replaceAll$2(t2, 'unittest-row ', 'unittest-row-hidden ');
  $.indexSet(t1, 'class', t2);
  return t2;
}
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon0 = {"": ["flattened_2"],
 "super": "Closure",
 call$1: function(tList) {
  var t1;
  $.sort$1(tList, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon1());
  t1 = this.flattened_2;
  $.getInterceptor(t1).addAll$1(t1, tList);
}
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon1 = {"": [],
 "super": "Closure",
 call$2: function(tcA, tcB) {
  return $.sub(tcA.get$id(), tcB.get$id());
}
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon1 = {"": ["box_0"],
 "super": "Closure",
 call$1: function(t) {
  return $.eq(t.get$currentGroup(), this.box_0.previousGroup_1);
}
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon2 = {"": [],
 "super": "Closure",
 call$1: function(t) {
  return $.eq(t.get$result(), 'pass');
}
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon3 = {"": ["safeGroup_3"],
 "super": "Closure",
 call$1: function(_) {
  var t1, t2, t3, t4;
  t1 = $.document();
  t2 = this.safeGroup_3;
  t3 = $.contains$1($.index(t1.query$1('.unittest-row-' + $.S(t2)).get$attributes(), 'class'), 'unittest-row ') === true;
  t4 = $.document;
  if (t3) {
    t1 = t4().queryAll$1('.unittest-row-' + $.S(t2));
    $.getInterceptor(t1).forEach$1(t1, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon());
  } else {
    t1 = t4().queryAll$1('.unittest-row-' + $.S(t2));
    $.getInterceptor(t1).forEach$1(t1, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon0());
  }
}
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  var t1, t2;
  t1 = e.get$attributes();
  t2 = $.index(e.get$attributes(), 'class');
  t2 = $.getInterceptor(t2).replaceAll$2(t2, 'unittest-row ', 'unittest-row-hidden ');
  $.indexSet(t1, 'class', t2);
  return t2;
}
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon0 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  var t1, t2;
  t1 = e.get$attributes();
  t2 = $.index(e.get$attributes(), 'class');
  t2 = $.getInterceptor(t2).replaceAll$2(t2, 'unittest-row-hidden', 'unittest-row');
  $.indexSet(t1, 'class', t2);
  return t2;
}
};

$$.ConstantMap_values_anon = {"": ["this_1", "result_0"],
 "super": "Closure",
 call$1: function(key) {
  var t1 = this.result_0;
  return $.getInterceptor(t1).add$1(t1, $.index(this.this_1, key));
}
};

$$.ConstantMap_forEach_anon = {"": ["f_1", "this_0"],
 "super": "Closure",
 call$1: function(key) {
  return this.f_1.call$2(key, $.index(this.this_0, key));
}
};

$$.HtmlEnhancedConfiguration__buildRow__htmlEscape = {"": [],
 "super": "Closure",
 call$1: function(string) {
  var t1 = $.getInterceptor(string).replaceAll$2(string, '&', '&amp;');
  t1 = $.getInterceptor(t1).replaceAll$2(t1, '<', '&lt;');
  return $.getInterceptor(t1).replaceAll$2(t1, '>', '&gt;');
}
};

$$.HtmlEnhancedConfiguration__buildRow_addRowElement = {"": ["te_4", "test__3", "display_2", "background_1", "groupID_0"],
 "super": "Closure",
 call$3: function(id, status$, description) {
  var t1, t2, t3, t4;
  t1 = this.te_4.get$elements();
  t2 = $.getInterceptor(t1);
  t3 = ' <div>\n                <div class=\'' + $.S(this.display_2) + ' unittest-row-' + $.S(this.groupID_0) + ' ' + $.S(this.background_1) + '\'>\n                  <div ';
  t4 = t3 + ($.HtmlEnhancedConfiguration__isIE() === true ? 'style=\'display:inline-block\' ' : '') + '\n                       class=\'unittest-row-id\'>' + id + '</div>\n                  <div ';
  t3 = t4 + ($.HtmlEnhancedConfiguration__isIE() === true ? 'style=\'display:inline-block\' ' : '') + '\n                       class="unittest-row-status unittest-' + $.S(this.test__3.get$result()) + '">\n                       ' + status$ + '</div>\n                  <div ';
  t2.add$1(t1, $.Element_Element$html(t3 + ($.HtmlEnhancedConfiguration__isIE() === true ? 'style=\'display:inline-block\' ' : '') + '\n                       class=\'unittest-row-description\'>' + description + '</div>\n                </div>\n              </div>'));
}
};

$$._ChildrenElementList_filter_anon = {"": ["f_1", "output_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1;
  if (this.f_1.call$1(element) === true) {
    t1 = this.output_0;
    $.getInterceptor(t1).add$1(t1, element);
  }
}
};

$$.FilteredElementList__filtered_anon = {"": [],
 "super": "Closure",
 call$1: function(n) {
  return typeof n === 'object' && n !== null && n.is$Element();
}
};

$$.FilteredElementList_removeRange_anon = {"": [],
 "super": "Closure",
 call$1: function(el) {
  return el.remove$0();
}
};

$$._HashSetImpl_addAll_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(value) {
  $.indexSet(this.this_0.get$_backingMap(), value, value);
}
};

$$.Configuration__indent_anon = {"": [],
 "super": "Closure",
 call$1: function(line) {
  return '  ' + $.S(line);
}
};

$$._SpreadArgsHelper_invoke1_anon = {"": ["this_1", "arg1_0"],
 "super": "Closure",
 call$0: function() {
  var t1 = this.this_1;
  t1.set$_actualCalls($.add(t1.get$_actualCalls(), 1));
  if (t1._shouldCallBack$0() === true)
    return t1._callback$1(this.arg1_0);
}
};

$$._handleCallbackFunctionComplete_anon = {"": ["testNum_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, testCase;
  t1 = $._currentTest;
  t2 = this.testNum_0;
  if (!$.eqB(t1, t2)) {
    if ($.eqB($.index($._tests, t2).get$result(), 'pass'))
      $.index($._tests, t2).error$2('Unexpected extra callbacks', '');
    return;
  }
  if ($.ltB($._currentTest, $.get$length($._tests))) {
    testCase = $.index($._tests, $._currentTest);
    testCase.set$callbackFunctionsOutstanding($.sub(testCase.get$callbackFunctionsOutstanding(), 1));
    if ($.ltB(testCase.get$callbackFunctionsOutstanding(), 0))
      testCase.error$2('More calls to _handleCallbackFunctionComplete() than expected.', '');
    else if ($.eqB(testCase.get$callbackFunctionsOutstanding(), 0)) {
      if (testCase.get$isComplete() !== true)
        testCase.pass$0();
      $._currentTest = $.add($._currentTest, 1);
      $._testRunner.call$0();
    }
  }
}
};

$$._BaseSendPort_call_anon = {"": ["completer_1", "port_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  var t1, t2;
  this.port_0.close$0();
  t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  t2 = this.completer_1;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._NativeJsSendPort_send_anon = {"": ["this_5", "replyTo_4", "message_3"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, t3, isolate, shouldSerialize, msg;
  t1 = {};
  t2 = this.this_5;
  t3 = this.replyTo_4;
  t2._checkReplyTo$1(t3);
  isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_receivePort().get$_liblib2$_callback() == null)
    return;
  shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  msg = this.message_3;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t2, t1, shouldSerialize), 'receive ' + $.S(msg));
}
};

$$._NativeJsSendPort_send__anon = {"": ["this_7", "box_0", "shouldSerialize_6"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = this.this_7;
  if (!(t1.get$_receivePort().get$_liblib2$_callback() == null)) {
    if (this.shouldSerialize_6 === true) {
      t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_receivePort();
    t2 = this.box_0;
    t1._liblib2$_callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$._waitForPendingPorts_anon = {"": ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$._WorkerSendPort_send_anon = {"": ["message_2", "this_1", "replyTo_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, workerMessage, t3;
  t1 = this.this_1;
  t2 = this.replyTo_0;
  t1._checkReplyTo$1(t2);
  workerMessage = $._serializeMessage($.makeLiteralMap(['command', 'message', 'port', t1, 'msg', this.message_2, 'replyTo', t2]));
  t2 = $._globalState().get$isWorker() === true;
  t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else
    $.index(t3().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._PendingSendPortFinder_visitMap_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._Copier_visitMap_anon = {"": ["box_0", "this_2"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1, t2;
  t1 = this.box_0.copy_10;
  t2 = this.this_2;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._PendingSendPortFinder_visitList_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$.Futures_wait_anon = {"": ["box_0", "pos_5", "result_4", "completer_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, t2, remaining;
  t1 = this.values_2;
  $.indexSet(t1, this.pos_5, value);
  t2 = this.box_0;
  remaining = $.sub(t2.remaining_1, 1);
  t2.remaining_1 = remaining;
  if ($.eqB(remaining, 0) && this.result_4.get$isComplete() !== true)
    this.completer_3.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"": ["future_8", "result_7", "completer_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (this.result_7.get$isComplete() !== true)
    this.completer_6.completeException$2(exception, this.future_8.get$stackTrace());
  return true;
}
};

$$.HtmlEnhancedConfiguration__installHandlers_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0.handleExternalError$2(e, '(DOM callback has errors)');
}
};

$$.HtmlEnhancedConfiguration__installHandlers_anon0 = {"": ["this_1"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_1.processMessage$1(e);
}
};

$$._TarjanList__TarjanList_anon = {"": ["nodes_1", "map_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1, tKey, t2, edges, t3, tEdge;
  t1 = this.map_0;
  tKey = t1.putIfAbsent$2(k, new $._TarjanList__TarjanList__anon(k));
  t2 = this.nodes_1;
  edges = $.HashSet_HashSet();
  $.indexSet(t2, tKey, edges);
  if (!(v == null))
    for (t2 = $.iterator(v); t2.get$hasNext() === true;) {
      t3 = t2.next$0();
      tEdge = t1.putIfAbsent$2(t3, new $._TarjanList__TarjanList__anon0(t3));
      $.getInterceptor(edges).add$1(edges, tEdge);
    }
}
};

$$._TarjanList__TarjanList__anon = {"": ["k_2"],
 "super": "Closure",
 call$0: function() {
  return $._TarjanNode$(this.k_2);
}
};

$$._TarjanList__TarjanList__anon0 = {"": ["edge_3"],
 "super": "Closure",
 call$0: function() {
  return $._TarjanNode$(this.edge_3);
}
};

$$.TestRgbColor__testInvalidHex_anon = {"": [],
 "super": "Closure",
 call$1: function(hex) {
  $.expect(new $.TestRgbColor__testInvalidHex__anon(hex), $.CTC17, null, null, false);
}
};

$$.TestRgbColor__testInvalidHex__anon = {"": ["hex_0"],
 "super": "Closure",
 call$0: function() {
  return $.RgbColor_RgbColor$fromHex(this.hex_0);
}
};

$$.TestRgbColor__testFromHex_anon = {"": [],
 "super": "Closure",
 call$2: function(hex, rgb) {
  $.expect($.RgbColor_RgbColor$fromHex(hex), $.equals(rgb, 100), null, null, false);
  $.expect($.getInterceptor(hex).toLowerCase$0(hex), $.equals(rgb.toHex$0(), 100), null, null, false);
}
};

$$.RgbColor_toHex_anon = {"": ["buffer_0"],
 "super": "Closure",
 call$1: function(c) {
  var t1, t2, t3;
  t1 = this.buffer_0;
  t2 = $.getInterceptor(t1);
  t3 = $.toRadixString(c, 16);
  t2.add$1(t1, $.eqB($.get$length(t3), 1) ? $.getInterceptor('0').concat$1('0', t3) : t3);
}
};

$$.TestRgbColor__testInvalid_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.RgbColor_RgbColor(null, 0, 0);
}
};

$$.TestRgbColor__testInvalid_anon0 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.RgbColor_RgbColor(0, -1, 0);
}
};

$$.TestRgbColor__testInvalid_anon1 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.RgbColor_RgbColor(0, 0, 256);
}
};

$$.TestHslColor__testInvalid_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.HslColor_HslColor(null, 0, 0);
}
};

$$.TestHslColor__testInvalid_anon0 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.HslColor_HslColor(0, -1, 0);
}
};

$$.TestHslColor__testInvalid_anon1 = {"": [],
 "super": "Closure",
 call$0: function() {
  return $.HslColor_HslColor(0, 0, 256);
}
};

$$.TestFutureValueResult_run_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.group('toMap roundtrip', new $.TestFutureValueResult_run__anon());
}
};

$$.TestFutureValueResult_run__anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('value', $.TestFutureValueResult__testValueRoundTrip);
  $.test('exception', $.TestFutureValueResult__testExceptionRoundTrip);
}
};

$$.TestSendPortValue__testComplex_anon = {"": ["tv_0"],
 "super": "Closure",
 call$1: function(arg) {
  $.expect(this.tv_0.get$output(), $.equals($.Tuple3$(5, 6, 11), 100), null, null, false);
}
};

$$.TestSendPortValue__testComplex_anon0 = {"": [],
 "super": "Closure",
 call$1: function(args) {
  $.expect(args, $.equals('wah?', 100), null, null, false);
}
};

$$._complexTestIsolate_anon = {"": [],
 "super": "Closure",
 call$1: function(input) {
  var t1, t2;
  if (input == null)
    throw $.$$throw('wah?');
  t1 = input.get$item1();
  t2 = input.get$item2();
  return $.Tuple3$(t1, t2, $.add(t1, t2));
}
};

$$.anon4 = {"": ["this_0"],
 "super": "Closure",
 call$2: function(rawValue, reply, exception) {
  var t1, value, _message, output, ex, exString;
  t1 = this.this_0;
  value = t1._deserialize$1(rawValue);
  _message = null;
  try {
    output = t1._liblib4$_func$1(value);
    _message = $.FutureValueResult$(output, t1.get$outputSerializer());
  } catch (exception) {
    t1 = $.unwrapException(exception);
    ex = t1;
    exString = $.toString(ex);
    _message = $.FutureValueResult$fromException(exString);
  }

  reply.send$1(_message.toMap$0());
}
};

$$._IsolateNatives__spawn_anon = {"": ["completer_1", "port_0"],
 "super": "Closure",
 call$2: function(msg, replyPort) {
  this.port_0.close$0();
  this.completer_1.complete$1(replyPort);
}
};

$$.anon5 = {"": ["this_0"],
 "super": "Closure",
 call$1: function(p) {
  var t1, t2, t3;
  t1 = this.this_0;
  t1.set$_port(p);
  for (t2 = $.iterator(t1.get$pending()); t2.get$hasNext() === true;) {
    t3 = t2.next$0();
    p.send$2($.index(t3, 'message'), $.index(t3, 'replyTo'));
  }
  t1.set$pending(null);
}
};

$$._IsolateNatives__startNonWorker_function = {"": ["replyPort_1", "functionName_0"],
 "super": "Closure",
 call$0: function() {
  $._IsolateNatives__startIsolate($globalThis[this.functionName_0], this.replyPort_1);
}
};

$$._IsolateNatives__spawnWorker_anon = {"": ["worker_0"],
 "super": "Closure",
 call$1: function(e) {
  $._IsolateNatives__processWorkerMessage(this.worker_0, e);
}
};

$$._IsolateNatives__processWorkerMessage_function = {"": ["entryPoint_1", "replyTo_0"],
 "super": "Closure",
 call$0: function() {
  $._IsolateNatives__startIsolate(this.entryPoint_1, this.replyTo_0);
}
};

$$._IsolateNatives__startIsolate_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $._timerFactory;
  return;
}
};

$$.anon6 = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.anon7 = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.TestSendPortValue__testSimple_anon = {"": ["tv_0"],
 "super": "Closure",
 call$1: function(arg) {
  $.expect(this.tv_0.get$output(), $.equals(25, 100), null, null, false);
}
};

$$.TestSendPortValue__testSimple_anon0 = {"": [],
 "super": "Closure",
 call$1: function(args) {
  $.expect(args, $.equals('wah?', 100), null, null, false);
}
};

$$._testIsolate_anon = {"": [],
 "super": "Closure",
 call$1: function(input) {
  if ($.ltB(input, 0))
    throw $.$$throw('wah?');
  return $.mul(input, input);
}
};

$$.runRetainedTests_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $.test('test double click manager', $._testDoudbleClickManager);
  $.test('test add/remove from Panel', $._testAddRemoveFromPanel);
  $.test('PElement remove transform', $._testRemoveTransform);
  $.test('PElement parent', $._testPElementParent);
}
};

$$._testPElementParent_anon = {"": ["child_0"],
 "super": "Closure",
 call$0: function() {
  return this.child_0.registerParent$1(null);
}
};

$$._testPElementParent_anon0 = {"": ["child_1"],
 "super": "Closure",
 call$0: function() {
  return this.child_1.unregisterParent$1(null);
}
};

$$._testPElementParent_anon1 = {"": ["child_3", "parentElement_2"],
 "super": "Closure",
 call$0: function() {
  return this.child_3.registerParent$1(this.parentElement_2);
}
};

$$._testPElementParent_anon2 = {"": ["child_5", "parentElement_4"],
 "super": "Closure",
 call$0: function() {
  return this.child_5.unregisterParent$1(this.parentElement_4);
}
};

$$._testRemoveTransform_anon = {"": ["element_0"],
 "super": "Closure",
 call$0: function() {
  return this.element_0.removeTransform$1(null);
}
};

$$._testAddRemoveFromPanel_anon = {"": ["panel_0"],
 "super": "Closure",
 call$0: function() {
  return this.panel_0.addElement$1(null);
}
};

$$._testAddRemoveFromPanel_anon0 = {"": ["panel_2", "shape_1"],
 "super": "Closure",
 call$0: function() {
  return this.panel_2.addElement$1(this.shape_1);
}
};

$$._testAddRemoveFromPanel_anon1 = {"": ["panel_3"],
 "super": "Closure",
 call$0: function() {
  return this.panel_3.removeElement$1(null);
}
};

$$._testAddRemoveFromPanel_anon2 = {"": ["panel_5", "shape_4"],
 "super": "Closure",
 call$0: function() {
  return this.panel_5.addElement$1(this.shape_4);
}
};

$$.ClickManager_ClickManager_anon = {"": [],
 "super": "Closure",
 call$1: function(s) {
  return $.ClickManager$_internal(s);
}
};

$$.ClickManager__mouseDown_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.get$ClickManager__isClickableProperty().get$1(e);
}
};

$$.Mouse_markMouseOver_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  $.get$Mouse_isMouseOverProperty().clear$1(e);
  $.get$Mouse_isMouseDirectlyOverProperty().clear$1(e);
}
};

$$.Mouse_markMouseOver_anon0 = {"": [],
 "super": "Closure",
 call$1: function(e) {
  $.get$Mouse_isMouseOverProperty().set$2(e, true);
}
};

$$.ClickManager__mouseUp_anon = {"": [],
 "super": "Closure",
 call$1: function(e) {
  return $.get$ClickManager__isClickableProperty().get$1(e);
}
};

$$.ClickManager__mouseMove_anon = {"": ["args_0"],
 "super": "Closure",
 call$1: function(e) {
  return $.get$ClickManager__mouseMoveEvent().fireEvent$2(e, this.args_0);
}
};

$$.startRootIsolate_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $._timerFactory;
  return;
}
};

$$._EventLoop__runHelper_next = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.BoundClosure = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$$.BoundClosure0 = {'':
['self', 'target'],
'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$$.BoundClosure1 = {'':
['self', 'target'],
'super': 'Closure',
call$2: function(p0, p1) { return this.self[this.target](p0, p1); },
 call$1: function(messageText) {
  return this.call$2(messageText,'')
}
};
$$.BoundClosure2 = {'':
['self', 'target'],
'super': 'Closure',
call$4: function(p0, p1, p2, p3) { return this.self[this.target](p0, p1, p2, p3); }
};
$$.BoundClosure3 = {'':
['self', 'target'],
'super': 'Closure',
call$2: function(p0, p1) { return this.self[this.target](p0, p1); }
};
$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.ExpectException$ = function(message) {
  return new $.ExpectException(message);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.ge = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b);
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.le = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.leB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b) === true;
};

$.index = function(a, index) {
  var key;
  if (typeof a == "string" || a.constructor === Array) {
    key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else {
      $.checkNull(b);
      throw $.$$throw($.ArgumentError$(b));
    }
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.mod = function(a, b) {
  var result;
  if ($.checkNumbers(a, b)) {
    result = a % b;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (b < 0)
      return result - b;
    else
      return result + b;
  }
  return a.operator$mod$1(b);
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.truncate(a / b);
  return a.operator$tdiv$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.indexSet = function(a, index, value) {
  var key;
  if (a.constructor === Array && !a.immutable$list) {
    key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.shr = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (a > 0) {
      if (b > 31)
        return 0;
      return a >>> b;
    }
    if (b > 31)
      b = 31;
    return (a >> b) >>> 0;
  }
  return a.operator$shr$1(b);
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.div$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a / b;
  return a.operator$div$1(b);
};

$.IDBOpenDBRequestEvents$ = function(_ptr) {
  return new $.IDBOpenDBRequestEvents(_ptr);
};

$.neg = function(a) {
  if (typeof a === "number")
    return -a;
  return a.operator$negate$0();
};

$.index$slow = function(a, index) {
  var t1;
  if (!(typeof a === 'string'))
    t1 = !(a == null) && a.constructor === Array;
  else
    t1 = true;
  if (t1) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.truncate(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.indexSet$slow = function(a, index, value) {
  if (!(a == null) && a.constructor === Array) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    $.checkMutable(a, 'indexed set');
    a[index] = value;
    return;
  }
  a.oprator$indexSet$2(index, value);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.toString(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.SequenceList$ = function(sequence) {
  return new $.SequenceList(sequence);
};

$.IndexIterator$ = function(length$, indexer) {
  var t1 = new $.IndexIterator(indexer, length$, 0);
  t1.IndexIterator$2(length$, indexer);
  return t1;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.NullPointerException$(null, $.CTC4));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === 'string')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.$$throw = function(ex) {
  var jsError;
  if (ex == null)
    ex = $.CTC0;
  jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  return $.toString(this.dartException);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if ($.eqB(type, 'property_not_function') || $.eqB(type, 'called_non_callable') || $.eqB(type, 'non_object_property_call') || $.eqB(type, 'non_object_property_load'))
      return $.NullPointerException$(null, $.CTC4);
    else if ($.eqB(type, 'undefined_method'))
      return $.NoSuchMethodError$('', name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.getInterceptor(message).endsWith$1(message, 'is null') === true || $.getInterceptor(message).endsWith$1(message, 'is undefined') === true || $.getInterceptor(message).endsWith$1(message, 'is null or undefined') === true)
        return $.NullPointerException$(null, $.CTC4);
      else {
        if ($.contains$1(message, ' is not a function') !== true)
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$('', '<unknown>', [], $.makeLiteralMap([]), null);
      }
    return $._ExceptionImplementation$(typeof message === 'string' ? message : '');
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && $.contains$1(message, 'call stack') === true)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === 'too much recursion')
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result;
  iterator = $.iterator(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (; iterator.get$hasNext() === true;)
    $.indexSet(result, iterator.next$0(), iterator.next$0());
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(arg2, arg1, closure));
  else
    throw $.$$throw($._ExceptionImplementation$('Unsupported number of arguments for wrapped closure'));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.IDBTransactionEvents$ = function(_ptr) {
  return new $.IDBTransactionEvents(_ptr);
};

$.listInsertRange = function(receiver, start, length$, initialValue) {
  var receiverLength, t1, t2, t3, i;
  if (typeof receiver !== 'object' || receiver === null || (receiver.constructor !== Array || !!receiver.immutable$list) && !receiver.is$JavaScriptIndexingBehavior())
    return $.listInsertRange$bailout(1, receiver, start, length$, initialValue);
  if ($.eqB(length$, 0))
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  receiverLength = receiver.length;
  if (start < 0 || start > receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = receiverLength + length$;
  $.set$length(receiver, t1);
  t2 = start + length$;
  $.Arrays_copy(receiver, start, receiver, t2, receiverLength - start);
  if (!(initialValue == null))
    for (t3 = receiver.length, i = start; i < t2; ++i) {
      if (i < 0 || i >= t3)
        throw $.ioore(i);
      receiver[i] = initialValue;
    }
  $.set$length(receiver, t1);
};

$._SpreadArgsHelper$fixedCallCount = function(callback, expectedCalls) {
  var t1 = new $._SpreadArgsHelper(null, null, 0, null, null, null, null);
  t1._SpreadArgsHelper$fixedCallCount$2(callback, expectedCalls);
  return t1;
};

$.div = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a / b : $.div$slow(a, b);
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.IDBRequestEvents$ = function(_ptr) {
  return new $.IDBRequestEvents(_ptr);
};

$.IDBVersionChangeRequestEvents$ = function(_ptr) {
  return new $.IDBVersionChangeRequestEvents(_ptr);
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.stringLastIndexOfUnchecked = function(receiver, element, start) {
  return receiver.lastIndexOf(element, start);
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$('Cyclic initialization for static ' + $.S(staticName)));
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'AudioChannelMerger')
    return 'ChannelMergerNode';
  if (name$ === 'AudioChannelSplitter')
    return 'ChannelSplitterNode';
  if (name$ === 'AudioGainNode')
    return 'GainNode';
  if (name$ === 'AudioPannerNode')
    return 'PannerNode';
  if (name$ === 'JavaScriptAudioNode')
    return 'ScriptProcessorNode';
  if (name$ === 'Oscillator')
    return 'OscillatorNode';
  if (name$ === 'RealtimeAnalyserNode')
    return 'AnalyserNode';
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'XMLDocument')
    return 'Document';
  if (name$ === 'WorkerMessageEvent')
    return 'MessageEvent';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'MouseScrollEvent')
    return 'WheelEvent';
  if (name$ === 'OfflineResourceList')
    return 'DOMApplicationCache';
  return name$;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document') {
    if (!!obj.xmlVersion)
      return 'Document';
    return 'HTMLDocument';
  }
  if (name$ === 'ApplicationCache')
    return 'DOMApplicationCache';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'HTMLDDElement')
    return 'HTMLElement';
  if (name$ === 'HTMLDTElement')
    return 'HTMLElement';
  if (name$ === 'HTMLTableDataCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLTableHeaderCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLPhraseElement')
    return 'HTMLElement';
  if (name$ === 'MSStyleCSSProperties')
    return 'CSSStyleDeclaration';
  if (name$ === 'MouseWheelEvent')
    return 'WheelEvent';
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return 'Null';
  constructor$ = object.constructor;
  if (typeof(constructor$) === 'function') {
    name$ = constructor$.name;
    if (typeof name$ === 'string')
      t1 = !(name$ === '') && !(name$ === 'Object') && !(name$ === 'Function.prototype');
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.Duration$ = function(days, hours, milliseconds, minutes, seconds) {
  return new $.Duration($.add($.add($.add($.add($.mul(days, 86400000), $.mul(hours, 3600000)), $.mul(minutes, 60000)), $.mul(seconds, 1000)), milliseconds));
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'AudioChannelMerger')
    return 'ChannelMergerNode';
  if (name$ === 'AudioChannelSplitter')
    return 'ChannelSplitterNode';
  if (name$ === 'AudioGainNode')
    return 'GainNode';
  if (name$ === 'AudioPannerNode')
    return 'PannerNode';
  if (name$ === 'JavaScriptAudioNode')
    return 'ScriptProcessorNode';
  if (name$ === 'Oscillator')
    return 'OscillatorNode';
  if (name$ === 'RealtimeAnalyserNode')
    return 'AnalyserNode';
  return name$;
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === 'object'))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf('Chrome') !== -1 || userAgent.indexOf('DumpRenderTree') !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf('Firefox') !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf('MSIE') !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf('Opera') !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf('AppleWebKit') !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, hasOwnProperty, method, i, entry, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnProperty = Object.prototype.hasOwnProperty;
  method = $.lookupDynamicClass(hasOwnProperty, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if (hasOwnProperty.call(entry.get$_liblib0$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnProperty, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnProperty, methods, $.getTypeNameOf($.CTC32));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!hasOwnProperty.call(proto, name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.lookupDynamicClass = function(hasOwnProperty, methods, className) {
  return hasOwnProperty.call(methods, className) ? methods[className] : null;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return 'Instance of ' + $.getTypeNameOf(obj);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.CollectionUtil_aggregate = function(source, seed, func) {
  var t1;
  $.requireArgumentNotNull(source, 'source');
  $.requireArgumentNotNull(func, 'func');
  for (t1 = $.iterator(source); t1.get$hasNext() === true;)
    seed = func.call$2(seed, t1.next$0());
  return seed;
};

$.regExpMakeNative = function(regExp, global, exception) {
  var pattern, multiLine, ignoreCase, sb, t1, e;
  pattern = regExp.get$pattern();
  multiLine = regExp.get$multiLine();
  ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer('');
  if (multiLine === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, 'm');
  }
  if (ignoreCase === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, 'i');
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, 'g');
  }
  try {
    t1 = new RegExp(pattern, $.toString(sb));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property,
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, length$, patternLength, startIndex, position, endIndex;
  result = $._ListImpl_List(null);
  length$ = $.get$length(haystack);
  patternLength = $.get$length(needle);
  if (patternLength !== (patternLength | 0))
    return $.allMatchesInStringUnchecked$bailout(1, needle, haystack, patternLength, result, length$);
  for (startIndex = 0; true;) {
    position = $.indexOf$2(haystack, needle, startIndex);
    if ($.eqB(position, -1))
      break;
    $.getInterceptor(result).add$1(result, $.StringMatch$(position, haystack, needle));
    endIndex = $.add(position, patternLength);
    if ($.eqB(endIndex, length$))
      break;
    else
      startIndex = $.eqB(position, endIndex) ? $.add(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  var substr;
  if (typeof other === 'string')
    return !$.eqB($.indexOf$2(receiver, other, startIndex), -1);
  else if (typeof other === 'object' && other !== null && !!other.is$JSSyntaxRegExp)
    return other.hasMatch$1($.getInterceptor(receiver).substring$1(receiver, startIndex));
  else {
    substr = $.getInterceptor(receiver).substring$1(receiver, startIndex);
    return $.iterator($.getInterceptor(other).allMatches$1(other, substr)).get$hasNext();
  }
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === 'undefined') {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, i;
  if (typeof receiver !== 'string')
    return $.stringReplaceAllUnchecked$bailout(1, receiver, from, to);
  if (typeof from === 'string')
    if (from === '')
      if (receiver === '')
        return to;
      else {
        result = $.StringBuffer_StringBuffer('');
        length$ = receiver.length;
        $.getInterceptor(result).add$1(result, to);
        for (i = 0; i < length$; ++i) {
          $.getInterceptor(result).add$1(result, receiver[i]);
          $.getInterceptor(result).add$1(result, to);
        }
        return $.toString(result);
      }
    else
      return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), false, false), true), to);
  else if (typeof from === 'object' && from !== null && !!from.is$JSSyntaxRegExp)
    return $.stringReplaceJS(receiver, $.regExpMakeNative(from, true), to);
  else {
    $.checkNull(from);
    throw $.$$throw('String.replaceAll(Pattern) UNIMPLEMENTED');
  }
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = $.getInterceptor(tags).split$1(tags, '|');
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    $.getInterceptor(result).add$1(result, $.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.stringSplitUnchecked = function(receiver, pattern) {
  if (typeof pattern === 'string')
    return receiver.split(pattern);
  else if (typeof pattern === 'object' && pattern !== null && !!pattern.is$JSSyntaxRegExp)
    return receiver.split($.regExpGetNative(pattern));
  else
    throw $.$$throw('String.split(Pattern) UNIMPLEMENTED');
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$.CollectionUtil_allUnique = function(items) {
  var i, j, j0, t1;
  if (typeof items !== 'string' && (typeof items !== 'object' || items === null || items.constructor !== Array && !items.is$JavaScriptIndexingBehavior()))
    return $.CollectionUtil_allUnique$bailout(1, items);
  $.requireArgumentNotNull(items, 'items');
  for (i = 0; i < items.length; i = j)
    for (j = i + 1, j0 = j; t1 = items.length, j0 < t1; ++j0) {
      if (i >= t1)
        throw $.ioore(i);
      if ($.eqB(items[i], items[j0]))
        return false;
    }
  return true;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CTC32)[name$];
  if (!(dartMethod == null))
    methods['Object'] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$._DateImpl$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $._DateImpl(millisecondsSinceEpoch, isUtc);
  t1._DateImpl$fromMillisecondsSinceEpoch$2(millisecondsSinceEpoch, isUtc);
  return t1;
};

$._DateImpl$now = function() {
  var t1 = new $._DateImpl($.Primitives_dateNow(), false);
  t1._DateImpl$now$0();
  return t1;
};

$._ElementAttributeMap$ = function(_element) {
  return new $._ElementAttributeMap(_element);
};

$.print = function(object) {
  if (typeof object === 'string')
    $.Primitives_printString(object);
  else
    $.Primitives_printString($.toString(object));
};

$.coreSort = function(l, compare) {
  $._Sort__doSort(l, 0, $.sub($.get$length(l), 1), compare);
  return;
};

$.Set_Set = function() {
  return $._HashSetImpl$();
};

$.getInterceptor = function(object) {
  if (typeof object === 'string')
    return $.CTC1;
  if ($.isJsArray(object))
    return $.CTC2;
  return $.CTC3;
};

$.get$length = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length;
  else
    return receiver.get$length();
};

$.set$length = function(receiver, newLength) {
  if ($.isJsArray(receiver)) {
    $.checkNull(newLength);
    if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, 'set length');
    receiver.length = newLength;
  } else
    receiver.set$length(newLength);
  return newLength;
};

$.toString = function(value) {
  if (typeof value == "object" && value != null)
    if ($.isJsArray(value))
      return $.Collections_collectionToString(value);
    else
      return value.toString$0();
  if (value === 0 && (1 / value) < 0)
    return '-0.0';
  if (value == null)
    return 'null';
  if (typeof value == "function")
    return 'Closure';
  return String(value);
};

$.get$isEmpty = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length === 0;
  return receiver.get$isEmpty();
};

$.compareTo = function(a, b) {
  var aIsNegative, t1;
  if ($.checkNumbers(a, b))
    if ($.ltB(a, b))
      return -1;
    else if ($.gtB(a, b))
      return 1;
    else if ($.eqB(a, b)) {
      if ($.eqB(a, 0)) {
        aIsNegative = $.get$isNegative(a);
        if ($.eqB(aIsNegative, $.get$isNegative(b)))
          return 0;
        if (aIsNegative === true)
          return -1;
        return 1;
      }
      return 0;
    } else if ($.get$isNaN(a) === true) {
      if ($.get$isNaN(b) === true)
        return 0;
      return 1;
    } else
      return -1;
  else if (typeof a === 'string') {
    if (!(typeof b === 'string'))
      throw $.$$throw($.ArgumentError$(b));
    if (a == b)
      t1 = 0;
    else
      t1 = a < b ? -1 : 1;
    return t1;
  } else
    return a.compareTo$1(b);
};

$.iterator = function(receiver) {
  if ($.isJsArray(receiver))
    return $.ListIterator$(receiver);
  return receiver.iterator$0();
};

$.indexOf$1 = function(receiver, element) {
  if ($.isJsArray(receiver))
    return $.Arrays_indexOf(receiver, element, 0, receiver.length);
  else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof element === 'string'))
      throw $.$$throw($.ArgumentError$(element));
    return receiver.indexOf(element);
  }
  return receiver.indexOf$1(element);
};

$.indexOf$2 = function(receiver, element, start) {
  if ($.isJsArray(receiver)) {
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  } else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof element === 'string'))
      throw $.$$throw($.ArgumentError$(element));
    if (start < 0)
      return -1;
    return receiver.indexOf(element, start);
  }
  return receiver.indexOf$2(element, start);
};

$._RangeEnumerable$ = function(_start, _count) {
  return new $._RangeEnumerable(_start, _count);
};

$.get$last = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.get$last();
  return $.index(receiver, $.sub($.get$length(receiver), 1));
};

$.insertRange$3 = function(receiver, start, length$, initialValue) {
  if (!$.isJsArray(receiver))
    return receiver.insertRange$3(start, length$, initialValue);
  return $.listInsertRange(receiver, start, length$, initialValue);
};

$.Future_Future$immediate = function(value) {
  return $._FutureImpl__FutureImpl$immediate(value);
};

$.some = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.some$1(f);
  else
    return $.Collections_some(receiver, f);
};

$.every = function(receiver, f) {
  if (!$.isJsArray(receiver))
    return receiver.every$1(f);
  else
    return $.Collections_every(receiver, f);
};

$._RangeIterator$ = function(_start, _count) {
  return new $._RangeIterator(_start, _count, 0);
};

$.get$isNegative = function(receiver) {
  if (typeof receiver === 'number')
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  else
    return receiver.get$isNegative();
};

$.get$isNaN = function(receiver) {
  if (typeof receiver === 'number')
    return isNaN(receiver);
  else
    return receiver.get$isNaN();
};

$.abs = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.abs$0();
  return Math.abs(receiver);
};

$.ceil = function(receiver) {
  return Math.ceil(receiver);
};

$.floor = function(receiver) {
  return Math.floor(receiver);
};

$.get$isInfinite = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.get$isInfinite();
  return receiver == Infinity || receiver == -Infinity;
};

$.remainder = function(a, b) {
  if ($.checkNumbers(a, b))
    return a % b;
  else
    return a.remainder$1(b);
};

$.sort$1 = function(receiver, compare) {
  if (!$.isJsArray(receiver))
    return receiver.sort$1(compare);
  $.checkMutable(receiver, 'sort');
  $.coreSort(receiver, compare);
};

$.truncate = function(receiver) {
  return receiver < 0 ? $.ceil(receiver) : $.floor(receiver);
};

$.lastIndexOf$2 = function(receiver, element, start) {
  var t1;
  if ($.isJsArray(receiver))
    return $.Arrays_lastIndexOf(receiver, element, start);
  else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof element === 'string'))
      throw $.$$throw($.ArgumentError$(element));
    if (!(start == null)) {
      if (!(typeof start === 'number'))
        throw $.$$throw($.ArgumentError$(start));
      if (start < 0)
        return -1;
      t1 = receiver.length;
      if (start >= t1) {
        if (element === '')
          return t1;
        start = t1 - 1;
      } else
        start = start;
    }
    return $.stringLastIndexOfUnchecked(receiver, element, start);
  }
  return receiver.lastIndexOf$2(element, start);
};

$.contains$1 = function(receiver, other) {
  var i;
  if (typeof receiver !== 'string' && (typeof receiver !== 'object' || receiver === null || receiver.constructor !== Array && !receiver.is$JavaScriptIndexingBehavior()))
    return $.contains$1$bailout(1, receiver, other);
  if (typeof receiver === 'string')
    return $.contains$2(receiver, other, 0);
  else if ($.isJsArray(receiver)) {
    for (i = 0; i < receiver.length; ++i)
      if ($.eqB(other, receiver[i]))
        return true;
    return false;
  }
  return receiver.contains$1(other);
};

$.contains$2 = function(receiver, other, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.contains$2(other, startIndex);
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
};

$.get$hashCode = function(receiver) {
  var length$, hash, i, hash0, hash1;
  if (receiver == null)
    return 0;
  if (typeof receiver === 'number')
    return receiver & 536870911;
  if (typeof receiver === 'boolean')
    return receiver ? 1077375012 : 3247177846;
  if ($.isJsArray(receiver))
    return $.Primitives_objectHashCode(receiver);
  if (!(typeof receiver === 'string'))
    return receiver.get$hashCode();
  length$ = receiver.length;
  for (hash = 0, i = 0; i < length$; ++i, hash = hash1) {
    hash0 = 536870911 & hash + receiver.charCodeAt(i);
    hash1 = 536870911 & hash0 + (524287 & hash0) << 10;
    hash1 = hash1 ^ (hash1 >> 6);
  }
  hash0 = 536870911 & hash + (67108863 & hash) << 3;
  hash0 = hash0 ^ (hash0 >> 11);
  return 536870911 & hash0 + (16383 & hash0) << 15;
};

$.round = function(receiver) {
  if (receiver < 0)
    return -Math.round(-receiver);
  else
    return Math.round(receiver);
};

$.toInt = function(receiver) {
  var truncated;
  if (!(typeof receiver === 'number'))
    return receiver.toInt$0();
  if ($.get$isNaN(receiver) === true)
    throw $.$$throw($.FormatException$('NaN'));
  if ($.get$isInfinite(receiver) === true)
    throw $.$$throw($.FormatException$('Infinity'));
  truncated = $.truncate(receiver);
  return truncated == -0.0 ? 0 : truncated;
};

$.toRadixString = function(receiver, radix) {
  if (!(typeof receiver === 'number'))
    return receiver.toRadixString$1(radix);
  $.checkNum(radix);
  if (radix < 2 || radix > 36)
    throw $.$$throw($.ArgumentError$(radix));
  return receiver.toString(radix);
};

$._SimpleNumEnumerable$ = function(_source) {
  return new $._SimpleNumEnumerable(_source);
};

$.lastIndexOf$1 = function(receiver, element) {
  if ($.isJsArray(receiver))
    return $.Arrays_lastIndexOf(receiver, element, receiver.length);
  else if (typeof receiver === 'string') {
    $.checkNull(element);
    return receiver.lastIndexOf(element);
  }
  return receiver.lastIndexOf$1(element);
};

$.removeRange = function(receiver, start, length$) {
  var receiverLength, t1, t2;
  if (!$.isJsArray(receiver))
    return receiver.removeRange$2(start, length$);
  $.checkGrowable(receiver, 'removeRange');
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.RangeError$value(t1));
  t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.set$length(receiver, t2);
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.MediaStreamEvents$ = function(_ptr) {
  return new $.MediaStreamEvents(_ptr);
};

$.Shape$ = function(w, h, fillStyle, shapeType) {
  return new $.Shape(fillStyle, shapeType, $._ListImpl_List(null), true, $.EventHandle$(), null, w, h, null, null, false, null, $.HashMap_HashMap(), $.HashMap_HashMap(), false);
};

$.main = function() {
  $.groupSep = ' - ';
  $.useHtmlEnhancedConfiguration(false);
  $.registerTests();
  $.registerTests0();
};

$.useHtmlEnhancedConfiguration = function(isLayoutTest) {
  $.configure($.HtmlEnhancedConfiguration$(isLayoutTest));
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.AffineTransform$ = function(scaleX, shearY, shearX, scaleY, translateX, translateY) {
  return new $.AffineTransform(scaleX, shearY, shearX, scaleY, translateX, translateY);
};

$.AffineTransform_AffineTransform$fromRotate = function(theta, x, y) {
  return $.AffineTransform$(1, 0, 0, 1, 0, 0).setToRotation$3(theta, x, y);
};

$.AffineTransform_AffineTransform$fromScale = function(sx, sy) {
  return $.AffineTransform$(1, 0, 0, 1, 0, 0).setToScale$2(sx, sy);
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = '-moz-';
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = '-ms-';
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = '-o-';
    else
      $._cachedBrowserPrefix = '-webkit-';
  return $._cachedBrowserPrefix;
};

$._FuncNumEnumerable$ = function(_source, _func) {
  return new $._FuncNumEnumerable(_source, _func);
};

$.EventHandle$ = function() {
  return new $.EventHandle(null, false);
};

$.Size$ = function(width, height) {
  return new $.Size(width, height);
};

$._SelectManyIterator$_internal = function(_sourceIterator, _func) {
  return new $._SelectManyIterator(_sourceIterator, _func, null);
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.SVGElementInstanceEvents$ = function(_ptr) {
  return new $.SVGElementInstanceEvents(_ptr);
};

$.LocalWindowEvents$ = function(_ptr) {
  return new $.LocalWindowEvents(_ptr);
};

$.AbstractWorkerEvents$ = function(_ptr) {
  return new $.AbstractWorkerEvents(_ptr);
};

$.Property$ = function(name$, defaultValue) {
  return new $.Property(defaultValue, name$);
};

$._EveryElement$ = function(_matcher) {
  return new $._EveryElement(_matcher);
};

$.GlobalId$_internal = function(value) {
  return new $.GlobalId(value, $.Util_getHashCode([value]));
};

$.GlobalId_GlobalId = function() {
  var t1 = $.GlobalId__globalId;
  $.GlobalId__globalId = $.add(t1, 1);
  return $.GlobalId$_internal(t1);
};

$.AudioContextEvents$ = function(_ptr) {
  return new $.AudioContextEvents(_ptr);
};

$._Contains$ = function(_expected) {
  return new $._Contains(_expected);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$._TestParentElement$ = function() {
  return new $._TestParentElement($._ListImpl_List(null), false, $.EventHandle$(), null, 10, 10, null, null, false, null, $.HashMap_HashMap(), $.HashMap_HashMap(), false);
};

$.MatchState$ = function(state) {
  return new $.MatchState(state);
};

$.DefaultFailureHandler$ = function() {
  var t1 = new $.DefaultFailureHandler();
  t1.DefaultFailureHandler$0();
  return t1;
};

$._DistinctIterator$ = function(_source, _comparer) {
  return new $._DistinctIterator(_source, _comparer, $._ListImpl_List(null), null, null);
};

$.StringDescription$ = function(init) {
  var t1 = new $.StringDescription(null);
  t1.StringDescription$1(init);
  return t1;
};

$.BatteryManagerEvents$ = function(_ptr) {
  return new $.BatteryManagerEvents(_ptr);
};

$.HtmlEnhancedConfiguration$ = function(_isLayoutTest) {
  return new $.HtmlEnhancedConfiguration(_isLayoutTest, null, null, null);
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  return new $.MediaStreamTrackEvents(_ptr);
};

$.HtmlEnhancedConfiguration__isIE = function() {
  return $.contains$1($.document().get$window().get$navigator().get$userAgent(), 'MSIE');
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$.MediaStreamTrackListEvents$ = function(_ptr) {
  return new $.MediaStreamTrackListEvents(_ptr);
};

$._DeepMatcher$ = function(_expected, limit) {
  return new $._DeepMatcher(_expected, limit, null);
};

$.LinkedHashMap_LinkedHashMap = function() {
  return $._LinkedHashMapImpl$();
};

$.MessagePortEvents$ = function(_ptr) {
  return new $.MessagePortEvents(_ptr);
};

$._Predicate$ = function(_matcher, _description) {
  return new $._Predicate(_matcher, _description);
};

$._ElementFactoryProvider_createElement_html = function(html) {
  var match, t1, tag, parentTag, temp, element;
  match = $.get$_START_TAG_REGEXP().firstMatch$1(html);
  if (!(match == null)) {
    t1 = match.group$1(1);
    tag = $.getInterceptor(t1).toLowerCase$0(t1);
    parentTag = $.CTC26.containsKey$1(tag) === true ? $.CTC26.operator$index$1(tag) : 'div';
  } else {
    tag = null;
    parentTag = 'div';
  }
  temp = $.Element_Element$tag(parentTag);
  temp.set$innerHTML(html);
  if ($.eqB($.get$length(temp.get$elements()), 1))
    element = $.index(temp.get$elements(), 0);
  else if ($.eqB(parentTag, 'html') && $.eqB($.get$length(temp.get$elements()), 2)) {
    t1 = temp.get$elements();
    element = $.index(t1, $.eqB(tag, 'head') ? 0 : 1);
  } else
    throw $.$$throw($.ArgumentError$('HTML had ' + $.S($.get$length(temp.get$elements())) + ' ' + 'top level elements but 1 expected'));
  element.remove$0();
  return element;
};

$._Sort__doSort = function(a, left, right, compare) {
  if ($.leB($.sub(right, left), 32))
    $._Sort_insertionSort_(a, left, right, compare);
  else
    $._Sort__dualPivotQuicksort(a, left, right, compare);
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._Sort__dualPivotQuicksort = function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, t2, less, great, pivots_are_equal, k, ak, comp, great0, less0, t3;
  if (typeof a !== 'object' || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.is$JavaScriptIndexingBehavior())
    return $._Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  sixth = $.tdiv($.add($.sub(right, left), 1), 6);
  if (typeof sixth !== 'number')
    throw $.iae(sixth);
  index1 = left + sixth;
  index5 = $.sub(right, sixth);
  if (typeof right !== 'number')
    throw $.iae(right);
  index3 = $.tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  if (index1 !== (index1 | 0))
    throw $.iae(index1);
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 !== (index2 | 0))
    throw $.iae(index2);
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 !== (index3 | 0))
    throw $.iae(index3);
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 !== (index4 | 0))
    throw $.iae(index4);
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 !== (index5 | 0))
    throw $.iae(index5);
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.gtB(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el1, el4), 0)) {
    t0 = el1;
    el1 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el3, el4), 0)) {
    t0 = el3;
    el3 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el2, el5), 0)) {
    t0 = el2;
    el2 = el5;
    el5 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left !== (left | 0))
    throw $.iae(left);
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right !== (right | 0))
    throw $.iae(right);
  if (right < 0 || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.eqB(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      if (k !== (k | 0))
        throw $.iae(k);
      if (k < 0 || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      if ($.eqB(comp, 0))
        continue;
      if ($.ltB(comp, 0)) {
        if (!(k === less)) {
          if (less !== (less | 0))
            throw $.iae(less);
          t1 = a.length;
          if (less < 0 || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great !== (great | 0))
            throw $.iae(great);
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          if ($.gtB(comp, 0)) {
            --great;
            continue;
          } else {
            t1 = $.ltB(comp, 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less !== (less | 0))
                throw $.iae(less);
              if (less < 0 || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k !== (k | 0))
        throw $.iae(k);
      if (k < 0 || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.ltB(compare.call$2(ak, el2), 0)) {
        if (!(k === less)) {
          if (less !== (less | 0))
            throw $.iae(less);
          t1 = a.length;
          if (less < 0 || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.gtB(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great !== (great | 0))
            throw $.iae(great);
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.gtB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less !== (less | 0))
                throw $.iae(less);
              if (less < 0 || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
  t1 = less - 1;
  if (t1 !== (t1 | 0))
    throw $.iae(t1);
  t2 = a.length;
  if (t1 < 0 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (left >= t2)
    throw $.ioore(left);
  a[left] = t3;
  a[t1] = el2;
  t1 = great + 1;
  if (t1 !== (t1 | 0))
    throw $.iae(t1);
  if (t1 < 0 || t1 >= t2)
    throw $.ioore(t1);
  t3 = a[t1];
  if (right >= t2)
    throw $.ioore(right);
  a[right] = t3;
  a[t1] = el4;
  $._Sort__doSort(a, left, less - 2, compare);
  $._Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less !== (less | 0))
        throw $.iae(less);
      if (less < 0 || less >= a.length)
        throw $.ioore(less);
      if (!$.eqB(compare.call$2(a[less], el2), 0))
        break;
      ++less;
    }
    while (true) {
      if (great !== (great | 0))
        throw $.iae(great);
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!$.eqB(compare.call$2(a[great], el4), 0))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k !== (k | 0))
        throw $.iae(k);
      if (k < 0 || k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.eqB(compare.call$2(ak, el2), 0)) {
        if (!(k === less)) {
          if (less !== (less | 0))
            throw $.iae(less);
          t1 = a.length;
          if (less < 0 || less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.eqB(compare.call$2(ak, el4), 0))
        for (; true;) {
          if (great !== (great | 0))
            throw $.iae(great);
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.eqB(compare.call$2(a[great], el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.ltB(compare.call$2(a[great], el2), 0);
            t2 = a.length;
            great0 = great - 1;
            if (t1) {
              if (less !== (less | 0))
                throw $.iae(less);
              if (less < 0 || less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
              great = great0;
            }
            break;
          }
        }
    }
    $._Sort__doSort(a, less, great, compare);
  } else
    $._Sort__doSort(a, less, great, compare);
};

$._Sort_insertionSort_ = function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== 'object' || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.is$JavaScriptIndexingBehavior())
    return $._Sort_insertionSort_$bailout(1, a, left, right, compare);
  if (typeof right !== 'number')
    return $._Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t2 = $.gtB(compare.call$2(a[t1], el), 0);
        t1 = t2;
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 !== (j0 | 0))
        throw $.iae(j0);
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j !== (j | 0))
      throw $.iae(j);
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
};

$._convertNativeToDart_EventTarget = function(e) {
  if ("setInterval" in e)
    return $._DOMWindowCrossFrame__createSafe(e);
  else
    return e;
};

$._convertNativeToDart_IDBAny = function(object) {
  return $._convertNativeToDart_AcceptStructuredClone(object, false);
};

$._convertNativeToDart_SerializedScriptValue = function(object) {
  return $._convertNativeToDart_AcceptStructuredClone(object, true);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t3, t2).call$1(value);
  t4.call$0();
  return copy;
};

$._convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var values, copies, t1;
  values = [];
  copies = [];
  t1 = new $._convertNativeToDart_AcceptStructuredClone_findSlot(copies, values);
  return new $._convertNativeToDart_AcceptStructuredClone_walk(new $._convertNativeToDart_AcceptStructuredClone_readSlot(copies), mustCopy, new $._convertNativeToDart_AcceptStructuredClone_writeSlot(copies), t1).call$1(object);
};

$.Util_getHashCode = function(source) {
  var t1, hash, t2, next, hash0, hash1;
  for (t1 = $.iterator(source), hash = 0; t1.get$hasNext() === true; hash = hash1) {
    t2 = t1.next$0();
    next = t2 == null ? 0 : $.get$hashCode(t2);
    if (typeof next !== 'number')
      throw $.iae(next);
    hash0 = 536870911 & hash + next;
    hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
    hash1 = (hash1 ^ $.shr(hash1, 6)) >>> 0;
  }
  hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash0 = (hash0 ^ $.shr(hash0, 11)) >>> 0;
  return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$._globalState = function() {
  return $globalState;
};

$.NullArgumentException$ = function(arg) {
  return new $.NullArgumentException(arg, 'Null argument: ' + $.S(arg));
};

$.min = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.get$isNegative(b) === true || $.get$isNaN(b) === true)
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.max = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return a + b;
        if ($.get$isNaN(b) === true)
          return b;
        return a;
      }
      if (b === 0 && $.get$isNegative(a) === true)
        return b;
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.DetailedIllegalArgumentException$ = function(arg, message) {
  return new $.DetailedIllegalArgumentException(arg, message);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$.Vector$ = function(x, y) {
  return new $.Vector(x, y);
};

$.Coordinate$ = function(x, y) {
  return new $.Coordinate(x, y);
};

$.Enumerable_Enumerable$fromIterable = function(source) {
  $.requireArgumentNotNull(source, 'source');
  return $._SimpleEnumerable$(source);
};

$.Grouping$ = function(source, keyFunc) {
  var t1 = new $.Grouping($.HashMap_HashMap());
  t1.Grouping$2(source, keyFunc);
  return t1;
};

$.ReadOnlyCollection$ = function(source) {
  return new $.ReadOnlyCollection($._ListImpl_List$from(source));
};

$.HashSet_HashSet$from = function(other) {
  return $._HashSetImpl__HashSetImpl$from(other);
};

$.RTCDataChannelEvents$ = function(_ptr) {
  return new $.RTCDataChannelEvents(_ptr);
};

$.NumberEnumerable_NumberEnumerable$from = function(source) {
  $.requireArgumentNotNull(source, 'source');
  return $._SimpleNumEnumerable$(source);
};

$.NumberEnumerable_NumberEnumerable$fromRange = function(start, count) {
  return $._RangeEnumerable$(start, count);
};

$.sin = function(x) {
  return Math.sin($.checkNum(x));
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$.PeerConnection00Events$ = function(_ptr) {
  return new $.PeerConnection00Events(_ptr);
};

$.RTCPeerConnectionEvents$ = function(_ptr) {
  return new $.RTCPeerConnectionEvents(_ptr);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, 0);
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$.cos = function(x) {
  return Math.cos($.checkNum(x));
};

$.NotificationEvents$ = function(_ptr) {
  return new $.NotificationEvents(_ptr);
};

$.configure = function(config) {
  var _oldConfig = $._config;
  $._config = config;
  return _oldConfig;
};

$._FuncEnumerable$ = function(_source, _func) {
  return new $._FuncEnumerable(_source, _func);
};

$._WhereIterator$ = function(_source, _func) {
  return new $._WhereIterator(_source, _func, null, null);
};

$.test = function(spec, body) {
  var t1;
  $.ensureInitialized();
  t1 = $._tests;
  $.getInterceptor(t1).add$1(t1, $.TestCase$($.add($.get$length($._tests), 1), $._fullSpec(spec), body, 0));
};

$._SelectIterator$ = function(_source, _func) {
  return new $._SelectIterator(_source, _func);
};

$.group = function(description, body, exception) {
  var parentGroup0, parentGroup, parentSetup, parentTeardown, t1, e, trace, stack;
  $.ensureInitialized();
  parentGroup0 = $._currentGroup;
  parentGroup = parentGroup0;
  if (!$.eqB(parentGroup0, ''))
    $._currentGroup = $.S($._currentGroup) + $.S($.groupSep) + description;
  else
    $._currentGroup = description;
  parentSetup = $._testSetup;
  parentTeardown = $._testTeardown;
  try {
    $._testSetup = null;
    $._testTeardown = null;
    body.call$0();
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    trace = $.getTraceFromException(exception);
    stack = trace == null ? '' : ': ' + $.S($.toString(trace));
    $._uncaughtErrorMessage = $.S($.toString(e)) + $.S(stack);
  }
 finally {
    $._currentGroup = parentGroup;
    $._testSetup = parentSetup;
    $._testTeardown = parentTeardown;
  }
};

$._defer = function(callback) {
  var port = $.ReceivePort_ReceivePort();
  port.receive$1(new $._defer_anon(callback, port));
  port.toSendPort$0().send$2(null, null);
};

$.filterTests = function(testFilter) {
  var filterFunction, t1;
  if (typeof testFilter === 'string')
    filterFunction = new $.filterTests_anon($.RegExp_RegExp(testFilter, false, false));
  else if (typeof testFilter === 'object' && testFilter !== null && !!testFilter.is$RegExp)
    filterFunction = new $.filterTests_anon0(testFilter);
  else
    filterFunction = typeof testFilter === 'function' || typeof testFilter === 'object' && testFilter !== null && !!testFilter.is$Function ? testFilter : null;
  t1 = $._tests;
  $._tests = $.getInterceptor(t1).filter$1(t1, filterFunction);
};

$.runTests = function() {
  $._currentTest = 0;
  $._currentGroup = '';
  if (!($._soloTest == null))
    $.filterTests(new $.runTests_anon());
  $._config.onStart$0();
  $._defer(new $.runTests_anon0());
};

$.guardAsync = function(tryBody, finallyBody, testNum, exception) {
  var t1, e, trace;
  if ($.ltB(testNum, 0))
    testNum = $._currentTest;
  try {
    t1 = tryBody.call$0();
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    trace = $.getTraceFromException(exception);
    $._registerException(testNum, e, trace);
  }
 finally {
    if (!(finallyBody == null))
      finallyBody.call$0();
  }
};

$._registerException = function(testNum, e, trace) {
  var message;
  trace = trace == null ? '' : $.toString(trace);
  if ($.index($._tests, testNum).get$result() == null) {
    message = typeof e === 'object' && e !== null && !!e.is$ExpectException ? e.message : 'Caught ' + $.S(e);
    $.index($._tests, testNum).fail$2(message, trace);
  } else
    $.index($._tests, testNum).error$2('Caught ' + $.S(e), trace);
  if ($.eqB(testNum, $._currentTest) && $.gtB($.index($._tests, testNum).get$callbackFunctionsOutstanding(), 0)) {
    $._currentTest = $.add($._currentTest, 1);
    $._testRunner.call$0();
  }
};

$._nextBatch = function() {
  for (; $.ltB($._currentTest, $.get$length($._tests));) {
    var testCase = $.index($._tests, $._currentTest);
    $.guardAsync(new $._nextBatch_anon(testCase), null, $._currentTest);
    if (testCase.get$isComplete() !== true && $.gtB(testCase.get$callbackFunctionsOutstanding(), 0))
      return;
    $._currentTest = $.add($._currentTest, 1);
  }
  $._completeTests();
};

$._completeTests = function() {
  var t1, testsPassed_, testsFailed_, testsErrors_;
  if ($._initialized !== true)
    return;
  for (t1 = $.iterator($._tests), testsPassed_ = 0, testsFailed_ = 0, testsErrors_ = 0; t1.get$hasNext() === true;)
    switch (t1.next$0().get$result()) {
      case 'pass':
        ++testsPassed_;
        break;
      case 'fail':
        ++testsFailed_;
        break;
      case 'error':
        ++testsErrors_;
        break;
    }
  $._config.onDone$5(testsPassed_, testsFailed_, testsErrors_, $._tests, $._uncaughtErrorMessage);
  $._initialized = false;
};

$._fullSpec = function(spec) {
  return !$.eqB($._currentGroup, '') ? $.S($._currentGroup) + $.S($.groupSep) + spec : spec;
};

$.ensureInitialized = function() {
  if ($._initialized === true)
    return;
  $._initialized = true;
  $.wrapAsync = $.expectAsync1;
  $._tests = [];
  $._testRunner = $._nextBatch;
  $._uncaughtErrorMessage = null;
  if ($._config == null)
    $._config = $.Configuration$();
  $._config.onInit$0();
  if ($._config.get$autoStart() === true)
    $._defer($.runTests);
};

$._SimpleEnumerable$ = function(_source) {
  return new $._SimpleEnumerable(_source);
};

$.orderedEquals = function(expected) {
  return $._OrderedEquals$(expected);
};

$.unorderedEquals = function(expected) {
  return $._UnorderedEquals$(expected);
};

$.everyElement = function(matcher) {
  return $._EveryElement$($.wrapMatcher(matcher));
};

$.HashSet_HashSet = function() {
  return $._HashSetImpl$();
};

$.same = function(expected) {
  return $._IsSameAs$(expected);
};

$.equals = function(expected, limit) {
  return $._DeepMatcher$(expected, limit);
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._handleCallbackFunctionComplete = function(testNum) {
  $._defer(new $._handleCallbackFunctionComplete_anon(testNum));
};

$.Collections_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$.Collections_some = function(iterable, f) {
  var t1;
  for (t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
};

$.Collections_every = function(iterable, f) {
  var t1;
  for (t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) !== true)
      return false;
  return true;
};

$.Collections_map = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.iterator(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(destination).add$1(destination, f.call$1(t2));
  }
  return destination;
};

$.Collections_reduce = function(iterable, initialValue, combine) {
  var t1;
  for (t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    initialValue = combine.call$2(initialValue, t1.next$0());
  return initialValue;
};

$.contains = function(expected) {
  return $._Contains$(expected);
};

$.Collections_filter = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.iterator(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      $.getInterceptor(destination).add$1(destination, t2);
  }
  return destination;
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer('');
  $.Collections__emitCollection(c, result, $._ListImpl_List(null));
  return $.toString(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var isList, t1, first, t2;
  $.getInterceptor(visiting).add$1(visiting, c);
  isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  t1 = $.getInterceptor(result);
  t1.add$1(result, isList ? '[' : '{');
  for (t1 = $.iterator(c), first = true; t1.get$hasNext() === true; first = false) {
    t2 = t1.next$0();
    if (!first)
      $.getInterceptor(result).add$1(result, ', ');
    $.Collections__emitObject(t2, result, visiting);
  }
  t1 = $.getInterceptor(result);
  t1.add$1(result, isList ? ']' : '}');
  $.getInterceptor(visiting).removeLast$0(visiting);
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = $.getInterceptor(result);
      t1.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? '[...]' : '{...}');
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor(result).add$1(result, '{...}');
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor(result).add$1(result, o);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.iterator(c); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$.expect = function(actual, matcher, failureHandler, reason, verbose, exception) {
  var doesMatch, matchState, t1, e, trace;
  matcher = $.wrapMatcher(matcher);
  doesMatch = null;
  matchState = $.MatchState$(null);
  try {
    doesMatch = matcher.matches$2(actual, matchState);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    trace = $.getTraceFromException(exception);
    doesMatch = false;
    if (reason == null) {
      t1 = e;
      reason = $.S(typeof t1 === 'string' ? e : $.toString(e)) + ' at ' + $.S(trace);
    }
  }

  if (doesMatch !== true) {
    if (failureHandler == null)
      failureHandler = $.getOrCreateExpectFailureHandler();
    failureHandler.failMatch$5(actual, matcher, reason, matchState, verbose);
  }
};

$.expectAsync1 = function(callback, count) {
  return $._SpreadArgsHelper$fixedCallCount(callback, count).get$invoke1();
};

$.configureExpectFailureHandler = function(handler) {
  $._assertFailureHandler = handler == null ? $.DefaultFailureHandler$() : handler;
};

$.getOrCreateExpectFailureHandler = function() {
  if ($._assertFailureHandler == null)
    $.configureExpectFailureHandler(null);
  return $._assertFailureHandler;
};

$._defaultErrorFormatter = function(actual, matcher, reason, matchState, verbose) {
  var description, t1;
  description = $.StringDescription$('');
  t1 = $.getInterceptor(description).add$1(description, 'Expected: ').addDescriptionOf$1(matcher);
  $.getInterceptor(t1).add$1(t1, '\n     but: ');
  matcher.describeMismatch$4(actual, description, matchState, verbose);
  $.getInterceptor(description).add$1(description, '.\n');
  if (verbose === true && typeof actual === 'object' && actual !== null && (actual.constructor === Array || actual.is$Iterable())) {
    t1 = $.getInterceptor(description).add$1(description, 'Actual: ').addDescriptionOf$1(actual);
    $.getInterceptor(t1).add$1(t1, '\n');
  }
  if (!(reason == null)) {
    t1 = $.getInterceptor(description).add$1(description, reason);
    $.getInterceptor(t1).add$1(t1, '\n');
  }
  return description.toString$0();
};

$.wrapMatcher = function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$Matcher)
    return x;
  else if (typeof x === 'function' || typeof x === 'object' && x !== null && !!x.is$Function)
    return $._Predicate$(x, 'satisfies function');
  else
    return $._DeepMatcher$(x, 100);
};

$.port = function() {
  if ($._lazyPort == null)
    $._lazyPort = $.ReceivePort_ReceivePort();
  return $._lazyPort;
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$.ScriptProcessorNodeEvents$ = function(_ptr) {
  return new $.ScriptProcessorNodeEvents(_ptr);
};

$._reportTestError = function(msg, trace) {
  var testCase;
  if ($.ltB($._currentTest, $.get$length($._tests))) {
    testCase = $.index($._tests, $._currentTest);
    testCase.error$2(msg, trace);
    if ($.gtB(testCase.get$callbackFunctionsOutstanding(), 0)) {
      $._currentTest = $.add($._currentTest, 1);
      $._testRunner.call$0();
    }
  } else
    $._uncaughtErrorMessage = msg + ': ' + trace;
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.closeTo = function(value, delta) {
  return $._IsCloseTo$(value, delta);
};

$.isNot = function(matcher) {
  return $._IsNot$($.wrapMatcher(matcher));
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  return new $.SharedWorkerContextEvents(_ptr);
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer('');
  $.Maps__emitMap(m, result, $._ListImpl_List(null));
  return $.toString(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.getInterceptor(visiting).add$1(visiting, m);
  $.getInterceptor(result).add$1(result, '{');
  t1.first_1 = true;
  $.getInterceptor(m).forEach$1(m, new $.Maps__emitMap_anon(t1, visiting, result));
  $.getInterceptor(result).add$1(result, '}');
  $.getInterceptor(visiting).removeLast$0(visiting);
};

$._Collections_contains = function(iterable, element) {
  var t1;
  for (t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    if ($.eqB(t1.next$0(), element))
      return true;
  return false;
};

$._Collections_map = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.iterator(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(destination).add$1(destination, f.call$1(t2));
  }
  return destination;
};

$._Collections_every = function(iterable, f) {
  var t1;
  for (t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) !== true)
      return false;
  return true;
};

$._Collections_filter = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.iterator(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      $.getInterceptor(destination).add$1(destination, t2);
  }
  return destination;
};

$._Collections_some = function(iterable, f) {
  var t1;
  for (t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    if (f.call$1(t1.next$0()) === true)
      return true;
  return false;
};

$._timerFactory = function(millis, callback, repeating) {
  return repeating === true ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$.registerTests0 = function() {
  $.runRetainedTests();
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator($.get$length(array), array, 0);
};

$._testPElementParent = function() {
  var child, parentElement;
  child = $.Shape$(10, 10, 'blue', $.CTC29);
  $.expect(child.get$parent(), $.CTC6, null, null, false);
  $.expect(new $._testPElementParent_anon(child), $.CTC17, null, null, false);
  $.expect(new $._testPElementParent_anon0(child), $.CTC17, null, null, false);
  parentElement = $._TestParentElement$();
  child.registerParent$1(parentElement);
  $.expect(child.get$parent(), $.CTC30, null, null, false);
  $.expect(new $._testPElementParent_anon1(child, parentElement), $.CTC31, null, null, false);
  child.unregisterParent$1(parentElement);
  $.expect(new $._testPElementParent_anon2(child, parentElement), $.CTC17, null, null, false);
  $.expect(child.get$parent(), $.CTC6, null, null, false);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.$$ = function(source) {
  if (typeof source === 'object' && source !== null && !!source.is$Enumerable)
    return source;
  else
    return $.Enumerable_Enumerable$fromIterable(source);
};

$.runRetainedTests = function() {
  $.group('bot_retained', new $.runRetainedTests_anon());
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$._testAddRemoveFromPanel = function() {
  var panel, shape;
  panel = $.PCanvas$(100, 100, false);
  $.expect(new $._testAddRemoveFromPanel_anon(panel), $.CTC17, null, null, false);
  $.expect(panel.get$visualChildCount(), 0, null, null, false);
  shape = $.Shape$(10, 10, 'blue', $.CTC29);
  $.expect(shape.get$parent(), $.CTC6, null, null, false);
  panel.addElement$1(shape);
  $.expect(panel.get$visualChildCount(), 1, null, null, false);
  $.expect(shape.get$parent(), $.CTC30, null, null, false);
  $.expect(new $._testAddRemoveFromPanel_anon0(panel, shape), $.CTC17, null, null, false);
  $.expect(new $._testAddRemoveFromPanel_anon1(panel), $.CTC17, null, null, false);
  $.expect(panel.removeElement$1(shape), $.CTC7, null, null, false);
  $.expect(panel.get$visualChildCount(), 0, null, null, false);
  $.expect(shape.get$parent(), $.CTC6, null, null, false);
  $.PCanvas$(10, 10, false).addElement$1(shape);
  $.expect(new $._testAddRemoveFromPanel_anon2(panel, shape), $.CTC17, null, null, false);
};

$._testRemoveTransform = function() {
  var element, tx;
  element = $.Shape$(10, 10, 'blue', $.CTC29);
  $.expect(new $._testRemoveTransform_anon(element), $.CTC17, null, null, false);
  tx = element.addTransform$0();
  $.expect(element.removeTransform$1(tx), $.CTC7, null, null, false);
  $.expect(element.removeTransform$1(tx), $.CTC, null, null, false);
};

$.AttachedEvent$ = function(name$) {
  return new $.AttachedEvent(name$);
};

$.n$ = function(source) {
  return $.NumberEnumerable_NumberEnumerable$from(source);
};

$.ElementMouseEventArgs_ElementMouseEventArgs = function(element, mouseEvent) {
  return $.ElementMouseEventArgs$_internal(element, mouseEvent.get$shiftKey());
};

$._testDoudbleClickManager = function() {
  var stage, cm;
  stage = $.Stage$($.CanvasElement_CanvasElement($, $), $.Shape$(100, 100, 'blue', $.CTC29));
  cm = $.ClickManager_ClickManager(stage);
  $.expect($.ClickManager_ClickManager(stage), $.same(cm), null, null, false);
};

$.PCanvas$ = function(w, h, enableCache) {
  return new $.PCanvas($._ListImpl_List(null), null, $._ListImpl_List(null), enableCache, $.EventHandle$(), null, w, h, null, null, false, null, $.HashMap_HashMap(), $.HashMap_HashMap(), false);
};

$.ClickManager$_internal = function(_stage) {
  var t1 = new $.ClickManager(_stage, null);
  t1.ClickManager$_internal$1(_stage);
  return t1;
};

$.isValidNumber = function(value) {
  return !(value == null) && $.get$isInfinite(value) !== true && $.get$isNaN(value) !== true;
};

$.rnd = function() {
  if ($._botHelperRandom == null)
    $._botHelperRandom = $.Random_Random(null);
  return $._botHelperRandom;
};

$.requireArgumentNotNull = function(argument, argName) {
  if (argument == null)
    throw $.$$throw($.NullArgumentException$(argName));
};

$.requireArgument = function(truth, arg, message) {
  if (truth !== true)
    if (!(message == null))
      throw $.$$throw($.DetailedIllegalArgumentException$(arg, message));
    else
      throw $.$$throw($.ArgumentError$(arg));
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  return new $.SpeechRecognitionEvents(_ptr);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.RegExp_RegExp = function(pattern, ignoreCase, multiLine) {
  return $.JSSyntaxRegExp$(pattern, ignoreCase, multiLine);
};

$._IsSameAs$ = function(_expected) {
  return new $._IsSameAs(_expected);
};

$.getMouseEventCoordinate = function(event$) {
  return $.Coordinate$(event$.get$offsetX(), event$.get$offsetY());
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.NoSuchMethodError_safeToString = function(object) {
  var t1;
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.toString(object);
  if (typeof object === 'string') {
    t1 = $.getInterceptor(object).replaceAll$2(object, '\\', '\\\\');
    t1 = $.getInterceptor(t1).replaceAll$2(t1, '\n', '\\n');
    t1 = $.getInterceptor(t1).replaceAll$2(t1, '\r', '\\r');
    return '"' + $.S($.getInterceptor(t1).replaceAll$2(t1, '"', '\\"')) + '"';
  }
  return $.Primitives_objectToString(object);
};

$.require = function(truth, message) {
  if (truth !== true)
    throw $.$$throw($._ExceptionImplementation$(message));
};

$.registerTests = function() {
  $.runBotTests();
  $.runAsyncTests();
};

$.runAsyncTests = function() {
  $.group('bot_async', new $.runAsyncTests_anon());
};

$.spawnFunction = function(topLevelFunction) {
  var name$ = (topLevelFunction.$name || null);
  if (name$ == null)
    throw $.$$throw($.UnsupportedError$('only top-level functions can be spawned.'));
  return $._IsolateNatives__spawn(name$, null, false);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError('value ' + $.S(value));
};

$._listToT3 = function(input) {
  return $.Tuple3$($.index(input, 0), $.index(input, 1), $.index(input, 2));
};

$._complexTestIsolate = function() {
  $.SendValuePort$(new $._complexTestIsolate_anon(), $._listToT2, $._t3ToList);
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$._listToT2 = function(input) {
  if (input == null)
    return;
  else
    return $.Tuple$($.index(input, 0), $.index(input, 1));
};

$._t3ToList = function(input) {
  return [input.get$item1(), input.get$item2(), input.get$item3()];
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $globals = rootContext.isolateStatics;
  $static_init();
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$._testIsolate = function() {
  $.SendValuePort$(new $._testIsolate_anon(), null, null);
};

$._t2ToList = function(input) {
  if (input == null)
    return;
  else
    return [input.get$item1(), input.get$item2()];
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if ('\nThis program is using an experimental feature called "mirrors".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n' === string)
    $.Primitives_mirrorsEnabled = true;
  else if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives_parseInt = function(string) {
  var match, base, result;
  $.checkString(string);
  match = /^\s*[+-]?(?:0(x)[a-f0-9]+|\d+)\s*$/i.exec(string);
  if (match == null)
    throw $.$$throw($.FormatException$(string));
  base = !($.index(match, 1) == null) ? 16 : 10;
  result = parseInt(string, base);
  if ($.get$isNaN(result) === true)
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.Mouse_markMouseOver = function(stage, coordinate) {
  var t1, items, hits;
  $.requireArgumentNotNull(stage, 'stage');
  t1 = !(coordinate == null);
  $.requireArgument(coordinate == null || coordinate.get$isValid() === true, 'coordinate', null);
  items = $.get$Mouse__stageMouseCacheProperty().get$1(stage);
  if (!(items == null)) {
    $.getInterceptor(items).forEach$1(items, new $.Mouse_markMouseOver_anon());
    $.get$Mouse__stageMouseCacheProperty().clear$1(stage);
  }
  if (t1) {
    hits = $.RetainedUtil__hitTest(stage.get$rootElement(), coordinate);
    $.get$Mouse__stageMouseCacheProperty().set$2(stage, hits);
    $.getInterceptor(hits).forEach$1(hits, new $.Mouse_markMouseOver_anon0());
    if (hits.length > 0) {
      t1 = $.get$Mouse_isMouseDirectlyOverProperty();
      if (0 >= hits.length)
        throw $.ioore(0);
      t1.set$2(hits[0], true);
    }
    return hits;
  }
  return;
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, 'Object')) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.getInterceptor(name$).charCodeAt$1(name$, 0) === 36 ? $.getInterceptor(name$).substring$1(name$, 1) : name$;
};

$.Primitives_objectToString = function(object) {
  return 'Instance of \'' + $.S($.Primitives_objectTypeName(object)) + '\'';
};

$.Primitives_newList = function(length$) {
  var result;
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.runBotTests = function() {
  $.group('bot', new $.runBotTests_anon());
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getYear = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0) : ($.Primitives_lazyAsJsDate(receiver).getFullYear() + 0);
};

$.Primitives_getMonth = function(receiver) {
  return receiver.isUtc === true ? $.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : $.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
};

$.Primitives_getDay = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0) : ($.Primitives_lazyAsJsDate(receiver).getDate() + 0);
};

$.Primitives_getHours = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0) : ($.Primitives_lazyAsJsDate(receiver).getHours() + 0);
};

$.Primitives_getMinutes = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMinutes() + 0);
};

$.Primitives_getSeconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getSeconds() + 0);
};

$.Primitives_getMilliseconds = function(receiver) {
  return receiver.isUtc === true ? ($.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0) : ($.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0);
};

$.RetainedUtil_transformPointGlobalToLocal = function(element, point) {
  return element.getTransform$0().createInverse$0().transformCoordinate$1(point);
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.RetainedUtil__hitTest = function(element, point) {
  var bounds, hits, length$, t1, i;
  point = $.RetainedUtil_transformPointGlobalToLocal(element, point);
  bounds = $.Box$(0, 0, element.get$width(), element.get$height());
  hits = $._ListImpl_List(null);
  if (bounds.contains$1(point) === true) {
    if (typeof element === 'object' && element !== null && !!element.is$ParentElement) {
      length$ = element.get$visualChildCount();
      if (typeof length$ !== 'number')
        return $.RetainedUtil__hitTest$bailout(1, element, point, hits, length$);
      for (t1 = length$ - 1, i = 0; i < length$; ++i) {
        hits = $.RetainedUtil__hitTest(element.getVisualChild$1(t1 - i), point);
        if (hits.length > 0)
          break;
      }
      element = element;
    }
    $.getInterceptor(hits).add$1(hits, element);
  }
  return hits;
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.Box$ = function(left, top$, width, height) {
  return new $.Box(left, top$, width, height);
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.ElementMouseEventArgs$_internal = function(element, shiftKey) {
  return new $.ElementMouseEventArgs(element, shiftKey);
};

$.Box_Box$fromCoordSize = function(topLeft, size) {
  return $.Box$(topLeft.get$x(), topLeft.get$y(), size.get$width(), size.get$height());
};

$.Strings_join = function(strings, separator) {
  $.checkNull(strings);
  $.checkNull(separator);
  return $.stringJoinUnchecked($.Strings__toJsStringArray(strings), separator);
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string, array;
  if (typeof strings !== 'object' || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $._ListImpl_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      array[i] = string;
    }
  }
  return array;
};

$.NullPointerException$ = function(functionName, arguments$) {
  return new $.NullPointerException(functionName, arguments$);
};

$.TextTrackEvents$ = function(_ptr) {
  return new $.TextTrackEvents(_ptr);
};

$.Comparable_compare = function(a, b) {
  return $.compareTo(a, b);
};

$.TextTrackCueEvents$ = function(_ptr) {
  return new $.TextTrackCueEvents(_ptr);
};

$._globalState0 = function(val) {
  $globalState = val;
};

$.ClickManager_ClickManager = function(stage) {
  $.requireArgumentNotNull(stage, 'stage');
  return $.get$ClickManager__clickManagerProperty().get$2(stage, new $.ClickManager_ClickManager_anon());
};

$._ListImpl_List = function(length$) {
  return $.Primitives_newList(length$);
};

$._ListImpl_List$from = function(other) {
  var result, t1, t2;
  result = $._ListImpl_List(null);
  for (t1 = $.iterator(other); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(result).add$1(result, t2);
  }
  return result;
};

$.Map_Map = function() {
  return $._HashMapImpl$();
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.Stage$ = function(_canvas, _element) {
  var t1 = new $.Stage($.EventHandle$(), _canvas, _element, null, $.HashMap_HashMap(), $.HashMap_HashMap(), false);
  t1.Stage$2(_canvas, _element);
  return t1;
};

$.TestCase$ = function(id, description, test, callbackFunctionsOutstanding) {
  var t1 = $._currentGroup;
  return new $.TestCase(id, description, $._testSetup, $._testTeardown, test, callbackFunctionsOutstanding, '', null, null, t1, null, null, true, false);
};

$.TextTrackListEvents$ = function(_ptr) {
  return new $.TextTrackListEvents(_ptr);
};

$.Configuration$ = function() {
  return new $.Configuration(null);
};

$.int_parse = function(source) {
  return $.Primitives_parseInt(source);
};

$.ReceivePort_ReceivePort = function() {
  return $._ReceivePortImpl$();
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.DOMApplicationCacheEvents$ = function(_ptr) {
  return new $.DOMApplicationCacheEvents(_ptr);
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $._ReceivePortImpl(t1, null);
  t1._ReceivePortImpl$0();
  return t1;
};

$._Elements_createCanvasElement = function(width, height) {
  var _e = $.document().$$dom_createElement$1('canvas');
  if (!(width == null))
    _e.set$width(width);
  if (!(height == null))
    _e.set$height(height);
  return _e;
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$.TestFutureValueResult__testValueRoundTrip = function() {
  var initialVal, map, newVal;
  initialVal = $.FutureValueResult$(42, null);
  map = initialVal.toMap$0();
  $.expect($.FutureValueResult_isMyMap(map), $.CTC7, null, null, false);
  newVal = $.FutureValueResult_FutureValueResult$fromMap(map);
  $.expect(newVal, $.equals(initialVal, 100), null, null, false);
  $.expect(newVal, $.isNot($.same(initialVal)), null, null, false);
  $.expect(newVal.get$value(), $.equals(42, 100), null, null, false);
};

$.TestSendPortValue__testSimple = function() {
  var tv, callback, onError, t1;
  tv = $._TestValue$();
  callback = $.expectAsync1(new $.TestSendPortValue__testSimple_anon(tv), 1);
  onError = $.expectAsync1(new $.TestSendPortValue__testSimple_anon0(), 1);
  t1 = tv.get$outputChanged();
  $.getInterceptor(t1).add$1(t1, callback);
  t1 = tv.get$error();
  $.getInterceptor(t1).add$1(t1, onError);
  tv.set$input(5);
  tv.set$input(-1);
};

$.TestSendPortValue__testComplex = function() {
  var tv, callback, onError, t1;
  tv = $._ComplexTestValue$();
  callback = $.expectAsync1(new $.TestSendPortValue__testComplex_anon(tv), 1);
  onError = $.expectAsync1(new $.TestSendPortValue__testComplex_anon0(), 1);
  t1 = tv.get$outputChanged();
  $.getInterceptor(t1).add$1(t1, callback);
  t1 = tv.get$error();
  $.getInterceptor(t1).add$1(t1, onError);
  tv.set$input($.Tuple$(5, 6));
  tv.set$input(null);
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$.TestFutureValueResult_run = function() {
  $.group('FutureValueResult', new $.TestFutureValueResult_run_anon());
};

$.FutureValueResult$ = function(value, _outputSerializer) {
  return new $.FutureValueResult(value, null, _outputSerializer);
};

$.FutureValueResult$fromException = function(exception) {
  var t1 = new $.FutureValueResult(null, exception, null);
  t1.FutureValueResult$fromException$1(exception);
  return t1;
};

$.FutureValueResult_FutureValueResult$fromMap = function(value) {
  var ex;
  $.requireArgumentNotNull(value, 'value');
  $.requireArgument($.FutureValueResult_isMyMap(value), 'value', null);
  ex = $.index(value, 'exception');
  if (!(ex == null))
    return $.FutureValueResult$fromException(ex);
  else
    return $.FutureValueResult$($.index(value, 'value'), null);
};

$.FutureValueResult_isMyMap = function(value) {
  return !(value == null) && $.eqB($.get$length(value), 2) && value.containsKey$1('value') === true && value.containsKey$1('exception') === true;
};

$.TestFutureValueResult__testExceptionRoundTrip = function() {
  var initialVal, map, newVal;
  initialVal = $.FutureValueResult$fromException('oops');
  map = initialVal.toMap$0();
  $.expect($.FutureValueResult_isMyMap(map), $.CTC7, null, null, false);
  newVal = $.FutureValueResult_FutureValueResult$fromMap(map);
  $.expect(newVal, $.equals(initialVal, 100), null, null, false);
  $.expect(newVal, $.isNot($.same(initialVal)), null, null, false);
  $.expect(newVal.get$exception(), $.equals('oops', 100), null, null, false);
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$());
};

$._IsNot$ = function(_matcher) {
  return new $._IsNot(_matcher);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(false, null, null, null, false, [], [], []);
};

$._FutureImpl__FutureImpl$immediate = function(value) {
  var res = $._FutureImpl$();
  res._setValue$1(value);
  return res;
};

$._ComplexTestValue$ = function() {
  return new $._ComplexTestValue($.spawnFunction($._complexTestIsolate), $._t2ToList, $._listToT3, null, null, null, null, null, false, $.EventHandle$(), $.EventHandle$(), $.EventHandle$());
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.Tuple3$ = function(param1, param2, item3) {
  return new $.Tuple3(item3, param1, param2);
};

$.FutureUnhandledException$ = function(source, stackTrace) {
  return new $.FutureUnhandledException(source, stackTrace);
};

$.Tuple$ = function(item1, item2) {
  return new $.Tuple(item1, item2);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$.Element_Element$html = function(html) {
  return $._ElementFactoryProvider_createElement_html(html);
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$multiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$ignoreCase(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$._IsolateNatives__thisScript = function() {
  return $thisScriptUrl;
};

$._IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, entryPoint, replyTo;
  msg = $._deserializeMessage(e.data);
  switch ($.index(msg, 'command')) {
    case 'start':
      t1 = $.index(msg, 'id');
      $._globalState().set$currentManagerId(t1);
      entryPoint = $globalThis[$.index(msg, 'functionName')];
      replyTo = $._deserializeMessage($.index(msg, 'replyTo'));
      $._globalState().get$topEventLoop().enqueue$3($._IsolateContext$(), new $._IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), 'worker-start');
      $._globalState().get$topEventLoop().run$0();
      break;
    case 'spawn-worker':
      $._IsolateNatives__spawnWorker($.index(msg, 'functionName'), $.index(msg, 'uri'), $.index(msg, 'replyPort'));
      break;
    case 'message':
      $.index(msg, 'port').send$2($.index(msg, 'msg'), $.index(msg, 'replyTo'));
      $._globalState().get$topEventLoop().run$0();
      break;
    case 'close':
      $._IsolateNatives__log('Closing Worker');
      $._globalState().get$managers().remove$1(sender.get$id());
      sender.terminate$0();
      $._globalState().get$topEventLoop().run$0();
      break;
    case 'log':
      $._IsolateNatives__log($.index(msg, 'msg'));
      break;
    case 'print':
      if ($._globalState().get$isWorker() === true)
        $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'print', 'msg', msg])));
      else
        $.print($.index(msg, 'msg'));
      break;
    case 'error':
      throw $.$$throw($.index(msg, 'msg'));
  }
};

$._IsolateNatives__log = function(msg, exception) {
  var trace;
  if ($._globalState().get$isWorker() === true)
    $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'log', 'msg', msg])));
  else
    try {
      $globalThis.console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($._ExceptionImplementation$(trace));
    }

};

$._IsolateNatives__spawn = function(functionName, uri, isLight) {
  var completer, port, signalReply;
  completer = $.Completer_Completer();
  port = $.ReceivePort_ReceivePort();
  port.receive$1(new $._IsolateNatives__spawn_anon(completer, port));
  signalReply = port.toSendPort$0();
  if ($._globalState().get$useWorkers() === true && !isLight)
    $._IsolateNatives__startWorker(functionName, uri, signalReply);
  else
    $._IsolateNatives__startNonWorker(functionName, uri, signalReply);
  return $._BufferingSendPort$($._globalState().get$currentContext().get$id(), completer.get$future());
};

$._IsolateNatives__startWorker = function(functionName, uri, replyPort) {
  if ($._globalState().get$isWorker() === true)
    $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'spawn-worker', 'functionName', functionName, 'uri', uri, 'replyPort', replyPort])));
  else
    $._IsolateNatives__spawnWorker(functionName, uri, replyPort);
};

$._IsolateNatives__startNonWorker = function(functionName, uri, replyPort) {
  if (!(uri == null))
    throw $.$$throw($.UnsupportedError$('Currently spawnUri is not supported without web workers.'));
  $._globalState().get$topEventLoop().enqueue$3($._IsolateContext$(), new $._IsolateNatives__startNonWorker_function(replyPort, functionName), 'nonworker start');
};

$._IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $globals = $._globalState().get$currentContext().isolateStatics;
  $static_init();
  $._lazyPort = $.ReceivePort_ReceivePort();
  replyTo.send$2('spawned', $.port().toSendPort$0());
  if (!($._window() == null))
    $._globalState().get$currentContext().eval$1(new $._IsolateNatives__startIsolate_anon());
  topLevel.call$0();
};

$._IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var t1, uri0, worker, workerId;
  if (functionName == null)
    functionName = 'main';
  if (uri == null)
    uri = $._IsolateNatives__thisScript();
  if ($.Uri$fromString(uri).isAbsolute$0() !== true) {
    t1 = $._IsolateNatives__thisScript();
    uri0 = $.S($.getInterceptor(t1).substring$2(t1, 0, $.lastIndexOf$1($._IsolateNatives__thisScript(), '/'))) + '/' + $.S(uri);
    uri = uri0;
  }
  worker = new Worker(uri);
  worker.set$onmessage(new $._IsolateNatives__spawnWorker_anon(worker));
  t1 = $._globalState();
  workerId = t1.get$nextManagerId();
  t1.set$nextManagerId($.add(workerId, 1));
  worker.set$id(workerId);
  $.indexSet($._globalState().get$managers(), workerId, worker);
  worker.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'start', 'id', workerId, 'replyTo', $._serializeMessage(replyPort), 'functionName', functionName])));
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  return new $.DedicatedWorkerContextEvents(_ptr);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.WorkerContextEvents$ = function(_ptr) {
  return new $.WorkerContextEvents(_ptr);
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$.Uri$fromString = function(uri) {
  var t1 = $.get$Uri__splitRe().firstMatch$1(uri);
  return new $.Uri($.Uri__emptyIfNull($.index(t1, 1)), $.Uri__emptyIfNull($.index(t1, 2)), $.Uri__emptyIfNull($.index(t1, 3)), $.Uri__parseIntOrZero($.index(t1, 4)), $.Uri__emptyIfNull($.index(t1, 5)), $.Uri__emptyIfNull($.index(t1, 6)), $.Uri__emptyIfNull($.index(t1, 7)));
};

$.Uri__emptyIfNull = function(val) {
  return !(val == null) ? val : '';
};

$.Uri__parseIntOrZero = function(val) {
  if (!(val == null) && !$.eqB(val, ''))
    return $.int_parse(val);
  else
    return 0;
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$.Futures_wait = function(futures) {
  var t1, completer, result, values, i, future;
  t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior()))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC4);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_1 = futures.length;
  values = $._ListImpl_List(futures.length);
  for (i = 0; i < futures.length; ++i) {
    future = futures[i];
    future.then$1(new $.Futures_wait_anon(t1, i, result, completer, values));
    future.handleException$1(new $.Futures_wait_anon0(future, result, completer));
  }
  return result;
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$._BufferingSendPort$ = function(isolateId, _futurePort) {
  var t1 = new $._BufferingSendPort($._BufferingSendPort__idCount, null, _futurePort, [], isolateId);
  t1._BufferingSendPort$2(isolateId, _futurePort);
  return t1;
};

$.CanvasElement_CanvasElement = function(height, width) {
  var t1, t2;
  t1 = $ === height;
  if (t1)
    height = null;
  t2 = $ === width;
  if (t2)
    width = null;
  if (t2)
    return $._Elements_createCanvasElement(null, null);
  if (t1)
    return $._Elements_createCanvasElement(width, null);
  return $._Elements_createCanvasElement(width, height);
};

$.Uri__addIfNonEmpty = function(sb, test, first, second) {
  var t1;
  if (!('' === test)) {
    t1 = $.getInterceptor(sb);
    t1.add$1(sb, first == null ? 'null' : first);
    t1 = $.getInterceptor(sb);
    t1.add$1(sb, second == null ? 'null' : second);
  }
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.SendValuePort$ = function(_func, inputDeserializer, outputSerializer) {
  var t1 = new $.SendValuePort(_func, inputDeserializer, outputSerializer);
  t1.SendValuePort$3$inputDeserializer$outputSerializer(_func, inputDeserializer, outputSerializer);
  return t1;
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$.TestTuple_run = function() {
  $.test('Tuple', new $.TestTuple_run_anon());
  $.test('Tuple3', new $.TestTuple_run_anon0());
};

$.TestEnumerable_run = function() {
  $.group('Enumerable', new $.TestEnumerable_run_anon());
};

$.TestEnumerable__testIsEmpty = function() {
  $.expect($.get$isEmpty($.$$([])), $.CTC7, null, null, false);
  $.expect($.get$isEmpty($.$$([1])), $.CTC, null, null, false);
};

$.TestEnumerable__testReduce = function() {
  var enum$ = $.$$([0, 1, 2]);
  $.expect($.getInterceptor(enum$).reduce$2(enum$, 0, new $.TestEnumerable__testReduce_anon()), 3, null, null, false);
  $.expect($.getInterceptor(enum$).reduce$2(enum$, 1, new $.TestEnumerable__testReduce_anon0()), 0, null, null, false);
};

$.TestEnumerable__testSingle = function() {
  $.expect($.$$([42]).single$0(), $.equals(42, 100), null, null, false);
  $.expect(new $.TestEnumerable__testSingle_anon(), $.CTC13, null, null, false);
  $.expect(new $.TestEnumerable__testSingle_anon0(), $.CTC13, null, null, false);
  $.expect($.$$([3, 4, 5]).single$1(new $.TestEnumerable__testSingle_anon1()), $.equals(4, 100), null, null, false);
  $.expect(new $.TestEnumerable__testSingle_anon2(), $.CTC13, null, null, false);
  $.expect(new $.TestEnumerable__testSingle_anon3(), $.CTC13, null, null, false);
  $.expect($.$$([3, 4, 5]).singleOrDefault$1(new $.TestEnumerable__testSingle_anon4()), $.equals(4, 100), null, null, false);
  $.expect($.$$([3, 4, 5]).singleOrDefault$1(new $.TestEnumerable__testSingle_anon5()), $.equals(null, 100), null, null, false);
  $.expect($.$$([3, 4, 5]).singleOrDefault$2(new $.TestEnumerable__testSingle_anon6(), -42), $.equals(-42, 100), null, null, false);
  $.expect(new $.TestEnumerable__testSingle_anon7(), $.CTC13, null, null, false);
};

$.TestEnumerable__testJoin = function() {
  var enum$ = $.$$([0, 1, 2]);
  $.expect(enum$.join$0(), $.equals('0, 1, 2', 100), null, null, false);
  $.expect(enum$.join$1('-'), $.equals('0-1-2', 100), null, null, false);
};

$.TestEnumerable__testFirst = function() {
  var enum$ = $.$$([0, 1, 2]);
  $.expect(enum$.first$0(), $.equals(0, 100), null, null, false);
  $.expect(new $.TestEnumerable__testFirst_anon(), $.CTC13, null, null, false);
  $.expect(enum$.first$1(new $.TestEnumerable__testFirst_anon0()), $.equals(1, 100), null, null, false);
  $.expect(new $.TestEnumerable__testFirst_anon1(enum$), $.CTC13, null, null, false);
  $.expect(enum$.firstOrDefault$1(new $.TestEnumerable__testFirst_anon2()), $.equals(1, 100), null, null, false);
  $.expect(enum$.firstOrDefault$1(new $.TestEnumerable__testFirst_anon3()), $.equals(null, 100), null, null, false);
  $.expect(enum$.firstOrDefault$2(new $.TestEnumerable__testFirst_anon4(), -42), $.equals(-42, 100), null, null, false);
};

$.TestEnumerable__testContains = function() {
  var enum$ = $.$$([0, 1, 2]);
  $.expect($.contains$1(enum$, 1), $.CTC7, null, null, false);
  $.expect($.contains$1(enum$, 3), $.CTC, null, null, false);
};

$.TestEnumerable__testForEachWithIndex = function() {
  $.$$([0, 1, 2, 3]).forEachWithIndex$1(new $.TestEnumerable__testForEachWithIndex_anon());
};

$.TestEnumerable__testToHashSet = function() {
  var noDupes = $.$$(['the', 'cat', 'is', 'super']);
  $.expect(noDupes.toHashSet$0(), $.unorderedEquals(noDupes), null, null, false);
  $.expect(noDupes.toHashSet$1(new $.TestEnumerable__testToHashSet_anon()), $.unorderedEquals([3, 2, 5]), null, null, false);
  $.expect($.$$(['the', 'cat', 'is', 'the', 'super', 'cat']).toHashSet$0(), $.unorderedEquals(noDupes), null, null, false);
  $.expect(noDupes.toHashSet$1(new $.TestEnumerable__testToHashSet_anon0()), $.unorderedEquals([3, 2, 5]), null, null, false);
};

$.TestEnumerable__testToHashMap = function() {
  var noDupes, hashMap, hashMap0;
  noDupes = $.$$(['the', 'kitty', 'is', 'super']);
  hashMap = noDupes.toHashMap$1(new $.TestEnumerable__testToHashMap_anon());
  $.getInterceptor(hashMap).forEach$1(hashMap, new $.TestEnumerable__testToHashMap_anon0());
  $.expect(hashMap.get$keys(), $.unorderedEquals(noDupes), null, null, false);
  hashMap0 = noDupes.toHashMap$2(new $.TestEnumerable__testToHashMap_anon1(), new $.TestEnumerable__testToHashMap_anon2());
  $.getInterceptor(hashMap0).forEach$1(hashMap0, new $.TestEnumerable__testToHashMap_anon3());
  $.expect(hashMap0.get$values(), $.unorderedEquals(noDupes), null, null, false);
  $.expect(new $.TestEnumerable__testToHashMap_anon4(noDupes), $.CTC12, null, null, false);
  $.expect(new $.TestEnumerable__testToHashMap_anon5($.$$(['the', 'cat', 'is', 'the', 'super', 'cat'])), $.CTC12, null, null, false);
};

$.TestEnumerable__testLength = function() {
  $.expect($.$$([1, 2, 3, 4, 5, 6]).count$0(), $.equals(6, 100), null, null, false);
};

$.TestEnumerable__testDistinct = function() {
  var enum$ = $.$$([0, 0, 1, 1, 2, 2, 0, 1, 2, 3, 4, 5]);
  $.expect(enum$.distinct$0(), $.unorderedEquals([0, 1, 2, 3, 4, 5]), null, null, false);
  $.expect(enum$.distinct$1(new $.TestEnumerable__testDistinct_anon()), $.unorderedEquals([0, 1]), null, null, false);
};

$.TestEnumerable__testMap = function() {
  var t1 = $.$$([1, 2, 3, 4, 5, 6]);
  $.expect($.getInterceptor(t1).map$1(t1, new $.TestEnumerable__testMap_anon()), $.orderedEquals([2, 4, 6, 8, 10, 12]), null, null, false);
};

$.TestEnumerable__testSelectNumbers = function() {
  var e = $.$$(['a', 'cat', 'is', 'super']).selectNumbers$1(new $.TestEnumerable__testSelectNumbers_anon());
  $.expect(e, $.orderedEquals([1, 3, 2, 5]), null, null, false);
  $.expect(e.sum$0(), $.equals(11, 100), null, null, false);
};

$.TestEnumerable__testForEach = function() {
  var t1, e;
  t1 = {};
  e = $.$$([1, 2, 3, 4, 5, 6]);
  t1.sum_1 = 0;
  $.getInterceptor(e).forEach$1(e, new $.TestEnumerable__testForEach_anon(t1));
  $.expect(t1.sum_1, $.equals(21, 100), null, null, false);
};

$.TestEnumerable__testAggregate = function() {
  var summer, prepender;
  summer = new $.TestEnumerable__testAggregate_anon();
  $.expect($.$$([1, 2, 3]).aggregate$2(0, summer), $.equals(6, 100), null, null, false);
  prepender = new $.TestEnumerable__testAggregate_anon0();
  $.expect($.$$(['first', 'second', 'third']).aggregate$2('', prepender), $.equals('thirdsecondfirst', 100), null, null, false);
};

$.TestEnumerable__testSelectMany = function() {
  var select, charList;
  select = $.$$(['Okoboji', 'Iowa']).selectMany$1($.TestEnumerable__getChars);
  charList = $._ListImpl_List$from(select);
  $.expect(charList.length, $.equals(11, 100), null, null, false);
  if (6 >= charList.length)
    throw $.ioore(6);
  $.expect(charList[6], $.equals('i', 100), null, null, false);
  if (7 >= charList.length)
    throw $.ioore(7);
  $.expect(charList[7], $.equals('I', 100), null, null, false);
  $.expect($.get$length(select.group$0()), $.equals(9, 100), null, null, false);
  $.expect($.some(select, new $.TestEnumerable__testSelectMany_anon()), $.CTC7, null, null, false);
  $.expect($.some(select, new $.TestEnumerable__testSelectMany_anon0()), $.CTC, null, null, false);
  $.expect($.every(select, new $.TestEnumerable__testSelectMany_anon1()), $.CTC, null, null, false);
  $.expect($.every(select, new $.TestEnumerable__testSelectMany_anon2()), $.CTC7, null, null, false);
};

$.TestEnumerable__getChars = function(input) {
  var list, i, t1;
  if (typeof input !== 'string' && (typeof input !== 'object' || input === null || input.constructor !== Array && !input.is$JavaScriptIndexingBehavior()))
    return $.TestEnumerable__getChars$bailout(1, input);
  list = $._ListImpl_List(null);
  for (i = 0; i < input.length; ++i) {
    t1 = $.getInterceptor(list);
    if (i >= input.length)
      throw $.ioore(i);
    t1.add$1(list, input[i]);
  }
  return list;
};

$.TestEnumerable__testComplexGrouping = function() {
  var keyFunc, grouping, list, source, list0;
  keyFunc = new $.TestEnumerable__testComplexGrouping_anon();
  grouping = $.$$(['a']).group$1(keyFunc);
  $.expect($.get$length(grouping), $.equals(1, 100), null, null, false);
  list = $.index(grouping, 1);
  $.expect($.get$length(list), $.equals(1, 100), null, null, false);
  $.expect($.index(list, 0), $.equals('a', 100), null, null, false);
  source = ['a', 'b', 'c', 'ab', 'bc', 'abc'];
  grouping = $.$$(source).group$1(keyFunc);
  $.expect($.get$length(grouping), $.equals(3, 100), null, null, false);
  list0 = $.index(grouping, 1);
  $.expect($.get$length(list0), $.equals(3, 100), null, null, false);
  $.expect(list0, $.contains('a'), null, null, false);
  $.expect(list0, $.contains('b'), null, null, false);
  $.expect(list0, $.contains('c'), null, null, false);
  $.expect(list0, $.isNot($.contains('d')), null, null, false);
  list0 = $.index(grouping, 2);
  $.expect($.get$length(list0), $.equals(2, 100), null, null, false);
  $.expect(list0, $.contains('ab'), null, null, false);
  $.expect(list0, $.contains('bc'), null, null, false);
  $.expect(list0, $.isNot($.contains('a')), null, null, false);
  list0 = $.index(grouping, 3);
  $.expect($.get$length(list0), $.equals(1, 100), null, null, false);
  $.expect($.index(list0, 0), $.equals('abc', 100), null, null, false);
  $.expect(list0, $.isNot($.contains('d')), null, null, false);
  $.expect($.index(grouping, 0), $.CTC6, null, null, false);
  $.expect($._ListImpl_List$from(grouping.getValues$0()), $.unorderedEquals(source), null, null, false);
};

$.TestEnumerable__testExclude = function() {
  var enum$ = $.$$([0, 1, 2, 3, 4]);
  $.expect(enum$.exclude$1([]), $.orderedEquals(enum$), null, null, false);
  $.expect(enum$.exclude$1([5, -1]), $.orderedEquals(enum$), null, null, false);
  $.expect(enum$.exclude$1([1, 3]), $.orderedEquals([0, 2, 4]), null, null, false);
};

$.TestEnumerable__testSimpleGrouping = function() {
  var grouping, list, list0, list1;
  grouping = $.$$([1]).group$0();
  $.expect($.get$length(grouping), $.equals(1, 100), null, null, false);
  list = $.index(grouping, 1);
  $.expect($.get$length(list), $.equals(1, 100), null, null, false);
  $.expect($.index(list, 0), $.equals(1, 100), null, null, false);
  grouping = $.$$([1, 1]).group$0();
  $.expect($.get$length(grouping), $.equals(1, 100), null, null, false);
  list0 = $.index(grouping, 1);
  $.expect($.get$length(list0), $.equals(2, 100), null, null, false);
  $.expect($.index(list0, 0), $.equals(1, 100), null, null, false);
  $.expect($.index(list0, 1), $.equals(1, 100), null, null, false);
  grouping = $.$$([1, 2, 3, 1, 2, 1]).group$0();
  $.expect($.get$length(grouping), $.equals(3, 100), null, null, false);
  list1 = $.index(grouping, 1);
  $.expect($.get$length(list1), $.equals(3, 100), null, null, false);
  $.expect(list1, $.everyElement($.equals(1, 100)), null, null, false);
  list1 = $.index(grouping, 2);
  $.expect($.get$length(list1), $.equals(2, 100), null, null, false);
  $.expect(list1, $.everyElement($.equals(2, 100)), null, null, false);
  list1 = $.index(grouping, 3);
  $.expect($.get$length(list1), $.equals(1, 100), null, null, false);
  $.expect(list1, $.everyElement($.equals(3, 100)), null, null, false);
  $.expect($.index(grouping, 4), $.CTC6, null, null, false);
};

$.TestNumberEnumerable_run = function() {
  $.group('NumberEnumerable', new $.TestNumberEnumerable_run_anon());
};

$.TestNumberEnumerable__testRange = function() {
  $.expect($.NumberEnumerable_NumberEnumerable$fromRange(10, 5), $.orderedEquals([10, 11, 12, 13, 14]), null, null, false);
};

$.TestNumberEnumerable__testSum = function() {
  $.expect($.n$([1, 2, 3]).sum$0(), $.equals(6, 100), null, null, false);
  $.expect(new $.TestNumberEnumerable__testSum_anon(), $.CTC16, null, null, false);
};

$.TestNumberEnumerable__testMax = function() {
  $.expect($.n$([1, 2, 3]).max$0(), $.equals(3, 100), null, null, false);
  $.expect(new $.TestNumberEnumerable__testMax_anon(), $.CTC17, null, null, false);
};

$.TestEnumerable__testFilter = function() {
  var t1 = $.$$([1, 2, 3, 4, 5, 6]);
  $.expect($.getInterceptor(t1).filter$1(t1, new $.TestEnumerable__testFilter_anon()), $.orderedEquals([2, 4, 6]), null, null, false);
};

$.TestNumberEnumerable__testAverage = function() {
  $.expect($.n$([1, 2, 3]).average$0(), $.equals(2, 100), null, null, false);
  $.expect(new $.TestNumberEnumerable__testAverage_anon(), $.CTC16, null, null, false);
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$.TestEnumerable__testCount = function() {
  var e = $.$$([1, 2, 3, 4, 5, 6]);
  $.expect(e.count$0(), $.equals(6, 100), null, null, false);
  $.expect(e.count$1(new $.TestEnumerable__testCount_anon()), $.equals(3, 100), null, null, false);
};

$.TestNumberEnumerable__testMin = function() {
  $.expect($.n$([1, 2, 3]).min$0(), $.equals(1, 100), null, null, false);
  $.expect(new $.TestNumberEnumerable__testMin_anon(), $.CTC17, null, null, false);
};

$.TestListBase_run = function() {
  $.group('ListBase', new $.TestListBase_run_anon());
};

$.TestListBase__lt0 = function(a) {
  return $.lt(a, 0);
};

$.TestListBase__testSomeAll = function() {
  $.expect($.CTC18.every$1($.TestListBase__lt0), $.CTC, null, null, false);
  $.expect($.CTC18.some$1($.TestListBase__lt0), $.CTC, null, null, false);
  $.expect($.CTC18.every$1($.TestListBase__gt0), $.CTC7, null, null, false);
  $.expect($.CTC18.some$1($.TestListBase__gt0), $.CTC7, null, null, false);
  $.expect($.CTC18.every$1($.TestListBase__lt3), $.CTC, null, null, false);
  $.expect($.CTC18.some$1($.TestListBase__lt3), $.CTC7, null, null, false);
  var t1 = [$.TestListBase__lt0, $.TestListBase__gt0, $.TestListBase__lt3];
  $.getInterceptor(t1).forEach$1(t1, new $.TestListBase__testSomeAll_anon());
};

$.TestCollectionUtil_run = function() {
  $.group('CollectionUtil', new $.TestCollectionUtil_run_anon());
};

$.TestListBase__lt3 = function(a) {
  return $.lt(a, 3);
};

$.TestListBase__gt0 = function(a) {
  return $.gt(a, 0);
};

$.TestArray2d_run = function() {
  $.group('Array2d', new $.TestArray2d_run_anon());
};

$.TestListBase__testMap = function() {
  var dub, list;
  dub = new $.TestListBase__testMap_anon();
  list = $.getInterceptor($.CTC18).map$1($.CTC18, dub);
  $.expect(list.count$0(), $.equals(5, 100), null, null, false);
  $.expect(list, $.orderedEquals([10, 8, 6, 4, 2]), null, null, false);
};

$.TestListBase__testIndexOf = function() {
  var i, t1, t2;
  for (i = 1; i <= 5; ++i) {
    $.expect($.CTC20.indexOf$1(i), $.equals(5 - i, 100), null, null, false);
    $.expect($.CTC20.lastIndexOf$1(i), $.equals(5 + i - 1, 100), null, null, false);
  }
  for (i = 1; i <= 5; ++i) {
    t1 = $.CTC20.indexOf$2(i, 5);
    t2 = 5 + i - 1;
    $.expect(t1, $.equals(t2, 100), null, null, false);
    $.expect($.CTC20.lastIndexOf$2(i, 5), $.equals(t2, 100), null, null, false);
  }
  $.expect($.CTC20.indexOf$2(1, 6), $.equals(-1, 100), null, null, false);
  $.expect($.CTC20.lastIndexOf$2(1, 6), $.equals(-1, 100), null, null, false);
  $.expect($.CTC20.indexOf$1(0), $.equals(-1, 100), null, null, false);
  $.expect($.CTC20.lastIndexOf$1(0), $.equals(-1, 100), null, null, false);
};

$.TestListBase__testForEach = function() {
  var t1 = {};
  t1.sum_10 = 0;
  $.getInterceptor($.CTC18).forEach$1($.CTC18, new $.TestListBase__testForEach_anon(t1));
  $.expect(t1.sum_10, $.equals(15, 100), null, null, false);
  t1.sum_10 = 0;
  $.getInterceptor($.CTC20).forEach$1($.CTC20, new $.TestListBase__testForEach_anon0(t1));
  $.expect(t1.sum_10, $.equals(30, 100), null, null, false);
};

$.TestListBase__testReduce = function() {
  $.Expect_equals($.getInterceptor($.CTC18).reduce$2($.CTC18, 0, new $.TestListBase__testReduce_anon()), 15, null);
  $.Expect_equals($.getInterceptor($.CTC18).reduce$2($.CTC18, 1, new $.TestListBase__testReduce_anon0()), 120, null);
};

$.TestCoordinate_run = function() {
  $.group('Coordinate', new $.TestCoordinate_run_anon());
};

$.TestCollectionUtil__testListish = function() {
  $.expect($.CollectionUtil_allUnique($.ReadOnlyCollection$([1, 2])), $.CTC7, null, null, false);
};

$.TestBox_run = function() {
  $.group('Box', new $.TestBox_run_anon());
};

$.TestListBase__testRange = function() {
  var mt, oneTwo, t1, t2;
  mt = $.ReadOnlyCollection$([]);
  $.expect($.getInterceptor(mt).getRange$2(mt, 0, 0), $.orderedEquals([]), null, null, false);
  $.expect($.getInterceptor(mt).getRange$2(mt, -1, 0), $.orderedEquals([]), null, null, false);
  oneTwo = $.ReadOnlyCollection$([1, 2]);
  $.expect($.getInterceptor(oneTwo).getRange$2(oneTwo, 0, 2), $.orderedEquals([1, 2]), null, null, false);
  $.expect($.getInterceptor(oneTwo).getRange$2(oneTwo, 0, 1), $.orderedEquals([1]), null, null, false);
  $.expect($.getInterceptor(oneTwo).getRange$2(oneTwo, 1, 1), $.orderedEquals([2]), null, null, false);
  $.expect($.getInterceptor(oneTwo).getRange$2(oneTwo, 0, 0), $.orderedEquals([]), null, null, false);
  t1 = $.ReadOnlyCollection$([1, 2, 3, 4]);
  $.expect($.getInterceptor(t1).getRange$2(t1, 1, 2), $.orderedEquals([2, 3]), null, null, false);
  t2 = $.ReadOnlyCollection$([1, 2, 3, 4]);
  $.expect($.getInterceptor(t2).getRange$2(t2, 1, 2), $.orderedEquals([2, 3]), null, null, false);
  $.expect(new $.TestListBase__testRange_anon(mt), $.CTC17, null, null, false);
  $.expect(new $.TestListBase__testRange_anon0(mt), $.CTC17, null, null, false);
  $.expect(new $.TestListBase__testRange_anon1(mt), $.CTC17, null, null, false);
  $.expect(new $.TestListBase__testRange_anon2(), $.CTC17, null, null, false);
  $.expect(new $.TestListBase__testRange_anon3(), $.CTC17, null, null, false);
};

$.TestAffineTransform_run = function() {
  $.group('AffineTransform', new $.TestAffineTransform_run_anon());
};

$.TestVector_run = function() {
  $.group('Vector', new $.TestVector_run_anon());
};

$.TestUtil_run = function() {
  $.group('Util', new $.TestUtil_run_anon());
};

$.TestArray2d__testReadonlyFromCtorParams = function() {
  $.expect(new $.TestArray2d__testReadonlyFromCtorParams_anon(), $.CTC11, null, null, false);
  $.expect(new $.TestArray2d__testReadonlyFromCtorParams_anon0(), $.CTC11, null, null, false);
  $.expect(new $.TestArray2d__testReadonlyFromCtorParams_anon1(), $.CTC17, null, null, false);
  $.expect(new $.TestArray2d__testReadonlyFromCtorParams_anon2(), $.CTC17, null, null, false);
  $.expect(new $.TestArray2d__testReadonlyFromCtorParams_anon3(), $.CTC17, null, null, false);
  $.Array2d_Array2d$readonlyFrom(0, []);
};

$.TestCloneable$internal = function(_id) {
  return new $.TestCloneable(_id);
};

$.TestCloneable_TestCloneable = function() {
  var t1 = $.TestCloneable__globalId;
  $.TestCloneable__globalId = $.add(t1, 1);
  return $.TestCloneable$internal(t1);
};

$.TestCloneable__test = function() {
  var val, val2, clone;
  val = $.TestCloneable_TestCloneable();
  $.expect(val, $.equals(val, 100), null, null, false);
  $.expect(val, $.same(val), null, null, false);
  val2 = $.TestCloneable_TestCloneable();
  $.expect($.eq(val2.get$id(), val.get$id()), $.CTC, null, null, false);
  $.expect($.eq(val2, val), $.CTC, null, null, false);
  $.expect(val2, $.isNot($.same(val)), null, null, false);
  clone = val.clone$0();
  $.expect(clone.get$id(), $.equals(val.get$id(), 100), null, null, false);
  $.expect(clone, $.equals(val, 100), null, null, false);
  $.expect(val, $.isNot($.same(clone)), null, null, false);
};

$.TestEvents$ = function() {
  return new $.TestEvents($.EventHandle$());
};

$.TestArray2d__testSetGet = function() {
  var a, x, y;
  a = $.Array2d_Array2d(3, 3, 0);
  if (typeof a !== 'object' || a === null || (a.constructor !== Array || !!a.immutable$list) && !a.is$JavaScriptIndexingBehavior())
    return $.TestArray2d__testSetGet$bailout(1, a);
  $.expect(a, $.orderedEquals([0, 0, 0, 0, 0, 0, 0, 0, 0]), null, null, false);
  for (x = 0; x < 3; ++x)
    for (y = 0; y < 3; ++y)
      $.expect(a.get$2(x, y), $.equals(0, 100), null, null, false);
  if (3 >= a.length)
    throw $.ioore(3);
  a[3] = 1;
  $.expect(a[3], $.equals(1, 100), null, null, false);
  $.expect(a.get$2(0, 1), $.equals(1, 100), null, null, false);
  a.set$3(0, 1, 2);
  if (3 >= a.length)
    throw $.ioore(3);
  $.expect(a[3], $.equals(2, 100), null, null, false);
  $.expect(a.get$2(0, 1), $.equals(2, 100), null, null, false);
};

$.TestEvents_run = function() {
  $.test('Event, EventHandle', new $.TestEvents_run_anon());
};

$.TestTarjanCycleDetect_run = function() {
  $.group('Tarjan', new $.TestTarjanCycleDetect_run_anon());
};

$.TestBox__testEquals = function() {
  $.expect($.CTC22, $.equals($.CTC22, 100), null, null, false);
  $.expect($.CTC22, $.same($.CTC22), null, null, false);
  $.expect($.CTC22, $.equals($.CTC22, 100), null, null, false);
  $.expect($.CTC22, $.same($.CTC22), null, null, false);
  var c = $.Box$(0, 0, 1, 1);
  $.expect(c, $.equals($.CTC22, 100), null, null, false);
  $.expect(c, $.isNot($.same($.CTC22)), null, null, false);
};

$.TestListBase__testFilter = function() {
  $.expect($._ListImpl_List$from($.getInterceptor($.CTC18).filter$1($.CTC18, $.TestListBase__lt3)), $.orderedEquals([2, 1]), null, null, false);
  $.expect($._ListImpl_List$from($.getInterceptor($.CTC20).filter$1($.CTC20, $.TestListBase__lt3)), $.orderedEquals([2, 1, 1, 2]), null, null, false);
  $.expect($._ListImpl_List$from($.getInterceptor($.CTC20).filter$1($.CTC20, $.TestListBase__lt0)), $.orderedEquals([]), null, null, false);
};

$.TestBox__testValid = function() {
  var validLocations, validSizes, invalidLocations, invalidSizes, t1, a, t2, t3, t4, t5, t6, t7, t8, t9, t10;
  validLocations = [-1, 0, 1];
  validSizes = [0, 1];
  invalidLocations = [(0/0), (-1/0), (1/0), null];
  invalidSizes = [(0/0), (-1/0), (1/0), null, -1];
  for (t1 = $.iterator(validLocations), a = null; t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    for (t3 = $.iterator(validLocations); t3.get$hasNext() === true;) {
      t4 = t3.next$0();
      for (t5 = $.iterator(validSizes); t5.get$hasNext() === true;) {
        t6 = t5.next$0();
        for (t7 = $.iterator(validSizes); t7.get$hasNext() === true;) {
          t8 = t7.next$0();
          a = $.Box$(t2, t4, t6, t8);
          $.expect(a.get$isValid(), $.CTC7, null, null, false);
          for (t9 = $.iterator(invalidLocations); t9.get$hasNext() === true;) {
            t10 = t9.next$0();
            $.expect($.Box$(t10, t4, t6, t8).get$isValid(), $.CTC, null, null, false);
            a = $.Box$(t2, t10, t6, t8);
            $.expect(a.get$isValid(), $.CTC, null, null, false);
          }
          for (t9 = $.iterator(invalidSizes); t9.get$hasNext() === true;) {
            t10 = t9.next$0();
            $.expect($.Box$(t2, t4, t10, t8).get$isValid(), $.CTC, null, null, false);
            a = $.Box$(t2, t4, t6, t10);
            $.expect(a.get$isValid(), $.CTC, null, null, false);
          }
        }
      }
    }
  }
};

$.TestRgbColor_run = function() {
  $.group('RgbColor', new $.TestRgbColor_run_anon());
};

$.TestListBase__testSimple = function() {
  $.expect($.get$length($.CTC18), $.equals(5, 100), null, null, false);
  $.expect($.CTC18, $.orderedEquals([5, 4, 3, 2, 1]), null, null, false);
};

$.TestCollectionUtil__testAllUnique = function() {
  $.expect($.CollectionUtil_allUnique([]), $.CTC7, null, null, false);
  $.expect($.CollectionUtil_allUnique([1]), $.CTC7, null, null, false);
  $.expect($.CollectionUtil_allUnique([null]), $.CTC7, null, null, false);
  $.expect($.CollectionUtil_allUnique(['']), $.CTC7, null, null, false);
  $.expect($.CollectionUtil_allUnique(['str']), $.CTC7, null, null, false);
  $.expect($.CollectionUtil_allUnique([1, 2]), $.CTC7, null, null, false);
  $.expect($.CollectionUtil_allUnique([1, 2]), $.CTC7, null, null, false);
  $.expect($.CollectionUtil_allUnique(['', 'str']), $.CTC7, null, null, false);
  $.expect($.CollectionUtil_allUnique([1, 1]), $.CTC, null, null, false);
  $.expect($.CollectionUtil_allUnique([null, null]), $.CTC, null, null, false);
  $.expect($.CollectionUtil_allUnique(['', '']), $.CTC, null, null, false);
  $.expect($.CollectionUtil_allUnique(['', '']), $.CTC, null, null, false);
  $.expect($.CollectionUtil_allUnique(['str', 'str']), $.CTC, null, null, false);
};

$.TestBox__testSizeLocation = function() {
  var a = $.Box$(1, 2, 3, 4);
  $.expect($.Box_Box$fromCoordSize(a.get$topLeft(), a.get$size()), $.equals(a, 100), null, null, false);
};

$.TestArray2d__testGetAdjacent = function() {
  var list, a;
  list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'];
  a = $.Array2d_Array2d$readonlyFrom(3, list);
  $.expect(a, $.orderedEquals(list), null, null, false);
  $.expect(a.getAdjacentIndices$2(0, 0), $.orderedEquals([1, 3, 4]), null, null, false);
  $.expect(a.getAdjacentIndices$2(1, 1), $.orderedEquals([0, 1, 2, 3, 5, 6, 7, 8]), null, null, false);
  $.expect(a.getAdjacentIndices$2(4, 4), $.orderedEquals([]), null, null, false);
  $.expect(a.getAdjacent$2(0, 0), $.orderedEquals(['b', 'd', 'e']), null, null, false);
  $.expect(a.getAdjacent$2(1, 1), $.orderedEquals(['a', 'b', 'c', 'd', 'f', 'g', 'h', 'i']), null, null, false);
  $.expect(a.getAdjacent$2(4, 4), $.orderedEquals([]), null, null, false);
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$.TestHslColor_run = function() {
  $.group('HslColor', new $.TestHslColor_run_anon());
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return (currentProbe + numberOfProbes & length$ - 1) >>> 0;
};

$.TestAttachedEvents$ = function() {
  return new $.TestAttachedEvents($.HashMap_HashMap(), $.HashMap_HashMap(), false);
};

$.TestAttachedEvents_run = function() {
  $.group('AttachableEvent', new $.TestAttachedEvents_run_anon());
};

$.TestAttachedEvents__testRemove = function() {
  var obj, watcher1, h1;
  obj = $.TestAttachedEvents$();
  watcher1 = $.EventWatcher$();
  h1 = $.get$TestAttachedEvents__testEvent1().addHandler$2(obj, watcher1.get$handler());
  $.expect($.get$TestAttachedEvents__testEvent1().removeHandler$2(obj, h1), $.CTC7, null, null, false);
  $.expect($.get$TestAttachedEvents__testEvent1().removeHandler$2(obj, h1), $.CTC, null, null, false);
  $.expect($.get$TestAttachedEvents__testEvent1().removeHandler$2(obj, $.GlobalId_GlobalId()), $.CTC, null, null, false);
  $.expect(new $.TestAttachedEvents__testRemove_anon(obj), $.CTC11, null, null, false);
  $.expect(new $.TestAttachedEvents__testRemove_anon0(), $.CTC11, null, null, false);
  $.expect($.get$TestAttachedEvents__testEvent1().removeHandler$2($.TestAttachedEvents$(), $.GlobalId_GlobalId()), $.CTC, null, null, false);
};

$.TestPropertyEventIntegration$ = function() {
  var t1 = new $.TestPropertyEventIntegration($.EventHandle$(), $.EventHandle$(), $.HashMap_HashMap(), $.HashMap_HashMap(), false);
  t1.TestPropertyEventIntegration$0();
  return t1;
};

$.TestAttachedEvents__testWholeDeal = function() {
  var watcher1, watcher2, obj, h1, h2, h3;
  watcher1 = $.EventWatcher$();
  watcher2 = $.EventWatcher$();
  obj = $.TestAttachedEvents$();
  h1 = $.get$TestAttachedEvents__testEvent1().addHandler$2(obj, watcher1.get$handler());
  h2 = $.get$TestAttachedEvents__testEvent2().addHandler$2(obj, watcher2.get$handler());
  $.get$TestAttachedEvents__testEvent1().fireEvent$2(obj, $.CTC10);
  $.expect(watcher1.get$eventCount(), $.equals(1, 100), null, null, false);
  $.expect(watcher2.get$eventCount(), $.equals(0, 100), null, null, false);
  $.get$TestAttachedEvents__testEvent2().fireEvent$2(obj, $.CTC10);
  $.expect(watcher1.get$eventCount(), $.equals(1, 100), null, null, false);
  $.expect(watcher2.get$eventCount(), $.equals(1, 100), null, null, false);
  $.expect($.get$TestAttachedEvents__testEvent1().removeHandler$2(obj, h1), $.CTC7, null, null, false);
  h3 = $.get$TestAttachedEvents__testEvent1().addHandler$2(obj, watcher2.get$handler());
  $.get$TestAttachedEvents__testEvent1().fireEvent$2(obj, $.CTC10);
  $.expect(watcher1.get$eventCount(), $.equals(1, 100), null, null, false);
  $.expect(watcher2.get$eventCount(), $.equals(2, 100), null, null, false);
  $.expect($.get$TestAttachedEvents__testEvent1().removeHandler$2(obj, h1), $.CTC, null, null, false);
  $.expect($.get$TestAttachedEvents__testEvent1().removeHandler$2(obj, h2), $.CTC, null, null, false);
  $.expect($.get$TestAttachedEvents__testEvent2().removeHandler$2(obj, h2), $.CTC7, null, null, false);
  $.expect($.get$TestAttachedEvents__testEvent2().removeHandler$2(obj, h2), $.CTC, null, null, false);
  $.expect($.get$TestAttachedEvents__testEvent1().removeHandler$2(obj, h3), $.CTC7, null, null, false);
  $.expect($.get$TestAttachedEvents__testEvent1().removeHandler$2(obj, h3), $.CTC, null, null, false);
};

$.TestProperties$ = function() {
  return new $.TestProperties($.HashMap_HashMap(), $.HashMap_HashMap(), false);
};

$.TestPropertyEventIntegration_doTest = function() {
  var nh, ah, obj, t1;
  nh = $.EventWatcher$();
  ah = $.EventWatcher$();
  obj = $.TestPropertyEventIntegration$();
  t1 = obj.get$nameChanged();
  $.getInterceptor(t1).add$1(t1, nh.get$handler());
  t1 = obj.get$ageChanged();
  $.getInterceptor(t1).add$1(t1, ah.get$handler());
  $.expect(obj.get$name(), $.CTC6, null, null, false);
  $.expect(obj.get$age(), $.equals(0, 100), null, null, false);
  $.expect(nh.get$eventCount(), $.equals(0, 100), null, null, false);
  $.expect(ah.get$eventCount(), $.equals(0, 100), null, null, false);
  obj.set$name('Bob');
  $.expect(obj.get$name(), $.equals('Bob', 100), null, null, false);
  $.expect(obj.get$age(), $.equals(0, 100), null, null, false);
  $.expect(nh.get$eventCount(), $.equals(1, 100), null, null, false);
  $.expect(ah.get$eventCount(), $.equals(0, 100), null, null, false);
  obj.set$name('Bob');
  $.expect(obj.get$name(), $.equals('Bob', 100), null, null, false);
  $.expect(obj.get$age(), $.equals(0, 100), null, null, false);
  $.expect(nh.get$eventCount(), $.equals(2, 100), null, null, false);
  $.expect(ah.get$eventCount(), $.equals(0, 100), null, null, false);
  obj.set$age(19);
  $.expect(obj.get$name(), $.equals('Bob', 100), null, null, false);
  $.expect(obj.get$age(), $.equals(19, 100), null, null, false);
  $.expect(nh.get$eventCount(), $.equals(2, 100), null, null, false);
  $.expect(ah.get$eventCount(), $.equals(1, 100), null, null, false);
  obj.reset$0();
  $.expect(obj.get$name(), $.CTC6, null, null, false);
  $.expect(obj.get$age(), $.equals(0, 100), null, null, false);
  $.expect(nh.get$eventCount(), $.equals(3, 100), null, null, false);
  $.expect(ah.get$eventCount(), $.equals(2, 100), null, null, false);
  obj.dispose$0();
};

$.TestProperties_run = function() {
  $.group('PropertyObject', new $.TestProperties_run_anon());
};

$.EventWatcher$ = function() {
  return new $.EventWatcher(null, 0);
};

$.TestProperties_testFactories = function(prop, setValue, propFactoryValue) {
  var wodWatcher, object, t1, t2, propFactory;
  wodWatcher = $.EventWatcher$();
  object = $.TestProperties$();
  prop.addHandler$2(object, wodWatcher.get$handler());
  t1 = prop.get$1(object);
  t2 = prop.defaultValue;
  $.expect(t1, $.equals(t2, 100), null, null, false);
  $.expect(prop.getCore$1(object), $.equals($.CTC9, 100), null, null, false);
  $.expect(wodWatcher.get$eventCount(), $.equals(0, 100), null, null, false);
  prop.set$2(object, setValue);
  $.expect(prop.get$1(object), $.equals(setValue, 100), null, null, false);
  $.expect(prop.getCore$1(object), $.equals(setValue, 100), null, null, false);
  $.expect(wodWatcher.get$eventCount(), $.equals(1, 100), null, null, false);
  propFactory = new $.TestProperties_testFactories_anon(propFactoryValue);
  $.expect(prop.get$2(object, propFactory), $.equals(setValue, 100), null, null, false);
  $.expect(prop.getCore$1(object), $.equals(setValue, 100), null, null, false);
  $.expect(wodWatcher.get$eventCount(), $.equals(1, 100), null, null, false);
  prop.clear$1(object);
  $.expect(wodWatcher.get$eventCount(), $.equals(2, 100), null, null, false);
  $.expect(prop.get$1(object), $.equals(t2, 100), null, null, false);
  $.expect(prop.getCore$1(object), $.equals($.CTC9, 100), null, null, false);
  $.expect(prop.get$2(object, propFactory), $.equals(propFactoryValue, 100), null, null, false);
  $.expect(prop.getCore$1(object), $.equals(propFactoryValue, 100), null, null, false);
  $.expect(wodWatcher.get$eventCount(), $.equals(3, 100), null, null, false);
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$.TestHslColor__testEquals = function() {
  var a, b, c;
  a = $.HslColor_HslColor(123, 1, 0.5);
  $.expect(a, $.equals(a, 100), null, null, false);
  $.expect(a, $.same(a), null, null, false);
  b = $.HslColor_HslColor(483, 1, 0.5);
  $.expect(b, $.equals(a, 100), null, null, false);
  $.expect(b, $.isNot($.same(a)), null, null, false);
  c = $.HslColor_HslColor(1, 1, 0);
  $.expect(c, $.isNot($.equals(a, 100)), null, null, false);
  $.expect(c, $.isNot($.same(a)), null, null, false);
};

$.TestRgbColor__testEquals = function() {
  var a, b, c;
  a = $.RgbColor_RgbColor(0, 1, 255);
  $.expect(a, $.equals(a, 100), null, null, false);
  $.expect(a, $.same(a), null, null, false);
  b = $.RgbColor_RgbColor(0, 1, 255);
  $.expect(b, $.equals(a, 100), null, null, false);
  $.expect(b, $.isNot($.same(a)), null, null, false);
  c = $.RgbColor_RgbColor(1, 2, 3);
  $.expect(c, $.isNot($.equals(a, 100)), null, null, false);
  $.expect(c, $.isNot($.same(a)), null, null, false);
};

$.TestArray2d__testCollectionEquals = function() {
  $.expect($.Array2d_Array2d$readonlyFrom(2, [0, 1, 2, 3]), $.orderedEquals([0, 1, 2, 3]), null, null, false);
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$.TestRgbColor__testInvalidHex = function() {
  var badHex = ['aoeu', 'ffffff', 'fff', '#ffffffff', 'white', '', null];
  $.getInterceptor(badHex).forEach$1(badHex, new $.TestRgbColor__testInvalidHex_anon());
};

$.TestRgbColor__getCoreColors = function() {
  return [$.RgbColor_RgbColor(0, 0, 0), $.RgbColor_RgbColor(1, 1, 1), $.RgbColor_RgbColor(42, 29, 123), $.RgbColor_RgbColor(42, 29, 120), $.RgbColor_RgbColor(254, 254, 254), $.RgbColor_RgbColor(255, 255, 255), $.RgbColor_RgbColor(245, 255, 193)];
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$.TestRgbColor__testHslRoundTrip = function() {
  var t1, i;
  for (t1 = $.iterator($.TestRgbColor__getCoreColors()); t1.get$hasNext() === true;)
    $.TestRgbColor__expectHslRoundTrip(t1.next$0());
  for (i = 0; i < 100; ++i)
    $.TestRgbColor__expectHslRoundTrip($.TestRgbColor__getRandom());
};

$.TestRgbColor__getRandom = function() {
  return $.RgbColor_RgbColor($.rnd().nextInt$1(256), $.rnd().nextInt$1(256), $.rnd().nextInt$1(256));
};

$.TestTarjanCycleDetect__testImpliedKey = function() {
  var graph, result;
  graph = $.HashMap_HashMap();
  $.indexSet(graph, 1, $.HashSet_HashSet$from([2]));
  result = $.TarjanCycleDetect_getStronglyConnectedComponents(graph);
  $.expect($.get$length(result), $.equals(2, 100), null, null, false);
  $.expect($.index(result, 0), $.unorderedEquals([2]), null, null, false);
  $.expect($.index(result, 1), $.unorderedEquals([1]), null, null, false);
};

$.TestTarjanCycleDetect__test5Isolated = function() {
  var graph, result;
  graph = $.HashMap_HashMap();
  $.indexSet(graph, 1, null);
  $.indexSet(graph, 2, null);
  $.indexSet(graph, 3, null);
  $.indexSet(graph, 4, null);
  $.indexSet(graph, 5, null);
  result = $.TarjanCycleDetect_getStronglyConnectedComponents(graph);
  $.expect($.get$length(result), $.equals(5, 100), null, null, false);
  $.expect($.index(result, 0), $.unorderedEquals([1]), null, null, false);
  $.expect($.index(result, 1), $.unorderedEquals([2]), null, null, false);
  $.expect($.index(result, 2), $.unorderedEquals([3]), null, null, false);
  $.expect($.index(result, 3), $.unorderedEquals([4]), null, null, false);
  $.expect($.index(result, 4), $.unorderedEquals([5]), null, null, false);
};

$.TestTarjanCycleDetect__test5Line = function() {
  var graph, result;
  graph = $.HashMap_HashMap();
  $.indexSet(graph, 1, null);
  $.indexSet(graph, 2, $.HashSet_HashSet$from([1]));
  $.indexSet(graph, 3, $.HashSet_HashSet$from([2]));
  $.indexSet(graph, 4, $.HashSet_HashSet$from([3]));
  $.indexSet(graph, 5, $.HashSet_HashSet$from([4]));
  result = $.TarjanCycleDetect_getStronglyConnectedComponents(graph);
  $.expect($.get$length(result), $.equals(5, 100), null, null, false);
  $.expect($.index(result, 0), $.unorderedEquals([1]), null, null, false);
  $.expect($.index(result, 1), $.unorderedEquals([2]), null, null, false);
  $.expect($.index(result, 2), $.unorderedEquals([3]), null, null, false);
  $.expect($.index(result, 3), $.unorderedEquals([4]), null, null, false);
  $.expect($.index(result, 4), $.unorderedEquals([5]), null, null, false);
};

$.TestTarjanCycleDetect__test5Loop = function() {
  var graph, result;
  graph = $.HashMap_HashMap();
  $.indexSet(graph, 1, $.HashSet_HashSet$from([5]));
  $.indexSet(graph, 2, $.HashSet_HashSet$from([1]));
  $.indexSet(graph, 3, $.HashSet_HashSet$from([2]));
  $.indexSet(graph, 4, $.HashSet_HashSet$from([3]));
  $.indexSet(graph, 5, $.HashSet_HashSet$from([4]));
  result = $.TarjanCycleDetect_getStronglyConnectedComponents(graph);
  $.expect($.get$length(result), $.equals(1, 100), null, null, false);
  $.expect($.index(result, 0), $.unorderedEquals([1, 2, 3, 4, 5]), null, null, false);
};

$.TestTarjanCycleDetect__test5Random = function() {
  var graph, result;
  graph = $.HashMap_HashMap();
  $.indexSet(graph, 1, $.HashSet_HashSet$from([2]));
  $.indexSet(graph, 2, $.HashSet_HashSet$from([3]));
  $.indexSet(graph, 3, $.HashSet_HashSet$from([2]));
  $.indexSet(graph, 4, $.HashSet_HashSet$from([1]));
  $.indexSet(graph, 5, $.HashSet_HashSet$from([4]));
  result = $.TarjanCycleDetect_getStronglyConnectedComponents(graph);
  $.expect($.get$length(result), $.equals(4, 100), null, null, false);
  $.expect($.index(result, 0), $.unorderedEquals([2, 3]), null, null, false);
  $.expect($.index(result, 1), $.unorderedEquals([1]), null, null, false);
  $.expect($.index(result, 2), $.unorderedEquals([4]), null, null, false);
  $.expect($.index(result, 3), $.unorderedEquals([5]), null, null, false);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$._TestValue$ = function() {
  return new $._TestValue($.spawnFunction($._testIsolate), null, null, null, null, null, null, null, false, $.EventHandle$(), $.EventHandle$(), $.EventHandle$());
};

$.TestTarjanCycleDetect__testSingle = function() {
  var graph, result;
  graph = $.HashMap_HashMap();
  $.indexSet(graph, 1, null);
  result = $.TarjanCycleDetect_getStronglyConnectedComponents(graph);
  $.expect($.get$length(result), $.equals(1, 100), null, null, false);
  $.expect($.index(result, 0), $.unorderedEquals([1]), null, null, false);
};

$.TestHslColor__testInvalid = function() {
  $.expect(new $.TestHslColor__testInvalid_anon(), $.CTC17, null, null, false);
  $.expect(new $.TestHslColor__testInvalid_anon0(), $.CTC17, null, null, false);
  $.expect(new $.TestHslColor__testInvalid_anon1(), $.CTC17, null, null, false);
};

$.TestRgbColor__testInvalid = function() {
  $.expect(new $.TestRgbColor__testInvalid_anon(), $.CTC17, null, null, false);
  $.expect(new $.TestRgbColor__testInvalid_anon0(), $.CTC17, null, null, false);
  $.expect(new $.TestRgbColor__testInvalid_anon1(), $.CTC17, null, null, false);
};

$.TestRgbColor__expectHslRoundTrip = function(rgb) {
  $.expect(rgb.toHsl$0().toRgb$0(), $.equals(rgb, 100), null, null, false);
};

$.TestRgbColor__expectHexRoundTrip = function(rgb) {
  $.expect($.RgbColor_RgbColor$fromHex(rgb.toHex$0()), $.equals(rgb, 100), null, null, false);
};

$.EventSourceEvents$ = function(_ptr) {
  return new $.EventSourceEvents(_ptr);
};

$.HslColor$_internal = function(h, s, l) {
  return new $.HslColor(h, s, l);
};

$.HslColor_HslColor = function(h, s, l) {
  var t1;
  $.requireArgument(!(h == null) && $.get$isInfinite(h) !== true && $.get$isNaN(h) !== true, 'h', null);
  h = $.mod(h, 360);
  $.requireArgument($.get$isInfinite(s) !== true && $.get$isNaN(s) !== true, 's', 'must be a valid number');
  t1 = s >= 0 && s <= 1;
  $.requireArgument(t1, 's', 'must be >= 0 && <= 1 but was ' + $.S(s));
  $.requireArgument($.get$isInfinite(l) !== true && $.get$isNaN(l) !== true, 'l', 'must be a valid number');
  t1 = l >= 0 && l <= 1;
  $.requireArgument(t1, 'l', 'must be >= 0 && <=1 but was ' + $.S(l));
  return $.HslColor$_internal(h, s, l);
};

$.TestRgbColor__testHexRoundTrip = function() {
  var t1, i;
  for (t1 = $.iterator($.TestRgbColor__getCoreColors()); t1.get$hasNext() === true;)
    $.TestRgbColor__expectHexRoundTrip(t1.next$0());
  for (i = 0; i < 100; ++i)
    $.TestRgbColor__expectHexRoundTrip($.TestRgbColor__getRandom());
};

$.TestRgbColor__testFromHex = function() {
  var knownSet = $.HashMap_HashMap();
  $.indexSet(knownSet, '#ffffff', $.RgbColor_RgbColor(255, 255, 255));
  $.indexSet(knownSet, '#FFFFFF', $.RgbColor_RgbColor(255, 255, 255));
  $.indexSet(knownSet, '#000000', $.RgbColor_RgbColor(0, 0, 0));
  $.indexSet(knownSet, '#FF0000', $.RgbColor_RgbColor(255, 0, 0));
  $.indexSet(knownSet, '#ff0000', $.RgbColor_RgbColor(255, 0, 0));
  $.indexSet(knownSet, '#00ff00', $.RgbColor_RgbColor(0, 255, 0));
  $.indexSet(knownSet, '#0000ff', $.RgbColor_RgbColor(0, 0, 255));
  $.indexSet(knownSet, '#336699', $.RgbColor_RgbColor(51, 102, 153));
  $.getInterceptor(knownSet).forEach$1(knownSet, new $.TestRgbColor__testFromHex_anon());
};

$.HslColor__hueToRgb = function(v1, v2, vH) {
  vH = $.mod(vH, 1);
  if (typeof vH !== 'number')
    throw $.iae(vH);
  if (6 * vH < 1)
    return v1 + (v2 - v1) * 6 * vH;
  else if (2 * vH < 1)
    return v2;
  else if (3 * vH < 2)
    return v1 + (v2 - v1) * (0.6666666666666666 - vH) * 6;
  return v1;
};

$.RgbColor$_internal = function(r, g, b) {
  return new $.RgbColor(r, g, b);
};

$.RgbColor_RgbColor = function(r, g, b) {
  $.RgbColor__validateComponent(r, 'r');
  $.RgbColor__validateComponent(g, 'g');
  $.RgbColor__validateComponent(b, 'b');
  return $.RgbColor$_internal(r, g, b);
};

$.RgbColor_RgbColor$fromHex = function(hexColor) {
  $.requireArgumentNotNull(hexColor, 'hexColor');
  hexColor = $.RgbColor__normalizeHex(hexColor);
  return $.RgbColor_RgbColor($.int_parse($.getInterceptor('0x').concat$1('0x', $.getInterceptor(hexColor).substring$2(hexColor, 1, 3))), $.int_parse($.getInterceptor('0x').concat$1('0x', $.getInterceptor(hexColor).substring$2(hexColor, 3, 5))), $.int_parse($.getInterceptor('0x').concat$1('0x', $.getInterceptor(hexColor).substring$2(hexColor, 5, 7))));
};

$.RgbColor__validateComponent = function(c, name$) {
  $.requireArgument(!(c == null) && $.get$isInfinite(c) !== true && $.get$isNaN(c) !== true, name$, null);
  $.requireArgument($.geB(c, 0) && $.leB(c, 255), name$, null);
};

$.RgbColor__normalizeHex = function(hexColor) {
  $.requireArgument($.get$RgbColor__validHexColorRe().hasMatch$1(hexColor), 'hexColor', '\'' + $.S(hexColor) + '\' is not a valid hex color');
  return $.getInterceptor(hexColor).toLowerCase$0(hexColor);
};

$.Date_Date$now = function() {
  return $._DateImpl$now();
};

$.Date_Date$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  return $._DateImpl$fromMillisecondsSinceEpoch(millisecondsSinceEpoch, isUtc);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue());
};

$.FileReaderEvents$ = function(_ptr) {
  return new $.FileReaderEvents(_ptr);
};

$.Random_Random = function(seed) {
  return $.CTC28;
};

$._Timer$ = function(milliSeconds, callback) {
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$._Timer$repeating = function(milliSeconds, callback) {
  var t1 = new $._Timer(false, null);
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$.FileWriterEvents$ = function(_ptr) {
  return new $.FileWriterEvents(_ptr);
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.TarjanCycleDetect_getStronglyConnectedComponents = function(graph) {
  return $.TarjanCycleDetect$_internal($._TarjanList__TarjanList(graph))._executeTarjan$0();
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._UnorderedEquals$ = function(_expected) {
  return new $._UnorderedEquals(_expected);
};

$._DoubleLinkedQueueIterator$ = function(_sentinel) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.WebSocketEvents$ = function(_ptr) {
  return new $.WebSocketEvents(_ptr);
};

$.WorkerEvents$ = function(_ptr) {
  return new $.WorkerEvents(_ptr);
};

$.FrameSetElementEvents$ = function(_ptr) {
  return new $.FrameSetElementEvents(_ptr);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._HashSetImpl$ = function() {
  var t1 = new $._HashSetImpl(null);
  t1._HashSetImpl$0();
  return t1;
};

$._HashSetImpl__HashSetImpl$from = function(other) {
  var set, t1, t2;
  set = $._HashSetImpl$();
  for (t1 = $.iterator(other); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(set).add$1(set, t2);
  }
  return set;
};

$.TarjanCycleDetect$_internal = function(_list) {
  return new $.TarjanCycleDetect(0, $._ListImpl_List(null), $._ListImpl_List(null), _list);
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isIE = function() {
  return $._Device_isOpera() !== true && $.contains$2($._Device_userAgent(), 'MSIE', 0) === true;
};

$._Device_isOpera = function() {
  return $.contains$2($._Device_userAgent(), 'Opera', 0);
};

$._Device_isFirefox = function() {
  return $.contains$2($._Device_userAgent(), 'Firefox', 0);
};

$._TarjanList__TarjanList = function(source) {
  var map, nodes;
  map = $.HashMap_HashMap();
  nodes = $.HashMap_HashMap();
  $.getInterceptor(source).forEach$1(source, new $._TarjanList__TarjanList_anon(nodes, map));
  return $._TarjanList$_internal(nodes);
};

$._TarjanNode$ = function(value) {
  return new $._TarjanNode(value, -1, null);
};

$._TarjanList$_internal = function(_nodes) {
  return new $._TarjanList(_nodes);
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(0, list);
};

$._HashSetIterator$ = function(set_) {
  var t1 = new $._HashSetIterator(set_._backingMap._keys, -1);
  t1._HashSetIterator$1(set_);
  return t1;
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== 'string' && (typeof src !== 'object' || src === null || src.constructor !== Array && !src.is$JavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== 'object' || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, i = srcStart, j = dstStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Arrays_lastIndexOf = function(a, element, startIndex) {
  var t1, i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Arrays_lastIndexOf$bailout(1, a, element, startIndex);
  if (typeof startIndex !== 'number')
    return $.Arrays_lastIndexOf$bailout(1, a, element, startIndex);
  if (startIndex < 0)
    return -1;
  t1 = a.length;
  if (startIndex >= t1)
    startIndex = t1 - 1;
  for (i = startIndex; i >= 0; --i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null, false);
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._IsCloseTo$ = function(_value, _delta) {
  return new $._IsCloseTo(_value, _delta);
};

$.HttpRequestEvents$ = function(_ptr) {
  return new $.HttpRequestEvents(_ptr);
};

$._Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._Lists_lastIndexOf = function(a, element, startIndex) {
  var t1, i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_lastIndexOf$bailout(1, a, element, startIndex);
  if (typeof startIndex !== 'number')
    return $._Lists_lastIndexOf$bailout(1, a, element, startIndex);
  if (startIndex < 0)
    return -1;
  t1 = a.length;
  if (startIndex >= t1)
    startIndex = t1 - 1;
  for (i = startIndex; i >= 0; --i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._Lists_getRange = function(a, start, length$, accumulator) {
  var end, i, t1;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if (typeof start !== 'number')
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$('length'));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (typeof length$ !== 'number')
    throw $.iae(length$);
  end = start + length$;
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    t1 = $.getInterceptor(accumulator);
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    t1.add$1(accumulator, a[i]);
  }
  return accumulator;
};

$.Expect_equals = function(expected, actual, reason) {
  var msg;
  if ($.eqB(expected, actual))
    return;
  msg = reason == null ? '' : ', \'' + $.S(reason) + '\'';
  $.Expect__fail('Expect.equals(expected: <' + $.S(expected) + '>, actual: <' + $.S(actual) + '>' + msg + ') fails.');
};

$._NodeListWrapper$ = function(list) {
  return new $._NodeListWrapper(list);
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  return new $.HttpRequestUploadEvents(_ptr);
};

$.Expect__fail = function(message) {
  throw $.$$throw($.ExpectException$(message));
};

$.IDBDatabaseEvents$ = function(_ptr) {
  return new $.IDBDatabaseEvents(_ptr);
};

$.Array2d_Array2d$readonlyFrom = function(width, source) {
  var list, s;
  $.requireArgumentNotNull(width, 'width');
  $.requireArgumentNotNull(source, 'source');
  list = $._ListImpl_List$from(source);
  s = source == null ? null : $.SequenceList$(list);
  return $.Array2d$wrap(width, s);
};

$.Array2d$wrap = function(width, source) {
  var t1 = !(width == null) && $.gtB(width, 0) && !(source == null) ? $.tdiv($.get$length(source), width) : 0;
  t1 = new $.Array2d(width, t1, source);
  t1.Array2d$wrap$2(width, source);
  return t1;
};

$.Array2d_Array2d = function(width, height, initialValue) {
  var s;
  $.requireArgumentNotNull(width, 'width');
  $.requireArgumentNotNull(height, 'height');
  $.requireArgument($.gt(width, 0), 'width', null);
  $.requireArgument($.gt(height, 0), 'height', null);
  s = $._ListImpl_List(null);
  $.insertRange$3(s, 0, $.mul(width, height), initialValue);
  return $.Array2d$wrap(width, s);
};

$._OrderedEquals$ = function(_expected) {
  var t1 = new $._OrderedEquals(_expected, null);
  t1._OrderedEquals$1(_expected);
  return t1;
};

$.SequenceIterator$ = function(_sequence) {
  return new $.SequenceIterator(_sequence, 0);
};

$.TestArray2d__testSetGet$bailout = function(state0, a) {
  var x, y;
  $.expect(a, $.orderedEquals([0, 0, 0, 0, 0, 0, 0, 0, 0]), null, null, false);
  for (x = 0; x < 3; ++x)
    for (y = 0; y < 3; ++y)
      $.expect(a.get$2(x, y), $.equals(0, 100), null, null, false);
  $.indexSet(a, 3, 1);
  $.expect($.index(a, 3), $.equals(1, 100), null, null, false);
  $.expect(a.get$2(0, 1), $.equals(1, 100), null, null, false);
  a.set$3(0, 1, 2);
  $.expect($.index(a, 3), $.equals(2, 100), null, null, false);
  $.expect(a.get$2(0, 1), $.equals(2, 100), null, null, false);
};

$.CollectionUtil_allUnique$bailout = function(state0, items) {
  var i, j, j0;
  $.requireArgumentNotNull(items, 'items');
  for (i = 0; $.ltB(i, $.get$length(items)); i = j)
    for (j = i + 1, j0 = j; $.ltB(j0, $.get$length(items)); ++j0)
      if ($.eqB($.index(items, i), $.index(items, j0)))
        return false;
  return true;
};

$._Sort_insertionSort_$bailout = function(state0, a, left, right, compare) {
  var i, el, j, j0;
  for (i = left + 1; $.leB(i, right); ++i) {
    el = $.index(a, i);
    j = i;
    while (true) {
      if (!(j > left && $.gtB(compare.call$2($.index(a, j - 1), el), 0)))
        break;
      j0 = j - 1;
      $.indexSet(a, j, $.index(a, j0));
      j = j0;
    }
    $.indexSet(a, j, el);
  }
};

$._Sort__dualPivotQuicksort$bailout = function(state0, a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, el1, el2, el3, el4, el5, t0, less, great, pivots_are_equal, k, ak, comp, less0, great0, t1;
  sixth = $.tdiv($.add($.sub(right, left), 1), 6);
  if (typeof sixth !== 'number')
    throw $.iae(sixth);
  index1 = left + sixth;
  index5 = $.sub(right, sixth);
  if (typeof right !== 'number')
    throw $.iae(right);
  index3 = $.tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  el1 = $.index(a, index1);
  el2 = $.index(a, index2);
  el3 = $.index(a, index3);
  el4 = $.index(a, index4);
  el5 = $.index(a, index5);
  if ($.gtB(compare.call$2(el1, el2), 0)) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el1, el3), 0)) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el1, el4), 0)) {
    t0 = el1;
    el1 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el3, el4), 0)) {
    t0 = el3;
    el3 = el4;
    el4 = t0;
  }
  if ($.gtB(compare.call$2(el2, el5), 0)) {
    t0 = el2;
    el2 = el5;
    el5 = t0;
  }
  if ($.gtB(compare.call$2(el2, el3), 0)) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.gtB(compare.call$2(el4, el5), 0)) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  $.indexSet(a, index1, el1);
  $.indexSet(a, index3, el3);
  $.indexSet(a, index5, el5);
  $.indexSet(a, index2, $.index(a, left));
  $.indexSet(a, index4, $.index(a, right));
  less = left + 1;
  great = right - 1;
  pivots_are_equal = $.eqB(compare.call$2(el2, el4), 0);
  if (pivots_are_equal)
    for (k = less; k <= great; ++k) {
      ak = $.index(a, k);
      comp = compare.call$2(ak, el2);
      if ($.eqB(comp, 0))
        continue;
      if ($.ltB(comp, 0)) {
        if (!(k === less)) {
          $.indexSet(a, k, $.index(a, less));
          $.indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          comp = compare.call$2($.index(a, great), el2);
          if ($.gtB(comp, 0)) {
            --great;
            continue;
          } else if ($.ltB(comp, 0)) {
            $.indexSet(a, k, $.index(a, less));
            less0 = less + 1;
            $.indexSet(a, less, $.index(a, great));
            great0 = great - 1;
            $.indexSet(a, great, ak);
            great = great0;
            less = less0;
            break;
          } else {
            $.indexSet(a, k, $.index(a, great));
            great0 = great - 1;
            $.indexSet(a, great, ak);
            great = great0;
            break;
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      ak = $.index(a, k);
      if ($.ltB(compare.call$2(ak, el2), 0)) {
        if (!(k === less)) {
          $.indexSet(a, k, $.index(a, less));
          $.indexSet(a, less, ak);
        }
        ++less;
      } else if ($.gtB(compare.call$2(ak, el4), 0))
        for (; true;)
          if ($.gtB(compare.call$2($.index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if ($.ltB(compare.call$2($.index(a, great), el2), 0)) {
              $.indexSet(a, k, $.index(a, less));
              less0 = less + 1;
              $.indexSet(a, less, $.index(a, great));
              great0 = great - 1;
              $.indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              $.indexSet(a, k, $.index(a, great));
              great0 = great - 1;
              $.indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
  t1 = less - 1;
  $.indexSet(a, left, $.index(a, t1));
  $.indexSet(a, t1, el2);
  $.indexSet(a, right, $.index(a, great + 1));
  $.indexSet(a, great + 1, el4);
  $._Sort__doSort(a, left, less - 2, compare);
  $._Sort__doSort(a, great + 2, right, compare);
  if (pivots_are_equal)
    return;
  if (less < index1 && $.gtB(great, index5)) {
    for (; $.eqB(compare.call$2($.index(a, less), el2), 0);)
      ++less;
    for (; $.eqB(compare.call$2($.index(a, great), el4), 0);)
      --great;
    for (k = less; k <= great; ++k) {
      ak = $.index(a, k);
      if ($.eqB(compare.call$2(ak, el2), 0)) {
        if (!(k === less)) {
          $.indexSet(a, k, $.index(a, less));
          $.indexSet(a, less, ak);
        }
        ++less;
      } else if ($.eqB(compare.call$2(ak, el4), 0))
        for (; true;)
          if ($.eqB(compare.call$2($.index(a, great), el4), 0)) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if ($.ltB(compare.call$2($.index(a, great), el2), 0)) {
              $.indexSet(a, k, $.index(a, less));
              less0 = less + 1;
              $.indexSet(a, less, $.index(a, great));
              great0 = great - 1;
              $.indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              $.indexSet(a, k, $.index(a, great));
              great0 = great - 1;
              $.indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    $._Sort__doSort(a, less, great, compare);
  } else
    $._Sort__doSort(a, less, great, compare);
};

$.Strings__toJsStringArray$bailout = function(state0, strings) {
  var length$, i, string, array;
  $.checkNull(strings);
  length$ = $.get$length(strings);
  if ($.isJsArray(strings)) {
    for (i = 0; $.ltB(i, length$); ++i) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $._ListImpl_List(length$);
    for (i = 0; $.ltB(i, length$); ++i) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      if (i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.allMatchesInStringUnchecked$bailout = function(state0, needle, haystack, patternLength, result, length$) {
  var startIndex, position, endIndex;
  for (startIndex = 0; true;) {
    position = $.indexOf$2(haystack, needle, startIndex);
    if ($.eqB(position, -1))
      break;
    $.getInterceptor(result).add$1(result, $.StringMatch$(position, haystack, needle));
    endIndex = $.add(position, patternLength);
    if ($.eqB(endIndex, length$))
      break;
    else
      startIndex = $.eqB(position, endIndex) ? $.add(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringReplaceAllUnchecked$bailout = function(state0, receiver, from, to) {
  var result, length$, i;
  if (typeof from === 'string')
    if (from === '')
      if ($.eqB(receiver, ''))
        return to;
      else {
        result = $.StringBuffer_StringBuffer('');
        length$ = $.get$length(receiver);
        $.getInterceptor(result).add$1(result, to);
        for (i = 0; $.ltB(i, length$); ++i) {
          $.getInterceptor(result).add$1(result, $.index(receiver, i));
          $.getInterceptor(result).add$1(result, to);
        }
        return $.toString(result);
      }
    else
      return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), false, false), true), to);
  else if (typeof from === 'object' && from !== null && !!from.is$JSSyntaxRegExp)
    return $.stringReplaceJS(receiver, $.regExpMakeNative(from, true), to);
  else {
    $.checkNull(from);
    throw $.$$throw('String.replaceAll(Pattern) UNIMPLEMENTED');
  }
};

$.listInsertRange$bailout = function(state0, receiver, start, length$, initialValue) {
  var receiverLength, t1, t2, i;
  if ($.eqB(length$, 0))
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  receiverLength = receiver.length;
  if (start < 0 || start > receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = receiverLength + length$;
  $.set$length(receiver, t1);
  t2 = start + length$;
  $.Arrays_copy(receiver, start, receiver, t2, receiverLength - start);
  if (!(initialValue == null))
    for (i = start; i < t2; ++i)
      $.indexSet(receiver, i, initialValue);
  $.set$length(receiver, t1);
};

$.Futures_wait$bailout = function(state0, futures, t1) {
  var completer, result, values, i, future;
  if ($.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC4);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_1 = $.get$length(futures);
  values = $._ListImpl_List($.get$length(futures));
  for (i = 0; $.ltB(i, $.get$length(futures)); ++i) {
    future = $.index(futures, i);
    future.then$1(new $.Futures_wait_anon(t1, i, result, completer, values));
    future.handleException$1(new $.Futures_wait_anon0(future, result, completer));
  }
  return result;
};

$._Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var i;
  if ($.geB(startIndex, $.get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.ltB(i, endIndex); i = $.add(i, 1))
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$._Lists_lastIndexOf$bailout = function(state0, a, element, startIndex) {
  var i;
  if ($.ltB(startIndex, 0))
    return -1;
  if ($.geB(startIndex, $.get$length(a)))
    startIndex = $.sub($.get$length(a), 1);
  for (i = startIndex; $.geB(i, 0); i = $.sub(i, 1))
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$._Lists_getRange$bailout = function(state0, a, start, length$, accumulator) {
  var end, i;
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$('length'));
  if ($.ltB(start, 0))
    throw $.$$throw($.RangeError$value(start));
  end = $.add(start, length$);
  if ($.gtB(end, $.get$length(a)))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; $.ltB(i, end); i = $.add(i, 1))
    $.getInterceptor(accumulator).add$1(accumulator, $.index(a, i));
  return accumulator;
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j)
      $.indexSet(dst, j, $.index(src, i));
  else
    for (i = srcStart, j = dstStart; i < srcStart + count; ++i, ++j)
      $.indexSet(dst, j, $.index(src, i));
};

$.TestEnumerable__getChars$bailout = function(state0, input) {
  var list, i;
  list = $._ListImpl_List(null);
  for (i = 0; $.ltB(i, $.get$length(input)); ++i)
    $.getInterceptor(list).add$1(list, $.index(input, i));
  return list;
};

$.Arrays_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var i;
  if ($.geB(startIndex, $.get$length(a)))
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i)
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$.Arrays_lastIndexOf$bailout = function(state0, a, element, startIndex) {
  var i;
  if ($.ltB(startIndex, 0))
    return -1;
  if ($.geB(startIndex, $.get$length(a)))
    startIndex = $.sub($.get$length(a), 1);
  for (i = startIndex; $.geB(i, 0); i = $.sub(i, 1))
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$.contains$1$bailout = function(state0, receiver, other) {
  var i;
  if (typeof receiver === 'string')
    return $.contains$2(receiver, other, 0);
  else if ($.isJsArray(receiver)) {
    for (i = 0; $.ltB(i, $.get$length(receiver)); ++i)
      if ($.eqB(other, $.index(receiver, i)))
        return true;
    return false;
  }
  return receiver.contains$1(other);
};

$.RetainedUtil__hitTest$bailout = function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      length$ = env3;
      hits = env2;
      point = env1;
      element = env0;
      break;
  }
  switch (state0) {
    case 0:
      point = $.RetainedUtil_transformPointGlobalToLocal(element, point);
      bounds = $.Box$(0, 0, element.get$width(), element.get$height());
      hits = $._ListImpl_List(null);
    case 1:
      var point, bounds, hits, length$, element, i;
      if (state0 === 1 || state0 === 0 && bounds.contains$1(point) === true)
        switch (state0) {
          case 0:
          case 1:
            if (state0 === 1 || state0 === 0 && typeof element === 'object' && element !== null && !!element.is$ParentElement)
              switch (state0) {
                case 0:
                  length$ = element.get$visualChildCount();
                case 1:
                  state0 = 0;
                  for (i = 0; $.ltB(i, length$); ++i) {
                    hits = $.RetainedUtil__hitTest(element.getVisualChild$1($.sub($.sub(length$, 1), i)), point);
                    if (hits.length > 0)
                      break;
                  }
                  element = element;
              }
            $.getInterceptor(hits).add$1(hits, element);
        }
      return hits;
  }
};

$.TestListBase__gt0.call$1 = $.TestListBase__gt0;
$.TestListBase__gt0.$name = "TestListBase__gt0";
$.TestListBase__lt3.call$1 = $.TestListBase__lt3;
$.TestListBase__lt3.$name = "TestListBase__lt3";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.TestCollectionUtil__testListish.call$0 = $.TestCollectionUtil__testListish;
$.TestCollectionUtil__testListish.$name = "TestCollectionUtil__testListish";
$.TestCollectionUtil__testAllUnique.call$0 = $.TestCollectionUtil__testAllUnique;
$.TestCollectionUtil__testAllUnique.$name = "TestCollectionUtil__testAllUnique";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
$.TestArray2d__testGetAdjacent.call$0 = $.TestArray2d__testGetAdjacent;
$.TestArray2d__testGetAdjacent.$name = "TestArray2d__testGetAdjacent";
$.TestArray2d__testSetGet.call$0 = $.TestArray2d__testSetGet;
$.TestArray2d__testSetGet.$name = "TestArray2d__testSetGet";
$.TestArray2d__testReadonlyFromCtorParams.call$0 = $.TestArray2d__testReadonlyFromCtorParams;
$.TestArray2d__testReadonlyFromCtorParams.$name = "TestArray2d__testReadonlyFromCtorParams";
$.TestArray2d__testCollectionEquals.call$0 = $.TestArray2d__testCollectionEquals;
$.TestArray2d__testCollectionEquals.$name = "TestArray2d__testCollectionEquals";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.TestBox__testEquals.call$0 = $.TestBox__testEquals;
$.TestBox__testEquals.$name = "TestBox__testEquals";
$.TestBox__testSizeLocation.call$0 = $.TestBox__testSizeLocation;
$.TestBox__testSizeLocation.$name = "TestBox__testSizeLocation";
$.TestBox__testValid.call$0 = $.TestBox__testValid;
$.TestBox__testValid.$name = "TestBox__testValid";
$.expectAsync1.call$2$count = $.expectAsync1;
$.expectAsync1.call$1 = function(callback) {
  return this.call$2$count(callback,1)
};
$.expectAsync1.$name = "expectAsync1";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$._testPElementParent.call$0 = $._testPElementParent;
$._testPElementParent.$name = "_testPElementParent";
$._testRemoveTransform.call$0 = $._testRemoveTransform;
$._testRemoveTransform.$name = "_testRemoveTransform";
$.runTests.call$0 = $.runTests;
$.runTests.$name = "runTests";
$._testDoudbleClickManager.call$0 = $._testDoudbleClickManager;
$._testDoudbleClickManager.$name = "_testDoudbleClickManager";
$.TestCloneable__test.call$0 = $.TestCloneable__test;
$.TestCloneable__test.$name = "TestCloneable__test";
$._nextBatch.call$0 = $._nextBatch;
$._nextBatch.$name = "_nextBatch";
$._testAddRemoveFromPanel.call$0 = $._testAddRemoveFromPanel;
$._testAddRemoveFromPanel.$name = "_testAddRemoveFromPanel";
$.TestSendPortValue__testSimple.call$0 = $.TestSendPortValue__testSimple;
$.TestSendPortValue__testSimple.$name = "TestSendPortValue__testSimple";
$.TestSendPortValue__testComplex.call$0 = $.TestSendPortValue__testComplex;
$.TestSendPortValue__testComplex.$name = "TestSendPortValue__testComplex";
$._defaultErrorFormatter.call$5 = $._defaultErrorFormatter;
$._defaultErrorFormatter.$name = "_defaultErrorFormatter";
$.TestTarjanCycleDetect__testSingle.call$0 = $.TestTarjanCycleDetect__testSingle;
$.TestTarjanCycleDetect__testSingle.$name = "TestTarjanCycleDetect__testSingle";
$.TestTarjanCycleDetect__test5Isolated.call$0 = $.TestTarjanCycleDetect__test5Isolated;
$.TestTarjanCycleDetect__test5Isolated.$name = "TestTarjanCycleDetect__test5Isolated";
$.TestTarjanCycleDetect__test5Line.call$0 = $.TestTarjanCycleDetect__test5Line;
$.TestTarjanCycleDetect__test5Line.$name = "TestTarjanCycleDetect__test5Line";
$.TestTarjanCycleDetect__test5Loop.call$0 = $.TestTarjanCycleDetect__test5Loop;
$.TestTarjanCycleDetect__test5Loop.$name = "TestTarjanCycleDetect__test5Loop";
$.TestTarjanCycleDetect__test5Random.call$0 = $.TestTarjanCycleDetect__test5Random;
$.TestTarjanCycleDetect__test5Random.$name = "TestTarjanCycleDetect__test5Random";
$.TestTarjanCycleDetect__testImpliedKey.call$0 = $.TestTarjanCycleDetect__testImpliedKey;
$.TestTarjanCycleDetect__testImpliedKey.$name = "TestTarjanCycleDetect__testImpliedKey";
$.TestFutureValueResult__testValueRoundTrip.call$0 = $.TestFutureValueResult__testValueRoundTrip;
$.TestFutureValueResult__testValueRoundTrip.$name = "TestFutureValueResult__testValueRoundTrip";
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
$.TestRgbColor__testEquals.call$0 = $.TestRgbColor__testEquals;
$.TestRgbColor__testEquals.$name = "TestRgbColor__testEquals";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$.TestRgbColor__testHslRoundTrip.call$0 = $.TestRgbColor__testHslRoundTrip;
$.TestRgbColor__testHslRoundTrip.$name = "TestRgbColor__testHslRoundTrip";
$.TestRgbColor__testInvalid.call$0 = $.TestRgbColor__testInvalid;
$.TestRgbColor__testInvalid.$name = "TestRgbColor__testInvalid";
$.TestRgbColor__testFromHex.call$0 = $.TestRgbColor__testFromHex;
$.TestRgbColor__testFromHex.$name = "TestRgbColor__testFromHex";
$.TestRgbColor__testHexRoundTrip.call$0 = $.TestRgbColor__testHexRoundTrip;
$.TestRgbColor__testHexRoundTrip.$name = "TestRgbColor__testHexRoundTrip";
$.TestRgbColor__testInvalidHex.call$0 = $.TestRgbColor__testInvalidHex;
$.TestRgbColor__testInvalidHex.$name = "TestRgbColor__testInvalidHex";
$.TestFutureValueResult__testExceptionRoundTrip.call$0 = $.TestFutureValueResult__testExceptionRoundTrip;
$.TestFutureValueResult__testExceptionRoundTrip.$name = "TestFutureValueResult__testExceptionRoundTrip";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.TestHslColor__testEquals.call$0 = $.TestHslColor__testEquals;
$.TestHslColor__testEquals.$name = "TestHslColor__testEquals";
$.TestHslColor__testInvalid.call$0 = $.TestHslColor__testInvalid;
$.TestHslColor__testInvalid.$name = "TestHslColor__testInvalid";
$.TestEnumerable__testIsEmpty.call$0 = $.TestEnumerable__testIsEmpty;
$.TestEnumerable__testIsEmpty.$name = "TestEnumerable__testIsEmpty";
$.TestEnumerable__testReduce.call$0 = $.TestEnumerable__testReduce;
$.TestEnumerable__testReduce.$name = "TestEnumerable__testReduce";
$.TestEnumerable__testFirst.call$0 = $.TestEnumerable__testFirst;
$.TestEnumerable__testFirst.$name = "TestEnumerable__testFirst";
$.TestEnumerable__testSingle.call$0 = $.TestEnumerable__testSingle;
$.TestEnumerable__testSingle.$name = "TestEnumerable__testSingle";
$.TestEnumerable__testJoin.call$0 = $.TestEnumerable__testJoin;
$.TestEnumerable__testJoin.$name = "TestEnumerable__testJoin";
$.TestEnumerable__testContains.call$0 = $.TestEnumerable__testContains;
$.TestEnumerable__testContains.$name = "TestEnumerable__testContains";
$.TestAttachedEvents__testWholeDeal.call$0 = $.TestAttachedEvents__testWholeDeal;
$.TestAttachedEvents__testWholeDeal.$name = "TestAttachedEvents__testWholeDeal";
$.TestEnumerable__testDistinct.call$0 = $.TestEnumerable__testDistinct;
$.TestEnumerable__testDistinct.$name = "TestEnumerable__testDistinct";
$.TestEnumerable__testForEachWithIndex.call$0 = $.TestEnumerable__testForEachWithIndex;
$.TestEnumerable__testForEachWithIndex.$name = "TestEnumerable__testForEachWithIndex";
$.TestEnumerable__testExclude.call$0 = $.TestEnumerable__testExclude;
$.TestEnumerable__testExclude.$name = "TestEnumerable__testExclude";
$.TestEnumerable__testToHashMap.call$0 = $.TestEnumerable__testToHashMap;
$.TestEnumerable__testToHashMap.$name = "TestEnumerable__testToHashMap";
$.TestEnumerable__testCount.call$0 = $.TestEnumerable__testCount;
$.TestEnumerable__testCount.$name = "TestEnumerable__testCount";
$.TestEnumerable__testLength.call$0 = $.TestEnumerable__testLength;
$.TestEnumerable__testLength.$name = "TestEnumerable__testLength";
$.TestEnumerable__testFilter.call$0 = $.TestEnumerable__testFilter;
$.TestEnumerable__testFilter.$name = "TestEnumerable__testFilter";
$.TestEnumerable__testMap.call$0 = $.TestEnumerable__testMap;
$.TestEnumerable__testMap.$name = "TestEnumerable__testMap";
$.TestAttachedEvents__testRemove.call$0 = $.TestAttachedEvents__testRemove;
$.TestAttachedEvents__testRemove.$name = "TestAttachedEvents__testRemove";
$.TestEnumerable__testForEach.call$0 = $.TestEnumerable__testForEach;
$.TestEnumerable__testForEach.$name = "TestEnumerable__testForEach";
$.TestEnumerable__testAggregate.call$0 = $.TestEnumerable__testAggregate;
$.TestEnumerable__testAggregate.$name = "TestEnumerable__testAggregate";
$.TestEnumerable__testSelectMany.call$0 = $.TestEnumerable__testSelectMany;
$.TestEnumerable__testSelectMany.$name = "TestEnumerable__testSelectMany";
$.TestEnumerable__testToHashSet.call$0 = $.TestEnumerable__testToHashSet;
$.TestEnumerable__testToHashSet.$name = "TestEnumerable__testToHashSet";
$.TestEnumerable__getChars.call$1 = $.TestEnumerable__getChars;
$.TestEnumerable__getChars.$name = "TestEnumerable__getChars";
$.TestEnumerable__testSelectNumbers.call$0 = $.TestEnumerable__testSelectNumbers;
$.TestEnumerable__testSelectNumbers.$name = "TestEnumerable__testSelectNumbers";
$.TestEnumerable__testSimpleGrouping.call$0 = $.TestEnumerable__testSimpleGrouping;
$.TestEnumerable__testSimpleGrouping.$name = "TestEnumerable__testSimpleGrouping";
$.TestEnumerable__testComplexGrouping.call$0 = $.TestEnumerable__testComplexGrouping;
$.TestEnumerable__testComplexGrouping.$name = "TestEnumerable__testComplexGrouping";
$.TestNumberEnumerable__testRange.call$0 = $.TestNumberEnumerable__testRange;
$.TestNumberEnumerable__testRange.$name = "TestNumberEnumerable__testRange";
$.TestNumberEnumerable__testSum.call$0 = $.TestNumberEnumerable__testSum;
$.TestNumberEnumerable__testSum.$name = "TestNumberEnumerable__testSum";
$.TestNumberEnumerable__testMin.call$0 = $.TestNumberEnumerable__testMin;
$.TestNumberEnumerable__testMin.$name = "TestNumberEnumerable__testMin";
$.TestNumberEnumerable__testMax.call$0 = $.TestNumberEnumerable__testMax;
$.TestNumberEnumerable__testMax.$name = "TestNumberEnumerable__testMax";
$.TestNumberEnumerable__testAverage.call$0 = $.TestNumberEnumerable__testAverage;
$.TestNumberEnumerable__testAverage.$name = "TestNumberEnumerable__testAverage";
$._listToT2.call$1 = $._listToT2;
$._listToT2.$name = "_listToT2";
$._t3ToList.call$1 = $._t3ToList;
$._t3ToList.$name = "_t3ToList";
$._listToT3.call$1 = $._listToT3;
$._listToT3.$name = "_listToT3";
$.TestPropertyEventIntegration_doTest.call$0 = $.TestPropertyEventIntegration_doTest;
$.TestPropertyEventIntegration_doTest.$name = "TestPropertyEventIntegration_doTest";
$._testIsolate.call$0 = $._testIsolate;
$._testIsolate.$name = "_testIsolate";
$._t2ToList.call$1 = $._t2ToList;
$._t2ToList.$name = "_t2ToList";
$._complexTestIsolate.call$0 = $._complexTestIsolate;
$._complexTestIsolate.$name = "_complexTestIsolate";
$.TestListBase__testReduce.call$0 = $.TestListBase__testReduce;
$.TestListBase__testReduce.$name = "TestListBase__testReduce";
$.TestListBase__testSimple.call$0 = $.TestListBase__testSimple;
$.TestListBase__testSimple.$name = "TestListBase__testSimple";
$.TestListBase__testMap.call$0 = $.TestListBase__testMap;
$.TestListBase__testMap.$name = "TestListBase__testMap";
$.TestListBase__testIndexOf.call$0 = $.TestListBase__testIndexOf;
$.TestListBase__testIndexOf.$name = "TestListBase__testIndexOf";
$.TestListBase__testRange.call$0 = $.TestListBase__testRange;
$.TestListBase__testRange.$name = "TestListBase__testRange";
$.TestListBase__testForEach.call$0 = $.TestListBase__testForEach;
$.TestListBase__testForEach.$name = "TestListBase__testForEach";
$.TestListBase__testSomeAll.call$0 = $.TestListBase__testSomeAll;
$.TestListBase__testSomeAll.$name = "TestListBase__testSomeAll";
$.TestListBase__testFilter.call$0 = $.TestListBase__testFilter;
$.TestListBase__testFilter.$name = "TestListBase__testFilter";
$.TestListBase__lt0.call$1 = $.TestListBase__lt0;
$.TestListBase__lt0.$name = "TestListBase__lt0";
Isolate.$finishClasses($$);
$$ = {};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC4 = Isolate.makeConstantList([]);
$.CTC19 = new Isolate.$isolateProperties.ReadOnlyCollection(Isolate.$isolateProperties.CTC4);
$.CTC27 = new Isolate.$isolateProperties.ConstantMap(0, {}, Isolate.$isolateProperties.CTC4);
$.CTC18 = new Isolate.$isolateProperties.TestListBase(false);
$.CTC29 = new Isolate.$isolateProperties.ShapeType('Rect');
$.CTC10 = new Isolate.$isolateProperties.EventArgs();
$.CTC5 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC33 = new Isolate.$isolateProperties._NullArgumentException('NullArgumentException');
$.CTC32 = new Isolate.$isolateProperties.Object();
$.CTC14 = new Isolate.$isolateProperties.InvalidOperationException('The input sequence contains more than one element.');
$.CTC24 = new Isolate.$isolateProperties.Coordinate(1, 0);
$.CTC34 = new Isolate.$isolateProperties._InvalidOperationException('InvalidOperationException');
$.CTC13 = new Isolate.$isolateProperties.Throws(Isolate.$isolateProperties.CTC34);
$.CTC21 = new Isolate.$isolateProperties.Coordinate(2, 2);
$.CTC35 = new Isolate.$isolateProperties._UnsupportedError('UnsupportedError');
$.CTC12 = new Isolate.$isolateProperties.Throws(Isolate.$isolateProperties.CTC35);
$.CTC36 = new Isolate.$isolateProperties.Coordinate(0, 0);
$.CTC22 = new Isolate.$isolateProperties.Box(0, 0, 1, 1);
$.CTC25 = new Isolate.$isolateProperties.Vector(2, 2);
$.CTC37 = Isolate.makeConstantList(['body', 'head', 'caption', 'td', 'colgroup', 'col', 'tr', 'tbody', 'tfoot', 'thead', 'track']);
$.CTC38 = new Isolate.$isolateProperties._ArgumentError('ArgumentError');
$.CTC17 = new Isolate.$isolateProperties.Throws(Isolate.$isolateProperties.CTC38);
$.CTC26 = new Isolate.$isolateProperties.ConstantMap(11, {'body': 'html', 'head': 'html', 'caption': 'table', 'td': 'tr', 'colgroup': 'table', 'col': 'colgroup', 'tr': 'tbody', 'tbody': 'table', 'tfoot': 'table', 'thead': 'table', 'track': 'audio'}, Isolate.$isolateProperties.CTC37);
$.CTC39 = new Isolate.$isolateProperties._NullPointerException('NullPointerException');
$.CTC16 = new Isolate.$isolateProperties.Throws(Isolate.$isolateProperties.CTC39);
$.CTC23 = new Isolate.$isolateProperties.Vector(1, -1);
$.CTC6 = new Isolate.$isolateProperties._IsNull();
$.CTC15 = new Isolate.$isolateProperties.InvalidOperationException('The input sequence is empty.');
$.CTC7 = new Isolate.$isolateProperties._IsTrue();
$.CTC9 = new Isolate.$isolateProperties._UndefinedValue();
$.CTC = new Isolate.$isolateProperties._IsFalse();
$.CTC0 = new Isolate.$isolateProperties.NullPointerException(null, Isolate.$isolateProperties.CTC4);
$.CTC8 = new Isolate.$isolateProperties._ExceptionImplementation('Incorrect number or type of arguments');
$.CTC20 = new Isolate.$isolateProperties.TestListBase(true);
$.CTC28 = new Isolate.$isolateProperties._Random();
$.CTC30 = new Isolate.$isolateProperties._IsNotNull();
$.CTC31 = new Isolate.$isolateProperties.Throws(null);
$.CTC3 = new Isolate.$isolateProperties.ObjectInterceptor();
$.CTC2 = new Isolate.$isolateProperties.JSArray();
$.CTC1 = new Isolate.$isolateProperties.JSString();
$.CTC11 = new Isolate.$isolateProperties.Throws(Isolate.$isolateProperties.CTC33);
$._Sort__INSERTION_SORT_THRESHOLD = 32;
$._lazyPort = null;
$._SPAWNED_SIGNAL = 'spawned';
$.Duration_MILLISECONDS_PER_SECOND = 1000;
$.Duration_SECONDS_PER_MINUTE = 60;
$.Duration_MINUTES_PER_HOUR = 60;
$.Duration_HOURS_PER_DAY = 24;
$.Duration_MILLISECONDS_PER_MINUTE = 60000;
$.Duration_MILLISECONDS_PER_HOUR = 3600000;
$.Duration_MILLISECONDS_PER_DAY = 86400000;
$._getTypeNameOf = null;
$.PI = 3.141592653589793;
$.SQRT2 = 1.4142135623730951;
$.MIRROR_OPT_IN_MESSAGE = '\nThis program is using an experimental feature called "mirrors".  As\ncurrently implemented, mirrors do not work with minification, and will\ncause spurious errors depending on how code was optimized.\n\nThe authors of this program are aware of these problems and have\ndecided the thrill of using an experimental feature is outweighing the\nrisks.  Furthermore, the authors of this program understand that\nlong-term, to fix the problems mentioned above, mirrors may have\nnegative impact on size and performance of Dart programs compiled to\nJavaScript.\n';
$._ReceivePortImpl__nextFreeId = 1;
$._DateImpl__MAX_MILLISECONDS_SINCE_EPOCH = 8640000000000000;
$._TimerFactory__factory = null;
$._config = null;
$._currentGroup = '';
$.groupSep = ' ';
$.ShapeType_rect = Isolate.$isolateProperties.CTC29;
$._tests = null;
$._testRunner = null;
$._testSetup = null;
$._testTeardown = null;
$._currentTest = 0;
$._initialized = false;
$._uncaughtErrorMessage = null;
$.PASS = 'pass';
$.FAIL = 'fail';
$.ERROR = 'error';
$._soloTest = null;
$._cachedBrowserPrefix = null;
$.isNull = Isolate.$isolateProperties.CTC6;
$.isNotNull = Isolate.$isolateProperties.CTC30;
$.isTrue = Isolate.$isolateProperties.CTC7;
$.isFalse = Isolate.$isolateProperties.CTC;
$.$throws = Isolate.$isolateProperties.CTC31;
$.double_NAN = (0/0);
$.double_INFINITY = (1/0);
$.double_NEGATIVE_INFINITY = (-1/0);
$.Property_Undefined = Isolate.$isolateProperties.CTC9;
$.isArgumentError = Isolate.$isolateProperties.CTC38;
$.throwsArgumentError = Isolate.$isolateProperties.CTC17;
$.Uri__COMPONENT_SCHEME = 1;
$.Uri__COMPONENT_USER_INFO = 2;
$.Uri__COMPONENT_DOMAIN = 3;
$.Uri__COMPONENT_PORT = 4;
$.Uri__COMPONENT_PATH = 5;
$.Uri__COMPONENT_QUERY_DATA = 6;
$.Uri__COMPONENT_FRAGMENT = 7;
$.GlobalId__globalId = 0;
$.throwsNullPointerException = Isolate.$isolateProperties.CTC16;
$.isNullPointerException = Isolate.$isolateProperties.CTC39;
$.isUnsupportedError = Isolate.$isolateProperties.CTC35;
$.throwsUnsupportedError = Isolate.$isolateProperties.CTC12;
$._assertFailureHandler = null;
$._assertErrorFormatter = null;
$._BufferingSendPort__idCount = 0;
$._botHelperRandom = null;
$.TestCloneable__globalId = 0;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CTC5;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$.Primitives_hashCodeSeed = 0;
$.Primitives_mirrorsEnabled = false;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
Isolate.$lazy($, 'isMouseOverProperty', 'Mouse_isMouseOverProperty', 'get$Mouse_isMouseOverProperty', function() {
  return $.Property$('IsMouseOver', false);
});
Isolate.$lazy($, 'isMouseDirectlyOverProperty', 'Mouse_isMouseDirectlyOverProperty', 'get$Mouse_isMouseDirectlyOverProperty', function() {
  return $.Property$('IsMouseDirectlyOver', false);
});
Isolate.$lazy($, '_stageMouseCacheProperty', 'Mouse__stageMouseCacheProperty', 'get$Mouse__stageMouseCacheProperty', function() {
  return $.Property$('_stageMouseCacheProperty', null);
});
Isolate.$lazy($, '_START_TAG_REGEXP', '_START_TAG_REGEXP', 'get$_START_TAG_REGEXP', function() {
  return $.RegExp_RegExp('<(\\w+)', false, false);
});
Isolate.$lazy($, 'wrapAsync', 'wrapAsync', 'get$wrapAsync', function() {
  return new $.anon1();
});
Isolate.$lazy($, '_clickManagerProperty', 'ClickManager__clickManagerProperty', 'get$ClickManager__clickManagerProperty', function() {
  return $.Property$('_clickManager', null);
});
Isolate.$lazy($, '_validHexColorRe', 'RgbColor__validHexColorRe', 'get$RgbColor__validHexColorRe', function() {
  return $.RegExp_RegExp('^#(?:[0-9a-f]{6})$', true, false);
});
Isolate.$lazy($, '_testEvent1', 'TestAttachedEvents__testEvent1', 'get$TestAttachedEvents__testEvent1', function() {
  return $.AttachedEvent$('testEvent1');
});
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$('[-[\\]{}()*+?.,\\\\^$|#\\s]', false, false);
});
Isolate.$lazy($, '_testEvent2', 'TestAttachedEvents__testEvent2', 'get$TestAttachedEvents__testEvent2', function() {
  return $.AttachedEvent$('testEvent2');
});
Isolate.$lazy($, '_isClickableProperty', 'ClickManager__isClickableProperty', 'get$ClickManager__isClickableProperty', function() {
  return $.Property$('isClickable', false);
});
Isolate.$lazy($, '_mouseDownEvent', 'ClickManager__mouseDownEvent', 'get$ClickManager__mouseDownEvent', function() {
  return $.AttachedEvent$('mouseDown');
});
Isolate.$lazy($, '_clickEvent', 'ClickManager__clickEvent', 'get$ClickManager__clickEvent', function() {
  return $.AttachedEvent$('clickEvent');
});
Isolate.$lazy($, '_mouseUpEvent', 'ClickManager__mouseUpEvent', 'get$ClickManager__mouseUpEvent', function() {
  return $.AttachedEvent$('mouseUp');
});
Isolate.$lazy($, '_containerTransformProperty', 'Panel__containerTransformProperty', 'get$Panel__containerTransformProperty', function() {
  return $.Property$('panelTransform', null);
});
Isolate.$lazy($, '_mouseMoveEvent', 'ClickManager__mouseMoveEvent', 'get$ClickManager__mouseMoveEvent', function() {
  return $.AttachedEvent$('mouseMove');
});
Isolate.$lazy($, '_mouseOutEvent', 'ClickManager__mouseOutEvent', 'get$ClickManager__mouseOutEvent', function() {
  return $.AttachedEvent$('mouseOut');
});
Isolate.$lazy($, '_splitRe', 'Uri__splitRe', 'get$Uri__splitRe', function() {
  return $.RegExp_RegExp('^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([\\w\\d\\-\\u0100-\\uffff.%]*)(?::([0-9]+))?)?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$', false, false);
});
Isolate.$lazy($, '_nameProperty', 'TestPropertyEventIntegration__nameProperty', 'get$TestPropertyEventIntegration__nameProperty', function() {
  return $.Property$('name', null);
});
Isolate.$lazy($, '_ageProperty', 'TestPropertyEventIntegration__ageProperty', 'get$TestPropertyEventIntegration__ageProperty', function() {
  return $.Property$('age', 0);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''] || [];
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastCharCode = field.charCodeAt(len - 1);
    var needsAccessor = (lastCharCode & 63) >= 60;
    if (needsAccessor) {
      var needsGetter = (lastCharCode & 3) > 0;
      var needsSetter = (lastCharCode & 2) == 0;
      var renaming = (lastCharCode & 64) != 0;
      var accessorName = field = field.substring(0, len - 1);
      if (renaming) {
        var divider = field.indexOf(":");
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (needsGetter) {
        var getterString = "return this." + field + ";";
        prototype["get$" + accessorName] = new Function(getterString);
      }
      if (needsSetter) {
        var setterString = "this." + field + " = v;";
        prototype["set$" + accessorName] = new Function("v", setterString);
      }
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method !== '') {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$Iterable: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 is$_FileList: function() { return false; },
 is$IDBKeyRange: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$Blob: function() { return false; },
 is$File: function() { return false; },
 is$Element: function() { return false; },
 is$Collection: function() { return false; },
 is$ImageData: function() { return false; },
 get$hashCode: function() { return $.hashCodeForNativeObject(this); },
 is$List: function() { return false; },
 is$Map: function() { return false; }
});

$.$defineNativeClass('HTMLElement', {"": []
});

$.$defineNativeClass('AbstractWorker', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.AbstractWorkerEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('AnalyserNode', {"": []
});

$.$defineNativeClass('HTMLAnchorElement', {"": ["name>"],
 toString$0: function() {
  return this.toString();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('WebKitAnimation', {"": ["name>"]
});

$.$defineNativeClass('WebKitAnimationEvent', {"": []
});

$.$defineNativeClass('HTMLAppletElement', {"": ["height=", "name>", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ArrayBuffer', {"": [],
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {"": [],
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {"": ["name>", "value="]
});

$.$defineNativeClass('AudioBuffer', {"": ["length>"]
});

$.$defineNativeClass('AudioBufferSourceNode', {"": []
});

$.$defineNativeClass('AudioContext', {"": [],
 get$on: function() {
  return $.AudioContextEvents$(this);
}
});

$.$defineNativeClass('AudioDestinationNode', {"": []
});

$.$defineNativeClass('HTMLAudioElement', {"": []
});

$.$defineNativeClass('AudioGain', {"": []
});

$.$defineNativeClass('AudioListener', {"": []
});

$.$defineNativeClass('AudioNode', {"": []
});

$.$defineNativeClass('AudioParam', {"": ["name>", "value="]
});

$.$defineNativeClass('AudioProcessingEvent', {"": []
});

$.$defineNativeClass('AudioSourceNode', {"": []
});

$.$defineNativeClass('HTMLBRElement', {"": [],
 clear$0: function() { return this.clear.call$0(); },
 clear$1: function(arg0) { return this.clear.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('BarInfo', {"": []
});

$.$defineNativeClass('HTMLBaseElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLBaseFontElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('BatteryManager', {"": [],
 get$on: function() {
  return $.BatteryManagerEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('BeforeLoadEvent', {"": []
});

$.$defineNativeClass('BiquadFilterNode', {"": []
});

$.$defineNativeClass('Blob', {"": [],
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {"": [],
 get$on: function() {
  return $.BodyElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', {"": ["name>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('CDATASection', {"": []
});

$.$defineNativeClass('CSSCharsetRule', {"": []
});

$.$defineNativeClass('CSSFontFaceRule', {"": []
});

$.$defineNativeClass('CSSImportRule', {"": []
});

$.$defineNativeClass('WebKitCSSKeyframeRule', {"": []
});

$.$defineNativeClass('WebKitCSSKeyframesRule', {"": ["name>"]
});

$.$defineNativeClass('WebKitCSSMatrix', {"": ["b>"],
 rotate$3: function(rotX, rotY, rotZ) {
  return this.rotate(rotX,rotY,rotZ);
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSMediaRule', {"": []
});

$.$defineNativeClass('CSSPageRule', {"": []
});

$.$defineNativeClass('CSSPrimitiveValue', {"": []
});

$.$defineNativeClass('CSSRule', {"": []
});

$.$defineNativeClass('CSSStyleDeclaration', {"": ["length>"],
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : '';
},
 setProperty$3: function(propertyName, value, priority) {
  this.setProperty(propertyName, value, priority);
  if (!!this.setAttribute)
    this.setAttribute(propertyName, value);
},
 get$clear: function() {
  return this.getPropertyValue$1('clear');
},
 clear$0: function() { return this.get$clear().call$0(); },
 clear$1: function(arg0) { return this.get$clear().call$1(arg0); },
 get$filter: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'filter');
},
 filter$1: function(arg0) { return this.get$filter().call$1(arg0); },
 filter$3: function(arg0, arg1, arg2) { return this.get$filter().call$3(arg0, arg1, arg2); },
 get$height: function() {
  return this.getPropertyValue$1('height');
},
 set$height: function(value) {
  this.setProperty$3('height', value, '');
},
 get$left: function() {
  return this.getPropertyValue$1('left');
},
 get$top: function() {
  return this.getPropertyValue$1('top');
},
 get$width: function() {
  return this.getPropertyValue$1('width');
},
 set$width: function(value) {
  this.setProperty$3('width', value, '');
}
});

$.$defineNativeClass('CSSStyleRule', {"": []
});

$.$defineNativeClass('CSSStyleSheet', {"": []
});

$.$defineNativeClass('WebKitCSSTransformValue', {"": []
});

$.$defineNativeClass('CSSUnknownRule', {"": []
});

$.$defineNativeClass('CSSValue', {"": []
});

$.$defineNativeClass('HTMLCanvasElement', {"": ["height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('CanvasGradient', {"": []
});

$.$defineNativeClass('CanvasPattern', {"": []
});

$.$defineNativeClass('CanvasRenderingContext', {"": []
});

$.$defineNativeClass('CanvasRenderingContext2D', {"": [],
 rotate$1: function(angle) {
  return this.rotate(angle);
},
 translate$2: function(tx, ty) {
  return this.translate(tx,ty);
}
});

$.$defineNativeClass('ChannelMergerNode', {"": []
});

$.$defineNativeClass('ChannelSplitterNode', {"": []
});

$.$defineNativeClass('CharacterData', {"": ["data>", "length>"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ClientRect', {"": ["height>", "left>", "top>", "width>"]
});

$.$defineNativeClass('Clipboard', {"": []
});

$.$defineNativeClass('CloseEvent', {"": []
});

$.$defineNativeClass('Comment', {"": []
});

$.$defineNativeClass('CompositionEvent', {"": ["data>"]
});

Console = (typeof console == 'undefined' ? {} : console);
Console.count$1 = function(arg) {
  return this.count(arg);
};
Console.error$1 = function(arg) {
  return this.error(arg);
};
Console.get$error = function() { return new $.BoundClosure(this, 'error$1'); };
Console.group$1 = function(arg) {
  return this.group(arg);
};
$.$defineNativeClass('HTMLContentElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ConvolverNode', {"": []
});

$.$defineNativeClass('Coordinates', {"": []
});

$.$defineNativeClass('Counter', {"": []
});

$.$defineNativeClass('Crypto', {"": []
});

$.$defineNativeClass('CustomEvent', {"": []
});

$.$defineNativeClass('HTMLDListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DOMApplicationCache', {"": [],
 get$on: function() {
  return $.DOMApplicationCacheEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMError', {"": ["name>"]
});

$.$defineNativeClass('DOMException', {"": ["message>", "name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMFileSystem', {"": ["name>"]
});

$.$defineNativeClass('DOMFileSystemSync', {"": ["name>"]
});

$.$defineNativeClass('DOMImplementation', {"": []
});

$.$defineNativeClass('MimeType', {"": ["description>"]
});

$.$defineNativeClass('MimeTypeArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMParser', {"": []
});

$.$defineNativeClass('Plugin', {"": ["description>", "length>", "name>"]
});

$.$defineNativeClass('PluginArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Selection', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {"": ["value="]
});

$.$defineNativeClass('DOMTokenList', {"": ["length>"],
 contains$1: function(token) {
  return this.contains(token);
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('HTMLDataListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DataTransferItem', {"": []
});

$.$defineNativeClass('DataTransferItemList', {"": ["length>"],
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DataView', {"": []
});

$.$defineNativeClass('Database', {"": []
});

$.$defineNativeClass('DatabaseSync', {"": []
});

$.$defineNativeClass('DedicatedWorkerContext', {"": [],
 get$on: function() {
  return $.DedicatedWorkerContextEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('DelayNode', {"": []
});

$.$defineNativeClass('HTMLDetailsElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DeviceMotionEvent', {"": []
});

$.$defineNativeClass('DeviceOrientationEvent', {"": []
});

$.$defineNativeClass('HTMLDirectoryElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DirectoryEntry', {"": []
});

$.$defineNativeClass('DirectoryEntrySync', {"": []
});

$.$defineNativeClass('DirectoryReader', {"": []
});

$.$defineNativeClass('DirectoryReaderSync', {"": []
});

$.$defineNativeClass('HTMLDivElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Document', {"": [],
 get$on: function() {
  return $.DocumentEvents$(this);
},
 get$$$dom_body: function() {
  return this.body;
},
 get$window: function() {
  return $._convertNativeToDart_Window(this.get$_window());
},
 get$_window: function() {
  return this.defaultView;
},
 get$$$dom_head: function() {
  return this.head;
},
 $$dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 $$dom_getElementById$1: function(elementId) {
  return this.getElementById(elementId);
},
 $$dom_getElementsByName$1: function(elementName) {
  return this.getElementsByName(elementName);
},
 $$dom_getElementsByTagName$1: function(tagname) {
  return this.getElementsByTagName(tagname);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 query$1: function(selectors) {
  if ($.RegExp_RegExp('^#[_a-zA-Z]\\w*$', false, false).hasMatch$1(selectors) === true)
    return this.$$dom_getElementById$1($.getInterceptor(selectors).substring$1(selectors, 1));
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  var mutableMatches, len, copyOfMatches, t1, i;
  if ($.RegExp_RegExp('^\\[name=["\'][^\'"]+[\'"]\\]$', false, false).hasMatch$1(selectors) === true) {
    mutableMatches = this.$$dom_getElementsByName$1($.getInterceptor(selectors).substring$2(selectors, 7, selectors.length - 2));
    if (typeof mutableMatches !== 'string' && (typeof mutableMatches !== 'object' || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
      return this.queryAll$1$bailout(1, mutableMatches);
    len = mutableMatches.length;
    copyOfMatches = $._ListImpl_List(len);
    for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      copyOfMatches[i] = mutableMatches[i];
    }
    return $._FrozenElementList$_wrap(copyOfMatches);
  } else if ($.RegExp_RegExp('^[*a-zA-Z0-9]+$', false, false).hasMatch$1(selectors) === true) {
    mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
    if (typeof mutableMatches !== 'string' && (typeof mutableMatches !== 'object' || mutableMatches === null || mutableMatches.constructor !== Array && !mutableMatches.is$JavaScriptIndexingBehavior()))
      return this.queryAll$1$bailout(2, mutableMatches);
    len = mutableMatches.length;
    copyOfMatches = $._ListImpl_List(len);
    for (t1 = mutableMatches.length, i = 0; i < len; ++i) {
      if (i >= t1)
        throw $.ioore(i);
      copyOfMatches[i] = mutableMatches[i];
    }
    return $._FrozenElementList$_wrap(copyOfMatches);
  } else
    return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 queryAll$1$bailout: function(state0, env0) {
  switch (state0) {
    case 1:
      mutableMatches = env0;
      break;
    case 2:
      mutableMatches = env0;
      break;
  }
  switch (state0) {
    case 0:
    default:
      var mutableMatches, len, copyOfMatches, i, t1;
      if (state0 === 1 || state0 === 0 && $.RegExp_RegExp('^\\[name=["\'][^\'"]+[\'"]\\]$', false, false).hasMatch$1(selectors) === true)
        switch (state0) {
          case 0:
            mutableMatches = this.$$dom_getElementsByName$1($.getInterceptor(selectors).substring$2(selectors, 7, selectors.length - 2));
          case 1:
            state0 = 0;
            len = $.get$length(mutableMatches);
            copyOfMatches = $._ListImpl_List(len);
            for (i = 0; $.ltB(i, len); ++i) {
              t1 = $.index(mutableMatches, i);
              if (i >= copyOfMatches.length)
                throw $.ioore(i);
              copyOfMatches[i] = t1;
            }
            return $._FrozenElementList$_wrap(copyOfMatches);
        }
      else
        switch (state0) {
          case 0:
          case 2:
            if (state0 === 2 || state0 === 0 && $.RegExp_RegExp('^[*a-zA-Z0-9]+$', false, false).hasMatch$1(selectors) === true)
              switch (state0) {
                case 0:
                  mutableMatches = this.$$dom_getElementsByTagName$1(selectors);
                case 2:
                  state0 = 0;
                  len = $.get$length(mutableMatches);
                  copyOfMatches = $._ListImpl_List(len);
                  for (i = 0; $.ltB(i, len); ++i) {
                    t1 = $.index(mutableMatches, i);
                    if (i >= copyOfMatches.length)
                      throw $.ioore(i);
                    copyOfMatches[i] = t1;
                  }
                  return $._FrozenElementList$_wrap(copyOfMatches);
              }
            else
              return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
        }
  }
}
});

$.$defineNativeClass('DocumentFragment', {"": [],
 get$elements: function() {
  if (this._elements == null)
    this._elements = $.FilteredElementList$(this);
  return this._elements;
},
 query$1: function(selectors) {
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 set$innerHTML: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$innerHTML')) {
  {
  var t1, e, nodes;
  t1 = this.get$nodes();
  $.getInterceptor(t1).clear$0(t1);
  e = $.Element_Element$tag('div');
  e.set$innerHTML(value);
  nodes = $._ListImpl_List$from(e.get$nodes());
  t1 = this.get$nodes();
  $.getInterceptor(t1).addAll$1(t1, nodes);
}
  } else {
    return Object.prototype.set$innerHTML.call(this, value);
  }

},
 get$translate: function() {
  return false;
},
 translate$2: function(arg0, arg1) { return this.get$translate().call$2(arg0, arg1); },
 get$id: function() {
  return '';
},
 get$parent: function() {
  return;
},
 get$attributes: function() {
  return $.CTC27;
},
 click$0: function() {
},
 get$click: function() { return new $.BoundClosure0(this, 'click$0'); },
 set$id: function(value) {
  throw $.$$throw($.UnsupportedError$('ID can\'t be set for document fragments.'));
},
 get$on: function() {
  return $.ElementEvents$(this);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
}
});

$.$defineNativeClass('DocumentType', {"": ["name>"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('DynamicsCompressorNode', {"": []
});

$.$defineNativeClass('EXTTextureFilterAnisotropic', {"": []
});

$.$defineNativeClass('Element', {"": ["id=", "innerHTML<"],
 get$attributes: function() {
  return $._ElementAttributeMap$(this);
},
 set$elements: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$elements')) {
  {
  var elements = this.get$elements();
  $.getInterceptor(elements).clear$0(elements);
  $.getInterceptor(elements).addAll$1(elements, value);
}
  } else {
    return Object.prototype.set$elements.call(this, value);
  }

},
 get$elements: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$elements')) {
  {
  return $._ChildrenElementList$_wrap(this);
}
  } else {
    return Object.prototype.get$elements.call(this);
  }

},
 query$1: function(selectors) {
  return this.$$dom_querySelector$1(selectors);
},
 queryAll$1: function(selectors) {
  return $._FrozenElementList$_wrap(this.$$dom_querySelectorAll$1(selectors));
},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.ElementEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 get$$$dom_children: function() {
  return this.children;
},
 translate$2: function(arg0, arg1) { return this.translate.call$2(arg0, arg1); },
 click$0: function() {
  return this.click();
},
 get$click: function() { return new $.BoundClosure0(this, 'click$0'); },
 get$$$dom_firstElementChild: function() {
  return this.firstElementChild;
},
 get$$$dom_lastElementChild: function() {
  return this.lastElementChild;
},
 $$dom_getAttribute$1: function(name) {
  return this.getAttribute(name);
},
 getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 $$dom_hasAttribute$1: function(name) {
  return this.hasAttribute(name);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 $$dom_querySelectorAll$1: function(selectors) {
  return this.querySelectorAll(selectors);
},
 $$dom_removeAttribute$1: function(name) {
  return this.removeAttribute(name);
},
 $$dom_setAttribute$2: function(name, value) {
  return this.setAttribute(name,value);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', {"": ["height=", "name>", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('EntityReference', {"": []
});

$.$defineNativeClass('Entry', {"": ["name>"],
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
}
});

$.$defineNativeClass('EntrySync', {"": ["name>"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ErrorEvent', {"": ["message>"]
});

$.$defineNativeClass('Event', {"": [],
 get$target: function() {
  return $._convertNativeToDart_EventTarget(this.get$_target());
},
 get$_target: function() {
  return this.target;
}
});

$.$defineNativeClass('EventException', {"": ["message>", "name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('EventSource', {"": [],
 get$on: function() {
  return $.EventSourceEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.Events$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('HTMLFieldSetElement', {"": ["elements>", "name>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('File', {"": ["name>"],
 is$File: function() { return true; }
});

$.$defineNativeClass('FileEntry', {"": []
});

$.$defineNativeClass('FileEntrySync', {"": []
});

$.$defineNativeClass('FileError', {"": []
});

$.$defineNativeClass('FileException', {"": ["message>", "name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('FileReader', {"": ["error>", "result>"],
 get$on: function() {
  return $.FileReaderEvents$(this);
},
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); },
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileReaderSync', {"": []
});

$.$defineNativeClass('FileWriter', {"": ["error>", "length>"],
 get$on: function() {
  return $.FileWriterEvents$(this);
},
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); },
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', {"": ["length>"]
});

$.$defineNativeClass('Float32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Float64Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('FormData', {"": []
});

$.$defineNativeClass('HTMLFormElement', {"": ["length>", "name>"],
 reset$0: function() {
  return this.reset();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', {"": ["height>", "name>", "width>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameSetElement', {"": [],
 get$on: function() {
  return $.FrameSetElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('GainNode', {"": []
});

$.$defineNativeClass('Gamepad', {"": ["id>", "index>"]
});

$.$defineNativeClass('Geolocation', {"": []
});

$.$defineNativeClass('Geoposition', {"": []
});

$.$defineNativeClass('HTMLHRElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', {"": [],
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = value;
},
 remove$1: function(index) {
  return this.remove(index);
}
});

$.$defineNativeClass('HashChangeEvent', {"": []
});

$.$defineNativeClass('HTMLHeadElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHeadingElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', {"": [],
 get$body: function() {
  return $.document().get$$$dom_body();
},
 get$head: function() {
  return $.document().get$$$dom_head();
}
});

$.$defineNativeClass('HTMLHtmlElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequest', {"": [],
 get$on: function() {
  return $.HttpRequestEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 send$1: function(data) {
  return this.send(data);
}
});

$.$defineNativeClass('XMLHttpRequestException', {"": ["message>", "name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequestProgressEvent', {"": []
});

$.$defineNativeClass('XMLHttpRequestUpload', {"": [],
 get$on: function() {
  return $.HttpRequestUploadEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBAny', {"": []
});

$.$defineNativeClass('IDBCursor', {"": ["key>"]
});

$.$defineNativeClass('IDBCursorWithValue', {"": ["value>"]
});

$.$defineNativeClass('IDBDatabase', {"": ["name>"],
 get$on: function() {
  return $.IDBDatabaseEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBDatabaseException', {"": ["message>", "name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBFactory', {"": []
});

$.$defineNativeClass('IDBIndex', {"": ["name>"],
 count$1: function(key_OR_range) {
  var t1, t2;
  t1 = $ === key_OR_range;
  if (t1)
    key_OR_range = null;
  t2 = !t1;
  if (t1)
    return this._count_1$0();
  if (t2)
    t1 = typeof key_OR_range === 'object' && key_OR_range !== null && key_OR_range.is$IDBKeyRange() || key_OR_range == null;
  else
    t1 = false;
  if (t1)
    return this._count_2$1(key_OR_range);
  if (t2)
    return this._count_3$1(key_OR_range);
  throw $.$$throw($.CTC8);
},
 count$0: function() {
  return this.count$1($)
},
 _count_1$0: function() {
  return this.count();
},
 _count_2$1: function(range) {
  return this.count(range);
},
 _count_3$1: function(key) {
  return this.count(key);
},
 get$1: function(key) {
  var t1, t2;
  t1 = $ === key;
  if (t1)
    key = null;
  t1 = !t1;
  if (t1)
    t2 = typeof key === 'object' && key !== null && key.is$IDBKeyRange() || key == null;
  else
    t2 = false;
  if (t2)
    return this._get_1$1(key);
  if (t1)
    return this._get_2$1(key);
  throw $.$$throw($.CTC8);
},
 _get_1$1: function(key) {
  return this.get(key);
},
 _get_2$1: function(key) {
  return this.get(key);
}
});

$.$defineNativeClass('IDBKey', {"": []
});

$.$defineNativeClass('IDBKeyRange', {"": [],
 is$IDBKeyRange: function() { return true; }
});

$.$defineNativeClass('IDBObjectStore', {"": ["name>"],
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_PrepareForStructuredClone(value), key);
  return this._add_2$1($._convertDartToNative_PrepareForStructuredClone(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
},
 count$1: function(key_OR_range) {
  var t1, t2;
  t1 = $ === key_OR_range;
  if (t1)
    key_OR_range = null;
  t2 = !t1;
  if (t1)
    return this._count_1$0();
  if (t2)
    t1 = typeof key_OR_range === 'object' && key_OR_range !== null && key_OR_range.is$IDBKeyRange() || key_OR_range == null;
  else
    t1 = false;
  if (t1)
    return this._count_2$1(key_OR_range);
  if (t2)
    return this._count_3$1(key_OR_range);
  throw $.$$throw($.CTC8);
},
 count$0: function() {
  return this.count$1($)
},
 _count_1$0: function() {
  return this.count();
},
 _count_2$1: function(range) {
  return this.count(range);
},
 _count_3$1: function(key) {
  return this.count(key);
},
 index$1: function(name) {
  return this.index(name);
},
 get$index: function() { return new $.BoundClosure(this, 'index$1'); }
});

$.$defineNativeClass('IDBOpenDBRequest', {"": [],
 get$on: function() {
  return $.IDBOpenDBRequestEvents$(this);
}
});

$.$defineNativeClass('IDBRequest', {"": ["error>"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.IDBRequestEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); },
 get$result: function() {
  return $._convertNativeToDart_IDBAny(this.get$_result());
},
 get$_result: function() {
  return this.result;
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBTransaction', {"": ["error>"],
 get$on: function() {
  return $.IDBTransactionEvents$(this);
},
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); },
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeRequest', {"": [],
 get$on: function() {
  return $.IDBVersionChangeRequestEvents$(this);
}
});

$.$defineNativeClass('HTMLIFrameElement', {"": ["height=", "name>", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('IceCandidate', {"": []
});

$.$defineNativeClass('ImageData', {"": ["data>", "height>", "width>"],
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {"": ["height=", "name>", "width=", "x>", "y>"],
 complete$1: function(arg0) { return this.complete.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', {"": ["height=", "name>", "pattern>", "value=", "width="],
 get$on: function() {
  return $.InputElementEvents$(this);
},
 max$0: function() { return this.max.call$0(); },
 min$0: function() { return this.min.call$0(); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('Int16Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int8Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('JavaScriptCallFrame', {"": []
});

$.$defineNativeClass('KeyboardEvent', {"": ["shiftKey>"]
});

$.$defineNativeClass('HTMLKeygenElement', {"": ["name>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLabelElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLegendElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('History', {"": ["length>", "state>"]
});

$.$defineNativeClass('Location', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('LocalMediaStream', {"": []
});

$.$defineNativeClass('DOMWindow', {"": ["name>", "navigator>"],
 get$on: function() {
  return $.LocalWindowEvents$(this);
},
 get$parent: function() {
  return $._convertNativeToDart_Window(this.get$_parent());
},
 get$_parent: function() {
  return this.parent;
},
 get$top: function() {
  return $._convertNativeToDart_Window(this.get$_top());
},
 get$_top: function() {
  return this.top;
},
 get$window: function() {
  return $._convertNativeToDart_Window(this.get$_window());
},
 get$_window: function() {
  return this.window;
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 postMessage$3: function(message, targetOrigin, messagePorts) {
  var t1, t2;
  t1 = $ === message;
  if (t1)
    message = null;
  t1 = !t1;
  t2 = $ === messagePorts;
  if (t2)
    messagePorts = null;
  if (t1 && t2) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin);
    return;
  }
  if (t1) {
    this._postMessage_2$3($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin, messagePorts);
    return;
  }
  throw $.$$throw($.CTC8);
},
 postMessage$2: function(message,targetOrigin) {
  return this.postMessage$3(message,targetOrigin,$)
},
 _postMessage_1$2: function(message, targetOrigin) {
  return this.postMessage(message,targetOrigin);
},
 _postMessage_2$3: function(message, targetOrigin, messagePorts) {
  return this.postMessage(message,targetOrigin,messagePorts);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('HTMLMapElement', {"": ["name>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLMarqueeElement', {"": ["height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaController', {"": [],
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMediaElement', {"": ["error>"],
 get$on: function() {
  return $.MediaElementEvents$(this);
},
 error$2: function(arg0, arg1) { return this.error.call$2(arg0, arg1); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaElementAudioSourceNode', {"": []
});

$.$defineNativeClass('MediaError', {"": []
});

$.$defineNativeClass('MediaKeyError', {"": []
});

$.$defineNativeClass('MediaKeyEvent', {"": ["message>"]
});

$.$defineNativeClass('MediaList', {"": ["length>"]
});

$.$defineNativeClass('MediaQueryList', {"": [],
 matches$2: function(arg0, arg1) { return this.matches.call$2(arg0, arg1); }
});

$.$defineNativeClass('MediaSource', {"": [],
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStream', {"": [],
 get$on: function() {
  return $.MediaStreamEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamAudioSourceNode', {"": []
});

$.$defineNativeClass('MediaStreamEvent', {"": []
});

$.$defineNativeClass('MediaStreamTrack', {"": [],
 get$on: function() {
  return $.MediaStreamTrackEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackEvent', {"": []
});

$.$defineNativeClass('MediaStreamTrackList', {"": ["length>"],
 get$on: function() {
  return $.MediaStreamTrackListEvents$(this);
},
 add$1: function(track) {
  return this.add(track);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 remove$1: function(track) {
  return this.remove(track);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MemoryInfo', {"": []
});

$.$defineNativeClass('HTMLMenuElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MessageChannel', {"": []
});

$.$defineNativeClass('MessageEvent', {"": ["ports>"],
 get$data: function() {
  return $._convertNativeToDart_SerializedScriptValue(this.get$_data());
},
 get$_data: function() {
  return this.data;
}
});

$.$defineNativeClass('MessagePort', {"": [],
 get$on: function() {
  return $.MessagePortEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMetaElement', {"": ["name>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Metadata', {"": []
});

$.$defineNativeClass('HTMLMeterElement', {"": ["value="],
 max$0: function() { return this.max.call$0(); },
 min$0: function() { return this.min.call$0(); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLModElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MouseEvent', {"": ["shiftKey>", "x>", "y>"],
 get$offsetX: function() {
  if (!!this.offsetX)
    return this.offsetX;
  else {
    var target = this.get$target();
    if (!(typeof target === 'object' && target !== null && target.is$Element()))
      throw $.$$throw($.UnsupportedError$('offsetX is only supported on elements'));
    return $.sub(this.clientX, this.get$target().getBoundingClientRect$0().get$left());
  }
},
 get$offsetY: function() {
  if (!!this.offsetY)
    return this.offsetY;
  else {
    var target = this.get$target();
    if (!(typeof target === 'object' && target !== null && target.is$Element()))
      throw $.$$throw($.UnsupportedError$('offsetY is only supported on elements'));
    return $.sub(this.clientY, this.get$target().getBoundingClientRect$0().get$top());
  }
}
});

$.$defineNativeClass('MutationEvent', {"": []
});

$.$defineNativeClass('MutationObserver', {"": []
});

$.$defineNativeClass('MutationRecord', {"": []
});

$.$defineNativeClass('NamedNodeMap', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Navigator', {"": ["userAgent>"]
});

$.$defineNativeClass('NavigatorUserMediaError', {"": []
});

$.$defineNativeClass('Node', {"": [],
 get$nodes: function() {
  return $._ChildNodeListLazy$(this);
},
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
  {
  if (!(this.get$parent() == null))
    this.get$parent().$$dom_removeChild$1(this);
}
  } else {
    return Object.prototype.remove$0.call(this);
  }

},
 replaceWith$1: function(otherNode, exception) {
  var parent$;
  try {
    parent$ = this.get$parent();
    parent$.$$dom_replaceChild$2(otherNode, this);
  } catch (exception) {
    $.unwrapException(exception);
  }

  return this;
},
 get$$$dom_attributes: function() {
  return this.attributes;
},
 get$$$dom_childNodes: function() {
  return this.childNodes;
},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
  return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
  this.textContent = value;
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_appendChild$1: function(newChild) {
  return this.appendChild(newChild);
},
 contains$1: function(other) {
  return this.contains(other);
},
 $$dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild(newChild,oldChild);
}
});

$.$defineNativeClass('NodeFilter', {"": []
});

$.$defineNativeClass('NodeIterator', {"": [],
 filter$1: function(arg0) { return this.filter.call$1(arg0); },
 filter$3: function(arg0, arg1, arg2) { return this.filter.call$3(arg0, arg1, arg2); }
});

$.$defineNativeClass('NodeList', {"": ["_parent>", "length>"],
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  this._parent.$$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._parent.$$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.iterator(collection); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    this._parent.$$dom_appendChild$1(t2);
  }
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    this._parent.$$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._parent.set$text('');
},
 oprator$indexSet$2: function(index, value) {
  this._parent.$$dom_replaceChild$2(value, this.operator$index$1(index));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 get$first: function() {
  return this.operator$index$1(0);
},
 first$0: function() { return this.get$first().call$0(); },
 first$1: function(arg0) { return this.get$first().call$1(arg0); },
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 operator$index$1: function(index) {
  return this[index];
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Notation', {"": []
});

$.$defineNativeClass('Notification', {"": [],
 get$on: function() {
  return $.NotificationEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('NotificationCenter', {"": []
});

$.$defineNativeClass('OESElementIndexUint', {"": []
});

$.$defineNativeClass('OESStandardDerivatives', {"": []
});

$.$defineNativeClass('OESTextureFloat', {"": []
});

$.$defineNativeClass('OESVertexArrayObject', {"": []
});

$.$defineNativeClass('HTMLOListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLObjectElement', {"": ["data>", "height=", "name>", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OfflineAudioCompletionEvent', {"": []
});

$.$defineNativeClass('HTMLOptGroupElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOptionElement', {"": ["index>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OscillatorNode', {"": []
});

$.$defineNativeClass('HTMLOutputElement', {"": ["name>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OverflowEvent', {"": []
});

$.$defineNativeClass('PagePopupController', {"": []
});

$.$defineNativeClass('PageTransitionEvent', {"": []
});

$.$defineNativeClass('PannerNode', {"": []
});

$.$defineNativeClass('HTMLParagraphElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', {"": ["name>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('PeerConnection00', {"": [],
 get$on: function() {
  return $.PeerConnection00Events$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Performance', {"": []
});

$.$defineNativeClass('PerformanceNavigation', {"": []
});

$.$defineNativeClass('PerformanceTiming', {"": []
});

$.$defineNativeClass('WebKitPoint', {"": ["x>", "y>"]
});

$.$defineNativeClass('PopStateEvent', {"": [],
 get$state: function() {
  return $._convertNativeToDart_SerializedScriptValue(this.get$_state());
},
 get$_state: function() {
  return this.state;
}
});

$.$defineNativeClass('PositionError', {"": ["message>"]
});

$.$defineNativeClass('HTMLPreElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ProcessingInstruction', {"": ["data>"]
});

$.$defineNativeClass('HTMLProgressElement', {"": ["value="],
 max$0: function() { return this.max.call$0(); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('ProgressEvent', {"": []
});

$.$defineNativeClass('HTMLQuoteElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('RGBColor', {"": []
});

$.$defineNativeClass('RTCDataChannel', {"": [],
 get$on: function() {
  return $.RTCDataChannelEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 send$1: function(data) {
  return this.send(data);
}
});

$.$defineNativeClass('RTCDataChannelEvent', {"": []
});

$.$defineNativeClass('RTCIceCandidate', {"": []
});

$.$defineNativeClass('RTCIceCandidateEvent', {"": []
});

$.$defineNativeClass('RTCPeerConnection', {"": [],
 get$on: function() {
  return $.RTCPeerConnectionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCSessionDescription', {"": []
});

$.$defineNativeClass('RTCStatsElement', {"": []
});

$.$defineNativeClass('RTCStatsReport', {"": []
});

$.$defineNativeClass('RTCStatsResponse', {"": [],
 result$0: function() {
  return this.result();
},
 get$result: function() { return new $.BoundClosure0(this, 'result$0'); }
});

$.$defineNativeClass('RadioNodeList', {"": ["value="]
});

$.$defineNativeClass('Range', {"": [],
 getBoundingClientRect$0: function() {
  return this.getBoundingClientRect();
},
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RangeException', {"": ["message>", "name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Rect', {"": ["left>", "top>"]
});

$.$defineNativeClass('SQLError', {"": ["message>"]
});

$.$defineNativeClass('SQLException', {"": ["message>"]
});

$.$defineNativeClass('SQLResultSet', {"": []
});

$.$defineNativeClass('SQLResultSetRowList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SQLTransaction', {"": []
});

$.$defineNativeClass('SQLTransactionSync', {"": []
});

$.$defineNativeClass('Screen', {"": ["height>", "width>"]
});

$.$defineNativeClass('HTMLScriptElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ScriptProcessorNode', {"": [],
 get$on: function() {
  return $.ScriptProcessorNodeEvents$(this);
}
});

$.$defineNativeClass('ScriptProfile', {"": ["head>"]
});

$.$defineNativeClass('ScriptProfileNode', {"": []
});

$.$defineNativeClass('HTMLSelectElement', {"": ["length=", "name>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SessionDescription', {"": []
});

$.$defineNativeClass('HTMLShadowElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ShadowRoot', {"": ["innerHTML<"]
});

$.$defineNativeClass('SharedWorker', {"": []
});

$.$defineNativeClass('SharedWorkerContext', {"": ["name>"],
 get$on: function() {
  return $.SharedWorkerContextEvents$(this);
}
});

$.$defineNativeClass('SourceBuffer', {"": []
});

$.$defineNativeClass('SourceBufferList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLSpanElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SpeechGrammar', {"": []
});

$.$defineNativeClass('SpeechGrammarList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputEvent', {"": []
});

$.$defineNativeClass('SpeechInputResult', {"": []
});

$.$defineNativeClass('SpeechRecognition', {"": [],
 get$on: function() {
  return $.SpeechRecognitionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('SpeechRecognitionAlternative', {"": []
});

$.$defineNativeClass('SpeechRecognitionError', {"": ["message>"]
});

$.$defineNativeClass('SpeechRecognitionEvent', {"": ["result>"]
});

$.$defineNativeClass('SpeechRecognitionResult', {"": ["length>"]
});

$.$defineNativeClass('Storage', {"": [],
 containsKey$1: function(key) {
  return !(this.$$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$$dom_getItem$1(key);
},
 oprator$indexSet$2: function(key, value) {
  return this.$$dom_setItem$2(key, value);
},
 putIfAbsent$2: function(key, ifAbsent) {
  if (this.$$dom_getItem$1(key) == null)
    this.oprator$indexSet$2(key, ifAbsent.call$0());
  return this.operator$index$1(key);
},
 remove$1: function(key) {
  var value = this.operator$index$1(key);
  this.$$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$$dom_clear$0();
},
 forEach$1: function(f) {
  var i, key;
  for (i = 0; true; ++i) {
    key = this.$$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 get$keys: function() {
  var keys = [];
  this.forEach$1(new $.Storage_keys_anon(keys));
  return keys;
},
 get$values: function() {
  var values = [];
  this.forEach$1(new $.Storage_values_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 get$isEmpty: function() {
  return this.$$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
  return this.length;
},
 $$dom_clear$0: function() {
  return this.clear();
},
 $$dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $$dom_key$1: function(index) {
  return this.key(index);
},
 $$dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $$dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {"": ["key>"]
});

$.$defineNativeClass('StorageInfo', {"": []
});

$.$defineNativeClass('HTMLStyleElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('StyleMedia', {"": []
});

$.$defineNativeClass('StyleSheet', {"": []
});

$.$defineNativeClass('HTMLTableCaptionElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableCellElement', {"": ["height=", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableColElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableRowElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Text', {"": []
});

$.$defineNativeClass('HTMLTextAreaElement', {"": ["name>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TextEvent', {"": ["data>"]
});

$.$defineNativeClass('TextMetrics', {"": ["width>"]
});

$.$defineNativeClass('TextTrack', {"": [],
 get$on: function() {
  return $.TextTrackEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCue', {"": ["id=", "text<"],
 get$on: function() {
  return $.TextTrackCueEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('TextTrackList', {"": ["length>"],
 get$on: function() {
  return $.TextTrackListEvents$(this);
},
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {"": ["length>"]
});

$.$defineNativeClass('HTMLTitleElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Touch', {"": [],
 get$_target: function() {
  return this.target;
}
});

$.$defineNativeClass('TouchEvent', {"": ["shiftKey>"]
});

$.$defineNativeClass('TouchList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TrackEvent', {"": []
});

$.$defineNativeClass('WebKitTransitionEvent', {"": []
});

$.$defineNativeClass('TreeWalker', {"": [],
 filter$1: function(arg0) { return this.filter.call$1(arg0); },
 filter$3: function(arg0, arg1, arg2) { return this.filter.call$3(arg0, arg1, arg2); }
});

$.$defineNativeClass('UIEvent', {"": []
});

$.$defineNativeClass('HTMLUListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Uint16Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8ClampedArray', {"": []
});

$.$defineNativeClass('HTMLUnknownElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('URL', {"": []
});

$.$defineNativeClass('ValidityState', {"": []
});

$.$defineNativeClass('HTMLVideoElement', {"": ["height=", "width="]
});

$.$defineNativeClass('WaveShaperNode', {"": []
});

$.$defineNativeClass('WaveTable', {"": []
});

$.$defineNativeClass('WebGLActiveInfo', {"": ["name>"]
});

$.$defineNativeClass('WebGLBuffer', {"": []
});

$.$defineNativeClass('WebGLCompressedTextureS3TC', {"": []
});

$.$defineNativeClass('WebGLContextAttributes', {"": []
});

$.$defineNativeClass('WebGLContextEvent', {"": []
});

$.$defineNativeClass('WebGLDebugRendererInfo', {"": []
});

$.$defineNativeClass('WebGLDebugShaders', {"": []
});

$.$defineNativeClass('WebGLDepthTexture', {"": []
});

$.$defineNativeClass('WebGLFramebuffer', {"": []
});

$.$defineNativeClass('WebGLLoseContext', {"": []
});

$.$defineNativeClass('WebGLProgram', {"": []
});

$.$defineNativeClass('WebGLRenderbuffer', {"": []
});

$.$defineNativeClass('WebGLRenderingContext', {"": [],
 clear$1: function(mask) {
  return this.clear(mask);
}
});

$.$defineNativeClass('WebGLShader', {"": []
});

$.$defineNativeClass('WebGLShaderPrecisionFormat', {"": []
});

$.$defineNativeClass('WebGLTexture', {"": []
});

$.$defineNativeClass('WebGLUniformLocation', {"": []
});

$.$defineNativeClass('WebGLVertexArrayObjectOES', {"": []
});

$.$defineNativeClass('WebKitCSSFilterValue', {"": []
});

$.$defineNativeClass('WebKitNamedFlow', {"": ["name>"],
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {"": [],
 get$on: function() {
  return $.WebSocketEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 send$1: function(data) {
  return this.send(data);
}
});

$.$defineNativeClass('WheelEvent', {"": []
});

$.$defineNativeClass('Worker', {"": [],
 get$on: function() {
  return $.WorkerEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 terminate$0: function() {
  return this.terminate();
}
});

$.$defineNativeClass('WorkerContext', {"": ["navigator>"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.WorkerContextEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('WorkerLocation', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WorkerNavigator', {"": ["userAgent>"]
});

$.$defineNativeClass('XMLSerializer', {"": []
});

$.$defineNativeClass('XPathEvaluator', {"": []
});

$.$defineNativeClass('XPathException', {"": ["message>", "name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XPathExpression', {"": []
});

$.$defineNativeClass('XPathNSResolver', {"": []
});

$.$defineNativeClass('XPathResult', {"": []
});

$.$defineNativeClass('XSLTProcessor', {"": [],
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('CSSRuleList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSValueList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; }
});

$.$defineNativeClass('ClientRectList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMStringList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 contains$1: function(string) {
  return this.contains(string);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('FileList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('GamepadList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $._Collections_contains(this, element);
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 map$1: function(f) {
  return $._Collections_map(this, [], f);
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 every$1: function(f) {
  return $._Collections_every(this, f);
},
 some$1: function(f) {
  return $._Collections_some(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return $._Lists_lastIndexOf(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Worker', {"": [],
 get$id: function() {
  return this.id;
},
 set$id: function(i) {
  this.id = i;
},
 set$onmessage: function(f) {
  this.onmessage = f;
},
 postMessage$1: function(msg) {
  return this.postMessage(msg);
}
});

$.$defineNativeClass('DOMWindow', {"": [],
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('SVGAElement', {"": []
});

$.$defineNativeClass('SVGAltGlyphDefElement', {"": []
});

$.$defineNativeClass('SVGAltGlyphElement', {"": []
});

$.$defineNativeClass('SVGAltGlyphItemElement', {"": []
});

$.$defineNativeClass('SVGAngle', {"": ["value="]
});

$.$defineNativeClass('SVGAnimateColorElement', {"": []
});

$.$defineNativeClass('SVGAnimateElement', {"": []
});

$.$defineNativeClass('SVGAnimateMotionElement', {"": []
});

$.$defineNativeClass('SVGAnimateTransformElement', {"": []
});

$.$defineNativeClass('SVGAnimatedAngle', {"": []
});

$.$defineNativeClass('SVGAnimatedBoolean', {"": []
});

$.$defineNativeClass('SVGAnimatedEnumeration', {"": []
});

$.$defineNativeClass('SVGAnimatedInteger', {"": []
});

$.$defineNativeClass('SVGAnimatedLength', {"": []
});

$.$defineNativeClass('SVGAnimatedLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $.contains$2(this.get$_Collections(), this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumber', {"": []
});

$.$defineNativeClass('SVGAnimatedNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $.contains$2(this.get$_Collections(), this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGAnimatedRect', {"": []
});

$.$defineNativeClass('SVGAnimatedString', {"": []
});

$.$defineNativeClass('SVGAnimatedTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $.contains$2(this.get$_Collections(), this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimationElement', {"": []
});

$.$defineNativeClass('SVGCircleElement', {"": ["r>"]
});

$.$defineNativeClass('SVGClipPathElement', {"": []
});

$.$defineNativeClass('SVGColor', {"": []
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', {"": []
});

$.$defineNativeClass('SVGCursorElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGDefsElement', {"": []
});

$.$defineNativeClass('SVGDescElement', {"": []
});

$.$defineNativeClass('SVGDocument', {"": ["rootElement>"]
});

$.$defineNativeClass('SVGElement', {"": [],
 get$elements: function() {
  return $.FilteredElementList$(this);
},
 set$elements: function(value) {
  var elements = this.get$elements();
  $.getInterceptor(elements).clear$0(elements);
  $.getInterceptor(elements).addAll$1(elements, value);
},
 set$innerHTML: function(svg) {
  var container = $.Element_Element$tag('div');
  container.set$innerHTML('<svg version="1.1">' + $.S(svg) + '</svg>');
  this.set$elements($.index(container.get$elements(), 0).get$elements());
},
 get$id: function() {
  return this.id;
},
 set$id: function(value) {
  this.id = value;
}
});

$.$defineNativeClass('SVGElementInstance', {"": [],
 get$on: function() {
  return $.SVGElementInstanceEvents$(this);
}
});

$.$defineNativeClass('SVGEllipseElement', {"": []
});

$.$defineNativeClass('SVGException', {"": ["message>", "name>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGFEBlendElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEColorMatrixElement', {"": ["values>", "height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEComponentTransferElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFECompositeElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEDisplacementMapElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEDistantLightElement', {"": []
});

$.$defineNativeClass('SVGFEDropShadowElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEFloodElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEFuncAElement', {"": []
});

$.$defineNativeClass('SVGFEFuncBElement', {"": []
});

$.$defineNativeClass('SVGFEFuncGElement', {"": []
});

$.$defineNativeClass('SVGFEFuncRElement', {"": []
});

$.$defineNativeClass('SVGFEGaussianBlurElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEImageElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEMergeElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEMergeNodeElement', {"": []
});

$.$defineNativeClass('SVGFEMorphologyElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEOffsetElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEPointLightElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFESpecularLightingElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFESpotLightElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFETileElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFETurbulenceElement', {"": ["height>", "result>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFilterElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFontElement', {"": []
});

$.$defineNativeClass('SVGFontFaceElement', {"": []
});

$.$defineNativeClass('SVGFontFaceFormatElement', {"": []
});

$.$defineNativeClass('SVGFontFaceNameElement', {"": []
});

$.$defineNativeClass('SVGFontFaceSrcElement', {"": []
});

$.$defineNativeClass('SVGFontFaceUriElement', {"": []
});

$.$defineNativeClass('SVGForeignObjectElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGGElement', {"": []
});

$.$defineNativeClass('SVGGlyphElement', {"": []
});

$.$defineNativeClass('SVGGlyphRefElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGGradientElement', {"": []
});

$.$defineNativeClass('SVGHKernElement', {"": []
});

$.$defineNativeClass('SVGImageElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGLength', {"": ["value="]
});

$.$defineNativeClass('SVGLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $.contains$2(this.get$_Collections(), this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGLineElement', {"": []
});

$.$defineNativeClass('SVGLinearGradientElement', {"": []
});

$.$defineNativeClass('SVGMPathElement', {"": []
});

$.$defineNativeClass('SVGMarkerElement', {"": []
});

$.$defineNativeClass('SVGMaskElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGMatrix', {"": ["b>"],
 rotate$1: function(angle) {
  return this.rotate(angle);
},
 translate$2: function(x, y) {
  return this.translate(x,y);
}
});

$.$defineNativeClass('SVGMetadataElement', {"": []
});

$.$defineNativeClass('SVGMissingGlyphElement', {"": []
});

$.$defineNativeClass('SVGNumber', {"": ["value="]
});

$.$defineNativeClass('SVGNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $.contains$2(this.get$_Collections(), this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPaint', {"": []
});

$.$defineNativeClass('SVGPathElement', {"": []
});

$.$defineNativeClass('SVGPathSeg', {"": []
});

$.$defineNativeClass('SVGPathSegArcAbs', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegArcRel', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegClosePath', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegLinetoAbs', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', {"": ["x>"]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', {"": ["x>"]
});

$.$defineNativeClass('SVGPathSegLinetoRel', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', {"": ["y>"]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', {"": ["y>"]
});

$.$defineNativeClass('SVGPathSegList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $.contains$2(this.get$_Collections(), this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPathSegMovetoRel', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPatternElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGPoint', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGPointList', {"": [],
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGPolygonElement', {"": []
});

$.$defineNativeClass('SVGPolylineElement', {"": []
});

$.$defineNativeClass('SVGPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGRadialGradientElement', {"": ["r>"]
});

$.$defineNativeClass('SVGRect', {"": ["height=", "width=", "x>", "y>"]
});

$.$defineNativeClass('SVGRectElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGRenderingIntent', {"": []
});

$.$defineNativeClass('SVGSVGElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGScriptElement', {"": []
});

$.$defineNativeClass('SVGSetElement', {"": []
});

$.$defineNativeClass('SVGStopElement', {"": []
});

$.$defineNativeClass('SVGStringList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $.contains$2(this.get$_Collections(), this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', {"": []
});

$.$defineNativeClass('SVGSwitchElement', {"": []
});

$.$defineNativeClass('SVGSymbolElement', {"": []
});

$.$defineNativeClass('SVGTRefElement', {"": []
});

$.$defineNativeClass('SVGTSpanElement', {"": []
});

$.$defineNativeClass('SVGTextContentElement', {"": []
});

$.$defineNativeClass('SVGTextElement', {"": []
});

$.$defineNativeClass('SVGTextPathElement', {"": []
});

$.$defineNativeClass('SVGTextPositioningElement', {"": ["x>", "y>"],
 rotate$1: function(arg0) { return this.rotate.call$1(arg0); },
 rotate$3: function(arg0, arg1, arg2) { return this.rotate.call$3(arg0, arg1, arg2); }
});

$.$defineNativeClass('SVGTitleElement', {"": []
});

$.$defineNativeClass('SVGTransform', {"": []
});

$.$defineNativeClass('SVGTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $.contains$2(this.get$_Collections(), this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.get$length(), 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGUnitTypes', {"": []
});

$.$defineNativeClass('SVGUseElement', {"": ["height>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGVKernElement', {"": []
});

$.$defineNativeClass('SVGViewElement', {"": []
});

$.$defineNativeClass('SVGViewSpec', {"": []
});

$.$defineNativeClass('SVGZoomEvent', {"": []
});

$.$defineNativeClass('SVGElementInstanceList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 contains$1: function(element) {
  return $.contains$2(this.get$_Collections(), this, element);
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 map$1: function(f) {
  return this.get$_Collections().map$3(this, [], f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 every$1: function(f) {
  return this.get$_Collections().every$2(this, f);
},
 some$1: function(f) {
  return this.get$_Collections().some$2(this, f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 sort$1: function(compare) {
  throw $.$$throw($.UnsupportedError$('Cannot sort immutable List.'));
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 lastIndexOf$2: function(element, start) {
  if (start == null)
    start = $.sub(this.length, 1);
  return this.get$_Lists().lastIndexOf$3(this, element, start);
},
 lastIndexOf$1: function(element) {
  return this.lastIndexOf$2(element,null)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 insertRange$3: function(start, rangeLength, initialValue) {
  throw $.$$throw($.UnsupportedError$('Cannot insertRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$Iterable: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

// 528 dynamic classes.
// 528 classes
// 41 !leaf
(function(){
  var v0/*class(Uint8Array)*/ = 'Uint8Array|Uint8ClampedArray';
  var v1/*class(AudioSourceNode)*/ = 'AudioSourceNode|AudioBufferSourceNode|MediaElementAudioSourceNode|MediaStreamAudioSourceNode|OscillatorNode';
  var v2/*class(_CSSValueList)*/ = 'CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue';
  var v3/*class(SVGColor)*/ = 'SVGColor|SVGPaint';
  var v4/*class(Text)*/ = 'Text|CDATASection';
  var v5/*class(SVGTextPositioningElement)*/ = 'SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement';
  var v6/*class(SVGAnimationElement)*/ = 'SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement';
  var v7/*class(SVGComponentTransferFunctionElement)*/ = 'SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement';
  var v8/*class(SVGGradientElement)*/ = 'SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement';
  var v9/*class(SVGTextContentElement)*/ = [v5/*class(SVGTextPositioningElement)*/,'SVGTextContentElement|SVGTextPathElement'].join('|');
  var v10/*class(MediaElement)*/ = 'HTMLMediaElement|HTMLAudioElement|HTMLVideoElement';
  var v11/*class(SVGElement)*/ = [v6/*class(SVGAnimationElement)*/,v7/*class(SVGComponentTransferFunctionElement)*/,v8/*class(SVGGradientElement)*/,v9/*class(SVGTextContentElement)*/,'SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGCircleElement|SVGClipPathElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement'].join('|');
  var v12/*class(MouseEvent)*/ = 'MouseEvent|WheelEvent';
  var v13/*class(ProgressEvent)*/ = 'ProgressEvent|XMLHttpRequestProgressEvent';
  var v14/*class(UIEvent)*/ = [v12/*class(MouseEvent)*/,'UIEvent|CompositionEvent|KeyboardEvent|TextEvent|TouchEvent|SVGZoomEvent'].join('|');
  var v15/*class(CharacterData)*/ = [v4/*class(Text)*/,'CharacterData|Comment'].join('|');
  var v16/*class(Document)*/ = 'Document|HTMLDocument|SVGDocument';
  var v17/*class(DocumentFragment)*/ = 'DocumentFragment|ShadowRoot';
  var v18/*class(Element)*/ = [v10/*class(MediaElement)*/,v11/*class(SVGElement)*/,'Element|HTMLElement|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement'].join('|');
  var v19/*class(AbstractWorker)*/ = 'AbstractWorker|SharedWorker|Worker';
  var v20/*class(IDBRequest)*/ = 'IDBRequest|IDBOpenDBRequest|IDBVersionChangeRequest';
  var v21/*class(MediaStream)*/ = 'MediaStream|LocalMediaStream';
  var v22/*class(Node)*/ = [v15/*class(CharacterData)*/,v16/*class(Document)*/,v17/*class(DocumentFragment)*/,v18/*class(Element)*/,'Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction'].join('|');
  var v23/*class(WorkerContext)*/ = 'WorkerContext|DedicatedWorkerContext|SharedWorkerContext';
  var table = [
    // [dynamic-dispatch-tag, tags of classes implementing dynamic-dispatch-tag]
    ['AbstractWorker', v19/*class(AbstractWorker)*/],
    ['Uint8Array', v0/*class(Uint8Array)*/],
    ['ArrayBufferView', [v0/*class(Uint8Array)*/,'ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array'].join('|')],
    ['AudioSourceNode', v1/*class(AudioSourceNode)*/],
    ['AudioNode', [v1/*class(AudioSourceNode)*/,'AudioNode|AnalyserNode|AudioDestinationNode|BiquadFilterNode|ChannelMergerNode|ChannelSplitterNode|ConvolverNode|DelayNode|DynamicsCompressorNode|GainNode|PannerNode|ScriptProcessorNode|WaveShaperNode'].join('|')],
    ['AudioParam', 'AudioParam|AudioGain'],
    ['Blob', 'Blob|File'],
    ['CSSRule', 'CSSRule|CSSCharsetRule|CSSFontFaceRule|CSSImportRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule|CSSMediaRule|CSSPageRule|CSSStyleRule|CSSUnknownRule'],
    ['CSSValueList', v2/*class(_CSSValueList)*/],
    ['SVGColor', v3/*class(SVGColor)*/],
    ['CSSValue', [v2/*class(_CSSValueList)*/,v3/*class(SVGColor)*/,'CSSValue|CSSPrimitiveValue'].join('|')],
    ['CanvasRenderingContext', 'CanvasRenderingContext|CanvasRenderingContext2D|WebGLRenderingContext'],
    ['Text', v4/*class(Text)*/],
    ['CharacterData', v15/*class(CharacterData)*/],
    ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList'],
    ['Document', v16/*class(Document)*/],
    ['DocumentFragment', v17/*class(DocumentFragment)*/],
    ['HTMLMediaElement', v10/*class(MediaElement)*/],
    ['SVGAnimationElement', v6/*class(SVGAnimationElement)*/],
    ['SVGComponentTransferFunctionElement', v7/*class(SVGComponentTransferFunctionElement)*/],
    ['SVGGradientElement', v8/*class(SVGGradientElement)*/],
    ['SVGTextPositioningElement', v5/*class(SVGTextPositioningElement)*/],
    ['SVGTextContentElement', v9/*class(SVGTextContentElement)*/],
    ['SVGElement', v11/*class(SVGElement)*/],
    ['Element', v18/*class(Element)*/],
    ['Entry', 'Entry|DirectoryEntry|FileEntry'],
    ['EntrySync', 'EntrySync|DirectoryEntrySync|FileEntrySync'],
    ['ProgressEvent', v13/*class(ProgressEvent)*/],
    ['MouseEvent', v12/*class(MouseEvent)*/],
    ['UIEvent', v14/*class(UIEvent)*/],
    ['Event', [v13/*class(ProgressEvent)*/,v14/*class(UIEvent)*/,'Event|WebKitAnimationEvent|AudioProcessingEvent|BeforeLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|WebKitTransitionEvent|WebGLContextEvent'].join('|')],
    ['IDBRequest', v20/*class(IDBRequest)*/],
    ['MediaStream', v21/*class(MediaStream)*/],
    ['Node', v22/*class(Node)*/],
    ['WorkerContext', v23/*class(WorkerContext)*/],
    ['EventTarget', [v19/*class(AbstractWorker)*/,v20/*class(IDBRequest)*/,v21/*class(MediaStream)*/,v22/*class(Node)*/,v23/*class(WorkerContext)*/,'EventTarget|AudioContext|BatteryManager|DOMApplicationCache|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|IDBDatabase|IDBTransaction|DOMWindow|MediaController|MediaSource|MediaStreamTrack|MediaStreamTrackList|MessagePort|Notification|PeerConnection00|Performance|RTCDataChannel|RTCPeerConnection|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|SVGElementInstance'].join('|')],
    ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection'],
    ['IDBCursor', 'IDBCursor|IDBCursorWithValue'],
    ['NodeList', 'NodeList|RadioNodeList'],
    ['StyleSheet', 'StyleSheet|CSSStyleSheet'],
    ['SVGPathSeg', 'SVGPathSeg|SVGPathSegArcAbs|SVGPathSegArcRel|SVGPathSegClosePath|SVGPathSegCurvetoCubicAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegLinetoAbs|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoVerticalRel|SVGPathSegMovetoAbs|SVGPathSegMovetoRel']];
$.dynamicSetMetadata(table);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastCharCode = field.charCodeAt(len - 1);
    var needsAccessor = (lastCharCode & 63) >= 60;
    if (needsAccessor) {
      var needsGetter = (lastCharCode & 3) > 0;
      var needsSetter = (lastCharCode & 2) == 0;
      var renaming = (lastCharCode & 64) != 0;
      var accessorName = field = field.substring(0, len - 1);
      if (renaming) {
        var divider = field.indexOf(":");
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (needsGetter) {
        var getterString = "return this." + field + ";";
        prototype["get$" + accessorName] = new Function(getterString);
      }
      if (needsSetter) {
        var setterString = "this." + field + " = v;";
        prototype["set$" + accessorName] = new Function("v", setterString);
      }
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  var getter = new Function("{ return $." + fieldName + ";}");
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=harness_browser.dart.js.map