// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.main_anon1 = {"": "Closure;",
  call$0: function() {
    $.TestTuple_run();
    $.TestEnumerable_run();
    $.TestSequence_run();
    $.TestNumberEnumerable_run();
    $.TestCollectionUtil_run();
    $.TestArray2d_run();
    $.TestCoordinate_run();
    $.TestBox_run();
    $.TestVector_run();
    $.TestAffineTransform_run();
    $.TestUtil_run();
    $.TestCloneable_run();
    $.TestEvents_run();
    $.TestTarjanCycleDetect_run();
    $.TestRgbColor_run();
    $.TestHslColor_run();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("StringReader"), $._testStringReader));
    $.group("attached", new $.main__anon());
  },
  $isFunction: true
};

$$.main__anon = {"": "Closure;",
  call$0: function() {
    $.TestAttachedEvents_run();
    $.TestProperties_run();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("PropertyObject, EventHandle"), $.TestPropertyEventIntegration_doTest));
  },
  $isFunction: true
};

$$.TestAttachedEvents = {"": "AttachableObject;_propertyValues,_eventHandlers,_disposed"};

$$.TestAttachedEvents_run_anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("whole deal"), $.TestAttachedEvents__testWholeDeal));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("removeHandler"), $.TestAttachedEvents__testRemove));
  },
  $isFunction: true
};

$$.TestProperties = {"": "AttachableObject;_propertyValues,_eventHandlers,_disposed"};

$$.TestProperties_run_anon = {"": "Closure;",
  call$0: function() {
    var t1 = new $.TestProperties_run__anon();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("without default"), t1));
    t1 = new $.TestProperties_run__anon0();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("with factories"), t1));
    t1 = new $.TestProperties_run__anon1();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("with listeners"), t1));
    t1 = new $.TestProperties_run__anon2();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("with default"), t1));
  },
  $isFunction: true
};

$$.TestProperties_run__anon = {"": "Closure;",
  call$0: function() {
    var testProperty, object;
    testProperty = $.Property$("Test Property", null, null);
    object = $.TestProperties$();
    $.expect(testProperty.get$1(object), $.C__IsNull, null, null, false);
    $.expect(testProperty.getCore$1(object), $._DeepMatcher$($.C__UndefinedValue, 100), null, null, false);
    $.expect(testProperty.isSet$1(object), $.C__IsFalse, null, null, false);
    testProperty.set$2(object, "the foo!");
    $.expect(testProperty.get$1(object), $._DeepMatcher$("the foo!", 100), null, null, false);
    $.expect(testProperty.isSet$1(object), $.C__IsTrue, null, null, false);
    testProperty.clear$1(testProperty, object);
    $.expect(testProperty.get$1(object), $.C__IsNull, null, null, false);
    $.expect(testProperty.getCore$1(object), $._DeepMatcher$($.C__UndefinedValue, 100), null, null, false);
    $.expect(testProperty.isSet$1(object), $.C__IsFalse, null, null, false);
  },
  $isFunction: true
};

$$.TestProperties_run__anon0 = {"": "Closure;",
  call$0: function() {
    var prop = $.Property$("withoutDefault", null, $.$int);
    $.TestProperties_testFactories(prop, 43, 18);
    $.TestProperties_testFactories(prop, 43, null);
    $.TestProperties_testFactories(prop, null, 18);
    $.TestProperties_testFactories(prop, null, null);
    prop = $.Property$("withDefault", 24, $.$int);
    $.TestProperties_testFactories(prop, 43, 18);
    $.TestProperties_testFactories(prop, 43, 24);
    $.TestProperties_testFactories(prop, 43, null);
    $.TestProperties_testFactories(prop, null, 18);
    $.TestProperties_testFactories(prop, null, 24);
    $.TestProperties_testFactories(prop, null, null);
    $.TestProperties_testFactories(prop, 24, 18);
    $.TestProperties_testFactories(prop, 24, 24);
    $.TestProperties_testFactories(prop, 24, null);
  },
  $isFunction: true
};

$$.TestProperties_run__anon1 = {"": "Closure;",
  call$0: function() {
    var testProperty, object, h1, g1, h2, g2;
    testProperty = $.Property$("Test Property", null, $.String);
    object = $.TestProperties$();
    $.expect(testProperty.get$1(object), $.C__IsNull, null, null, false);
    $.expect(testProperty.getCore$1(object), $._DeepMatcher$($.C__UndefinedValue, 100), null, null, false);
    $.expect(testProperty.isSet$1(object), $.C__IsFalse, null, null, false);
    h1 = $.EventWatcher$($.PropertyChangedEventArgs);
    g1 = testProperty.getStream$1(object).listen$1(h1.get$handler());
    $.expect(h1.get$eventCount(), $._DeepMatcher$(0, 100), null, null, false);
    testProperty.set$2(object, "the foo!");
    $.expect(h1.get$eventCount(), $._DeepMatcher$(1, 100), null, null, false);
    testProperty.clear$1(testProperty, object);
    $.expect(h1.get$eventCount(), $._DeepMatcher$(2, 100), null, null, false);
    h2 = $.EventWatcher$($.PropertyChangedEventArgs);
    g2 = testProperty.getStream$1(object).listen$1(h2.get$handler());
    $.expect(h2.get$eventCount(), $._DeepMatcher$(0, 100), null, null, false);
    testProperty.set$2(object, "the foo!");
    $.expect(h1.get$eventCount(), $._DeepMatcher$(3, 100), null, null, false);
    $.expect(h2.get$eventCount(), $._DeepMatcher$(1, 100), null, null, false);
    g1.cancel$0();
    testProperty.clear$1(testProperty, object);
    $.expect(h1.get$eventCount(), $._DeepMatcher$(3, 100), null, null, false);
    $.expect(h2.get$eventCount(), $._DeepMatcher$(2, 100), null, null, false);
    g2.cancel$0();
    testProperty.set$2(object, "the bar!");
    $.expect(h1.get$eventCount(), $._DeepMatcher$(3, 100), null, null, false);
    $.expect(h2.get$eventCount(), $._DeepMatcher$(2, 100), null, null, false);
  },
  $isFunction: true
};

$$.TestProperties_run__anon2 = {"": "Closure;",
  call$0: function() {
    var testProperty, object;
    testProperty = $.Property$("Test Property", 42, $.$int);
    object = $.TestProperties$();
    $.expect(testProperty.get$1(object), $._DeepMatcher$(42, 100), null, null, false);
    $.expect(testProperty.getCore$1(object), $._DeepMatcher$($.C__UndefinedValue, 100), null, null, false);
    $.expect(testProperty.isSet$1(object), $.C__IsFalse, null, null, false);
    testProperty.set$2(object, 57);
    $.expect(testProperty.get$1(object), $._DeepMatcher$(57, 100), null, null, false);
    $.expect(testProperty.getCore$1(object), $._DeepMatcher$(57, 100), null, null, false);
    $.expect(testProperty.isSet$1(object), $.C__IsTrue, null, null, false);
    testProperty.clear$1(testProperty, object);
    $.expect(testProperty.get$1(object), $._DeepMatcher$(42, 100), null, null, false);
    $.expect(testProperty.getCore$1(object), $._DeepMatcher$($.C__UndefinedValue, 100), null, null, false);
    $.expect(testProperty.isSet$1(object), $.C__IsFalse, null, null, false);
  },
  $isFunction: true
};

$$.TestProperties_testFactories_anon = {"": "Closure;propFactoryValue_0",
  call$1: function(obj) {
    return this.propFactoryValue_0;
  },
  $isFunction: true
};

$$.TestPropertyEventIntegration = {"": "AttachableObject;_nameChangedEventHandle<,_ageChangedEventHandle<,_propertyValues,_eventHandlers,_disposed",
  get$name: function(_) {
    return $.get$TestPropertyEventIntegration__nameProperty().get$1(this);
  },
  set$name: function(_, value) {
    $.get$TestPropertyEventIntegration__nameProperty().set$2(this, value);
  },
  get$nameChanged: function() {
    return this._nameChangedEventHandle.stream;
  },
  get$age: function() {
    return $.get$TestPropertyEventIntegration__ageProperty().get$1(this);
  },
  set$age: function(value) {
    $.get$TestPropertyEventIntegration__ageProperty().set$2(this, value);
  },
  get$ageChanged: function() {
    return this._ageChangedEventHandle.stream;
  },
  reset$0: function(_) {
    $.clear$1$ax($.get$TestPropertyEventIntegration__nameProperty(), this);
    $.clear$1$ax($.get$TestPropertyEventIntegration__ageProperty(), this);
  },
  TestPropertyEventIntegration$0: function() {
    $.get$TestPropertyEventIntegration__nameProperty().getStream$1(this).listen$1(new $.anon4(this));
    $.get$TestPropertyEventIntegration__ageProperty().getStream$1(this).listen$1(new $.anon5(this));
  }
};

$$.anon4 = {"": "Closure;this_0",
  call$1: function(args) {
    var t1 = this.this_0.get$_nameChangedEventHandle();
    t1.add$1(t1, $.C_EventArgs);
  },
  $isFunction: true
};

$$.anon5 = {"": "Closure;this_1",
  call$1: function(args) {
    var t1 = this.this_1.get$_ageChangedEventHandle();
    t1.add$1(t1, $.C_EventArgs);
  },
  $isFunction: true
};

$$.TestArray2d_run_anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("test collection"), $.TestArray2d__testCollectionEquals));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("readonlyFrom ctor params"), $.TestArray2d__testReadonlyFromCtorParams));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("set/get"), $.TestArray2d__testSetGet));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("getAdjacent"), $.TestArray2d__testGetAdjacent));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("default ctor"), $.TestArray2d__testDefaultCtor));
  },
  $isFunction: true
};

$$.TestArray2d__testReadonlyFromCtorParams_anon = {"": "Closure;",
  call$0: function() {
    return $.Array2d_Array2d$readonlyFrom(null, [0, 1, 2, 3], $.$int);
  },
  $isFunction: true
};

$$.TestArray2d__testReadonlyFromCtorParams_anon0 = {"": "Closure;",
  call$0: function() {
    return $.Array2d_Array2d$readonlyFrom(2, null, $.$int);
  },
  $isFunction: true
};

$$.TestArray2d__testReadonlyFromCtorParams_anon1 = {"": "Closure;",
  call$0: function() {
    return $.Array2d_Array2d$readonlyFrom(0, [0, 1, 2, 3], $.$int);
  },
  $isFunction: true
};

$$.TestArray2d__testReadonlyFromCtorParams_anon2 = {"": "Closure;",
  call$0: function() {
    return $.Array2d_Array2d$readonlyFrom(3, [0, 1, 2, 3], $.$int);
  },
  $isFunction: true
};

$$.TestCollectionUtil_run_anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("allUnique"), $.TestCollectionUtil__testAllUnique));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("listish"), $.TestCollectionUtil__testListish));
  },
  $isFunction: true
};

$$.TestEnumerable_run_anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("count"), $.TestEnumerable__testCount));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("distinct"), $.TestEnumerable__testDistinct));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("exclude"), $.TestEnumerable__testExclude));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("forEachWithIndex"), $.TestEnumerable__testForEachWithIndex));
    $.group("group", new $.TestEnumerable_run__anon());
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("selectNumbers"), $.TestEnumerable__testSelectNumbers));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("toMap"), $.TestEnumerable__testToMap));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("concat"), $.TestEnumerable__testConcat));
  },
  $isFunction: true
};

$$.TestEnumerable_run__anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("simple"), $.TestEnumerable__testSimpleGrouping));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("complex"), $.TestEnumerable__testComplexGrouping));
  },
  $isFunction: true
};

$$.TestEnumerable__testDistinct_anon = {"": "Closure;",
  call$2: function(a, b) {
    return $.$mod$n(a, 2) === $.$mod$n(b, 2);
  },
  $isFunction: true
};

$$.TestEnumerable__testForEachWithIndex_anon = {"": "Closure;",
  call$2: function(e, i) {
    $.expect(i, $._DeepMatcher$(e, 100), null, null, false);
  },
  $isFunction: true
};

$$.TestEnumerable__testToMap_anon = {"": "Closure;",
  call$1: function(s) {
    return $.get$length$asx(s);
  },
  $isFunction: true
};

$$.TestEnumerable__testToMap_anon0 = {"": "Closure;",
  call$2: function(k, v) {
    $.expect($.get$length$asx(k), $._DeepMatcher$(v, 100), null, null, false);
  },
  $isFunction: true
};

$$.TestEnumerable__testToMap_anon1 = {"": "Closure;",
  call$1: function(s) {
    return s;
  },
  $isFunction: true
};

$$.TestEnumerable__testToMap_anon2 = {"": "Closure;",
  call$1: function(s) {
    return $.$index$asx(s, 0);
  },
  $isFunction: true
};

$$.TestEnumerable__testToMap_anon3 = {"": "Closure;",
  call$2: function(k, v) {
    $.expect(k, $._DeepMatcher$($.$index$asx(v, 0), 100), null, null, false);
  },
  $isFunction: true
};

$$.TestEnumerable__testToMap_anon4 = {"": "Closure;noDupes_0",
  call$0: function() {
    return this.noDupes_0.toMap$2(new $.TestEnumerable__testToMap__anon0(), new $.TestEnumerable__testToMap__anon1());
  },
  $isFunction: true
};

$$.TestEnumerable__testToMap__anon0 = {"": "Closure;",
  call$1: function(s) {
    return s;
  },
  $isFunction: true
};

$$.TestEnumerable__testToMap__anon1 = {"": "Closure;",
  call$1: function(s) {
    return $.get$length$asx(s);
  },
  $isFunction: true
};

$$.TestEnumerable__testToMap_anon5 = {"": "Closure;withDupes_1",
  call$0: function() {
    return this.withDupes_1.toMap$1(new $.TestEnumerable__testToMap__anon());
  },
  $isFunction: true
};

$$.TestEnumerable__testToMap__anon = {"": "Closure;",
  call$1: function(s) {
    return $.get$length$asx(s);
  },
  $isFunction: true
};

$$.TestEnumerable__testCount_anon = {"": "Closure;",
  call$1: function(x) {
    return $.$mod$n(x, 2) === 0;
  },
  $isFunction: true
};

$$.TestEnumerable__testSelectNumbers_anon = {"": "Closure;",
  call$1: function(x) {
    return $.get$length$asx(x);
  },
  $isFunction: true
};

$$.TestEnumerable__testComplexGrouping_anon = {"": "Closure;",
  call$1: function(str) {
    return $.get$length$asx(str);
  },
  $isFunction: true
};

$$.TestNumberEnumerable_run_anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("sum"), $.TestNumberEnumerable__testSum));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("min"), $.TestNumberEnumerable__testMin));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("max"), $.TestNumberEnumerable__testMax));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("average"), $.TestNumberEnumerable__testAverage));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("range"), $.TestNumberEnumerable__testRange));
  },
  $isFunction: true
};

$$.TestNumberEnumerable__testSum_anon = {"": "Closure;",
  call$0: function() {
    var t1 = [1, 2, 3, null];
    $.requireArgumentNotNull(t1, "source");
    return $._SimpleNumEnumerable$(t1, null).sum$0();
  },
  $isFunction: true
};

$$.TestNumberEnumerable__testMin_anon = {"": "Closure;",
  call$0: function() {
    var t1 = [1, 2, 3, null];
    $.requireArgumentNotNull(t1, "source");
    t1 = $._SimpleNumEnumerable$(t1, null);
    return t1.min$0(t1);
  },
  $isFunction: true
};

$$.TestNumberEnumerable__testMax_anon = {"": "Closure;",
  call$0: function() {
    var t1 = [1, 2, 3, null];
    $.requireArgumentNotNull(t1, "source");
    t1 = $._SimpleNumEnumerable$(t1, null);
    return t1.max$0(t1);
  },
  $isFunction: true
};

$$.TestNumberEnumerable__testAverage_anon = {"": "Closure;",
  call$0: function() {
    var t1 = [1, 2, 3, null];
    $.requireArgumentNotNull(t1, "source");
    return $._SimpleNumEnumerable$(t1, null).average$0();
  },
  $isFunction: true
};

$$.TestSequence = {"": "Sequence;flip",
  get$length: function(_) {
    return this.flip ? 10 : 5;
  },
  $index: function(_, index) {
    if (typeof index !== "number")
      return this.$$index$bailout1(1, index);
    if (index < 5)
      return 5 - index;
    return index - 5 + 1;
  },
  $$index$bailout1: function(state0, index) {
    var t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 5) === true) {
      if (typeof index !== "number")
        throw $.iae(index);
      return 5 - index;
    }
    return $.$add$ns(t1.$sub(index, 5), 1);
  },
  $asSequence: function () { return [$.$int]; },
  $asEnumerable: function () { return [$.$int]; },
  $asIterable: function() {
    return function () { return [$.$int]; };
  }
};

$$.TestSequence_run_anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("indexOf"), $.TestSequence__testIndexOf));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("simple"), $.TestSequence__testSimple));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("last"), $.TestSequence__testLast));
  },
  $isFunction: true
};

$$.TestHslColor_run_anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("Equals"), $.TestHslColor__testEquals));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("Invalid"), $.TestHslColor__testInvalid));
    var t1 = new $.TestHslColor_run__anon();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("hue normaliazing"), t1));
  },
  $isFunction: true
};

$$.TestHslColor_run__anon = {"": "Closure;",
  call$0: function() {
    var i, t1, t2;
    for (i = 0; i < 10; i += 2) {
      t1 = $.HslColor_HslColor($.List_yyN[i], 0, 0).get$h();
      t2 = i + 1;
      if (t2 >= 10)
        throw $.ioore(t2);
      $.expect(t1, $.List_yyN[t2], null, null, false);
    }
  },
  $isFunction: true
};

$$.TestHslColor__testInvalid_anon = {"": "Closure;",
  call$0: function() {
    return $.HslColor_HslColor(0, 0, 0);
  },
  $isFunction: true
};

$$.TestHslColor__testInvalid_anon0 = {"": "Closure;invalidNumber_0",
  call$0: function() {
    return $.HslColor_HslColor(this.invalidNumber_0, 0, 0);
  },
  $isFunction: true
};

$$.TestHslColor__testInvalid_anon1 = {"": "Closure;invalidNumber_1",
  call$0: function() {
    return $.HslColor_HslColor(0, this.invalidNumber_1, 0);
  },
  $isFunction: true
};

$$.TestHslColor__testInvalid_anon2 = {"": "Closure;invalidNumber_2",
  call$0: function() {
    return $.HslColor_HslColor(0, 0, this.invalidNumber_2);
  },
  $isFunction: true
};

$$.TestHslColor__testInvalid_anon3 = {"": "Closure;invalidNumber_3",
  call$0: function() {
    var t1 = this.invalidNumber_3;
    return $.HslColor_HslColor(t1, t1, t1);
  },
  $isFunction: true
};

$$.TestHslColor__testInvalid_anon4 = {"": "Closure;",
  call$0: function() {
    return $.HslColor_HslColor(0, -1, 0);
  },
  $isFunction: true
};

$$.TestHslColor__testInvalid_anon5 = {"": "Closure;",
  call$0: function() {
    return $.HslColor_HslColor(0, 0, 256);
  },
  $isFunction: true
};

$$.TestRgbColor_run_anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("Equals"), $.TestRgbColor__testEquals));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("Invalid"), $.TestRgbColor__testInvalid));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("HslColor round-trip"), $.TestRgbColor__testHslRoundTrip));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("Hex round-trip"), $.TestRgbColor__testHexRoundTrip));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("fromHex"), $.TestRgbColor__testFromHex));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("invalid hex"), $.TestRgbColor__testInvalidHex));
  },
  $isFunction: true
};

$$.TestRgbColor__testInvalid_anon = {"": "Closure;",
  call$0: function() {
    $.requireArgument(false, "r", null);
    $.requireArgument($.JSNull_methods.$ge(null, 0) && $.JSNull_methods.$le(null, 255), "r", null);
    $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "g", null);
    $.requireArgument(true, "g", null);
    $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "b", null);
    $.requireArgument(true, "b", null);
    return $.RgbColor$_internal(null, 0, 0);
  },
  $isFunction: true
};

$$.TestRgbColor__testInvalid_anon0 = {"": "Closure;",
  call$0: function() {
    $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "r", null);
    $.requireArgument(true, "r", null);
    $.requireArgument(!$.JSInt_methods.get$isInfinite(-1) && !$.JSInt_methods.get$isNaN(-1), "g", null);
    $.requireArgument(false, "g", null);
    $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "b", null);
    $.requireArgument(true, "b", null);
    return $.RgbColor$_internal(0, -1, 0);
  },
  $isFunction: true
};

$$.TestRgbColor__testInvalid_anon1 = {"": "Closure;",
  call$0: function() {
    $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "r", null);
    $.requireArgument(true, "r", null);
    $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "g", null);
    $.requireArgument(true, "g", null);
    $.requireArgument(!$.JSInt_methods.get$isInfinite(256) && !$.JSInt_methods.get$isNaN(256), "b", null);
    $.requireArgument(false, "b", null);
    return $.RgbColor$_internal(0, 0, 256);
  },
  $isFunction: true
};

$$.TestRgbColor__testFromHex_anon = {"": "Closure;",
  call$2: function(hex, rgb) {
    $.expect($.RgbColor_RgbColor$fromHex(hex), $._DeepMatcher$(rgb, 100), null, null, false);
    $.expect($.toLowerCase$0$s(hex), $._DeepMatcher$(rgb.toHex$0(), 100), null, null, false);
  },
  $isFunction: true
};

$$.TestRgbColor__testInvalidHex_anon = {"": "Closure;",
  call$1: function(hex) {
    $.expect(new $.TestRgbColor__testInvalidHex__anon(hex), $.Throws__ArgumentError_ArgumentError, null, null, false);
  },
  $isFunction: true
};

$$.TestRgbColor__testInvalidHex__anon = {"": "Closure;hex_0",
  call$0: function() {
    return $.RgbColor_RgbColor$fromHex(this.hex_0);
  },
  $isFunction: true
};

$$.TestEvents = {"": "Object;_testEventHandle",
  get$testEvent: function() {
    return this._testEventHandle.stream;
  },
  fireTestEvent$1: function(value) {
    var t1 = this._testEventHandle;
    t1.add$1(t1, value);
  }
};

$$.TestEvents_run_anon = {"": "Closure;",
  call$0: function() {
    var target, watcher, eventId, t1;
    target = $.TestEvents$();
    watcher = $.EventWatcher$($.String);
    $.expect(watcher.get$lastArgs(), $.C__IsNull, null, null, false);
    target.fireTestEvent$1("bar");
    $.expect(watcher.get$lastArgs(), $.C__IsNull, null, null, false);
    eventId = target.get$testEvent().listen$1(watcher.get$handler());
    target.fireTestEvent$1("bar");
    $.expect(watcher.get$lastArgs(), $._DeepMatcher$("bar", 100), null, null, false);
    target.fireTestEvent$1("foo");
    $.expect(watcher.get$lastArgs(), $._DeepMatcher$("foo", 100), null, null, false);
    t1 = target._testEventHandle;
    $.expect(t1.get$hasSubscribers(), $.C__IsTrue, null, null, false);
    eventId.cancel$0();
    $.expect(t1.get$hasSubscribers(), $.C__IsFalse, null, null, false);
    target.fireTestEvent$1("bar");
    $.expect(watcher.get$lastArgs(), $._DeepMatcher$("foo", 100), null, null, false);
  },
  $isFunction: true
};

$$.TestTarjanCycleDetect_run_anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("single item"), $.TestTarjanCycleDetect__testSingle));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("5 isolated items"), $.TestTarjanCycleDetect__test5Isolated));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("5 in a line"), $.TestTarjanCycleDetect__test5Line));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("5 in a loop"), $.TestTarjanCycleDetect__test5Loop));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("5 random"), $.TestTarjanCycleDetect__test5Random));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("implied key"), $.TestTarjanCycleDetect__testImpliedKey));
  },
  $isFunction: true
};

$$.TestAffineTransform_run_anon = {"": "Closure;",
  call$0: function() {
    var t1 = new $.TestAffineTransform_run__anon();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("constructors"), t1));
    t1 = new $.TestAffineTransform_run__anon0();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("set from transform"), t1));
    t1 = new $.TestAffineTransform_run__anon1();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("identity"), t1));
    t1 = new $.TestAffineTransform_run__anon2();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("concatenate"), t1));
    t1 = new $.TestAffineTransform_run__anon3();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("rotate"), t1));
    t1 = new $.TestAffineTransform_run__anon4();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("translate"), t1));
    t1 = new $.TestAffineTransform_run__anon5();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("createInverse"), t1));
    t1 = new $.TestAffineTransform_run__anon6();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("equals and clone"), t1));
  },
  $isFunction: true
};

$$.TestAffineTransform_run__anon = {"": "Closure;",
  call$0: function() {
    $.expect($.AffineTransform$(1, 0, 0, 2, 0, 0), $.AffineTransform$(1, 0, 0, 2, 0, 0), null, null, false);
    $.expect($.AffineTransform$(1, 0, 0, 1, 1, 2), $.AffineTransform$(1, 0, 0, 1, 1, 2), null, null, false);
    var rotateTx = $.AffineTransform$(1, 0, 0, 1, 0, 0).setToRotation$3(1, 2, 3);
    $.expect(rotateTx.get$scaleX(), $._IsCloseTo$(0.540302, 0.001), null, null, false);
    $.expect(rotateTx.get$shearY(), $._IsCloseTo$(0.84147, 0.001), null, null, false);
    $.expect(rotateTx.get$shearX(), $._IsCloseTo$(-0.84147, 0.001), null, null, false);
    $.expect(rotateTx.get$scaleY(), $._IsCloseTo$(0.540302, 0.001), null, null, false);
    $.expect(rotateTx.get$translateX(), $._IsCloseTo$(3.443808, 0.001), null, null, false);
    $.expect(rotateTx.get$translateY(), $._IsCloseTo$(-0.303848, 0.001), null, null, false);
  },
  $isFunction: true
};

$$.TestAffineTransform_run__anon0 = {"": "Closure;",
  call$0: function() {
    var tx1, tx2;
    tx1 = $.AffineTransform$(1, 2, 3, 4, 5, 6);
    tx2 = $.AffineTransform$(6, 5, 4, 3, 2, 1);
    $.expect(tx1, $._IsNot$($.wrapMatcher(tx2)), null, null, false);
    tx1.setFromTransfrom$1(tx2);
    $.expect(tx1, tx2, null, null, false);
  },
  $isFunction: true
};

$$.TestAffineTransform_run__anon1 = {"": "Closure;",
  call$0: function() {
    var tx = $.AffineTransform$(1, 2, 3, 4, 5, 6);
    $.expect(tx.get$isIdentity(), $.C__IsFalse, null, null, false);
    tx.setTransform$6(1, 0, 0, 1, 0, 0);
    $.expect(tx.get$isIdentity(), $.C__IsTrue, null, null, false);
    $.expect($.AffineTransform$(1, 0, 0, 1, 0, 0).get$isIdentity(), $.C__IsTrue, null, null, false);
  },
  $isFunction: true
};

$$.TestAffineTransform_run__anon2 = {"": "Closure;",
  call$0: function() {
    var tx = $.AffineTransform$(1, 2, 3, 4, 5, 6);
    tx.concatenate$1($.AffineTransform$(2, 1, 6, 5, 4, 3));
    $.expect(tx.get$scaleX(), $._DeepMatcher$(5, 100), null, null, false);
    $.expect(tx.get$shearY(), $._DeepMatcher$(8, 100), null, null, false);
    $.expect(tx.get$shearX(), $._DeepMatcher$(21, 100), null, null, false);
    $.expect(tx.get$scaleY(), $._DeepMatcher$(32, 100), null, null, false);
    $.expect(tx.get$translateX(), $._DeepMatcher$(18, 100), null, null, false);
    $.expect(tx.get$translateY(), $._DeepMatcher$(26, 100), null, null, false);
  },
  $isFunction: true
};

$$.TestAffineTransform_run__anon3 = {"": "Closure;",
  call$0: function() {
    var tx = $.AffineTransform$(1, 2, 3, 4, 5, 6);
    tx.rotate$3(tx, 1.5707963267948966, 1, 1);
    $.expect(tx.get$scaleX(), $._IsCloseTo$(3, 0.001), null, null, false);
    $.expect(tx.get$shearY(), $._IsCloseTo$(4, 0.001), null, null, false);
    $.expect(tx.get$shearX(), $._IsCloseTo$(-1, 0.001), null, null, false);
    $.expect(tx.get$scaleY(), $._IsCloseTo$(-2, 0.001), null, null, false);
    $.expect(tx.get$translateX(), $._IsCloseTo$(7, 0.001), null, null, false);
    $.expect(tx.get$translateY(), $._IsCloseTo$(10, 0.001), null, null, false);
  },
  $isFunction: true
};

$$.TestAffineTransform_run__anon4 = {"": "Closure;",
  call$0: function() {
    var tx = $.AffineTransform$(1, 2, 3, 4, 5, 6);
    tx.translate$2(tx, 2, 3);
    $.expect(tx.get$scaleX(), $._DeepMatcher$(1, 100), null, null, false);
    $.expect(tx.get$shearY(), $._DeepMatcher$(2, 100), null, null, false);
    $.expect(tx.get$shearX(), $._DeepMatcher$(3, 100), null, null, false);
    $.expect(tx.get$scaleY(), $._DeepMatcher$(4, 100), null, null, false);
    $.expect(tx.get$translateX(), $._DeepMatcher$(16, 100), null, null, false);
    $.expect(tx.get$translateY(), $._DeepMatcher$(22, 100), null, null, false);
  },
  $isFunction: true
};

$$.TestAffineTransform_run__anon5 = {"": "Closure;",
  call$0: function() {
    var tx, inverse;
    tx = $.AffineTransform$(2, 0, 0, 3, 0, 0);
    tx.translate$2(tx, 5, 10);
    tx.rotate$3(tx, 0.7853981633974483, 5, 10);
    inverse = tx.createInverse$0();
    $.expect(inverse.get$scaleX(), $._IsCloseTo$(0.353553, 0.001), null, null, false);
    $.expect(inverse.get$shearY(), $._IsCloseTo$(-0.353553, 0.001), null, null, false);
    $.expect(inverse.get$shearX(), $._IsCloseTo$(0.235702, 0.001), null, null, false);
    $.expect(inverse.get$scaleY(), $._IsCloseTo$(0.235702, 0.001), null, null, false);
    $.expect(inverse.get$translateX(), $._IsCloseTo$(-16.213203, 0.001), null, null, false);
    $.expect(inverse.get$translateY(), $._IsCloseTo$(2.928932, 0.001), null, null, false);
  },
  $isFunction: true
};

$$.TestAffineTransform_run__anon6 = {"": "Closure;",
  call$0: function() {
    var val, val2, val3, clone;
    val = $.AffineTransform$(1, 2, 3, 4, 5, 6);
    $.expect(val, $._DeepMatcher$(val, 100), null, null, false);
    $.expect(val, $._IsSameAs$(val), null, null, false);
    val2 = $.AffineTransform$(7, 8, 9, 10, 11, 12);
    $.expect(val2, $._IsNot$($.wrapMatcher($._DeepMatcher$(val, 100))), null, null, false);
    $.expect(val2, $._IsNot$($.wrapMatcher($._IsSameAs$(val))), null, null, false);
    val3 = $.AffineTransform$(1, 2, 3, 4, 5, 6);
    $.expect(val3, $._DeepMatcher$(val, 100), null, null, false);
    $.expect(val3, $._IsNot$($.wrapMatcher($._IsSameAs$(val))), null, null, false);
    clone = val.clone$0(val);
    $.expect(clone, $._DeepMatcher$(val, 100), null, null, false);
    $.expect(val, $._IsNot$($.wrapMatcher($._IsSameAs$(clone))), null, null, false);
    $.expect(val3, $._DeepMatcher$(clone, 100), null, null, false);
    $.expect(clone, $._IsNot$($.wrapMatcher($._IsSameAs$(val3))), null, null, false);
  },
  $isFunction: true
};

$$.TestCoordinate_run_anon = {"": "Closure;",
  call$0: function() {
    var t1 = new $.TestCoordinate_run__anon();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("should be subtract by other Coordinate"), t1));
    t1 = new $.TestCoordinate_run__anon0();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("should be compared by other Coordinate"), t1));
    t1 = new $.TestCoordinate_run__anon1();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("should obey const equality"), t1));
    t1 = new $.TestCoordinate_run__anon2();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("should get the distance to another point"), t1));
  },
  $isFunction: true
};

$$.TestCoordinate_run__anon = {"": "Closure;",
  call$0: function() {
    var t1, coor;
    t1 = $.Coordinate$(5, 3);
    coor = t1.$sub(t1, $.Coordinate$(2, 1));
    $.expect(3, coor.x, null, null, false);
    $.expect(2, coor.y, null, null, false);
  },
  $isFunction: true
};

$$.TestCoordinate_run__anon0 = {"": "Closure;",
  call$0: function() {
    $.expect($.Coordinate$(2, 2), $._DeepMatcher$($.Coordinate$(2, 2), 100), null, null, false);
    $.expect($.Coordinate$(2, 1), $._IsNot$($.wrapMatcher($._DeepMatcher$($.Coordinate$(2, 2), 100))), null, null, false);
  },
  $isFunction: true
};

$$.TestCoordinate_run__anon1 = {"": "Closure;",
  call$0: function() {
    $.expect($.Coordinate$(2, 2), $._IsNot$($.wrapMatcher($._IsSameAs$($.Coordinate$(2, 2)))), null, null, false);
    $.expect($.Coordinate_2_2, $._IsSameAs$($.Coordinate_2_2), null, null, false);
  },
  $isFunction: true
};

$$.TestCoordinate_run__anon2 = {"": "Closure;",
  call$0: function() {
    $.expect(5, $.Coordinate$(0, 0).getDistance$1($.Coordinate$(3, 4)), null, null, false);
  },
  $isFunction: true
};

$$.TestBox_run_anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("equals"), $.TestBox__testEquals));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("size and location"), $.TestBox__testSizeLocation));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("isValid"), $.TestBox__testValid));
  },
  $isFunction: true
};

$$.TestVector_run_anon = {"": "Closure;",
  call$0: function() {
    var t1 = new $.TestVector_run__anon();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("should be sum with other Vector"), t1));
    t1 = new $.TestVector_run__anon0();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("should be subtract by other Vector"), t1));
    t1 = new $.TestVector_run__anon1();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("should scale by another number"), t1));
    t1 = new $.TestVector_run__anon2();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("should be compared by other Vector"), t1));
    t1 = new $.TestVector_run__anon3();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("should obey const equality"), t1));
    t1 = new $.TestVector_run__anon4();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("should get length of the vector"), t1));
    t1 = new $.TestVector_run__anon5();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("should calc the dot product"), t1));
    t1 = new $.TestVector_run__anon6();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("should calc the cross product"), t1));
    t1 = new $.TestVector_run__anon7();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("should have valid normal"), t1));
    t1 = new $.TestVector_run__anon8();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("getAngle"), t1));
    t1 = new $.TestVector_run__anon9();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("rotate"), t1));
    t1 = new $.TestVector_run__anon10();
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("rotateAroundPoint"), t1));
  },
  $isFunction: true
};

$$.TestVector_run__anon = {"": "Closure;",
  call$0: function() {
    var t1, v;
    t1 = $.Vector$(1, 1);
    v = t1.$add(t1, $.Vector$(2, 1));
    $.expect(3, v.x, null, null, false);
    $.expect(2, v.y, null, null, false);
  },
  $isFunction: true
};

$$.TestVector_run__anon0 = {"": "Closure;",
  call$0: function() {
    var t1, v;
    t1 = $.Vector$(5, 3);
    v = t1.$sub(t1, $.Vector$(2, 1));
    $.expect(3, v.x, null, null, false);
    $.expect(2, v.y, null, null, false);
  },
  $isFunction: true
};

$$.TestVector_run__anon1 = {"": "Closure;",
  call$0: function() {
    var t1, v;
    t1 = $.Vector$(2, 3);
    v = t1.$mul(t1, 5);
    $.expect(10, v.x, null, null, false);
    $.expect(15, v.y, null, null, false);
  },
  $isFunction: true
};

$$.TestVector_run__anon2 = {"": "Closure;",
  call$0: function() {
    $.expect($.Vector$(2, 2), $._DeepMatcher$($.Vector$(2, 2), 100), null, null, false);
    $.expect($.Vector$(2, 1), $._IsNot$($.wrapMatcher($._DeepMatcher$($.Vector$(2, 2), 100))), null, null, false);
  },
  $isFunction: true
};

$$.TestVector_run__anon3 = {"": "Closure;",
  call$0: function() {
    $.expect($.Vector$(2, 2), $.Vector$(2, 2), null, null, false);
    $.expect($.Vector_2_2, $._IsSameAs$($.Vector_2_2), null, null, false);
  },
  $isFunction: true
};

$$.TestVector_run__anon4 = {"": "Closure;",
  call$0: function() {
    var t1 = $.Vector$(3, 4);
    $.expect(5, t1.get$length(t1), null, null, false);
  },
  $isFunction: true
};

$$.TestVector_run__anon5 = {"": "Closure;",
  call$0: function() {
    $.expect(23, $.Vector$(2, 3).dot$1($.Vector$(4, 5)), null, null, false);
  },
  $isFunction: true
};

$$.TestVector_run__anon6 = {"": "Closure;",
  call$0: function() {
    $.expect(-2, $.Vector$(2, 3).cross$1($.Vector$(4, 5)), null, null, false);
  },
  $isFunction: true
};

$$.TestVector_run__anon7 = {"": "Closure;",
  call$0: function() {
    var n, t1;
    n = $.Vector$(4, 4);
    $.expect(n.get$length(n), $._IsCloseTo$(5.656854249492381, 0.001), null, null, false);
    t1 = n.get$normal();
    $.expect(t1.get$length(t1), $._IsCloseTo$(1, 0.001), null, null, false);
  },
  $isFunction: true
};

$$.TestVector_run__anon8 = {"": "Closure;",
  call$0: function() {
    $.expect($.Vector_10_0.get$angle(), $._IsCloseTo$(0, 0.001), null, null, false);
    $.expect($.Vector_10_10.get$angle(), $._IsCloseTo$(0.7853981633974483, 0.001), null, null, false);
    $.expect($.Vector_10_0.getAngle$1($.Vector_10_10), $._IsCloseTo$(0.7853981633974483, 0.001), null, null, false);
  },
  $isFunction: true
};

$$.TestVector_run__anon9 = {"": "Closure;",
  call$0: function() {
    var a = $.Vector_1_m1.rotate$1($.Vector_1_m1, 1.5707963267948966);
    $.expect(a.x, $._IsCloseTo$(1, 0.000001), null, null, false);
    $.expect(a.y, $._IsCloseTo$(1, 0.000001), null, null, false);
    a = a.rotate$1(a, -3.141592653589793);
    $.expect(a.x, $._IsCloseTo$(-1, 0.000001), null, null, false);
    $.expect(a.y, $._IsCloseTo$(-1, 0.000001), null, null, false);
  },
  $isFunction: true
};

$$.TestVector_run__anon10 = {"": "Closure;",
  call$0: function() {
    var a = $.Vector_1_m1.rotateAroundPoint$2($.Coordinate_1_0, 1.5707963267948966);
    $.expect(a.x, $._IsCloseTo$(2, 0.000001), null, null, false);
    $.expect(a.y, $._IsCloseTo$(0, 0.000001), null, null, false);
  },
  $isFunction: true
};

$$.TestCloneable = {"": "Object;_liblib7$_id<",
  clone$0: function(_) {
    return $.TestCloneable$internal(this._liblib7$_id);
  },
  get$id: function(_) {
    return this._liblib7$_id;
  },
  $eq: function(_, other) {
    var t1 = other == null;
    if (t1)
      return false;
    return !t1 && $.$eq(this._liblib7$_id, other.get$_liblib7$_id()) === true;
  },
  toString$0: function(_) {
    return "TestCloneable: " + $.S(this._liblib7$_id);
  }
};

$$.TestCloneable_run_anon = {"": "Closure;",
  call$0: function() {
    var t1, val, val2, clone;
    t1 = $._config;
    t1.onLogMessage$2($.$ge$n($._currentTestCaseIndex, 0) === true && $.$lt$n($._currentTestCaseIndex, $.get$length$asx($.get$_testCases())) === true ? $.$index$asx($.get$_testCases(), $._currentTestCaseIndex) : null, "hi!");
    t1 = $.TestCloneable__globalId;
    $.TestCloneable__globalId = $.$add$ns(t1, 1);
    val = $.TestCloneable$internal(t1);
    $.expect(val, $._DeepMatcher$(val, 100), null, null, false);
    $.expect(val, $._IsSameAs$(val), null, null, false);
    t1 = $.TestCloneable__globalId;
    $.TestCloneable__globalId = $.$add$ns(t1, 1);
    val2 = $.TestCloneable$internal(t1);
    $.expect($.$eq(val2.get$id(val2), val.get$id(val)), $.C__IsFalse, null, null, false);
    $.expect(val2.$eq(val2, val), $.C__IsFalse, null, null, false);
    $.expect(val2, $._IsNot$($.wrapMatcher($._IsSameAs$(val))), null, null, false);
    clone = val.clone$0(val);
    $.expect(clone.get$id(clone), $._DeepMatcher$(val.get$id(val), 100), null, null, false);
    $.expect(clone, $._DeepMatcher$(val, 100), null, null, false);
    $.expect(val, $._IsNot$($.wrapMatcher($._IsSameAs$(clone))), null, null, false);
  },
  $isFunction: true
};

$$.TestTuple_run_anon = {"": "Closure;",
  call$0: function() {
    var t1, t2;
    t1 = $.Tuple$(5, 4, $.$int, $.$int);
    $.expect(t1, $._DeepMatcher$(t1, 100), null, null, false);
    $.expect(t1.item1, $._DeepMatcher$(5, 100), null, null, false);
    $.expect(t1.item2, $._DeepMatcher$(4, 100), null, null, false);
    t2 = $.Tuple$(5, 4, $.$int, $.$int);
    $.expect(t2, $._DeepMatcher$(t1, 100), null, null, false);
    $.expect(t2, $._IsNot$($.wrapMatcher($._IsSameAs$(t1))), null, null, false);
    $.expect($.Tuple$(6, 4, $.$int, $.$int), $._IsNot$($.wrapMatcher($._DeepMatcher$(t1, 100))), null, null, false);
  },
  $isFunction: true
};

$$.TestTuple_run_anon0 = {"": "Closure;",
  call$0: function() {
    var t1, t2;
    t1 = $.Tuple3$(5, 4, "cool", $.$int, $.$int, $.String);
    $.expect(t1, $._DeepMatcher$(t1, 100), null, null, false);
    $.expect(t1.item1, $._DeepMatcher$(5, 100), null, null, false);
    $.expect(t1.item2, $._DeepMatcher$(4, 100), null, null, false);
    $.expect(t1.item3, $._DeepMatcher$("cool", 100), null, null, false);
    t2 = $.Tuple3$(5, 4, "cool", $.$int, $.$int, $.String);
    $.expect(t2, $._DeepMatcher$(t1, 100), null, null, false);
    $.expect(t2, $._IsNot$($.wrapMatcher($._IsSameAs$(t1))), null, null, false);
    $.expect($.Tuple3$(6, 4, "beans", $.$int, $.$int, $.String), $._IsNot$($.wrapMatcher($._DeepMatcher$(t1, 100))), null, null, false);
  },
  $isFunction: true
};

$$.TestUtil_run_anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("getHashcode"), $.TestUtil__testGetHashCode));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("split lines"), $.TestUtil__testSplitLines));
  },
  $isFunction: true
};

$$.TestUtil__testSplitLines_anon = {"": "Closure;",
  call$0: function() {
    return $.Util_splitLines(null);
  },
  $isFunction: true
};

$$.TestUtil__testGetHashCode_anon = {"": "Closure;",
  call$0: function() {
    return $.Util_getHashCode(null);
  },
  $isFunction: true
};

$$.TestUtil__hashCodeFun_anon = {"": "Closure;",
  call$1: function(i) {
    return $._SimpleHash__SimpleHash(i);
  },
  $isFunction: true
};

$$._SimpleHash = {"": "Object;hashCode>"};

$$.main_anon0 = {"": "Closure;",
  call$0: function() {
    $.TestSendPortValue_run();
    $.TestFutureValueResult_run();
    $.registerDelayedResultTests();
  },
  $isFunction: true
};

$$.registerDelayedResultTests_anon = {"": "Closure;",
  call$0: function() {
    $._drTest("null", null, null, false);
    $._drTest("obj", 1, 1, false);
    $._drTest("func to obj", new $.registerDelayedResultTests__anon(), 2, false);
    $._drTest("func to func to obj", new $.registerDelayedResultTests__anon0(), 3, false);
    $._drTest("future to obj", $._FutureImpl$immediate(4, null), 4, false);
    $._drTest("func to future to obj", new $.registerDelayedResultTests__anon1(), 5, false);
    $.JSArray_methods.forEach$1([false, true], new $.registerDelayedResultTests__anon2());
  },
  $isFunction: true
};

$$.registerDelayedResultTests__anon = {"": "Closure;",
  call$0: function() {
    return 2;
  },
  $isFunction: true
};

$$.registerDelayedResultTests__anon0 = {"": "Closure;",
  call$0: function() {
    return new $.registerDelayedResultTests___anon();
  },
  $isFunction: true
};

$$.registerDelayedResultTests___anon = {"": "Closure;",
  call$0: function() {
    return 3;
  },
  $isFunction: true
};

$$.registerDelayedResultTests__anon1 = {"": "Closure;",
  call$0: function() {
    return $._FutureImpl$immediate(5, null);
  },
  $isFunction: true
};

$$.registerDelayedResultTests__anon2 = {"": "Closure;",
  call$1: function(v) {
    $._testSilly([], v);
    $._testSilly([true], v);
    $._testSilly([false], v);
    $._testSilly([true, true], v);
    $._testSilly([true, false], v);
    $._testSilly([false, true], v);
    $._testSilly([false, false], v);
    $._testSilly([true, true, true], v);
    $._testSilly([true, true, false], v);
    $._testSilly([true, false, true], v);
    $._testSilly([true, false, false], v);
    $._testSilly([false, true, true], v);
    $._testSilly([false, true, false], v);
    $._testSilly([false, false, true], v);
    $._testSilly([false, false, false], v);
  },
  $isFunction: true
};

$$._testSilly_anon = {"": "Closure;",
  call$1: function(v) {
    return v === true ? "future" : "func";
  },
  $isFunction: true
};

$$._returnSilly_anon = {"": "Closure;finalVal_0",
  call$0: function() {
    throw $.$$throw("sorry, I don't like " + $.S(this.finalVal_0));
  },
  $isFunction: true
};

$$._returnSilly_anon0 = {"": "Closure;values_1,finalVal_2,doThrow_3",
  call$0: function() {
    return $._returnSilly(this.values_1, this.finalVal_2, this.doThrow_3);
  },
  $isFunction: true
};

$$._drTest_anon = {"": "Closure;input_0,expectedOutput_1,expectThrow_2",
  call$0: function() {
    var future, t1, t2;
    future = $.getDelayedResult(this.input_0);
    t1 = this.expectThrow_2;
    t2 = this.expectedOutput_1;
    if (t1 === true)
      $.expect(future, $.Throws$($.wrapMatcher("sorry, I don't like " + $.S(t2))), null, null, false);
    else
      $.expect(future, $._Finishes$($.wrapMatcher($._IsSameAs$(t2))), null, null, false);
  },
  $isFunction: true
};

$$.TestFutureValueResult_run_anon = {"": "Closure;",
  call$0: function() {
    $.group("toMap roundtrip", new $.TestFutureValueResult_run__anon());
  },
  $isFunction: true
};

$$.TestFutureValueResult_run__anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("value"), $.TestFutureValueResult__testValueRoundTrip));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("exception"), $.TestFutureValueResult__testExceptionRoundTrip));
  },
  $isFunction: true
};

$$.TestSendPortValue_run_anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("simple"), $.TestSendPortValue__testSimple));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("complex"), $.TestSendPortValue__testComplex));
  },
  $isFunction: true
};

$$.TestSendPortValue__testSimple_anon = {"": "Closure;tv_0",
  call$1: function(arg) {
    $.expect(this.tv_0.get$output(), $._DeepMatcher$(25, 100), null, null, false);
  },
  $isFunction: true
};

$$.TestSendPortValue__testSimple_anon0 = {"": "Closure;",
  call$1: function(args) {
    $.expect($.get$error$x(args), $._DeepMatcher$("wah?", 100), null, null, false);
  },
  $isFunction: true
};

$$.TestSendPortValue__testComplex_anon = {"": "Closure;tv_0",
  call$1: function(arg) {
    $.expect(this.tv_0.get$output(), $._DeepMatcher$($.Tuple3$(5, 6, 11, null, null, null), 100), null, null, false);
  },
  $isFunction: true
};

$$.TestSendPortValue__testComplex_anon0 = {"": "Closure;",
  call$1: function(args) {
    $.expect($.get$error$x(args), $._DeepMatcher$("wah?", 100), null, null, false);
  },
  $isFunction: true
};

$$._TestValue = {"": "SendPortValue;_sendPort,inputSerializer,outputDeserializer,_completer,_innerFuture,_input,_liblib4$_future,_output,_pending,_outputChangedHandle,_inputChangedHandle,_errorHandle", $asSendPortValue: function () { return [$.$int, $.$int]; }};

$$._testIsolate_anon = {"": "Closure;",
  call$1: function(input) {
    var t1 = $.getInterceptor$n(input);
    if (t1.$lt(input, 0) === true)
      throw $.$$throw("wah?");
    return t1.$mul(input, input);
  },
  $isFunction: true
};

$$._ComplexTestValue = {"": "SendPortValue;_sendPort,inputSerializer,outputDeserializer,_completer,_innerFuture,_input,_liblib4$_future,_output,_pending,_outputChangedHandle,_inputChangedHandle,_errorHandle", $asSendPortValue: function () { return [[$.Tuple, $.$int, $.$int], [$.Tuple3, $.$int, $.$int, $.$int]]; }};

$$._complexTestIsolate_anon = {"": "Closure;",
  call$1: function(input) {
    var t1, t2;
    if (input == null)
      throw $.$$throw("wah?");
    t1 = input.get$item1();
    t2 = input.get$item2();
    return $.Tuple3$(t1, t2, $.$add$ns(t1, t2), $.$int, $.$int, $.$int);
  },
  $isFunction: true
};

$$.main_anon = {"": "Closure;",
  call$0: function() {
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("expectFutureComplete"), $._testExpectFutureComplete));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("expectFutureComplete with complete"), $._testExpectFutureCompleteWithComplete));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("expectFutureException"), $._testExpectFutureException));
    $._ensureInitialized(true);
    $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("expectFutureException with complete"), $._testExpectFutureExceptionWithComplete));
  },
  $isFunction: true
};

$$._testExpectFutureCompleteWithComplete_anon = {"": "Closure;",
  call$1: function(value) {
    $.expect(value, 42, null, null, false);
  },
  $isFunction: true
};

$$._testExpectFutureExceptionWithComplete_anon = {"": "Closure;",
  call$1: function(value) {
    $.expect($.get$error$x(value), "failing, per request", null, null, false);
  },
  $isFunction: true
};

$$._getFuture_anon = {"": "Closure;",
  call$1: function(returnedFail) {
    if (returnedFail === true)
      throw $.$$throw("failing, per request");
    return 42;
  },
  $isFunction: true
};

$$._echoIsolate_anon = {"": "Closure;",
  call$2: function(input, replyTo) {
    replyTo.send$1(input);
  },
  $isFunction: true
};

$$.ListIterable = {"": "Iterable;",
  get$iterator: function(_) {
    return $.ListIterator$(this, $.getRuntimeTypeArgument(this, this["$asListIterable"], 0));
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.forEach$1$bailout1(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout1: function(state0, action, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.elementAt$1(this, i));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  contains$1: function(_, element) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.contains$1$bailout1(1, element, $length);
    for (i = 0; i < $length; ++i) {
      if ($.$eq(this.elementAt$1(this, i), element) === true)
        return true;
      if ($length !== this.get$length(this))
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
    return false;
  },
  contains$1$bailout1: function(state0, element, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      if ($.$eq(this.elementAt$1(this, i), element) === true)
        return true;
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  join$1: function(_, separator) {
    var $length, first, buffer, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.join$1$bailout1(1, separator, $length);
    if (separator != null && $.get$isEmpty$asx(separator) !== true) {
      if ($length === 0)
        return "";
      first = $.S(this.elementAt$1(this, 0));
      if ($length !== this.get$length(this))
        throw $.$$throw($.ConcurrentModificationError$(this));
      buffer = $.StringBuffer$(first);
      for (i = 1; i < $length; ++i) {
        buffer.write$1(separator);
        buffer.write$1($.S(this.elementAt$1(this, i)));
        if ($length !== this.get$length(this))
          throw $.$$throw($.ConcurrentModificationError$(this));
      }
      return buffer.toString$0(buffer);
    } else {
      buffer = $.StringBuffer$("");
      for (i = 0; i < $length; ++i) {
        buffer.write$1($.S(this.elementAt$1(this, i)));
        if ($length !== this.get$length(this))
          throw $.$$throw($.ConcurrentModificationError$(this));
      }
      return buffer.toString$0(buffer);
    }
  },
  join$1$bailout1: function(state0, separator, $length) {
    var t1, first, buffer, i;
    if (separator != null && $.get$isEmpty$asx(separator) !== true) {
      t1 = $.getInterceptor($length);
      if (t1.$eq($length, 0) === true)
        return "";
      first = $.S(this.elementAt$1(this, 0));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.$$throw($.ConcurrentModificationError$(this));
      buffer = $.StringBuffer$(first);
      for (i = 1; $.JSNumber_methods.$lt(i, $length); ++i) {
        buffer.write$1(separator);
        buffer.write$1($.S(this.elementAt$1(this, i)));
        if (t1.$eq($length, this.get$length(this)) !== true)
          throw $.$$throw($.ConcurrentModificationError$(this));
      }
      return buffer.toString$0(buffer);
    } else {
      buffer = $.StringBuffer$("");
      for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
        buffer.write$1($.S(this.elementAt$1(this, i)));
        if (t1.$eq($length, this.get$length(this)) !== true)
          throw $.$$throw($.ConcurrentModificationError$(this));
      }
      return buffer.toString$0(buffer);
    }
  },
  where$1: function(_, test) {
    return $.Iterable.prototype.where$1.call(this, this, test);
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(this, this["$asListIterable"], 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this["$asListIterable"], 0)]);
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this["$asListIterable"], 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this["$asListIterable"], 0)]);
    }
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(this)); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterable: function() {
    return null;
  }
};

$$.ListIterator = {"": "Object;_iterable,_length,_index,_current",
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._length;
    t2 = this._iterable;
    if ($.$eq(t1, $.get$length$asx(t2)) !== true)
      throw $.$$throw($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._current = null;
      return false;
    }
    this._current = $.elementAt$1$ax(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.MappedIterable = {"": "Iterable;_iterable,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.MappedIterator$(t1.get$iterator(t1), this._f, $.getRuntimeTypeArgument(this, this["$asMappedIterable"], 0), $.getRuntimeTypeArgument(this, this["$asMappedIterable"], 1));
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterable: function() {
    return function (S, T) { return [T]; };
  }
};

$$.MappedIterator = {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0()) {
      this._current = this._f$1(t1.get$current());
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  },
  $asIterator: function (S, T) { return [T]; }
};

$$.MappedListIterable = {"": "ListIterable;_source,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$ax(this._source, index));
  },
  $asListIterable: function (S, T) { return [T]; },
  $asIterable: function() {
    return function (S, T) { return [T]; };
  }
};

$$.WhereIterable = {"": "Iterable;_iterable,_f",
  get$iterator: function(_) {
    return $.WhereIterator$($.get$iterator$ax(this._iterable), this._f, $.getRuntimeTypeArgument(this, this["$asWhereIterable"], 0));
  },
  $asIterable: function() {
    return null;
  }
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0();)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  $asIterator: null
};

$$.ExpandIterable = {"": "Iterable;_iterable,_f",
  get$iterator: function(_) {
    return $.ExpandIterator$($.get$iterator$ax(this._iterable), this._f, $.getRuntimeTypeArgument(this, this["$asExpandIterable"], 0), $.getRuntimeTypeArgument(this, this["$asExpandIterable"], 1));
  },
  $asIterable: function() {
    return function (S, T) { return [T]; };
  }
};

$$.ExpandIterator = {"": "Object;_iterator,_f,_currentExpansion,_current",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$current: function() {
    return this._current;
  },
  moveNext$0: function() {
    if (this._currentExpansion == null)
      return false;
    for (var t1 = this._iterator; !this._currentExpansion.moveNext$0();) {
      this._current = null;
      if (t1.moveNext$0()) {
        this._currentExpansion = null;
        this._currentExpansion = $.get$iterator$ax(this._f$1(t1.get$current()));
      } else
        return false;
    }
    this._current = this._currentExpansion.get$current();
    return true;
  }
};

$$.EmptyIterator = {"": "Object;",
  moveNext$0: function() {
    return false;
  },
  get$current: function() {
    return;
  }
};

$$.ListMixin = {"": "Object;",
  get$iterator: function(_) {
    return $.ListIterator$(this, $.getRuntimeTypeArgument(this, this["$asListMixin"], 0));
  },
  elementAt$1: function(_, index) {
    return this.$index(this, index);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(this, i));
      if ($length !== this.get$length(this))
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  contains$1: function(_, element) {
    var $length, i;
    $length = this.get$length(this);
    for (i = 0; i < $length; ++i) {
      if ($.$eq(this.$index(this, i), element) === true)
        return true;
      if ($length !== this.get$length(this))
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  where$1: function(_, test) {
    return $.WhereIterable$(this, test, $.getRuntimeTypeArgument(this, this["$asListMixin"], 0));
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(this, this["$asListMixin"], 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this["$asListMixin"], 0)]);
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this["$asListMixin"], 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this["$asListMixin"], 0)]);
    }
    for (i = 0; i < this.get$length(this); ++i) {
      t1 = this.$index(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    var t1 = this.get$length(this);
    this.set$length(this, t1 + 1);
    this.$indexSet(this, t1, element);
  },
  addAll$1: function(_, iterable) {
    var t1, t2, t3;
    for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0();) {
      t2 = t1.get$current();
      t3 = this.get$length(this);
      this.set$length(this, t3 + 1);
      this.$indexSet(this, t3, t2);
    }
  },
  retainWhere$1: function(_, test) {
    $.ListMixin__filter(this, test, true);
  },
  sort$1: function(_, compare) {
    var t1 = this.get$length(this) - 1;
    if (t1 - 0 <= 32)
      $.Sort_insertionSort_(this, 0, t1, compare);
    else
      $.Sort__dualPivotQuicksort(this, 0, t1, compare);
  },
  sublist$2: function(_, start, end) {
    var t1, $length, result, i;
    if (typeof start !== "number")
      return this.sublist$2$bailout(1, start, end);
    if (end == null)
      end = this.get$length(this);
    if (start < 0 || start > this.get$length(this))
      throw $.$$throw($.RangeError$range(start, 0, this.get$length(this)));
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) === true || t1.$gt(end, this.get$length(this)) === true)
      throw $.$$throw($.RangeError$range(end, start, this.get$length(this)));
    $length = t1.$sub(end, start);
    if (typeof $length !== "number")
      return this.sublist$2$bailout(2, start, 0, $length, $.JSNumber_methods);
    result = $.List_List($, $.getRuntimeTypeArgument(this, this["$asListMixin"], 0));
    $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this["$asListMixin"], 0)]);
    $.JSArray_methods.set$length(result, $length);
    for (i = 0; i < $length; ++i) {
      t1 = this.$index(this, start + i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  sublist$2$bailout: function(state0, start, end, $length, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (end == null)
          end = this.get$length(this);
        t1 = $.getInterceptor$n(start);
        if (t1.$lt(start, 0) === true || t1.$gt(start, this.get$length(this)) === true)
          throw $.$$throw($.RangeError$range(start, 0, this.get$length(this)));
        t2 = $.getInterceptor$n(end);
        if (t2.$lt(end, start) === true || t2.$gt(end, this.get$length(this)) === true)
          throw $.$$throw($.RangeError$range(end, start, this.get$length(this)));
        $length = t2.$sub(end, start);
      case 2:
        var t2, result, i;
        state0 = 0;
        result = $.List_List($, $.getRuntimeTypeArgument(this, this["$asListMixin"], 0));
        $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this["$asListMixin"], 0)]);
        $.JSArray_methods.set$length(result, $length);
        for (i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
          t2 = this.$index(this, t1.$add(start, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  setRange$4: function(_, start, $length, from, startFrom) {
    var i, t1;
    if (typeof start !== "number")
      return this.setRange$4$bailout(1, start, $length, from, startFrom);
    if (typeof $length !== "number")
      return this.setRange$4$bailout(1, start, $length, from, startFrom);
    if (typeof from !== "string" && (typeof from !== "object" || from === null || from.constructor !== Array && !$.getInterceptor(from).$isJavaScriptIndexingBehavior()))
      return this.setRange$4$bailout(1, start, $length, from, startFrom);
    if (typeof startFrom !== "number")
      return this.setRange$4$bailout(1, start, $length, from, startFrom);
    if (start < 0 || start > this.get$length(this))
      throw $.$$throw($.RangeError$range(start, 0, this.get$length(this)));
    if ($length < 0 || start + $length > this.get$length(this))
      throw $.$$throw($.RangeError$range($length, 0, this.get$length(this) - start));
    if (startFrom < 0 || startFrom + $length > from.length)
      throw $.$$throw($.RangeError$range(startFrom, 0, from.length - $length));
    if (startFrom < start)
      for (i = $length - 1; i >= 0; --i) {
        t1 = startFrom + i;
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= from.length)
          throw $.ioore(t1);
        this.$indexSet(this, start + i, from[t1]);
      }
    else
      for (i = 0; i < $length; ++i) {
        t1 = startFrom + i;
        if (t1 !== (t1 | 0))
          throw $.iae(t1);
        if (t1 < 0 || t1 >= from.length)
          throw $.ioore(t1);
        this.$indexSet(this, start + i, from[t1]);
      }
  },
  setRange$4$bailout: function(state0, start, $length, from, startFrom) {
    var t1, t2, t3, i, t4;
    t1 = $.getInterceptor$n(start);
    if (t1.$lt(start, 0) === true || t1.$gt(start, this.get$length(this)) === true)
      throw $.$$throw($.RangeError$range(start, 0, this.get$length(this)));
    t2 = $.getInterceptor$n($length);
    if (t2.$lt($length, 0) === true || $.$gt$n(t1.$add(start, $length), this.get$length(this)) === true) {
      t1 = this.get$length(this);
      if (typeof start !== "number")
        throw $.iae(start);
      throw $.$$throw($.RangeError$range($length, 0, t1 - start));
    }
    if (startFrom == null)
      startFrom = 0;
    t3 = $.getInterceptor$n(startFrom);
    if (t3.$lt(startFrom, 0) === true || $.$gt$n(t3.$add(startFrom, $length), $.get$length$asx(from)) === true)
      throw $.$$throw($.RangeError$range(startFrom, 0, $.$sub$n($.get$length$asx(from), $length)));
    if (t3.$lt(startFrom, start) === true)
      for (i = t2.$sub($length, 1), t2 = $.getInterceptor$asx(from); t4 = $.getInterceptor$n(i), t4.$ge(i, 0) === true; i = t4.$sub(i, 1))
        this.$indexSet(this, t1.$add(start, i), t2.$index(from, t3.$add(startFrom, i)));
    else
      for (t2 = $.getInterceptor$asx(from), i = 0; $.JSNumber_methods.$lt(i, $length); ++i)
        this.$indexSet(this, t1.$add(start, i), t2.$index(from, t3.$add(startFrom, i)));
  },
  setRange$3: function($receiver, start, length, from) {
    return this.setRange$4($receiver, start, length, from, null);
  },
  indexOf$2: function(_, element, startIndex) {
    var i;
    if (typeof startIndex !== "number")
      return this.indexOf$2$bailout(1, element, startIndex);
    if (startIndex >= this.get$length(this))
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; i < this.get$length(this); ++i)
      if ($.$eq(this.$index(this, i), element) === true)
        return i;
    return -1;
  },
  indexOf$2$bailout: function(state0, element, startIndex) {
    var t1, i;
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$ge(startIndex, this.get$length(this)) === true)
      return -1;
    if (t1.$lt(startIndex, 0) === true)
      startIndex = 0;
    for (i = startIndex; t1 = $.getInterceptor$n(i), t1.$lt(i, this.get$length(this)) === true; i = t1.$add(i, 1))
      if ($.$eq(this.$index(this, i), element) === true)
        return i;
    return -1;
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  }
};

$$.ListBase = {"": "ListMixin;", $asListMixin: null,
  $asList: function() {
    return null;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$.ListBase_UnmodifiableListMixin = {"": "ListBase;",
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  set$length: function(_, newLength) {
    throw $.$$throw($.UnsupportedError$("Cannot change the length of an unmodifiable list"));
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  retainWhere$1: function(_, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  sort$1: function(_, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  removeAt$1: function(_, index) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  setRange$4: function(_, start, $length, from, startFrom) {
    throw $.$$throw($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  setRange$3: function($receiver, start, length, from) {
    return this.setRange$4($receiver, start, length, from, null);
  },
  $asListBase: function () { return [E]; },
  $asList: function() {
    return function () { return [E]; };
  },
  $asCollection: function() {
    return function () { return [E]; };
  },
  $asIterable: function() {
    return function () { return [E]; };
  }
};

$$.UnmodifiableListBase = {"": "ListBase_UnmodifiableListMixin;", $asListBase_UnmodifiableListMixin: null,
  $asList: function() {
    return null;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  }
};

$$.ToString__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      this.result_1.write$1(", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    t1.write$1(": ");
    $.ToString__emitObject(v, t1, t2);
  },
  $isFunction: true
};

$$.HashMap_values_anon = {"": "Closure;this_0",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  },
  $isFunction: true
};

$$.HashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    $.$indexSet$ax(this.this_0, key, value);
  },
  $isFunction: true
};

$$.HashMapKeyIterable = {"": "Iterable;_map",
  get$length: function(_) {
    return this._map._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib1$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.HashMapKeyIterator$(t1, t1._computeKeys$0(), $.getRuntimeTypeArgument(this, this["$asHashMapKeyIterable"], 0));
  },
  contains$1: function(_, element) {
    return this._map.containsKey$1(element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.$$throw($.ConcurrentModificationError$(t1));
    }
  },
  $asIterable: function() {
    return null;
  }
};

$$.HashMapKeyIterator = {"": "Object;_map,_keys,_offset,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.$$throw($.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._liblib1$_current = null;
      return false;
    } else {
      this._liblib1$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
};

$$.HashSet_retainWhere_anon = {"": "Closure;test_0",
  call$1: function(element) {
    return this.test_0.call$1(element) !== true;
  },
  $isFunction: true
};

$$.HashSetIterator = {"": "Object;_set,_elements,_offset,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var elements, offset, t1;
    elements = this._elements;
    offset = this._offset;
    t1 = this._set;
    if (elements !== t1._elements)
      throw $.$$throw($.ConcurrentModificationError$(t1));
    else if (offset >= elements.length) {
      this._liblib1$_current = null;
      return false;
    } else {
      this._liblib1$_current = elements[offset];
      this._offset = offset + 1;
      return true;
    }
  }
};

$$.ConstantMap = {"": "Object;length>,_jsObject,_liblib8$_keys",
  containsKey$1: function(key) {
    if ($.$eq(key, "__proto__") === true)
      return false;
    return this._jsObject.hasOwnProperty(key);
  },
  $index: function(_, key) {
    if (!this.containsKey$1(key))
      return;
    return this._jsObject[key];
  },
  forEach$1: function(_, f) {
    $.forEach$1$ax(this._liblib8$_keys, new $.ConstantMap_forEach_anon(this, f));
  },
  get$keys: function() {
    return $._ConstantMapKeyIterable$(this);
  },
  get$values: function(_) {
    return $.map$1$ax(this._liblib8$_keys, new $.ConstantMap_values_anon(this));
  },
  get$isEmpty: function(_) {
    return $.$eq(this.length, 0);
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitMap(this, result, $.List_List($, null));
    return result.toString$0(result);
  },
  _throwUnmodifiable$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot modify unmodifiable Map"));
  },
  $indexSet: function(_, key, val) {
    return this._throwUnmodifiable$0();
  },
  $isMap: true,
  $asMap: function (V) { return [$.String, V]; }
};

$$.ConstantMap_forEach_anon = {"": "Closure;this_0,f_1",
  call$1: function(key) {
    return this.f_1.call$2(key, $.$index$asx(this.this_0, key));
  },
  $isFunction: true
};

$$.ConstantMap_values_anon = {"": "Closure;this_0",
  call$1: function(key) {
    return $.$index$asx(this.this_0, key);
  },
  $isFunction: true
};

$$._ConstantMapKeyIterable = {"": "Iterable;_liblib8$_map",
  get$iterator: function(_) {
    return $.get$iterator$ax(this._liblib8$_map._liblib8$_keys);
  },
  $asIterable: function() {
    return function () { return [$.String]; };
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0) === true)
      t1.sb_0.write$1(", ");
    t1.sb_0.write$1(key);
    t1.sb_0.write$1(": ");
    t1.sb_0.write$1($.Error_safeToString(value));
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  },
  $isFunction: true
};

$$.Interceptor = {"": "Object;",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(receiver)) + "'";
  }
};

$$.JSFunction = {"": "Interceptor;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $isFunction: true
};

$$.JSBool = {"": "Interceptor;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  get$runtimeType: function(receiver) {
    return $.Type_bool;
  },
  $isbool: true
};

$$.JSNull = {"": "Interceptor;",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  get$runtimeType: function(receiver) {
    return $.Type_Null;
  }
};

$$.CloseToken = {"": "Object;", $isCloseToken: true};

$$.JsIsolateSink = {"": "StreamSink;_isClosed,_port<",
  add$1: function(_, message) {
    this._port.send$1(message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port()) === true;
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asStreamSink: function () { return [null]; },
  $asIsolateSink: null,
  $isIsolateSink: true
};

$$._Manager = {"": "Object;nextIsolateId@,currentManagerId,nextManagerId,currentContext<,rootContext,topEventLoop<,fromCommandLine,isWorker<,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = $.get$globalWorker() != null && $.get$IsolateNatives_thisScript() != null;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true) {
      var t1 = this.isolates;
      t1 = t1.get$isEmpty(t1) && this.topEventLoop.activeTimerCount === 0;
    } else
      t1 = false;
    if (t1) {
      t1 = this.mainManager;
      t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "close"])));
    }
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map($.$int, $._IsolateContext);
    this.managers = $.Map_Map($.$int, $._ManagerStub);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId) === true)
      throw $.$$throw($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    t1 = this.ports;
    if (t1.get$isEmpty(t1)) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId(t2 + 1);
    this.id = t2;
    this.ports = $.Map_Map($.$int, $.ReceivePort);
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount",
  enqueue$3: function(isolate, fn, msg) {
    this.events.addLast$1($._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1))
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null)
      if ($globalState.isolates.containsKey$1($globalState.rootContext.id) === true)
        if ($globalState.fromCommandLine === true) {
          var t1 = $globalState.rootContext.ports;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      throw $.$$throw($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  },
  $isFunction: true
};

$$._IsolateEvent = {"": "Object;isolate,fn,message>",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function(_) {
    return 0;
  },
  postMessage$1: function(_, msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function(_) {
  }
};

$$.IsolateNatives__processWorkerMessage_anon = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    var t1, t2;
    t1 = this.entryPoint_0;
    t2 = this.replyTo_1;
    $.lazyPort = $.ReceivePortImpl$();
    t2.send$2("spawned", $._Isolate_port().toSendPort$0());
    t1.call$0();
  },
  $isFunction: true
};

$$.IsolateNatives_spawn_anon = {"": "Closure;completer_0,port_1",
  call$2: function(msg, replyPort) {
    var t1 = this.port_1;
    t1.close$0(t1);
    t1 = this.completer_0;
    t1.complete$1(t1, replyPort);
  },
  $isFunction: true
};

$$.IsolateNatives__startNonWorker_anon = {"": "Closure;functionName_0,replyPort_1",
  call$0: function() {
    var func, t1;
    func = $[this.functionName_0];
    t1 = this.replyPort_1;
    $.lazyPort = $.ReceivePortImpl$();
    t1.send$2("spawned", $._Isolate_port().toSendPort$0());
    func.call$0();
  },
  $isFunction: true
};

$$._BaseSendPort = {"": "Object;_isolateId<",
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && !(typeof replyTo === "object" && replyTo !== null && !!$.getInterceptor(replyTo).$is_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!$.getInterceptor(replyTo).$is_WorkerSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!$.getInterceptor(replyTo).$is_BufferingSendPort))
      throw $.$$throw($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$(null);
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.future;
  },
  $isFunction: true,
  $isSendPort: true
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1.close$0(t1);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(t1, value);
  },
  $isFunction: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort<,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  },
  $isFunction: true
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  },
  $isFunction: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId<,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort)
      t1 = $.$eq(this._workerId, other._workerId) === true && $.$eq(this._isolateId, other._isolateId) === true && $.$eq(this._receivePortId, other._receivePortId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$shl$n(this._workerId, 16);
    t2 = $.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      t1 = $globalState.mainManager;
      t1.postMessage$1(t1, workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        $.postMessage$1$x(manager, workerMessage);
    }
  },
  $isFunction: true
};

$$._BufferingSendPort = {"": "_BaseSendPort;_id<,_port?,_futurePort<,pending@,_isolateId",
  send$2: function(message, replyTo) {
    var t1 = this._port;
    if (t1 != null)
      t1.send$2(message, replyTo);
    else
      $.add$1$ax(this.pending, $.makeLiteralMap(["message", message, "replyTo", replyTo]));
  },
  send$1: function(message) {
    return this.send$2(message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_BufferingSendPort && this._id === other._id;
  },
  get$hashCode: function(_) {
    return this._id;
  },
  _BufferingSendPort$2: function(isolateId, _futurePort) {
    $._BufferingSendPort__idCount = $.$add$ns($._BufferingSendPort__idCount, 1);
    this._futurePort.then$1(new $.anon0(this));
  },
  $is_BufferingSendPort: true,
  $isSendPort: true
};

$$.anon0 = {"": "Closure;this_0",
  call$1: function(p) {
    var t1, t2, t3, t4;
    t1 = this.this_0;
    t1.set$_port(p);
    for (t2 = $.get$iterator$ax(t1.get$pending()); t2.moveNext$0();) {
      t3 = t2.get$current();
      t4 = $.getInterceptor$asx(t3);
      p.send$2(t4.$index(t3, "message"), t4.$index(t3, "replyTo"));
    }
    t1.set$pending(null);
  },
  $isFunction: true
};

$$.ReceivePortImpl = {"": "Object;_id<,_callback<",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._callback = onMessage;
  },
  close$0: function(_) {
    this._callback = null;
    $globalState.currentContext.unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $.get$id$x($globalState.currentContext));
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._id, this);
  }
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1 = this._visited;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax(map.get$values(map), new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (!!$.getInterceptor(port).$is_BufferingSendPort && port._port == null)
      this.ports.push(port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    var t1 = sink._port;
    if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$is_BufferingSendPort && t1._port == null)
      this.ports.push(t1.get$_futurePort());
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  },
  $isFunction: true
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (t1 != null)
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return $._NativeJsSendPort$(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return $._WorkerSendPort$(x._workerId, x._isolateId, x._receivePortId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (t1 != null)
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId) === true) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = t1.$index(list, 2);
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(_, object) {
    return object['__MessageTraverser__attached_info__'];
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($, null);
  },
  cleanup$0: function() {
    var $length, i;
    for ($length = $.get$length$asx(this.tagged), i = 0; i < $length; ++i)
      $.$index$asx(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || $.getInterceptor(x).$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior()))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$(null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$indexSet$ax(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  },
  $isFunction: true
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1($.toList$0$ax(map.get$keys())), this._serializeList$1($.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len, null);
    for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$(null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    t1 = $.getInterceptor(x);
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, t2, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.getInterceptor(dartList).$isJavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t2, len, i;
    t2 = this._deserialized;
    t2.$indexSet(t2, id, dartList);
    t2 = $.getInterceptor$asx(dartList);
    len = t2.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t2.$indexSet(dartList, i, this._deserializeHelper$1(t2.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.HashMap$(null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.getInterceptor(keys).$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, keys, t1, x, result);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.getInterceptor(values).$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, keys, 0, 0, result, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, keys, t1, x, result, values) {
    switch (state0) {
      case 0:
        result = $.HashMap$(null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, t3, len, i;
        state0 = 0;
        t3 = $.getInterceptor$asx(keys);
        len = t3.get$length(keys);
        for (t1 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t3.$index(keys, i)), this._deserializeHelper$1(t1.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle?",
  cancel$0: function() {
    if ($.get$globalThis().setTimeout != null) {
      if (this._inEventLoop)
        throw $.$$throw($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount - 1;
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.$$throw($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if (milliseconds === 0)
      t1 = $.hasTimer() !== true || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer() === true) {
      t1 = $._globalState().get$topEventLoop();
      t1.activeTimerCount = t1.activeTimerCount + 1;
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.internalCallback = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  },
  $isFunction: true
};

$$.JSArray = {"": "Interceptor;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeAt$1: function(receiver, index) {
    if (index < 0 || index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    $.checkGrowable(receiver, "removeAt");
    return receiver.splice(index, 1)[0];
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  retainWhere$1: function(receiver, test) {
    $.IterableMixinWorkaround_removeWhereList(receiver, new $.JSArray_retainWhere_anon(test));
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  expand$1: function(receiver, f) {
    return $.ExpandIterable$(receiver, f, null, null);
  },
  addAll$1: function(receiver, collection) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(collection); t1.moveNext$0();) {
      t2 = t1.get$current();
      $.checkGrowable(receiver, "add");
      receiver.push(t2);
    }
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  join$1: function(receiver, separator) {
    var list, t1, i, t2;
    if (separator == null)
      separator = "";
    list = $.List_List(receiver.length, null);
    for (t1 = list.length, i = 0; i < receiver.length; ++i) {
      t2 = $.S(receiver[i]);
      if (i >= t1)
        throw $.ioore(i);
      list[i] = t2;
    }
    return list.join(separator);
  },
  elementAt$1: function(receiver, index) {
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (typeof end !== "number")
      return this.sublist$2$bailout(1, start, end, receiver);
    $.checkNull(start);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.$$throw($.RangeError$range(start, 0, receiver.length));
    if (!(typeof end === "number" && Math.floor(end) === end))
      throw $.$$throw($.ArgumentError$(end));
    if (end < start || end > receiver.length)
      throw $.$$throw($.RangeError$range(end, start, receiver.length));
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$2$bailout: function(state0, start, end, receiver) {
    $.checkNull(start);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (start < 0 || start > receiver.length)
      throw $.$$throw($.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      if (!(typeof end === "number" && Math.floor(end) === end))
        throw $.$$throw($.ArgumentError$(end));
      if (end < start || end > receiver.length)
        throw $.$$throw($.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  insertRange$3: function(receiver, start, $length, initialValue) {
    var receiverLength, t1, t2, t3, i;
    if (typeof receiver !== "object" || receiver === null || (receiver.constructor !== Array || !!receiver.immutable$list) && !$.getInterceptor(receiver).$isJavaScriptIndexingBehavior())
      return this.insertRange$3$bailout(1, start, $length, initialValue, receiver);
    $.checkGrowable(receiver, "insertRange");
    if ($.$eq($length, 0) === true)
      return;
    if (!(typeof $length === "number" && Math.floor($length) === $length))
      throw $.$$throw($.ArgumentError$($length));
    if ($length < 0)
      throw $.$$throw($.ArgumentError$($length));
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    receiverLength = receiver.length;
    if (start < 0 || start > receiverLength)
      throw $.$$throw($.RangeError$value(start));
    t1 = receiverLength + $length;
    this.set$length(receiver, t1);
    t2 = start + $length;
    $.Arrays_copy(receiver, start, receiver, t2, receiverLength - start);
    if (initialValue != null)
      for (t3 = receiver.length, i = start; i < t2; ++i) {
        if (i < 0 || i >= t3)
          throw $.ioore(i);
        receiver[i] = initialValue;
      }
    this.set$length(receiver, t1);
  },
  insertRange$3$bailout: function(state0, start, $length, initialValue, receiver) {
    var receiverLength, t1, t2, i;
    $.checkGrowable(receiver, "insertRange");
    if ($.$eq($length, 0) === true)
      return;
    if (!(typeof $length === "number" && Math.floor($length) === $length))
      throw $.$$throw($.ArgumentError$($length));
    if ($length < 0)
      throw $.$$throw($.ArgumentError$($length));
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    receiverLength = receiver.length;
    if (start < 0 || start > receiverLength)
      throw $.$$throw($.RangeError$value(start));
    t1 = receiverLength + $length;
    this.set$length(receiver, t1);
    t2 = start + $length;
    $.Arrays_copy(receiver, start, receiver, t2, receiverLength - start);
    if (initialValue != null)
      for (i = start; i < t2; ++i)
        this.$indexSet(receiver, i, initialValue);
    this.set$length(receiver, t1);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.$$throw($.StateError$("No elements"));
  },
  removeRange$2: function(receiver, start, $length) {
    var receiverLength, t1, t2;
    $.checkGrowable(receiver, "removeRange");
    if ($length === 0)
      return;
    $.checkNull(start);
    $.checkNull($length);
    if ($length < 0)
      throw $.$$throw($.ArgumentError$($length));
    receiverLength = receiver.length;
    if (start < 0 || start >= receiverLength)
      throw $.$$throw($.RangeError$value(start));
    t1 = start + $length;
    if (t1 > receiverLength)
      throw $.$$throw($.RangeError$value(t1));
    t2 = receiverLength - $length;
    $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
    this.set$length(receiver, t2);
  },
  setRange$4: function(receiver, start, $length, from, startFrom) {
    $.checkMutable(receiver, "set range");
    $.IterableMixinWorkaround_setRangeList(receiver, start, $length, from, startFrom);
  },
  any$1: function(receiver, f) {
    return $.IterableMixinWorkaround_any(receiver, f);
  },
  sort$1: function(receiver, compare) {
    var t1;
    $.checkMutable(receiver, "sort");
    if (compare == null)
      compare = $.Comparable_compare;
    t1 = receiver.length - 1;
    if (t1 - 0 <= 32)
      $.Sort_insertionSort_(receiver, 0, t1, compare);
    else
      $.Sort__dualPivotQuicksort(receiver, 0, t1, compare);
  },
  indexOf$2: function(receiver, element, start) {
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  contains$1: function(receiver, other) {
    var t1, i;
    for (t1 = $.getInterceptor(other), i = 0; i < receiver.length; ++i)
      if (t1.$eq(other, receiver[i]) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitCollection(receiver, result, $.List_List($, null));
    return result.toString$0(result);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.getRuntimeTypeArgument(receiver, receiver["$asJSArray"], 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  toSet$0: function(receiver) {
    var t1 = $.HashSet$($.getRuntimeTypeArgument(receiver, receiver["$asJSArray"], 0));
    t1.addAll$1(t1, receiver);
    return t1;
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver, $.getRuntimeTypeArgument(receiver, receiver["$asJSArray"], 0));
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$runtimeType: function(receiver) {
    return $.TypeImpl$($.getRuntimeTypeString(receiver));
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $asInterceptor: null,
  $asList: function() {
    return null;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$.JSArray_retainWhere_anon = {"": "Closure;test_0",
  call$1: function(element) {
    return this.test_0.call$1(element) !== true;
  },
  $isFunction: true
};

$$.JSMutableArray = {"": "JSArray;", $asJSArray: function () { return [null]; },
  $asList: function() {
    return function () { return [null]; };
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$.JSFixedArray = {"": "JSMutableArray;"};

$$.JSExtendableArray = {"": "JSMutableArray;"};

$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function(_) {
    var t1 = this.stack;
    return t1 != null ? t1 : "";
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  },
  $isFunction: true
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  },
  $isFunction: true
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  },
  $isFunction: true
};

$$.Closure = {"": "Object;",
  toString$0: function(_) {
    return "Closure";
  },
  $isFunction: true
};

$$.Null = {"": "Object;"};

$$.JSNumber = {"": "Interceptor;",
  compareTo$1: function(receiver, b) {
    var bIsNegative;
    if (!(typeof b === "number"))
      throw $.$$throw($.ArgumentError$(b));
    if (receiver < b)
      return -1;
    else if (receiver > b)
      return 1;
    else if (receiver === b) {
      if (receiver === 0) {
        bIsNegative = this.get$isNegative(b);
        if (this.get$isNegative(receiver) === bIsNegative)
          return 0;
        if (this.get$isNegative(receiver))
          return -1;
        return 1;
      }
      return 0;
    } else if (this.get$isNaN(receiver)) {
      if (this.get$isNaN(b))
        return 0;
      return 1;
    } else
      return -1;
  },
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    $.checkNull(b);
    return receiver % b;
  },
  abs$0: function(receiver) {
    return Math.abs(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      throw $.$$throw($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      throw $.$$throw($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  truncate$0: function(receiver) {
    return this.toInt$0(receiver);
  },
  round$0: function(receiver) {
    return this.toInt$0(this.roundToDouble$0(receiver));
  },
  roundToDouble$0: function(receiver) {
    if (receiver < 0)
      return -Math.round(-receiver);
    else
      return Math.round(receiver);
  },
  toRadixString$1: function(receiver, radix) {
    $.checkNum(radix);
    if (radix < 2 || radix > 36)
      throw $.$$throw($.RangeError$(radix));
    return receiver.toString(radix);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return "" + (receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  $mod: function(receiver, other) {
    var result;
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    result = receiver % other;
    if (result === 0)
      return 0;
    if (result > 0)
      return result;
    if (other < 0)
      return result - other;
    else
      return result + other;
  },
  $tdiv: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return (receiver >> other) >>> 0;
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  $xor: function(receiver, other) {
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true
};

$$.JSInt = {"": "JSNumber;",
  get$runtimeType: function(receiver) {
    return $.Type_$int;
  },
  $is$int: true,
  $isnum: true
};

$$.JSDouble = {"": "JSNumber;",
  get$runtimeType: function(receiver) {
    return $.Type_$double;
  },
  $is$double: true,
  $isnum: true
};

$$.TypeImpl = {"": "Object;typeName",
  toString$0: function(_) {
    return this.typeName;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this.typeName);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!$.getInterceptor(other).$isTypeImpl))
      return false;
    return $.$eq(this.typeName, other.typeName);
  },
  $isTypeImpl: true
};

$$.JSString = {"": "Interceptor;",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  $add: function(receiver, other) {
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    $.checkNull(pattern);
    return receiver.split(pattern);
  },
  startsWith$1: function(receiver, other) {
    var otherLength;
    $.checkString(other);
    otherLength = other.length;
    if (otherLength > receiver.length)
      return false;
    return other == receiver.substring(0, otherLength);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$n(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length) === true)
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  toUpperCase$0: function(receiver) {
    return receiver.toUpperCase();
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$contains: function(receiver) {
    return new $.Bound_contains_JSString(this, "contains$2", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  compareTo$1: function(receiver, other) {
    var t1;
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (receiver === other)
      t1 = 0;
    else
      t1 = receiver < other ? -1 : 1;
    return t1;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i;
    for (hash = 0, i = 0; i < receiver.length; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash = hash ^ (hash >> 6);
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash = hash ^ (hash >> 11);
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$runtimeType: function(receiver) {
    return $.Type_String;
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
};

$$._Random = {"": "Object;",
  nextInt$1: function(max) {
    if (max < 0)
      throw $.$$throw($.ArgumentError$("negative max: " + max));
    if (max > 4294967295)
      max = 4294967295;
    return (Math.random() * max) >>> 0;
  }
};

$$.MetaInfo = {"": "Object;_tag<,_tags,_liblib8$_set<"};

$$.JSSyntaxRegExp = {"": "Object;_pattern,_isMultiLine,_isCaseSensitive,_nativeRegExp",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    m = this._nativeRegExp.exec($.checkString(str));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.get$length$asx($.$index$asx(m, 0));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(this), str, matchStart, matchStart + t1, m);
  },
  hasMatch$1: function(str) {
    return this._nativeRegExp.test($.checkString(str));
  },
  allMatches$1: function(_, str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function(_) {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isJSSyntaxRegExp: true,
  $isRegExp: true
};

$$._MatchImplementation = {"": "Object;pattern,str,start,end,_groups",
  group$1: function(index) {
    return $.$index$asx(this._groups, index);
  },
  $index: function(_, index) {
    return $.$index$asx(this._groups, index);
  }
};

$$._AllMatchesIterable = {"": "Iterable;_re,_str",
  get$iterator: function(_) {
    return $._AllMatchesIterator$(this._re, this._str);
  },
  $asIterable: function() {
    return function () { return [$.Match]; };
  }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib8$_current",
  get$current: function() {
    return this._liblib8$_current;
  },
  moveNext$0: function() {
    this._liblib8$_current = this._re.firstMatch$1(this._str);
    return this._liblib8$_current != null;
  }
};

$$.StringMatch = {"": "Object;start,str,pattern",
  $index: function(_, g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if ($.$eq(group_, 0) !== true)
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  }
};

$$.AsyncError = {"": "Object;error>,stackTrace<,cause<",
  error$2: function($receiver, arg0, arg1) {
    return this.error.call$2(arg0, arg1);
  },
  _writeOn$1: function(buffer) {
    var message, exception, t1;
    buffer.write$1("'");
    message = null;
    try {
      message = $.toString$0(this.error);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    buffer.write$1(message);
    buffer.write$1("'\n");
    t1 = this.stackTrace;
    if (t1 != null) {
      buffer.write$1("Stack trace:\n");
      buffer.writeln$1($.toString$0(t1));
    }
  },
  toString$0: function(_) {
    var buffer, cause;
    buffer = $.StringBuffer$("");
    buffer.write$1("AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; cause != null;) {
      buffer.write$1("Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return buffer.toString$0(buffer);
  },
  throwDelayed$0: function() {
    var reportError, exception;
    reportError = new $.AsyncError_throwDelayed_reportError(this);
    try {
      $.Timer_run(new $.AsyncError_throwDelayed_anon(this, reportError));
    } catch (exception) {
      $.unwrapException(exception);
      reportError.call$0();
    }

  },
  $isAsyncError: true
};

$$.AsyncError_throwDelayed_reportError = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    $.Primitives_printString("Uncaught Error: " + $.S($.get$error$x(t1)));
    if (t1.get$stackTrace() != null)
      $.Primitives_printString("Stack Trace:\n" + $.S(t1.get$stackTrace()) + "\n");
  },
  $isFunction: true
};

$$.AsyncError_throwDelayed_anon = {"": "Closure;this_1,reportError_2",
  call$0: function() {
    this.reportError_2.call$0();
    throw $.$$throw($.get$error$x(this.this_1));
  },
  $isFunction: true
};

$$._CompleterImpl = {"": "Object;future,_isComplete",
  complete$1: function(_, value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._liblib0$_setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!$.getInterceptor(error).$isAsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener@",
  _sendValue$1: function(value) {
    this.future._liblib0$_setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state@,_resultOrListeners<",
  get$_isComplete: function() {
    return this._state !== 0;
  },
  get$_hasValue: function() {
    return this._state === 1;
  },
  get$_hasError: function() {
    return (this._state & 2) !== 0;
  },
  get$_hasUnhandledError: function() {
    return (this._state & 4) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (!this.get$_isComplete()) {
      if (onError == null) {
        t1 = $._ThenFuture$(f, null, null);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError, null, null);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError()) {
      if (onError != null)
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this, null);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue())
      return $._FutureWrapper$(this, null);
    if (!this.get$_isComplete()) {
      t1 = $._CatchErrorFuture$(f, test, null);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  whenComplete$1: function(action) {
    var whenFuture = $._WhenFuture$(action, $.getRuntimeTypeArgument(this, this["$as_FutureImpl"], 0));
    if (!this.get$_isComplete()) {
      whenFuture._nextListener = this._resultOrListeners;
      this._resultOrListeners = whenFuture;
    } else if (this.get$_hasValue())
      $.Timer_run(new $._FutureImpl_whenComplete_anon(whenFuture, this._resultOrListeners));
    else {
      this._state = (this._state & 4294967291) >>> 0;
      $.Timer_run(new $._FutureImpl_whenComplete_anon0(whenFuture, this._resultOrListeners));
    }
    return whenFuture;
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue, null, null);
    $.Timer_run(new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._state = (this._state & 4294967291) >>> 0;
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test, null);
    $.Timer_run(new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _liblib0$_setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_liblib0$_setValue: function() {
    return new $.BoundClosure$1(this, "_liblib0$_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.Timer_run(new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener._nextListener = this._resultOrListeners;
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1;
    if (!this.get$_isComplete()) {
      t1 = future._asListener$0();
      t1._nextListener = this._resultOrListeners;
      this._resultOrListeners = t1;
    } else if (this.get$_hasValue())
      future._liblib0$_setValue$1(this._resultOrListeners);
    else {
      this._state = (this._state & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture)
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_liblib0$_setValue(), this.get$_setError());
        return;
      }
    else
      this._liblib0$_setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListenerWrapper$(this, null);
  },
  _FutureImpl$immediateError$2: function(error, stackTrace, T) {
    this._setError$1(typeof error === "object" && error !== null && !!$.getInterceptor(error).$isAsyncError ? error : $.AsyncError$(error, stackTrace));
  },
  _FutureImpl$immediate$1: function(value, T) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._FutureImpl__FutureImpl$wait_handleError = {"": "Closure;box_0",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$2($.get$error$x(error), error.get$stackTrace());
    }
  },
  $isFunction: true
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,pos_1",
  call$1: function(value) {
    var t1, t2;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    $.$indexSet$ax(t2, this.pos_1, value);
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0) === true) {
      t2 = t1.completer_0;
      t2.complete$1(t2, t1.values_1);
    }
  },
  $isFunction: true
};

$$._FutureImpl_whenComplete_anon = {"": "Closure;whenFuture_0,value_1",
  call$0: function() {
    this.whenFuture_0._sendValue$1(this.value_1);
  },
  $isFunction: true
};

$$._FutureImpl_whenComplete_anon0 = {"": "Closure;whenFuture_2,error_3",
  call$0: function() {
    this.whenFuture_2._sendError$1(this.error_3);
  },
  $isFunction: true
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$0: function() {
    this.thenFuture_0._sendValue$1(this.value_1);
  },
  $isFunction: true
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$0: function() {
    this.errorFuture_1._sendError$1(this.error_0);
  },
  $isFunction: true
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1, error;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError()) {
      t1.set$_state($.$and$n(t1.get$_state(), 4294967291));
      error = t1.get$_resultOrListeners();
      t1 = $.getInterceptor$x(error);
      $.Primitives_printString("Uncaught Error: " + $.S(t1.get$error(error)));
      if (error.get$stackTrace() != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(error.get$stackTrace()) + "\n");
      throw $.$$throw(t1.get$error(error));
    }
  },
  $isFunction: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener@",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_TransformFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._liblib0$_setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1($.get$error$x(error));
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isAsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  $as_ThenFuture: null,
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._WhenFuture = {"": "_TransformFuture;_action,_nextListener,_state,_resultOrListeners",
  _action$0: function() {
    return this._action.call$0();
  },
  _sendValue$1: function(value) {
    var result, resultFuture, e, e0, s, t1, exception;
    try {
      result = this._action$0();
      t1 = result;
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendValue_anon(this, value), this.get$_setError());
        return;
      }
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._liblib0$_setValue$1(value);
  },
  _sendError$1: function(error) {
    var t1, result, resultFuture, e, e0, s, t2, exception;
    t1 = {};
    t1.error_0 = error;
    try {
      result = this._action$0();
      t2 = result;
      if (typeof t2 === "object" && t2 !== null && !!$.getInterceptor(t2).$isFuture) {
        resultFuture = result;
        resultFuture.then$2$onError(new $._WhenFuture__sendError_anon(t1, this), this.get$_setError());
        return;
      }
    } catch (exception) {
      t2 = $.unwrapException(exception);
      if (typeof t2 === "object" && t2 !== null && !!$.getInterceptor(t2).$isAsyncError) {
        e = t2;
        t1.error_0 = e;
      } else {
        e0 = t2;
        s = $.getTraceFromException(exception);
        t1.error_0 = $.AsyncError$withCause(e0, s, t1.error_0);
      }
    }

    this._setError$1(t1.error_0);
  },
  $as_TransformFuture: function (T) { return [T, T]; },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._WhenFuture__sendValue_anon = {"": "Closure;this_0,value_1",
  call$1: function(_) {
    this.this_0._liblib0$_setValue$1(this.value_1);
  },
  $isFunction: true
};

$$._WhenFuture__sendError_anon = {"": "Closure;box_0,this_1",
  call$1: function(_) {
    this.this_1._setError$1(this.box_0.error_0);
  },
  $isFunction: true
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  whenComplete$1: function(action) {
    return this._future.whenComplete$1(action);
  },
  $isFuture: true
};

$$.Stream = {"": "Object;",
  where$1: function(_, test) {
    return $._WhereStream$(this, test, $.getRuntimeTypeArgument(this, this["$asStream"], 0));
  },
  map$1: function(_, convert) {
    return $._MapStream$(this, convert, $.getRuntimeTypeArgument(this, this["$asStream"], 0), null);
  },
  contains$1: function(_, match) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.bool);
    t1.subscription_0 = null;
    t2 = new $.Stream_contains_anon(t1, match, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_contains_anon0(future), t3, true);
    return future;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$length: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.$int);
    t1.count_0 = 0;
    t2 = new $.Stream_length_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_length_anon0(t1, future), t3, true);
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$($.bool);
    t1.subscription_0 = null;
    t2 = new $.Stream_isEmpty_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_isEmpty_anon0(future), t3, true);
    return future;
  },
  toList$0: function(_) {
    var result, future, t1, t2;
    result = [];
    future = $._FutureImpl$([$.List, $.getRuntimeTypeArgument(this, this["$asStream"], 0)]);
    t1 = new $.Stream_toList_anon(result);
    t2 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t1, new $.Stream_toList_anon0(result, future), t2, true);
    return future;
  }
};

$$.Stream_contains_anon = {"": "Closure;box_0,match_1,future_2",
  call$1: function(element) {
    var t1, t2, t3;
    t1 = new $.Stream_contains__anon(this.match_1, element);
    t2 = this.box_0;
    t3 = this.future_2;
    $._runUserCode(t1, new $.Stream_contains__anon0(t2, t3), $._cancelAndError(t2.subscription_0, t3), null);
  },
  $isFunction: true
};

$$.Stream_contains__anon = {"": "Closure;match_3,element_4",
  call$0: function() {
    return $.$eq(this.element_4, this.match_3);
  },
  $isFunction: true
};

$$.Stream_contains__anon0 = {"": "Closure;box_0,future_5",
  call$1: function(isMatch) {
    if (isMatch === true) {
      this.box_0.subscription_0.cancel$0();
      this.future_5._liblib0$_setValue$1(true);
    }
  },
  $isFunction: true
};

$$.Stream_contains_anon0 = {"": "Closure;future_6",
  call$0: function() {
    this.future_6._liblib0$_setValue$1(false);
  },
  $isFunction: true
};

$$.Stream_length_anon = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  },
  $isFunction: true
};

$$.Stream_length_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._liblib0$_setValue$1(this.box_0.count_0);
  },
  $isFunction: true
};

$$.Stream_isEmpty_anon = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._liblib0$_setValue$1(false);
  },
  $isFunction: true
};

$$.Stream_isEmpty_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._liblib0$_setValue$1(true);
  },
  $isFunction: true
};

$$.Stream_toList_anon = {"": "Closure;result_0",
  call$1: function(data) {
    this.result_0.push(data);
  },
  $isFunction: true
};

$$.Stream_toList_anon0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._liblib0$_setValue$1(this.result_1);
  },
  $isFunction: true
};

$$.StreamSubscription = {"": "Object;"};

$$.StreamSink = {"": "EventSink;", $asEventSink: null};

$$.EventSink = {"": "Object;"};

$$.StreamController = {"": "StreamSink;stream>",
  get$hasSubscribers: function() {
    return this.stream.get$_hasSubscribers();
  },
  hasSubscribers$1: function(arg0) {
    return this.get$hasSubscribers().call$1(arg0);
  },
  add$1: function(_, value) {
    return this.stream._liblib0$_add$1(value);
  },
  close$0: function(_) {
    this.stream._close$0();
  },
  $asStreamSink: null
};

$$._MultiControllerStream = {"": "_MultiStreamImpl;_subscriptionHandler,_pauseHandler,_nextLink,_previousLink,_state,_pendingEvents",
  _subscriptionHandler$0: function() {
    return this._subscriptionHandler.call$0();
  },
  _pauseHandler$0: function() {
    return this._pauseHandler.call$0();
  },
  _onSubscriptionStateChange$0: function() {
    var e, s, exception, t1;
    if (this._subscriptionHandler != null)
      try {
        this._subscriptionHandler$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        $.AsyncError$(e, s).throwDelayed$0();
      }

  },
  _onPauseStateChange$0: function() {
    var e, s, exception, t1;
    if (this._pauseHandler != null)
      try {
        this._pauseHandler$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        $.AsyncError$(e, s).throwDelayed$0();
      }

  },
  $as_MultiStreamImpl: null
};

$$._StreamImpl = {"": "Stream;_state@",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    var subscription;
    if (this.get$_isComplete())
      return $._DoneSubscription$(onDone, null);
    if (onError == null)
      onError = $._nullErrorHandler;
    if (onDone == null)
      onDone = $._nullDoneHandler;
    subscription = this._createSubscription$4(onData, onError, onDone, true === unsubscribeOnError);
    this._addListener$1(subscription);
    return subscription;
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  },
  _liblib0$_add$1: function(value) {
    if (this.get$_liblib0$_isClosed())
      throw $.$$throw($.StateError$("Sending on closed stream"));
    if (!this.get$_mayFireState()) {
      this._addPendingEvent$1($._DelayedData$(value, $.getRuntimeTypeArgument(this, this["$as_StreamImpl"], 0)));
      return;
    }
    if (this.get$_hasPendingEvent())
      this._addPendingEvent$1($._DelayedData$(value, $.getRuntimeTypeArgument(this, this["$as_StreamImpl"], 0)));
    else
      this._sendData$1(value);
    this._handlePendingEvents$0();
  },
  _close$0: function() {
    if (this.get$_liblib0$_isClosed())
      return;
    this._state = $.$or$n(this._state, 1);
    if (!this.get$_mayFireState()) {
      this._addPendingEvent$1($.C__DelayedDone);
      return;
    }
    if (this.get$_hasPendingEvent()) {
      this._addPendingEvent$1($._DelayedDone$());
      this._handlePendingEvents$0();
    } else
      this._sendDone$0();
  },
  get$_liblib0$_isClosed: function() {
    return $.$and$n(this._state, 1) !== 0;
  },
  get$_isComplete: function() {
    return $.$and$n(this._state, 2) !== 0;
  },
  get$_isPaused: function() {
    var t1 = this._state;
    if (typeof t1 !== "number")
      return this.get$_isPaused$bailout(1, t1);
    return t1 >= 64;
  },
  get$_isPaused$bailout: function(state0, t1) {
    return $.$ge$n(t1, 64);
  },
  get$_isInputPaused: function() {
    var t1 = this._state;
    if (typeof t1 !== "number")
      return this.get$_isInputPaused$bailout(1, t1);
    return t1 >= 32;
  },
  get$_isInputPaused$bailout: function(state0, t1) {
    return $.$ge$n(t1, 32);
  },
  get$_hasPendingResume: function() {
    return $.$and$n(this._state, 32) !== 0;
  },
  get$_isInactive: function() {
    return $.$and$n(this._state, 24) === 0;
  },
  get$_isInCallback: function() {
    return $.$and$n(this._state, 16) !== 0;
  },
  get$_isFiring: function() {
    return $.$and$n(this._state, 8) !== 0;
  },
  get$_hasPendingEvent: function() {
    var t1 = this._pendingEvents;
    return t1 != null && t1.get$isEmpty(t1) !== true;
  },
  get$_currentEventIdBit: function() {
    var t1 = this._state;
    if (typeof t1 !== "number")
      return this.get$_currentEventIdBit$bailout(1, t1);
    return $.JSInt_methods.$shr(t1 & 4, 2);
  },
  get$_currentEventIdBit$bailout: function(state0, t1) {
    return $.JSInt_methods.$shr($.$and$n(t1, 4), 2);
  },
  get$_mayFireState: function() {
    return $.$and$n(this._state, 4294967256) === 0;
  },
  _updatePauseCount$1: function(by) {
    var oldState = this._state;
    if (by >= 0)
      this._state = $.$add$ns(oldState, by << 6 >>> 0);
    else
      this._state = $.$sub$n(oldState, -by << 6 >>> 0);
  },
  _checkCallbacks$2: function(hadSubscribers, wasPaused) {
    var hasSubscribers, isPaused;
    if (this.get$_isInCallback())
      return;
    if (this.get$_hasPendingResume() && !this.get$_hasPendingEvent())
      this._state = $.$xor$n(this._state, 32);
    this._state = $.$or$n(this._state, 16);
    for (; true; wasPaused = isPaused, hadSubscribers = hasSubscribers) {
      hasSubscribers = this.get$_hasSubscribers();
      isPaused = this.get$_isInputPaused();
      if (hadSubscribers !== hasSubscribers)
        this._onSubscriptionStateChange$0();
      else if ($.$eq(isPaused, wasPaused) !== true)
        this._onPauseStateChange$0();
      else {
        this._state = $.$xor$n(this._state, 16);
        return;
      }
    }
  },
  _onPauseStateChange$0: function() {
  },
  _onSubscriptionStateChange$0: function() {
  },
  _addPendingEvent$1: function($event) {
    var events;
    if (this._pendingEvents == null)
      this._pendingEvents = $._StreamImplEvents$();
    events = this._pendingEvents;
    events.add$1(events, $event);
    if (this.get$_isPaused() === true || this.get$_isFiring())
      return;
    if (this.get$_isInCallback()) {
      this._pendingEvents.schedule$1(this);
      return;
    }
  },
  _handlePendingEvents$0: function() {
    if (!this.get$_hasPendingEvent())
      return;
    var events = this._pendingEvents;
    do {
      if (this.get$_isPaused() === true)
        return;
      if (events.get$isScheduled())
        events.cancelSchedule$0();
      events.handleNext$1(this);
    } while (events.get$isEmpty(events) !== true);
  },
  _sendData$1: function(value) {
    if (!this.get$_hasSubscribers())
      return;
    this._forEachSubscriber$1(new $._StreamImpl__sendData_anon(value));
  },
  _sendError$1: function(error) {
    if (!this.get$_hasSubscribers())
      return;
    this._forEachSubscriber$1(new $._StreamImpl__sendError_anon(error));
  },
  _sendDone$0: function() {
    this._state = $.$or$n(this._state, 2);
    if (!this.get$_hasSubscribers())
      return;
    this._forEachSubscriber$1(new $._StreamImpl__sendDone_anon(this));
  },
  $asStream: null
};

$$._StreamImpl__sendData_anon = {"": "Closure;value_0",
  call$1: function(subscriber) {
    var e, e0, s, exception, t1;
    try {
      subscriber._sendData$1(this.value_0);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isAsyncError) {
        e = t1;
        e.throwDelayed$0();
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        $.AsyncError$(e0, s).throwDelayed$0();
      }
    }

  },
  $isFunction: true
};

$$._StreamImpl__sendError_anon = {"": "Closure;error_0",
  call$1: function(subscriber) {
    var e, e0, s, exception, t1;
    try {
      subscriber._sendError$1(this.error_0);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isAsyncError) {
        e = t1;
        e.throwDelayed$0();
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        $.AsyncError$withCause(e0, s, this.error_0).throwDelayed$0();
      }
    }

  },
  $isFunction: true
};

$$._StreamImpl__sendDone_anon = {"": "Closure;this_0",
  call$1: function(subscriber) {
    var e, e0, s, exception, t1;
    this.this_0._cancel$1(subscriber);
    try {
      subscriber._sendDone$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isAsyncError) {
        e = t1;
        e.throwDelayed$0();
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        $.AsyncError$(e0, s).throwDelayed$0();
      }
    }

  },
  $isFunction: true
};

$$._MultiStreamImpl = {"": "_StreamImpl;_nextLink@,_previousLink@",
  get$_hasSubscribers: function() {
    return !$._InternalLinkList_isEmpty(this);
  },
  _createSubscription$4: function(onData, onError, onDone, unsubscribeOnError) {
    return $._StreamSubscriptionImpl$(this, onData, onError, onDone, unsubscribeOnError, $.getRuntimeTypeArgument(this, this["$as_MultiStreamImpl"], 0));
  },
  _forEachSubscriber$1: function(action) {
    var wasInputPaused, cursor, cursor0;
    if (!this.get$_hasSubscribers())
      return;
    wasInputPaused = this.get$_isInputPaused();
    this._state = $.$xor$n(this._state, 12);
    cursor = this._nextLink;
    for (; cursor !== this; cursor = cursor0) {
      if (cursor._needsEvent$1(this.get$_currentEventIdBit())) {
        action.call$1(cursor);
        cursor._toggleEventReceived$0();
      }
      cursor0 = cursor.get$_nextLink();
      if (cursor.get$_isPendingUnsubscribe())
        this._removeListener$1(cursor);
    }
    this._state = $.$xor$n(this._state, 8);
    this._checkCallbacks$2(true, wasInputPaused);
  },
  _addListener$1: function(listener) {
    var hadSubscribers;
    listener._setSubscribed$1(this.get$_currentEventIdBit());
    hadSubscribers = this.get$_hasSubscribers();
    $._InternalLinkList_add(this, listener);
    if (!hadSubscribers && this.get$_isInactive()) {
      this._checkCallbacks$2(false, false);
      if (this.get$_isPaused() !== true && this.get$_hasPendingEvent())
        this._pendingEvents.schedule$1(this);
    }
  },
  _cancel$1: function(listener) {
    var t1, wasInputPaused;
    t1 = listener.get$_nextLink();
    if (listener == null ? t1 == null : listener === t1)
      return;
    if (this.get$_isFiring())
      if (listener._needsEvent$1(this.get$_currentEventIdBit()))
        listener._setPendingUnsubscribe$1(this.get$_currentEventIdBit());
      else
        this._removeListener$1(listener);
    else {
      wasInputPaused = this.get$_isInputPaused();
      this._removeListener$1(listener);
      if (this.get$_isInactive()) {
        this._checkCallbacks$2(true, wasInputPaused);
        if (this.get$_isPaused() !== true && this.get$_hasPendingEvent())
          this._pendingEvents.schedule$1(this);
      }
    }
  },
  _removeListener$1: function(listener) {
    var pauseCount, t1;
    pauseCount = listener._setUnsubscribed$0();
    $._InternalLink_unlink(listener);
    if (pauseCount > 0) {
      this._updatePauseCount$1(-pauseCount);
      if (this.get$_isPaused() !== true && this.get$_hasPendingEvent()) {
        t1 = this._state;
        if (typeof t1 !== "number")
          return this._removeListener$1$bailout(1, t1);
        this._state = (t1 | 32) >>> 0;
      }
    }
  },
  _removeListener$1$bailout: function(state0, t1) {
    switch (state0) {
      case 0:
        pauseCount = listener._setUnsubscribed$0();
        $._InternalLink_unlink(listener);
      case 1:
        var pauseCount;
        if (state0 === 1 || state0 === 0 && pauseCount > 0)
          switch (state0) {
            case 0:
              this._updatePauseCount$1(-pauseCount);
            case 1:
              if (state0 === 1 || state0 === 0 && this.get$_isPaused() !== true && this.get$_hasPendingEvent())
                switch (state0) {
                  case 0:
                    t1 = this._state;
                  case 1:
                    state0 = 0;
                    this._state = $.$or$n(t1, 32);
                }
          }
    }
  },
  _MultiStreamImpl$0: function(T) {
    this._previousLink = this;
    this._nextLink = this;
  },
  $as_StreamImpl: null
};

$$._StreamSubscriptionImpl = {"": "_StreamListener;_unsubscribeOnError,_onData,_onError,_onDone,_liblib0$_source,_state,_nextLink,_previousLink",
  _onData$1: function(arg0) {
    return this._onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  onDone$1: function(handleDone) {
    this._onDone = handleDone;
  },
  _sendData$1: function(data) {
    this._onData$1(data);
  },
  _sendError$1: function(error) {
    this._onError$1(error);
    if (this._unsubscribeOnError)
      this._liblib0$_source._cancel$1(this);
  },
  _sendDone$0: function() {
    this._onDone$0();
  },
  cancel$0: function() {
    if (!this.get$_isSubscribed())
      return;
    this._liblib0$_source._cancel$1(this);
  },
  $as_StreamListener: null
};

$$._DelayedEvent = {"": "Object;next@"};

$$._DelayedData = {"": "_DelayedEvent;value>,next",
  perform$1: function(stream) {
    stream._sendData$1(this.value);
  },
  $as_DelayedEvent: null
};

$$._DelayedDone = {"": "Object;",
  perform$1: function(stream) {
    stream._sendDone$0();
  },
  get$next: function() {
    return;
  },
  set$next: function(_) {
    throw $.$$throw($.StateError$("No events after a done."));
  }
};

$$._InternalLink = {"": "Object;_nextLink@,_previousLink@",
  _InternalLink$0: function() {
    this._nextLink = this;
    this._previousLink = this;
  }
};

$$._StreamListener = {"": "_InternalLink;_state@",
  get$_isPendingUnsubscribe: function() {
    return (this._state & 2) !== 0;
  },
  get$_isSubscribed: function() {
    return (this._state & 1) !== 0;
  },
  _needsEvent$1: function(currentEventIdBit) {
    return $.JSInt_methods.$shr(this._state & 4, 2) !== currentEventIdBit;
  },
  _toggleEventReceived$0: function() {
    this._state = (this._state ^ 4) >>> 0;
  },
  _setSubscribed$1: function(eventIdBit) {
    this._state = (1 | eventIdBit << 2) >>> 0;
  },
  _setPendingUnsubscribe$1: function(currentEventIdBit) {
    this._state = (this._state | 6) >>> 0;
    this._state = (this._state ^ (1 ^ currentEventIdBit) << 2) >>> 0;
  },
  _setUnsubscribed$0: function() {
    var timesPaused = $.JSInt_methods.$shr(this._state, 3);
    this._state = 0;
    return timesPaused;
  },
  $as_InternalLink: null
};

$$._PendingEvents = {"": "Object;scheduleTimer?",
  get$isScheduled: function() {
    return this.scheduleTimer != null;
  },
  schedule$1: function(stream) {
    var t1, milliseconds;
    if (this.get$isScheduled())
      return;
    t1 = new $._PendingEvents_schedule_anon(this, stream);
    milliseconds = $.Duration_0.get$inMilliseconds();
    if (milliseconds < 0)
      milliseconds = 0;
    this.scheduleTimer = $.TimerImpl$(milliseconds, t1);
  },
  cancelSchedule$0: function() {
    this.scheduleTimer.cancel$0();
    this.scheduleTimer = null;
  }
};

$$._PendingEvents_schedule_anon = {"": "Closure;this_0,stream_1",
  call$0: function() {
    this.this_0.set$scheduleTimer(null);
    this.stream_1._handlePendingEvents$0();
  },
  $isFunction: true
};

$$._StreamImplEvents = {"": "_PendingEvents;firstPendingEvent,lastPendingEvent,scheduleTimer",
  get$isEmpty: function(_) {
    return this.lastPendingEvent == null;
  },
  get$isScheduled: function() {
    return this.scheduleTimer != null;
  },
  add$1: function(_, $event) {
    var t1 = this.lastPendingEvent;
    if (t1 == null) {
      this.lastPendingEvent = $event;
      this.firstPendingEvent = $event;
    } else {
      t1.set$next($event);
      this.lastPendingEvent = $event;
    }
  },
  handleNext$1: function(stream) {
    var $event = this.firstPendingEvent;
    this.firstPendingEvent = $event.get$next();
    if (this.firstPendingEvent == null)
      this.lastPendingEvent = null;
    $event.perform$1(stream);
  }
};

$$._DoneSubscription = {"": "Object;_handler<,_timer,_pauseCount",
  _handler$0: function() {
    return this._handler.call$0();
  },
  _delayDone$0: function() {
    var t1, milliseconds;
    t1 = new $._DoneSubscription__delayDone_anon(this);
    milliseconds = $.Duration_0.get$inMilliseconds();
    if (milliseconds < 0)
      milliseconds = 0;
    this._timer = $.TimerImpl$(milliseconds, t1);
  },
  get$_isComplete: function() {
    return this._timer == null && this._pauseCount === 0;
  },
  onDone$1: function(handleDone) {
    this._handler = handleDone;
  },
  cancel$0: function() {
    if (this.get$_isComplete())
      return;
    var t1 = this._timer;
    if (t1 != null) {
      t1.cancel$0();
      this._timer = null;
    }
    this._pauseCount = 0;
  },
  _DoneSubscription$1: function(_handler, T) {
    this._delayDone$0();
  }
};

$$._DoneSubscription__delayDone_anon = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    if (t1.get$_handler() != null)
      t1._handler$0();
  },
  $isFunction: true
};

$$._cancelAndError_anon = {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    this.subscription_0.cancel$0();
    this.future_1._setError$1(error);
  },
  $isFunction: true
};

$$._ForwardingStream = {"": "Stream;",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    if (onError == null)
      onError = $._nullErrorHandler;
    if (onDone == null)
      onDone = $._nullDoneHandler;
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, true === unsubscribeOnError, $.getRuntimeTypeArgument(this, this["$as_ForwardingStream"], 0), $.getRuntimeTypeArgument(this, this["$as_ForwardingStream"], 1));
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  },
  _handleData$2: function(data, sink) {
    sink._sendData$1(data);
  },
  _handleError$2: function(error, sink) {
    sink._sendError$1(error);
  },
  _handleDone$1: function(sink) {
    sink._sendDone$0();
  },
  $asStream: function (S, T) { return [T]; }
};

$$._BaseStreamSubscription = {"": "Object;",
  _onData$1: function(arg0) {
    return this._onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  onDone$1: function(handleDone) {
    this._onDone = handleDone;
  },
  _BaseStreamSubscription$3: function(_onData, _onError, _onDone, T) {
    if (this._onError == null)
      this._onError = $._nullErrorHandler;
    if (this._onDone == null)
      this._onDone = $._nullDoneHandler;
  }
};

$$._ForwardingStreamSubscription = {"": "_BaseStreamSubscription;_stream,_unsubscribeOnError,_subscription,_onData,_onError,_onDone",
  cancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0();
      this._subscription = null;
    }
  },
  _sendData$1: function(data) {
    this._onData$1(data);
  },
  _sendError$1: function(error) {
    this._onError$1(error);
    if (this._unsubscribeOnError) {
      this._subscription.cancel$0();
      this._subscription = null;
    }
  },
  _sendDone$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0();
      this._subscription = null;
    }
    this._onDone$0();
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1");
  },
  _handleError$1: function(error) {
    this._stream._handleError$2(error, this);
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1");
  },
  _handleDone$0: function() {
    this._subscription = null;
    this._stream._handleDone$1(this);
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, _unsubscribeOnError, S, T) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._liblib0$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  },
  $as_BaseStreamSubscription: function (S, T) { return [T]; }
};

$$._WhereStream = {"": "_ForwardingStream;_test,_liblib0$_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._sendError$1($._asyncError(e, s, null));
      return;
    }

    if (satisfies === true)
      sink._sendData$1(inputEvent);
  },
  $as_ForwardingStream: function (T) { return [T, T]; }
};

$$._MapStream = {"": "_ForwardingStream;_transform,_liblib0$_source",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._sendError$1($._asyncError(e, s, null));
      return;
    }

    sink._sendData$1(outputEvent);
  },
  $as_ForwardingStream: null
};

$$.Timer_run_anon = {"": "Closure;",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(runCallbacks)) === true; i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        i = $.$add$ns(i, 1);
        $.addAll$1$ax($.get$Timer__runCallbacks(), $.sublist$1$ax(runCallbacks, i));
        $.addAll$1$ax($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  },
  $isFunction: true
};

$$.UnmodifiableListView = {"": "UnmodifiableListBase;_liblib1$_source",
  get$length: function(_) {
    return this._liblib1$_source.length;
  },
  $index: function(_, index) {
    return $.JSArray_methods.elementAt$1(this._liblib1$_source, index);
  },
  $asUnmodifiableListBase: null,
  $asList: function() {
    return null;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  }
};

$$.HashMap = {"": "Object;_liblib1$_length,_strings,_nums,_rest,_keys",
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib1$_length === 0;
  },
  get$keys: function() {
    return $.HashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this["$asHashMap"], 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys();
    return t1.map$1(t1, new $.HashMap_values_anon(this));
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.HashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          ;
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      }
      if (value == null)
        value = strings;
      strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          ;
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      }
      if (value == null)
        value = nums;
      nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          ;
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        value = [key, value];
        if (value == null)
          value = rest;
        rest[hash] = value;
        this._liblib1$_length = this._liblib1$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib1$_length = this._liblib1$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  putIfAbsent$2: function(key, ifAbsent) {
    var value;
    if (this.containsKey$1(key) === true)
      return this.$index(this, key);
    value = ifAbsent.call$0();
    this.$indexSet(this, key, value);
    return value;
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._liblib1$_length = this._liblib1$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  clear$0: function(_) {
    if (this._liblib1$_length > 0) {
      this._keys = null;
      this._rest = null;
      this._nums = null;
      this._strings = null;
      this._liblib1$_length = 0;
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = $.get$length$asx(keys), i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.$$throw($.ConcurrentModificationError$(this));
    }
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitMap(this, result, $.List_List($, null));
    return result.toString$0(result);
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib1$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var entry, value;
    if (table != null && table[key] != null) {
      entry = table[key];
      value = entry === table ? null : entry;
      delete table[key];
      this._liblib1$_length = this._liblib1$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true
};

$$.HashSet = {"": "Collection;_liblib1$_length,_strings,_nums,_rest,_elements",
  get$iterator: function(_) {
    return $.HashSetIterator$(this, this._computeElements$0(), $.getRuntimeTypeArgument(this, this["$asHashSet"], 0));
  },
  get$length: function(_) {
    return this._liblib1$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib1$_length === 0;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (typeof object === "string" && object !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[object] != null;
    } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
      nums = this._nums;
      return nums == null ? false : nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashSet__findBucketIndex(rest[$.get$hashCode$(object) & 0x3ffffff], object) >= 0;
    }
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(element) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if ($.HashSet__findBucketIndex(bucket, element) >= 0)
          return;
        bucket.push(element);
      }
      this._liblib1$_length = this._liblib1$_length + 1;
      this._elements = null;
    }
  },
  addAll$1: function(_, objects) {
    var t1;
    for (t1 = $.get$iterator$ax(objects); t1.moveNext$0();)
      this.add$1(this, t1.get$current());
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (typeof object === "string" && object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (typeof object === "number" && (object & 0x3ffffff) === object)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[$.get$hashCode$(object) & 0x3ffffff];
      index = $.HashSet__findBucketIndex(bucket, object);
      if (index < 0)
        return false;
      this._liblib1$_length = this._liblib1$_length - 1;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    }
  },
  removeAll$1: function(_, objectsToRemove) {
    var t1;
    for (t1 = $.JSArray_methods.get$iterator(objectsToRemove); t1.moveNext$0();)
      this.remove$1(this, t1.get$current());
  },
  retainWhere$1: function(_, test) {
    var t1 = $.where$1$ax(this._computeElements$0(), new $.HashSet_retainWhere_anon(test));
    for (t1 = t1.get$iterator(t1); t1.moveNext$0();)
      this.remove$1(this, t1.get$current());
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitCollection(this, result, $.List_List($, null));
    return result.toString$0(result);
  },
  _computeElements$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._elements;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib1$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; ++i0) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._elements = result;
    return result;
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return;
    table[element] = 0;
    this._liblib1$_length = this._liblib1$_length + 1;
    this._elements = null;
  },
  _removeHashTableEntry$2: function(table, element) {
    if (table != null && table[element] != null) {
      delete table[element];
      this._liblib1$_length = this._liblib1$_length - 1;
      this._elements = null;
      return true;
    } else
      return false;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$._DeadEntry = {"": "Object;"};

$$._NullKey = {"": "Object;",
  get$hashCode: function(_) {
    return $.JSNull_methods.get$hashCode(null);
  }
};

$$._HashTable = {"": "Object;",
  _key$1: function(offset) {
    var t1, key;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior())
      return this._key$1$bailout(1, offset, t1);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    key = t1[offset];
    if (key !== $.C__NullKey)
      return key;
    return;
  },
  _key$1$bailout: function(state0, offset, t1) {
    var key = $.$index$asx(t1, offset);
    if (key !== $.C__NullKey)
      return key;
    return;
  },
  get$_elementCount: function() {
    return this._entryCount - this._deletedCount;
  },
  get$_entrySize: function() {
    return 1;
  },
  _checkModification$1: function(expectedModificationCount) {
    if (this._modificationCount !== expectedModificationCount)
      throw $.$$throw($.ConcurrentModificationError$(this._container));
  },
  _createTable$1: function(capacity) {
    return $.List_List($.$mul$n(capacity, this.get$_entrySize()), null);
  },
  _probeForAdd$2: function(hashCode, object) {
    var entrySize, index, t1, firstTombstone, probeCount, offset, entry, t2;
    entrySize = this.get$_entrySize();
    index = $.$and$n(hashCode, $.$sub$n(this._capacity, 1));
    for (t1 = null == object, firstTombstone = -1, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$index$asx(this._table, offset);
      if (entry === $.C__DeadEntry) {
        if (firstTombstone < 0)
          firstTombstone = offset;
      } else if (entry == null) {
        if (firstTombstone < 0)
          return offset;
        return firstTombstone;
      } else if (($.C__NullKey === entry ? t1 : $.$eq(entry, object)) === true)
        return offset;
      ++probeCount;
      t2 = $.$sub$n(this._capacity, 1);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      index = (index + probeCount & t2) >>> 0;
    }
  },
  _probeForLookup$2: function(hashCode, object) {
    var entrySize, index, t1, probeCount, offset, entry, t2;
    entrySize = this.get$_entrySize();
    index = $.$and$n(hashCode, $.$sub$n(this._capacity, 1));
    for (t1 = null == object, probeCount = 0; true;) {
      offset = index * entrySize;
      entry = $.$index$asx(this._table, offset);
      if (entry == null)
        return -1;
      else if ($.C__DeadEntry !== entry)
        if (($.C__NullKey === entry ? t1 : $.$eq(entry, object)) === true)
          return offset;
      ++probeCount;
      t2 = $.$sub$n(this._capacity, 1);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      index = (index + probeCount & t2) >>> 0;
    }
  },
  _checkCapacity$0: function() {
    var freeCount, t1;
    freeCount = $.$sub$n(this._capacity, this._entryCount);
    t1 = $.getInterceptor$n(freeCount);
    if ($.$lt$n(t1.$mul(freeCount, 4), this._capacity) === true || t1.$lt(freeCount, this._deletedCount) === true)
      this._grow$1(this._entryCount - this._deletedCount);
  },
  _grow$1: function(contentCount) {
    var capacity, minCapacity, oldTable;
    capacity = this._capacity;
    if (typeof capacity !== "number")
      return this._grow$1$bailout(1, contentCount, capacity);
    minCapacity = contentCount * 2;
    for (; capacity < minCapacity;)
      capacity *= 2;
    oldTable = this._table;
    this._table = this._createTable$1(capacity);
    this._capacity = capacity;
    this._entryCount = 0;
    this._deletedCount = 0;
    this._addAllEntries$1(oldTable);
    this._modificationCount = this._modificationCount + 1 & 1073741823;
  },
  _grow$1$bailout: function(state0, contentCount, capacity) {
    var minCapacity, t1, oldTable;
    minCapacity = contentCount * 2;
    for (; t1 = $.getInterceptor$n(capacity), t1.$lt(capacity, minCapacity) === true;)
      capacity = t1.$mul(capacity, 2);
    oldTable = this._table;
    this._table = this._createTable$1(capacity);
    this._capacity = capacity;
    this._entryCount = 0;
    this._deletedCount = 0;
    this._addAllEntries$1(oldTable);
    this._modificationCount = this._modificationCount + 1 & 1073741823;
  },
  _addAllEntries$1: function(oldTable) {
    var t1, i, object;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !$.getInterceptor(oldTable).$isJavaScriptIndexingBehavior())
      return this._addAllEntries$1$bailout(1, oldTable);
    for (t1 = oldTable.length, i = 0; i < t1; i += this.get$_entrySize()) {
      if (i < 0)
        throw $.ioore(i);
      object = oldTable[i];
      if (!(object == null || object === $.C__DeadEntry))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout: function(state0, oldTable) {
    var t1, i, object;
    for (t1 = $.getInterceptor$asx(oldTable), i = 0; i < t1.get$length(oldTable); i += this.get$_entrySize()) {
      object = t1.$index(oldTable, i);
      if (!(object == null || object === $.C__DeadEntry))
        this._copyEntry$3(oldTable, i, this._put$1(object));
    }
  },
  _copyEntry$3: function(fromTable, fromOffset, toOffset) {
  },
  _get$1: function(key) {
    return this._probeForLookup$2($.get$hashCode$(key), key);
  },
  _put$1: function(key) {
    var offset, t1, oldEntry;
    offset = this._probeForAdd$2($.get$hashCode$(key), key);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior())
      return this._put$1$bailout(1, key, offset, t1);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t1.length)
      throw $.ioore(offset);
    oldEntry = t1[offset];
    if (oldEntry == null)
      this._entryCount = this._entryCount + 1;
    else if (oldEntry === $.C__DeadEntry)
      this._deletedCount = this._deletedCount - 1;
    else
      return offset;
    if (key == null)
      key = $.C__NullKey;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior())
      return this._put$1$bailout(2, key, offset, t1);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    this._modificationCount = this._modificationCount + 1 & 1073741823;
    return offset;
  },
  _put$1$bailout: function(state0, key, offset, t1) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$(key), key);
        t1 = this._table;
      case 1:
        state0 = 0;
        oldEntry = $.$index$asx(t1, offset);
        if (oldEntry == null)
          this._entryCount = this._entryCount + 1;
        else if (oldEntry === $.C__DeadEntry)
          this._deletedCount = this._deletedCount - 1;
        else
          return offset;
        if (key == null)
          key = $.C__NullKey;
        t1 = this._table;
      case 2:
        var oldEntry;
        state0 = 0;
        $.$indexSet$ax(t1, offset, key);
        this._modificationCount = this._modificationCount + 1 & 1073741823;
        return offset;
    }
  },
  _HashTable$1: function(initialCapacity, K) {
    this._table = this._createTable$1(initialCapacity);
  }
};

$$._LinkedHashMapTable = {"": "_LinkedHashTable;_table,_capacity,_entryCount,_deletedCount,_modificationCount,_container",
  get$_entrySize: function() {
    return 4;
  },
  _value$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._value$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior())
      return this._value$1$bailout(2, offset, t1);
    t3 = offset + 3;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _value$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, 3));
    }
  },
  _setValue$2: function(offset, value) {
    $.$indexSet$ax(this._table, $.$add$ns(offset, 3), value);
  },
  _copyEntry$3: function(oldTable, fromOffset, toOffset) {
    var t1, t3, t4;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !$.getInterceptor(oldTable).$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof fromOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    if (typeof toOffset !== "number")
      return this._copyEntry$3$bailout1(1, oldTable, fromOffset, toOffset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior())
      return this._copyEntry$3$bailout1(2, oldTable, fromOffset, toOffset, t1);
    t3 = toOffset + 3;
    t4 = fromOffset + 3;
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= oldTable.length)
      throw $.ioore(t4);
    t4 = oldTable[t4];
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    t1[t3] = t4;
  },
  _copyEntry$3$bailout1: function(state0, oldTable, fromOffset, toOffset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        $.$indexSet$ax(t1, $.$add$ns(toOffset, 3), $.$index$asx(oldTable, $.$add$ns(fromOffset, 3)));
    }
  },
  $as_LinkedHashTable: function (K, V) { return [K]; }
};

$$.LinkedHashMap = {"": "Object;_hashTable<",
  containsKey$1: function(key) {
    var t1 = this._hashTable._get$1(key);
    if (typeof t1 !== "number")
      return this.containsKey$1$bailout(1, t1);
    return t1 >= 0;
  },
  containsKey$1$bailout: function(state0, t1) {
    return $.$ge$n(t1, 0);
  },
  addAll$1: function(_, other) {
    $.forEach$1$ax(other, new $.LinkedHashMap_addAll_anon(this));
  },
  $index: function(_, key) {
    var t1, offset;
    t1 = this._hashTable;
    offset = t1._get$1(key);
    if (typeof offset !== "number")
      return this.$$index$bailout(1, t1, offset);
    if (offset >= 0)
      return t1._value$1(offset);
    return;
  },
  $$index$bailout: function(state0, t1, offset) {
    if ($.$ge$n(offset, 0))
      return t1._value$1(offset);
    return;
  },
  $indexSet: function(_, key, value) {
    var t1 = this._hashTable;
    t1._setValue$2(t1._put$1(key), value);
    t1._checkCapacity$0();
  },
  forEach$1: function(_, action) {
    var t1, modificationCount, offset;
    t1 = this._hashTable;
    modificationCount = t1._modificationCount;
    offset = t1._next$1(0);
    if (typeof offset !== "number")
      return this.forEach$1$bailout(1, action, t1, modificationCount, offset);
    for (; !$.$eq(offset, 0); offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  forEach$1$bailout: function(state0, action, t1, modificationCount, offset) {
    for (; $.$eq(offset, 0) !== true; offset = t1._next$1(offset)) {
      action.call$2(t1._key$1(offset), t1._value$1(offset));
      t1._checkModification$1(modificationCount);
    }
  },
  get$keys: function() {
    return $._LinkedHashTableKeyIterable$(this._hashTable, $.getRuntimeTypeArgument(this, this["$asLinkedHashMap"], 0));
  },
  get$values: function(_) {
    return $._LinkedHashTableValueIterable$(this._hashTable, 3, $.getRuntimeTypeArgument(this, this["$asLinkedHashMap"], 1));
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  get$isEmpty: function(_) {
    return this._hashTable.get$_elementCount() === 0;
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitMap(this, result, $.List_List($, null));
    return result.toString$0(result);
  },
  LinkedHashMap$0: function(K, V) {
    this._hashTable._container = this;
  },
  $isMap: true
};

$$.LinkedHashMap_addAll_anon = {"": "Closure;this_0",
  call$2: function(key, value) {
    var t1, offset;
    t1 = this.this_0;
    offset = t1.get$_hashTable()._put$1(key);
    t1.get$_hashTable()._setValue$2(offset, value);
    t1.get$_hashTable()._checkCapacity$0();
  },
  $isFunction: true
};

$$._LinkedHashTableHeadMarker = {"": "Object;"};

$$._LinkedHashTable = {"": "_HashTable;",
  get$_entrySize: function() {
    return 3;
  },
  _createTable$1: function(capacity) {
    var result, t1;
    result = $.List_List($.$mul$n(capacity, this.get$_entrySize()), null);
    t1 = result.length;
    if (0 >= t1)
      throw $.ioore(0);
    result[0] = $.C__LinkedHashTableHeadMarker;
    if (1 >= t1)
      throw $.ioore(1);
    result[1] = 0;
    if (2 >= t1)
      throw $.ioore(2);
    result[2] = 0;
    return result;
  },
  _next$1: function(offset) {
    var t1, t3;
    if (typeof offset !== "number")
      return this._next$1$bailout(1, offset);
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior())
      return this._next$1$bailout(2, offset, t1);
    t3 = offset + 1;
    if (t3 !== (t3 | 0))
      throw $.iae(t3);
    if (t3 < 0 || t3 >= t1.length)
      throw $.ioore(t3);
    return t1[t3];
  },
  _next$1$bailout: function(state0, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this._table;
      case 2:
        state0 = 0;
        return $.$index$asx(t1, $.$add$ns(offset, 1));
    }
  },
  _addAllEntries$1: function(oldTable) {
    var t1, offset, object, t2, nextOffset;
    if (typeof oldTable !== "object" || oldTable === null || (oldTable.constructor !== Array || !!oldTable.immutable$list) && !$.getInterceptor(oldTable).$isJavaScriptIndexingBehavior())
      return this._addAllEntries$1$bailout1(1, oldTable);
    t1 = oldTable.length;
    if (1 >= t1)
      throw $.ioore(1);
    offset = oldTable[1];
    if (typeof offset !== "number")
      return this._addAllEntries$1$bailout1(2, oldTable, offset, $.JSArray_methods);
    for (; !$.$eq(offset, 0); offset = nextOffset) {
      if (offset !== (offset | 0))
        throw $.iae(offset);
      if (offset < 0 || offset >= t1)
        throw $.ioore(offset);
      object = oldTable[offset];
      t2 = offset + 1;
      if (t2 >= t1)
        throw $.ioore(t2);
      nextOffset = oldTable[t2];
      this._copyEntry$3(oldTable, offset, this._put$1(object));
    }
  },
  _addAllEntries$1$bailout1: function(state0, oldTable, offset, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$asx(oldTable);
        offset = t1.$index(oldTable, 1);
      case 2:
        var t2, object, nextOffset;
        state0 = 0;
        for (; t2 = $.getInterceptor(offset), t2.$eq(offset, 0) !== true; offset = nextOffset) {
          object = t1.$index(oldTable, offset);
          nextOffset = t1.$index(oldTable, t2.$add(offset, 1));
          this._copyEntry$3(oldTable, offset, this._put$1(object));
        }
    }
  },
  _put$1: function(key) {
    var offset, t2, oldEntry, t1, last, t4;
    offset = this._probeForAdd$2($.get$hashCode$(key), key);
    if (typeof offset !== "number")
      return this._put$1$bailout1(1, key, offset);
    t2 = this._table;
    if (typeof t2 !== "object" || t2 === null || (t2.constructor !== Array || !!t2.immutable$list) && !$.getInterceptor(t2).$isJavaScriptIndexingBehavior())
      return this._put$1$bailout1(2, key, offset, t2);
    if (offset !== (offset | 0))
      throw $.iae(offset);
    if (offset < 0 || offset >= t2.length)
      throw $.ioore(offset);
    oldEntry = t2[offset];
    if (oldEntry === $.C__DeadEntry)
      this._deletedCount = this._deletedCount - 1;
    else if (oldEntry == null)
      this._entryCount = this._entryCount + 1;
    else
      return offset;
    this._modificationCount = this._modificationCount + 1 & 1073741823;
    if (key == null)
      key = $.C__NullKey;
    t1 = this._table;
    if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior())
      return this._put$1$bailout1(3, key, offset, 0, t1);
    if (offset >= t1.length)
      throw $.ioore(offset);
    t1[offset] = key;
    if (2 >= t1.length)
      throw $.ioore(2);
    last = t1[2];
    if (typeof last !== "number")
      return this._put$1$bailout1(5, 0, offset, 0, 0, last);
    t4 = offset + 1;
    if (t4 >= t1.length)
      throw $.ioore(t4);
    t1[t4] = 0;
    t4 = offset + 2;
    if (t4 >= t1.length)
      throw $.ioore(t4);
    t1[t4] = last;
    t4 = last + 1;
    if (t4 !== (t4 | 0))
      throw $.iae(t4);
    if (t4 < 0 || t4 >= t1.length)
      throw $.ioore(t4);
    t1[t4] = offset;
    if (2 >= t1.length)
      throw $.ioore(2);
    t1[2] = offset;
    return offset;
  },
  _put$1$bailout1: function(state0, key, offset, t2, t1, last, t4, t6) {
    switch (state0) {
      case 0:
        offset = this._probeForAdd$2($.get$hashCode$(key), key);
      case 1:
        state0 = 0;
        t2 = this._table;
      case 2:
        state0 = 0;
        oldEntry = $.$index$asx(t2, offset);
        if (oldEntry === $.C__DeadEntry)
          this._deletedCount = this._deletedCount - 1;
        else if (oldEntry == null)
          this._entryCount = this._entryCount + 1;
        else
          return offset;
        this._modificationCount = this._modificationCount + 1 & 1073741823;
        if (key == null)
          key = $.C__NullKey;
        t1 = this._table;
      case 3:
        state0 = 0;
        $.$indexSet$ax(t1, offset, key);
        t1 = this._table;
      case 4:
        state0 = 0;
        last = $.$index$asx(t1, 2);
      case 5:
        state0 = 0;
        t4 = this._table;
      case 6:
        state0 = 0;
        t6 = $.getInterceptor$ns(offset);
        $.$indexSet$ax(t4, t6.$add(offset, 1), 0);
        t4 = this._table;
      case 7:
        state0 = 0;
        $.$indexSet$ax(t4, t6.$add(offset, 2), last);
        t6 = this._table;
      case 8:
        state0 = 0;
        $.$indexSet$ax(t6, $.$add$ns(last, 1), offset);
        t6 = this._table;
      case 9:
        var oldEntry;
        state0 = 0;
        $.$indexSet$ax(t6, 2, offset);
        return offset;
    }
  },
  $as_HashTable: null
};

$$._LinkedHashTableKeyIterable = {"": "Iterable;_table",
  get$iterator: function(_) {
    return $._LinkedHashTableKeyIterator$(this._table, $.getRuntimeTypeArgument(this, this["$as_LinkedHashTableKeyIterable"], 0));
  },
  contains$1: function(_, value) {
    return $.$ge$n(this._table._get$1(value), 0);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$length: function(_) {
    return this._table.get$_elementCount();
  },
  $asIterable: function() {
    return null;
  }
};

$$._LinkedHashTableKeyIterator = {"": "_LinkedHashTableIterator;_hashTable,_modificationCount,_offset,_liblib1$_current",
  _getCurrent$1: function(offset) {
    return this._hashTable._key$1(offset);
  },
  $as_LinkedHashTableIterator: null
};

$$._LinkedHashTableValueIterable = {"": "Iterable;_hashTable<,_valueIndex",
  get$iterator: function(_) {
    return $._LinkedHashTableValueIterator$(this._hashTable, this._valueIndex, $.getRuntimeTypeArgument(this, this["$as_LinkedHashTableValueIterable"], 0));
  },
  get$length: function(_) {
    return this._hashTable.get$_elementCount();
  },
  $asIterable: function() {
    return null;
  }
};

$$._LinkedHashTableValueIterator = {"": "_LinkedHashTableIterator;_valueIndex,_hashTable,_modificationCount,_offset,_liblib1$_current",
  _getCurrent$1: function(offset) {
    return $.$index$asx(this._hashTable._table, $.$add$ns(offset, this._valueIndex));
  },
  $as_LinkedHashTableIterator: null
};

$$._LinkedHashTableIterator = {"": "Object;_hashTable<",
  moveNext$0: function() {
    var t1 = this._hashTable;
    t1._checkModification$1(this._modificationCount);
    if ($.$eq(this._offset, 0) === true) {
      this._liblib1$_current = null;
      return false;
    }
    this._liblib1$_current = this._getCurrent$1(this._offset);
    this._offset = t1._next$1(this._offset);
    return true;
  },
  get$current: function() {
    return this._liblib1$_current;
  }
};

$$.ListQueue = {"": "Collection;_table,_head,_tail,_modificationCount",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this, null);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      this._checkModification$1(modificationCount);
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    var t1 = this._tail;
    if (typeof t1 !== "number")
      return this.get$length$bailout1(1, t1);
    return (t1 - this._head & this._table.length - 1) >>> 0;
  },
  get$length$bailout1: function(state0, t1) {
    return $.$and$n($.$sub$n(t1, this._head), this._table.length - 1);
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    if (index < 0 || index > this.get$length(this))
      throw $.$$throw($.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = t1.length;
    t3 = (this._head + index & t2 - 1) >>> 0;
    if (t3 < 0 || t3 >= t2)
      throw $.ioore(t3);
    return t1[t3];
  },
  toList$1$growable: function(_, growable) {
    var list;
    if (growable) {
      list = $.List_List($, $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
      $.JSArray_methods.set$length(list, this.get$length(this));
    } else {
      list = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  addAll$1: function(_, elements) {
    var addCount, $length, t1, t2, t3, endSpace, preSpace;
    if (typeof elements === "object" && elements !== null && (elements.constructor === Array || $.getInterceptor(elements).$isList())) {
      addCount = $.get$length$asx(elements);
      $length = this.get$length(this);
      if (typeof addCount !== "number")
        throw $.iae(addCount);
      t1 = $length + addCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3) {
        this._preGrow$1(t1);
        $.JSArray_methods.setRange$4(this._table, $length, addCount, elements, 0);
        this._tail = $.$add$ns(this._tail, addCount);
      } else {
        t1 = this._tail;
        if (typeof t1 !== "number")
          throw $.iae(t1);
        endSpace = t3 - t1;
        if (addCount < endSpace) {
          $.JSArray_methods.setRange$4(t2, t1, addCount, elements, 0);
          this._tail = $.$add$ns(this._tail, addCount);
        } else {
          preSpace = addCount - endSpace;
          $.JSArray_methods.setRange$4(t2, t1, endSpace, elements, 0);
          $.JSArray_methods.setRange$4(this._table, 0, preSpace, elements, endSpace);
          this._tail = preSpace;
        }
      }
      this._modificationCount = this._modificationCount + 1;
    } else
      for (t1 = $.get$iterator$ax(elements); t1.moveNext$0();)
        this._add$1(t1.get$current());
  },
  remove$1: function(_, object) {
    var i, t1;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      if ($.$eq(t1[i], object) === true) {
        this._liblib1$_remove$1(i);
        return;
      }
    }
    this._modificationCount = this._modificationCount + 1;
  },
  removeAll$1: function(_, objectsToRemove) {
    this.removeWhere$1(this, $.get$contains$asx($.JSArray_methods.toSet$0(objectsToRemove)));
  },
  _filterWhere$2: function(test, removeMatching) {
    var index, modificationCount, i, t1, remove;
    index = this._head;
    modificationCount = this._modificationCount;
    for (i = index; !$.$eq(i, this._tail);) {
      t1 = this._table;
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      remove = $.$eq(test.call$1(t1[i]), removeMatching);
      this._checkModification$1(modificationCount);
      if (remove === true) {
        i = this._liblib1$_remove$1(i);
        modificationCount = this._modificationCount + 1;
        this._modificationCount = modificationCount;
      } else
        i = (i + 1 & this._table.length - 1) >>> 0;
    }
  },
  removeWhere$1: function(_, test) {
    this._filterWhere$2(test, true);
  },
  retainWhere$1: function(_, test) {
    this._filterWhere$2(test, false);
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitCollection(this, result, $.List_List($, null));
    return result.toString$0(result);
  },
  addLast$1: function(element) {
    this._add$1(element);
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.$$throw($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._tail = $.$and$n($.$sub$n(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _checkModification$1: function(expectedModificationCount) {
    if (typeof expectedModificationCount !== "number")
      return this._checkModification$1$bailout(1, expectedModificationCount);
    if (expectedModificationCount !== this._modificationCount)
      throw $.$$throw($.ConcurrentModificationError$(this));
  },
  _checkModification$1$bailout: function(state0, expectedModificationCount) {
    if ($.$eq(expectedModificationCount, this._modificationCount) !== true)
      throw $.$$throw($.ConcurrentModificationError$(this));
  },
  _add$1: function(element) {
    var t1, t2;
    t1 = this._table;
    t2 = this._tail;
    if (t2 !== (t2 | 0))
      throw $.iae(t2);
    if (t2 < 0 || t2 >= t1.length)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = $.$and$n(t2 + 1, this._table.length - 1);
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _liblib1$_remove$1: function(offset) {
    var t1, t2, mask, t3, startDistance, t4, i, prevOffset, nextOffset;
    t1 = this._table;
    t2 = t1.length;
    mask = t2 - 1;
    t3 = this._head;
    startDistance = (offset - t3 & mask) >>> 0;
    t4 = this._tail;
    if (typeof t4 !== "number")
      return this._liblib1$_remove$1$bailout(1, offset, mask, startDistance, t4);
    if (startDistance < (t4 - offset & mask) >>> 0) {
      for (i = offset; i !== t3; i = prevOffset) {
        prevOffset = (i - 1 & mask) >>> 0;
        if (prevOffset < 0 || prevOffset >= t2)
          throw $.ioore(prevOffset);
        t4 = t1[prevOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t4;
      }
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      this._head = (t3 + 1 & mask) >>> 0;
      return (offset + 1 & mask) >>> 0;
    } else {
      this._tail = (t4 - 1 & mask) >>> 0;
      for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, i !== t3; i = nextOffset) {
        nextOffset = (i + 1 & mask) >>> 0;
        if (nextOffset < 0 || nextOffset >= t2)
          throw $.ioore(nextOffset);
        t3 = t1[nextOffset];
        if (i < 0 || i >= t2)
          throw $.ioore(i);
        t1[i] = t3;
      }
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t2)
        throw $.ioore(t3);
      t1[t3] = null;
      return offset;
    }
  },
  _liblib1$_remove$1$bailout: function(state0, offset, mask, startDistance, t1) {
    switch (state0) {
      case 0:
        mask = this._table.length - 1;
        startDistance = (offset - this._head & mask) >>> 0;
        t1 = this._tail;
      case 1:
        state0 = 0;
      case 2:
        var t2, i, t3, prevOffset, nextOffset;
        if (state0 === 0 && startDistance < $.$and$n($.$sub$n(t1, offset), mask)) {
          for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._head, i !== t3; i = prevOffset) {
            prevOffset = (i - 1 & mask) >>> 0;
            if (prevOffset < 0 || prevOffset >= t2)
              throw $.ioore(prevOffset);
            t3 = t1[prevOffset];
            if (i < 0 || i >= t2)
              throw $.ioore(i);
            t1[i] = t3;
          }
          if (t3 < 0 || t3 >= t2)
            throw $.ioore(t3);
          t1[t3] = null;
          this._head = (t3 + 1 & mask) >>> 0;
          return (offset + 1 & mask) >>> 0;
        } else
          switch (state0) {
            case 0:
              t1 = this._tail;
            case 2:
              state0 = 0;
              this._tail = $.$and$n($.$sub$n(t1, 1), mask);
              for (t1 = this._table, t2 = t1.length, i = offset; t3 = this._tail, i !== t3; i = nextOffset) {
                nextOffset = (i + 1 & mask) >>> 0;
                if (nextOffset < 0 || nextOffset >= t2)
                  throw $.ioore(nextOffset);
                t3 = t1[nextOffset];
                if (i < 0 || i >= t2)
                  throw $.ioore(i);
                t1[i] = t3;
              }
              if (t3 !== (t3 | 0))
                throw $.iae(t3);
              if (t3 < 0 || t3 >= t2)
                throw $.ioore(t3);
              t1[t3] = null;
              return offset;
          }
    }
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    $.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
    $.JSArray_methods.setRange$4(newTable, split, this._head, this._table, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, $length, firstPartSize;
    t1 = $.JSInt_methods.$le(this._head, this._tail);
    t2 = this._head;
    if (t1) {
      $length = $.$sub$n(this._tail, t2);
      $.JSArray_methods.setRange$4(target, 0, $length, this._table, this._head);
      return $length;
    } else {
      t1 = this._table;
      firstPartSize = t1.length - t2;
      $.JSArray_methods.setRange$4(target, 0, firstPartSize, t1, t2);
      $.JSArray_methods.setRange$4(target, firstPartSize, this._tail, this._table, 0);
      return $.$add$ns(this._tail, firstPartSize);
    }
  },
  _preGrow$1: function(newElementCount) {
    var newTable = $.List_List($.ListQueue__nextPowerOf2(newElementCount), $.getRuntimeTypeArgument(this, this["$asListQueue"], 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this["$asListQueue"], 0)]);
    this._tail = this._writeToList$1(newTable);
    this._table = newTable;
    this._head = 0;
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if (!$.ListQueue__isPowerOf2(initialCapacity))
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this._table = t1;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$._ListQueueIterator = {"": "Object;_queue,_end,_modificationCount,_liblib1$_position,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    t1._checkModification$1(this._modificationCount);
    t2 = this._liblib1$_position;
    if (t2 === this._end) {
      this._liblib1$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib1$_current = t3[t2];
    this._liblib1$_position = (this._liblib1$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
};

$$.Collection = {"": "Iterable;",
  addAll$1: function(_, elements) {
    var t1;
    for (t1 = $.get$iterator$ax(elements); t1.moveNext$0();)
      this.add$1(this, t1.get$current());
  },
  removeAll$1: function(_, elements) {
    var t1;
    for (t1 = $.JSArray_methods.get$iterator(elements); t1.moveNext$0();)
      this.remove$1(this, t1.get$current());
  },
  retainWhere$1: function(_, test) {
    var elementsToRemove, t1, t2;
    elementsToRemove = [];
    for (t1 = this.get$iterator(this); t1.moveNext$0();) {
      t2 = t1.get$current();
      if (test.call$1(t2) !== true)
        elementsToRemove.push(t2);
    }
    this.removeAll$1(this, elementsToRemove);
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $asIterable: function() {
    return null;
  }
};

$$.DateTime = {"": "Object;millisecondsSinceEpoch<,isUtc",
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!$.getInterceptor(other).$isDateTime))
      return false;
    return $.$eq(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch) === true && $.$eq(this.isUtc, other.isUtc) === true;
  },
  $lt: function(_, other) {
    return $.$lt$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  $le: function(_, other) {
    return $.$le$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  $gt: function(_, other) {
    return $.$gt$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  $ge: function(_, other) {
    return $.$ge$n(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  compareTo$1: function(_, other) {
    return $.compareTo$1$ns(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
  },
  get$hashCode: function(_) {
    return this.millisecondsSinceEpoch;
  },
  toString$0: function(_) {
    var t1, t2, t3, y, m, d, h, min, sec, ms;
    t1 = new $.DateTime_toString_fourDigits();
    t2 = new $.DateTime_toString_threeDigits();
    t3 = new $.DateTime_toString_twoDigits();
    y = t1.call$1(this.get$year());
    m = t3.call$1(this.get$month());
    d = t3.call$1(this.get$day());
    h = t3.call$1(this.get$hour());
    min = t3.call$1(this.get$minute());
    sec = t3.call$1(this.get$second());
    ms = t2.call$1(this.get$millisecond());
    if (this.isUtc === true)
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms) + "Z";
    else
      return $.S(y) + "-" + $.S(m) + "-" + $.S(d) + " " + $.S(h) + ":" + $.S(min) + ":" + $.S(sec) + "." + $.S(ms);
  },
  add$1: function(_, duration) {
    return $.DateTime$fromMillisecondsSinceEpoch($.$add$ns(this.millisecondsSinceEpoch, duration.get$inMilliseconds()), this.isUtc);
  },
  difference$1: function(other) {
    return $.Duration$(0, 0, 0, $.$sub$n(this.millisecondsSinceEpoch, other.millisecondsSinceEpoch), 0, 0);
  },
  get$year: function() {
    return $.Primitives_getYear(this);
  },
  get$month: function() {
    return $.Primitives_getMonth(this);
  },
  get$day: function() {
    return $.Primitives_getDay(this);
  },
  get$hour: function() {
    return $.Primitives_getHours(this);
  },
  get$minute: function() {
    return $.Primitives_getMinutes(this);
  },
  get$second: function() {
    return $.Primitives_getSeconds(this);
  },
  get$millisecond: function() {
    return $.Primitives_getMilliseconds(this);
  },
  DateTime$_now$0: function() {
    $.Primitives_lazyAsJsDate(this);
  },
  DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
    if ($.abs$0$n(millisecondsSinceEpoch) > 8640000000000000)
      throw $.$$throw($.ArgumentError$(millisecondsSinceEpoch));
    if (isUtc == null)
      throw $.$$throw($.ArgumentError$(isUtc));
  },
  $isDateTime: true
};

$$.DateTime_toString_fourDigits = {"": "Closure;",
  call$1: function(n) {
    var t1, absN, sign;
    t1 = $.getInterceptor$n(n);
    absN = t1.abs$0(n);
    sign = t1.$lt(n, 0) === true ? "-" : "";
    if (absN >= 1000)
      return $.S(n);
    if (absN >= 100)
      return sign + "0" + $.S(absN);
    if (absN >= 10)
      return sign + "00" + $.S(absN);
    return sign + "000" + $.S(absN);
  },
  $isFunction: true
};

$$.DateTime_toString_threeDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100) === true)
      return $.S(n);
    if (t1.$ge(n, 10) === true)
      return "0" + $.S(n);
    return "00" + $.S(n);
  },
  $isFunction: true
};

$$.DateTime_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
};

$$.Duration = {"": "Object;_duration<",
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $mul: function(_, factor) {
    if (typeof factor !== "number")
      throw $.iae(factor);
    return $.Duration$(0, 0, this._duration * factor, 0, 0, 0);
  },
  $tdiv: function(_, quotient) {
    if (quotient === 0)
      throw $.$$throw($.IntegerDivisionByZeroException$());
    if (typeof quotient !== "number")
      throw $.iae(quotient);
    return $.Duration$(0, 0, $.JSNumber_methods.$tdiv(this._duration, quotient), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $le: function(_, other) {
    return this._duration <= other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  get$inHours: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (!(typeof other === "object" && other !== null && !!$.getInterceptor(other).$isDuration))
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSNumber_methods.get$hashCode(this._duration);
  },
  compareTo$1: function(_, other) {
    return $.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
  },
  toString$0: function(_) {
    var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_sixDigits();
    t2 = new $.Duration_toString_twoDigits();
    if (this.get$inMicroseconds() < 0)
      return "-" + $.S($.Duration$(0, 0, -this.get$inMicroseconds(), 0, 0, 0));
    twoDigitMinutes = t2.call$1($.JSNumber_methods.remainder$1(this.get$inMinutes(), 60));
    twoDigitSeconds = t2.call$1($.JSNumber_methods.remainder$1(this.get$inSeconds(), 60));
    sixDigitUs = t1.call$1($.JSNumber_methods.remainder$1(this.get$inMicroseconds(), 1000000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.Duration_toString_sixDigits = {"": "Closure;",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000) === true)
      return $.S(n);
    if (t1.$ge(n, 10000) === true)
      return "0" + $.S(n);
    if (t1.$ge(n, 1000) === true)
      return "00" + $.S(n);
    if (t1.$ge(n, 100) === true)
      return "000" + $.S(n);
    if (t1.$gt(n, 10) === true)
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  },
  $isFunction: true
};

$$.Duration_toString_twoDigits = {"": "Closure;",
  call$1: function(n) {
    if ($.$ge$n(n, 10) === true)
      return $.S(n);
    return "0" + $.S(n);
  },
  $isFunction: true
};

$$.NullThrownError = {"": "Object;",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message>",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  },
  $isArgumentError: true
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function(_) {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    for (; $.$lt$n(t1.i_1, t2.length) === true; t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if ($.$gt$n(t1.i_1, 0) === true)
        t1.sb_0.write$1(", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      t3.write$1($.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nArguments: [" + $.S(t1.sb_0) + "]";
    else {
      t3 = t1.sb_0;
      actualParameters = t3.toString$0(t3);
      t1.sb_0 = $.StringBuffer$("");
      for (i = 0; $.JSNumber_methods.$lt(i, $.JSNull_methods.get$length(t2)); ++i) {
        if (i > 0)
          t1.sb_0.write$1(", ");
        t1.sb_0.write$1($.JSNull_methods.$index(t2, i));
      }
      t1 = t1.sb_0;
      formalParameters = t1.toString$0(t1);
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
    }
  }
};

$$.UnsupportedError = {"": "Object;message>",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  },
  $isUnsupportedError: true
};

$$.UnimplementedError = {"": "Object;message>",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  },
  $isUnsupportedError: true
};

$$.StateError = {"": "Object;message>",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message>",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message>",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object;message>",
  toString$0: function(_) {
    return "FormatException: " + $.S(this.message);
  },
  $isException: true
};

$$.IntegerDivisionByZeroException = {"": "Object;",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
};

$$.Iterable = {"": "Object;",
  map$1: function(_, f) {
    return $.MappedIterable$(this, f, $.getRuntimeTypeArgument(this, this["$asIterable"], 0), null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, $.getRuntimeTypeArgument(this, this["$asIterable"], 0));
  },
  expand$1: function(_, f) {
    return $.ExpandIterable$(this, f, $.getRuntimeTypeArgument(this, this["$asIterable"], 0), null);
  },
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      if ($.$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  fold$2: function(_, initialValue, combine) {
    var t1, value;
    for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
      value = combine.call$2(value, t1.get$current());
    return value;
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.getRuntimeTypeArgument(this, this["$asIterable"], 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0();)
      ++count;
    return count;
  },
  min$1: function(_, compare) {
    var it, min, current;
    if (compare == null)
      compare = $.Comparable_compare;
    it = this.get$iterator(this);
    if (!it.moveNext$0())
      return;
    min = it.get$current();
    for (; it.moveNext$0();) {
      current = it.get$current();
      if ($.$gt$n(compare.call$2(min, current), 0) === true)
        min = current;
    }
    return min;
  },
  min$0: function($receiver) {
    return this.min$1($receiver, null);
  },
  max$1: function(_, compare) {
    var it, max, current;
    if (compare == null)
      compare = $.Comparable_compare;
    it = this.get$iterator(this);
    if (!it.moveNext$0())
      return;
    max = it.get$current();
    for (; it.moveNext$0();) {
      current = it.get$current();
      if ($.$lt$n(compare.call$2(max, current), 0) === true)
        max = current;
    }
    return max;
  },
  max$0: function($receiver) {
    return this.max$1($receiver, null);
  },
  get$isEmpty: function(_) {
    return !this.get$iterator(this).moveNext$0();
  },
  get$last: function(_) {
    var it, result;
    it = this.get$iterator(this);
    if (!it.moveNext$0())
      throw $.$$throw($.StateError$("No elements"));
    do
      result = it.get$current();
    while (it.moveNext$0());
    return result;
  },
  elementAt$1: function(_, index) {
    var t1, remaining, t2;
    if (!(typeof index === "number" && Math.floor(index) === index) || index < 0)
      throw $.$$throw($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
      t2 = t1.get$current();
      if (remaining === 0)
        return t2;
      --remaining;
    }
    throw $.$$throw($.RangeError$value(index));
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  },
  get$runtimeType: function(_) {
    return $.TypeImpl$($.getRuntimeTypeString(this));
  }
};

$$.StringBuffer = {"": "Object;_contents",
  get$length: function(_) {
    return this._contents.length;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  write$1: function(obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    if (typeof separator !== "string")
      return this.writeAll$2$bailout(1, objects, separator);
    iterator = objects.get$iterator(objects);
    if (!iterator.moveNext$0())
      return;
    if (separator === "")
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (; iterator.moveNext$0();) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  writeAll$2$bailout: function(state0, objects, separator) {
    var iterator, str, t1;
    iterator = objects.get$iterator(objects);
    if (!iterator.moveNext$0())
      return;
    if ($.$eq(separator, "") === true)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0());
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (t1 = typeof separator === "string"; iterator.moveNext$0();) {
        str = t1 ? separator : $.S(separator);
        this._contents = this._contents + str;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  writeln$1: function(obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
    this._contents = this._contents + "\n";
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
};

$$._ChildrenElementList = {"": "Object;_element,_childElements",
  toList$1$growable: function(_, growable) {
    var t1, output, len, t2, i, t3;
    t1 = this._childElements;
    if (growable) {
      output = [];
      $.JSArray_methods.set$length(output, $.get$length$asx(t1));
    } else {
      output = $.List_List($.get$length$asx(t1), $.Element);
      $.setRuntimeTypeInfo(output, [$.Element]);
    }
    for (t1 = this._childElements, len = $.get$length$asx(t1), t2 = $.getInterceptor$asx(t1), i = 0; i < len; ++i) {
      t3 = t2.$index(t1, i);
      if (i >= output.length)
        throw $.ioore(i);
      output[i] = t3;
    }
    return output;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  contains$1: function(_, element) {
    return $.contains$1$asx(this._childElements, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = $.get$iterator$ax(this._childElements); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, null);
  },
  expand$1: function(_, f) {
    return $.ExpandIterable$(this, f, null, null);
  },
  get$isEmpty: function(_) {
    return this._element.firstElementChild == null;
  },
  elementAt$1: function(_, index) {
    return $.$index$asx(this._childElements, index);
  },
  get$length: function(_) {
    return $.get$length$asx(this._childElements);
  },
  $index: function(_, index) {
    return $.$index$asx(this._childElements, index);
  },
  $indexSet: function(_, index, value) {
    this._element.replaceChild(value, $.$index$asx(this._childElements, index));
  },
  add$1: function(_, value) {
    this._element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.toList$0(this));
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    if (typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy)
      iterable = $.List_List$from(iterable, true, null);
    for (t1 = $.get$iterator$ax(iterable), t2 = this._element; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  sort$1: function(_, compare) {
    throw $.$$throw($.UnsupportedError$("TODO(jacobr): should we impl?"));
  },
  remove$1: function(_, object) {
    var t1;
    if (typeof object === "object" && object !== null && $.getInterceptor(object).$isElement()) {
      t1 = this._element;
      if (object.parentNode === t1)
        t1.removeChild(object);
    }
  },
  removeAll$1: function(_, elements) {
    var t1;
    for (t1 = $.JSArray_methods.get$iterator(elements); t1.moveNext$0();)
      this.remove$1(this, t1.get$current());
  },
  retainWhere$1: function(_, test) {
    var elementsToRemove, t1, t2;
    elementsToRemove = [];
    for (t1 = this.get$iterator(this); t1.moveNext$0();) {
      t2 = t1.get$current();
      if (test.call$1(t2) !== true)
        elementsToRemove.push(t2);
    }
    this.removeAll$1(this, elementsToRemove);
  },
  sublist$2: function(_, start, end) {
    if (end == null)
      end = this.get$length(this);
    return $._FrozenElementList$_wrap($.Lists_getRange(this, start, end, []));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  clear$0: function(_) {
    this._element.textContent = "";
  },
  removeAt$1: function(_, index) {
    var result = $.$index$asx(this._childElements, index);
    this._element.removeChild(result);
    return result;
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._element.removeChild(result);
    return result;
  },
  get$last: function(_) {
    var result = this._element.lastElementChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$._FrozenElementList = {"": "Object;_nodeList",
  contains$1: function(_, element) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      if ($.$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, null);
  },
  expand$1: function(_, f) {
    return $.ExpandIterable$(this, f, null, null);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.Element);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  elementAt$1: function(_, index) {
    var t1 = this._nodeList;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior()))
      return this.elementAt$1$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  elementAt$1$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  get$isEmpty: function(_) {
    return $.get$isEmpty$asx(this._nodeList);
  },
  get$length: function(_) {
    return $.get$length$asx(this._nodeList);
  },
  $index: function(_, index) {
    var t1 = this._nodeList;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$iterator: function(_) {
    return $._FrozenElementListIterator$(this);
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  sort$1: function(_, compare) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  sublist$2: function(_, start, end) {
    return $._FrozenElementList$_wrap($.sublist$2$ax(this._nodeList, start, end));
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  indexOf$2: function(_, element, start) {
    return $.indexOf$2$asx(this._nodeList, element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  clear$0: function(_) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeAt$1: function(_, index) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  retainWhere$1: function(_, test) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$._FrozenElementListIterator = {"": "Object;_liblib$_list,_liblib$_index,_liblib$_current",
  moveNext$0: function() {
    var nextIndex, t1;
    nextIndex = $.$add$ns(this._liblib$_index, 1);
    t1 = this._liblib$_list;
    if ($.$lt$n(nextIndex, t1.get$length(t1)) === true) {
      this._liblib$_current = t1.$index(t1, nextIndex);
      this._liblib$_index = nextIndex;
      return true;
    }
    this._liblib$_index = t1.get$length(t1);
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$._ElementFactoryProvider__getColgroup_anon = {"": "Closure;",
  call$1: function(n) {
    return $.get$tagName$x(n) === "COLGROUP";
  },
  $isFunction: true
};

$$._ChildNodeListLazy = {"": "Object;_this",
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, len, i, t2;
    if (typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy) {
      t1 = this._this;
      if (iterable._this !== t1) {
        len = iterable.get$length(iterable);
        if (typeof len !== "number")
          return this.addAll$1$bailout(1, iterable, len, t1);
        i = 0;
        for (; i < len; ++i)
          t1.appendChild(iterable.$index(iterable, 0));
      }
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0();)
      t2.appendChild(t1.get$current());
  },
  addAll$1$bailout: function(state0, iterable, len, t1) {
    switch (state0) {
      case 0:
      case 1:
        var i, t2;
        if (state0 === 1 || state0 === 0 && typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy)
          switch (state0) {
            case 0:
              t1 = this._this;
            case 1:
              if (state0 === 1 || state0 === 0 && iterable._this !== t1)
                switch (state0) {
                  case 0:
                    len = iterable.get$length(iterable);
                  case 1:
                    state0 = 0;
                    i = 0;
                    for (; $.JSNumber_methods.$lt(i, len); ++i)
                      t1.appendChild(iterable.$index(iterable, 0));
                }
              return;
          }
        for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0();)
          t2.appendChild(t1.get$current());
    }
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._this.removeChild(result);
    return result;
  },
  removeAt$1: function(_, index) {
    var t1, result;
    t1 = this._this;
    result = $.$index$asx(t1.childNodes, index);
    if (result != null)
      t1.removeChild(result);
    return result;
  },
  remove$1: function(_, object) {
    var t1;
    if (!(typeof object === "object" && object !== null && $.getInterceptor(object).$isNode()))
      return;
    t1 = this._this;
    if (t1 !== object.parentNode)
      return;
    t1.removeChild(object);
  },
  removeAll$1: function(_, elements) {
    var t1;
    for (t1 = $.JSArray_methods.get$iterator(elements); t1.moveNext$0();)
      this.remove$1(this, t1.get$current());
  },
  retainWhere$1: function(_, test) {
    var elementsToRemove, t1, t2;
    elementsToRemove = [];
    for (t1 = this.get$iterator(this); t1.moveNext$0();) {
      t2 = t1.get$current();
      if (test.call$1(t2) !== true)
        elementsToRemove.push(t2);
    }
    this.removeAll$1(this, elementsToRemove);
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1 = this._this;
    t1.replaceChild(value, $.$index$asx(t1.childNodes, index));
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this._this.childNodes);
  },
  contains$1: function(_, element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(_, f) {
    return $.MappedListIterable$(this, f, null, null);
  },
  where$1: function(_, f) {
    return $.WhereIterable$(this, f, null);
  },
  expand$1: function(_, f) {
    return $.ExpandIterable$(this, f, null, null);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  elementAt$1: function(_, index) {
    var t1 = this._this.childNodes;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior()))
      return this.elementAt$1$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  elementAt$1$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  sort$1: function(_, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(_, element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length(this));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  sublist$2: function(_, start, end) {
    if (end == null)
      $.$eq(end, this.get$length(this));
    return $.Lists_getRange(this, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  get$length: function(_) {
    return $.get$length$asx(this._this.childNodes);
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  $is_ChildNodeListLazy: true,
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$._AttributeMap = {"": "Object;",
  forEach$1: function(_, f) {
    var t1, t2;
    for (t1 = $.JSArray_methods.get$iterator(this.get$keys()); t1.moveNext$0();) {
      t2 = t1.get$current();
      f.call$2(t2, this.$index(this, t2));
    }
  },
  get$keys: function() {
    var attributes, keys, t1, len, i;
    attributes = this._element.attributes;
    keys = $.List_List($, $.String);
    $.setRuntimeTypeInfo(keys, [$.String]);
    for (t1 = $.getInterceptor$asx(attributes), len = t1.get$length(attributes), i = 0; i < len; ++i)
      if (this._matches$1(t1.$index(attributes, i)))
        keys.push(t1.$index(attributes, i).localName);
    return keys;
  },
  get$values: function(_) {
    var attributes, values, t1, len, i;
    attributes = this._element.attributes;
    values = $.List_List($, $.String);
    $.setRuntimeTypeInfo(values, [$.String]);
    for (t1 = $.getInterceptor$asx(attributes), len = t1.get$length(attributes), i = 0; i < len; ++i)
      if (this._matches$1(t1.$index(attributes, i)))
        values.push($.get$value$x(t1.$index(attributes, i)));
    return values;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  $isMap: true,
  $asMap: function () { return [$.String, $.String]; }
};

$$._ElementAttributeMap = {"": "_AttributeMap;_element",
  containsKey$1: function(key) {
    return this._element.hasAttribute(key);
  },
  $index: function(_, key) {
    return this._element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._element.setAttribute(key, value);
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture, $.getRuntimeTypeArgument(this, this["$as_EventStream"], 0));
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  },
  $asStream: null
};

$$._EventStreamSubscription = {"": "StreamSubscription;_liblib$_pauseCount,_target,_eventType,_liblib$_onData,_useCapture",
  cancel$0: function() {
    if (this.get$_canceled())
      return;
    var t1 = this._liblib$_onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    this._target = null;
    this._liblib$_onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  onDone$1: function(handleDone) {
  },
  get$_paused: function() {
    return this._liblib$_pauseCount > 0;
  },
  _tryResume$0: function() {
    if (this._liblib$_onData != null && !this.get$_paused())
      $.$$dom_addEventListener$3$x(this._target, this._eventType, this._liblib$_onData, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture, T) {
    this._tryResume$0();
  },
  $asStreamSubscription: null
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture, null);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$._WrappedList = {"": "Object;_liblib$_list",
  get$iterator: function(_) {
    return $._WrappedIterator$($.get$iterator$ax(this._liblib$_list), null);
  },
  map$1: function(_, f) {
    return $.map$1$ax(this._liblib$_list, f);
  },
  where$1: function(_, f) {
    return $.where$1$ax(this._liblib$_list, f);
  },
  expand$1: function(_, f) {
    return $.expand$1$ax(this._liblib$_list, f);
  },
  contains$1: function(_, element) {
    return $.contains$1$asx(this._liblib$_list, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(_, f) {
    $.forEach$1$ax(this._liblib$_list, f);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this._liblib$_list, growable, null);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    return $.get$length$asx(this._liblib$_list);
  },
  get$isEmpty: function(_) {
    return $.get$isEmpty$asx(this._liblib$_list);
  },
  elementAt$1: function(_, index) {
    return $.elementAt$1$ax(this._liblib$_list, index);
  },
  add$1: function(_, element) {
    $.add$1$ax(this._liblib$_list, element);
  },
  addAll$1: function(_, elements) {
    $.addAll$1$ax(this._liblib$_list, elements);
  },
  retainWhere$1: function(_, test) {
    $.retainWhere$1$ax(this._liblib$_list, test);
  },
  clear$0: function(_) {
    $.clear$0$ax(this._liblib$_list);
  },
  $index: function(_, index) {
    return $.$index$asx(this._liblib$_list, index);
  },
  $indexSet: function(_, index, value) {
    $.$indexSet$ax(this._liblib$_list, index, value);
  },
  sort$1: function(_, compare) {
    $.sort$1$ax(this._liblib$_list, compare);
  },
  indexOf$2: function(_, element, start) {
    return $.indexOf$2$asx(this._liblib$_list, element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeAt$1: function(_, index) {
    return $.removeAt$1$ax(this._liblib$_list, index);
  },
  removeLast$0: function(_) {
    return $.removeLast$0$ax(this._liblib$_list);
  },
  sublist$2: function(_, start, end) {
    return $.sublist$2$ax(this._liblib$_list, start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return null;
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return null;
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return null;
  }
};

$$._WrappedIterator = {"": "Object;_liblib$_iterator",
  moveNext$0: function() {
    return this._liblib$_iterator.moveNext$0();
  },
  get$current: function() {
    return this._liblib$_iterator.get$current();
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window",
  get$top: function(_) {
    return $._DOMWindowCrossFrame__createSafe(this._window.top);
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_liblib$_length,_position,_liblib$_current",
  moveNext$0: function() {
    var nextPosition, t1;
    nextPosition = $.$add$ns(this._position, 1);
    t1 = this._liblib$_length;
    if ($.$lt$n(nextPosition, t1) === true) {
      this._liblib$_current = $.$index$asx(this._array, nextPosition);
      this._position = nextPosition;
      return true;
    }
    this._liblib$_current = null;
    this._position = t1;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": "Closure;values_1,copies_2",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_1;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_2.push(null);
    return $length;
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": "Closure;copies_3",
  call$1: function(i) {
    var t1 = this.copies_3;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": "Closure;copies_4",
  call$2: function(i, x) {
    var t1 = this.copies_4;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": "Closure;",
  call$0: function() {
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": "Closure;findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var t1, slot, t2, $length, copy, t3, i, element, elementCopy, copy0, j, t4;
    t1 = {};
    if (e == null)
      return e;
    if (typeof e === "boolean")
      return e;
    if (typeof e === "number")
      return e;
    if (typeof e === "string")
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isDateTime)
      throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isRegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (typeof e === "object" && e !== null && $.getInterceptor(e).$isFile())
      return e;
    if (typeof e === "object" && e !== null && $.getInterceptor(e).$isBlob())
      return e;
    if (typeof e === "object" && e !== null && $.getInterceptor(e).$isArrayBuffer())
      return e;
    if (typeof e === "object" && e !== null && $.getInterceptor(e).$isArrayBufferView())
      return e;
    if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isMap) {
      slot = this.findSlot_5.call$1(e);
      t1.copy_0 = this.readSlot_6.call$1(slot);
      t2 = t1.copy_0;
      if (t2 != null)
        return t2;
      t1.copy_0 = {};
      this.writeSlot_7.call$2(slot, t1.copy_0);
      e.forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
      return t1.copy_0;
    }
    if (typeof e === "object" && e !== null && (e.constructor === Array || $.getInterceptor(e).$isList())) {
      if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !$.getInterceptor(e).$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(1, e);
      $length = e.length;
      slot = this.findSlot_5.call$1(e);
      t2 = this.readSlot_6;
      copy = t2.call$1(slot);
      if (copy != null) {
        if (true === copy) {
          copy = new Array($length);
          this.writeSlot_7.call$2(slot, copy);
        }
        return copy;
      }
      t1 = e instanceof Array && !!!(e.immutable$list);
      t3 = this.writeSlot_7;
      if (t1) {
        t3.call$2(slot, true);
        for (i = 0; i < $length; ++i) {
          if (i >= e.length)
            throw $.ioore(i);
          element = e[i];
          elementCopy = this.call$1(element);
          if (elementCopy == null ? element != null : elementCopy !== element) {
            copy0 = t2.call$1(slot);
            if (true === copy0) {
              copy0 = new Array($length);
              t3.call$2(slot, copy0);
            }
            if (typeof copy0 !== "object" || copy0 === null || (copy0.constructor !== Array || !!copy0.immutable$list) && !$.getInterceptor(copy0).$isJavaScriptIndexingBehavior())
              return this.call$1$bailout(2, e, t3, elementCopy, $.JSArray_methods, copy0, $length, slot, t2, copy, i);
            for (t1 = e.length, t2 = copy0.length, j = 0; j < i; ++j) {
              if (j >= t1)
                throw $.ioore(j);
              t4 = e[j];
              if (j >= t2)
                throw $.ioore(j);
              copy0[j] = t4;
            }
            if (i >= t2)
              throw $.ioore(i);
            copy0[i] = elementCopy;
            ++i;
            copy = copy0;
            break;
          }
        }
        if (copy == null) {
          t3.call$2(slot, e);
          copy = e;
        }
      } else {
        copy = new Array($length);
        t3.call$2(slot, copy);
        i = 0;
      }
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !$.getInterceptor(copy).$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(3, e, 0, 0, $.JSArray_methods, 0, $length, 0, 0, copy, i);
      for (; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    throw $.$$throw($.UnimplementedError$("structured clone of other type"));
  },
  call$1$bailout: function(state0, e, t4, elementCopy, t2, copy0, $length, slot, t3, copy, i) {
    switch (state0) {
      case 0:
        t1 = {};
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isDateTime)
          throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isRegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (typeof e === "object" && e !== null && $.getInterceptor(e).$isFile())
          return e;
        if (typeof e === "object" && e !== null && $.getInterceptor(e).$isBlob())
          return e;
        if (typeof e === "object" && e !== null && $.getInterceptor(e).$isArrayBuffer())
          return e;
        if (typeof e === "object" && e !== null && $.getInterceptor(e).$isArrayBufferView())
          return e;
        if (typeof e === "object" && e !== null && !!$.getInterceptor(e).$isMap) {
          slot = this.findSlot_5.call$1(e);
          t1.copy_0 = this.readSlot_6.call$1(slot);
          t2 = t1.copy_0;
          if (t2 != null)
            return t2;
          t1.copy_0 = {};
          this.writeSlot_7.call$2(slot, t1.copy_0);
          e.forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(t1, this));
          return t1.copy_0;
        }
      default:
        var t1, element, j;
        if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === "object" && e !== null && (e.constructor === Array || $.getInterceptor(e).$isList()))
          switch (state0) {
            case 0:
            case 1:
              state0 = 0;
              t2 = $.getInterceptor$asx(e);
              $length = t2.get$length(e);
              slot = this.findSlot_5.call$1(e);
              t3 = this.readSlot_6;
              copy = t3.call$1(slot);
              if (copy != null) {
                if (true === copy) {
                  copy = new Array($length);
                  this.writeSlot_7.call$2(slot, copy);
                }
                return copy;
              }
              t1 = e instanceof Array && !!!(e.immutable$list);
              t4 = this.writeSlot_7;
            case 2:
              if (state0 === 2 || state0 === 0 && t1)
                switch (state0) {
                  case 0:
                    t4.call$2(slot, true);
                    i = 0;
                  case 2:
                    L0:
                      while (true)
                        switch (state0) {
                          case 0:
                            if (!$.JSNumber_methods.$lt(i, $length))
                              break L0;
                            element = t2.$index(e, i);
                            elementCopy = this.call$1(element);
                          case 2:
                            if (state0 === 2 || state0 === 0 && (elementCopy == null ? element != null : elementCopy !== element))
                              switch (state0) {
                                case 0:
                                  copy0 = t3.call$1(slot);
                                  if (true === copy0) {
                                    copy0 = new Array($length);
                                    t4.call$2(slot, copy0);
                                  }
                                case 2:
                                  state0 = 0;
                                  for (t1 = $.getInterceptor$ax(copy0), j = 0; j < i; ++j)
                                    t1.$indexSet(copy0, j, t2.$index(e, j));
                                  t1.$indexSet(copy0, i, elementCopy);
                                  ++i;
                                  copy = copy0;
                                  break L0;
                              }
                            ++i;
                        }
                    if (copy == null) {
                      t4.call$2(slot, e);
                      copy = e;
                    }
                }
              else {
                copy = new Array($length);
                t4.call$2(slot, copy);
                i = 0;
              }
            case 3:
              state0 = 0;
              for (t1 = $.getInterceptor$ax(copy); $.JSNumber_methods.$lt(i, $length); ++i)
                t1.$indexSet(copy, i, this.call$1(t2.$index(e, i)));
              return copy;
          }
        throw $.$$throw($.UnimplementedError$("structured clone of other type"));
    }
  },
  $isFunction: true
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": "Closure;box_0,walk_8",
  call$2: function(key, value) {
    this.box_0.copy_0[key] = this.walk_8.call$1(value);
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {"": "Closure;values_0,copies_1",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {"": "Closure;copies_2",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {"": "Closure;copies_3",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  },
  $isFunction: true
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {"": "Closure;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
  call$1: function(e) {
    var slot, copy, t1, t2, $length, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !$.getInterceptor(e).$isJavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    if (e instanceof Date)
      throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
    if (e instanceof RegExp)
      throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = $.makeLiteralMap([]);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
        t2 = t1.get$current();
        copy.$indexSet(copy, t2, this.call$1(e[t2]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      $length = e.length;
      if (this.mustCopy_4)
        copy = new Array($length);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !$.getInterceptor(copy).$isJavaScriptIndexingBehavior())
        return this.call$1$bailout(2, e, $length, copy, $.JSArray_methods, slot);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout: function(state0, e, $length, copy, t1, slot) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(e);
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.$$throw($.UnimplementedError$("structured clone of DateTime"));
        if (e instanceof RegExp)
          throw $.$$throw($.UnimplementedError$("structured clone of RegExp"));
        if (Object.getPrototypeOf(e) === Object.prototype) {
          slot = this.findSlot_5.call$1(e);
          copy = this.readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          copy = $.makeLiteralMap([]);
          this.writeSlot_7.call$2(slot, copy);
          for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
            t2 = t1.get$current();
            copy.$indexSet(copy, t2, this.call$1(e[t2]));
          }
          return copy;
        }
      case 2:
        var t2, i;
        if (state0 === 2 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (copy != null)
                return copy;
              $length = t1.get$length(e);
              copy = this.mustCopy_4 ? new Array($length) : e;
            case 2:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$ax(copy), i = 0; $.JSNumber_methods.$lt(i, $length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        return e;
    }
  },
  $isFunction: true
};

$$.FilteredElementList = {"": "Object;_node,_childNodes",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_anon()), true, $.Element);
  },
  forEach$1: function(_, f) {
    $.JSArray_methods.forEach$1(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  add$1: function(_, value) {
    var t1 = this._childNodes;
    t1.add$1(t1, value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes; t1.moveNext$0();)
      t2.add$1(t2, t1.get$current());
  },
  contains$1: function(_, element) {
    var t1;
    if (typeof element === "object" && element !== null && $.getInterceptor(element).$isElement()) {
      t1 = this._childNodes;
      t1 = t1.contains$1(t1, element);
    } else
      t1 = false;
    return t1;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  sort$1: function(_, compare) {
    throw $.$$throw($.UnsupportedError$("TODO(jacobr): should we impl?"));
  },
  clear$0: function(_) {
    var t1 = this._childNodes;
    t1.clear$0(t1);
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  map$1: function(_, f) {
    return $.JSArray_methods.map$1(this.get$_filtered(), f);
  },
  where$1: function(_, f) {
    return $.JSArray_methods.where$1(this.get$_filtered(), f);
  },
  expand$1: function(_, f) {
    return $.JSArray_methods.expand$1(this.get$_filtered(), f);
  },
  removeAt$1: function(_, index) {
    var t1, result;
    t1 = this.get$_filtered();
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    result = t1[index];
    $.remove$0$ax(result);
    return result;
  },
  remove$1: function(_, element) {
    var i, t1, indexElement;
    if (!(typeof element === "object" && element !== null && $.getInterceptor(element).$isElement()))
      return;
    for (i = 0; i < this.get$length(this); ++i) {
      t1 = this.get$_filtered();
      if (i >= t1.length)
        throw $.ioore(i);
      indexElement = t1[i];
      if (indexElement === element) {
        $.remove$0$ax(indexElement);
        return;
      }
    }
  },
  removeAll$1: function(_, elements) {
    var t1;
    for (t1 = $.JSArray_methods.get$iterator(elements); t1.moveNext$0();)
      this.remove$1(this, t1.get$current());
  },
  retainWhere$1: function(_, test) {
    var elementsToRemove, t1, t2;
    elementsToRemove = [];
    for (t1 = this.get$iterator(this); t1.moveNext$0();) {
      t2 = t1.get$current();
      if (test.call$1(t2) !== true)
        elementsToRemove.push(t2);
    }
    this.removeAll$1(this, elementsToRemove);
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.Element);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  elementAt$1: function(_, index) {
    var t1;
    if (index !== (index | 0))
      return this.elementAt$1$bailout(1, index);
    t1 = this.get$_filtered();
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  elementAt$1$bailout: function(state0, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$isEmpty: function(_) {
    return $.JSArray_methods.get$isEmpty(this.get$_filtered());
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.get$_filtered());
  },
  sublist$2: function(_, start, end) {
    return $.JSArray_methods.sublist$2(this.get$_filtered(), start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  indexOf$2: function(_, element, start) {
    return $.JSArray_methods.indexOf$2(this.get$_filtered(), element, start);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  get$last: function(_) {
    return $.JSArray_methods.get$last(this.get$_filtered());
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [null]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [null]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [null]; };
  }
};

$$.FilteredElementList__filtered_anon = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && $.getInterceptor(n).$isElement();
  },
  $isFunction: true
};

$$.getDelayedResult_anon = {"": "Closure;",
  call$1: function(value) {
    return $.getDelayedResult(value);
  },
  $isFunction: true
};

$$.Attachable = {"": "Object;"};

$$.AttachableObject = {"": "DisposableImpl;",
  disposeInternal$0: function() {
    $.DisposableImpl.prototype.disposeInternal$0.call(this);
    var t1 = this._eventHandlers;
    t1.forEach$1(t1, new $.AttachableObject_disposeInternal_anon());
    t1.clear$0(t1);
  },
  _getStream$1: function(property) {
    this.validateNotDisposed$0();
    return $.get$stream$x(this._eventHandlers.putIfAbsent$2(property, new $.AttachableObject__getStream_anon(this, property)));
  },
  _liblib5$_hasSubscribers$1: function(property) {
    var t1, handle;
    this.validateNotDisposed$0();
    t1 = this._eventHandlers;
    handle = t1.$index(t1, property);
    return handle != null && handle.get$hasSubscribers() === true;
  },
  _onSubscriptionChanged$1: function(property) {
    var t1, handle;
    if (!this.get$isDisposed()) {
      t1 = this._eventHandlers;
      handle = t1.$index(t1, property);
      if (handle.get$hasSubscribers() !== true) {
        handle.dispose$0();
        t1.remove$1(t1, property);
      }
    }
  },
  _fireEvent$2: function(attachable, args) {
    var t1, handle;
    this.validateNotDisposed$0();
    t1 = this._eventHandlers;
    handle = t1.$index(t1, attachable);
    if (handle != null)
      $.add$1$ax(handle, args);
  },
  _liblib5$_set$2: function(key, value) {
    var t1;
    this.validateNotDisposed$0();
    t1 = this._propertyValues;
    t1.$indexSet(t1, key, value);
    this._fireChange$3(key, value, false);
  },
  _isSet$1: function(key) {
    this.validateNotDisposed$0();
    return this._propertyValues.containsKey$1(key);
  },
  _remove$1: function(key) {
    var t1;
    this.validateNotDisposed$0();
    this.validateNotDisposed$0();
    t1 = this._propertyValues;
    if (t1.containsKey$1(key) === true) {
      t1.remove$1(t1, key);
      this._fireChange$3(key, null, true);
    }
  },
  _getValueOrUndefined$3: function(key, obj, ifAbsent) {
    var t1, value;
    this.validateNotDisposed$0();
    this.validateNotDisposed$0();
    t1 = this._propertyValues;
    if (t1.containsKey$1(key) === true)
      return t1.$index(t1, key);
    else if (ifAbsent != null) {
      value = ifAbsent.call$1(obj);
      this.validateNotDisposed$0();
      t1.$indexSet(t1, key, value);
      this._fireChange$3(key, value, false);
      return value;
    } else
      return $.C__UndefinedValue;
  },
  _fireChange$3: function(key, value, isClear) {
    var t1, handle;
    this.validateNotDisposed$0();
    t1 = this._eventHandlers;
    handle = t1.$index(t1, key);
    t1 = $.getInterceptor(handle);
    if (handle != null)
      if (isClear)
        t1.add$1(handle, $.PropertyChangedEventArgs$valueCleared(key, null));
      else
        t1.add$1(handle, $.PropertyChangedEventArgs$(key, value, null));
  }
};

$$.AttachableObject_disposeInternal_anon = {"": "Closure;",
  call$2: function(a, e) {
    e.dispose$0();
  },
  $isFunction: true
};

$$.AttachableObject__getStream_anon = {"": "Closure;this_0,property_1",
  call$0: function() {
    return $.EventHandle$(new $.AttachableObject__getStream__anon(this.this_0, this.property_1), null);
  },
  $isFunction: true
};

$$.AttachableObject__getStream__anon = {"": "Closure;this_2,property_3",
  call$0: function() {
    return this.this_2._onSubscriptionChanged$1(this.property_3);
  },
  $isFunction: true
};

$$.AttachedEvent = {"": "Attachable;name",
  getStream$1: function(obj) {
    return obj._getStream$1(this);
  },
  hasSubscribers$1: function(obj) {
    return obj._liblib5$_hasSubscribers$1(this);
  },
  get$hasSubscribers: function() {
    return new $.BoundClosure$1(this, "hasSubscribers$1");
  },
  fireEvent$2: function(obj, args) {
    return obj._fireEvent$2(this, args);
  },
  $asAttachable: null
};

$$.Property = {"": "Attachable;defaultValue,name",
  get$2: function(obj, ifAbsent) {
    var coreValue = obj._getValueOrUndefined$3(this, obj, ifAbsent);
    if (coreValue !== $.C__UndefinedValue)
      return coreValue;
    else
      return this.defaultValue;
  },
  get$1: function(obj) {
    return this.get$2(obj, null);
  },
  getCore$2: function(obj, ifAbsent) {
    return obj._getValueOrUndefined$3(this, obj, ifAbsent);
  },
  getCore$1: function(obj) {
    return this.getCore$2(obj, null);
  },
  set$2: function(obj, value) {
    obj._liblib5$_set$2(this, value);
  },
  clear$1: function(_, obj) {
    return obj._remove$1(this);
  },
  isSet$1: function(obj) {
    return obj._isSet$1(this);
  },
  getStream$1: function(obj) {
    return obj._getStream$1(this);
  },
  toString$0: function(_) {
    return "Property '" + this.name + "'";
  },
  $asAttachable: null
};

$$._UndefinedValue = {"": "Object;"};

$$.PropertyChangedEventArgs = {"": "EventArgs;property,newValue,cleared", $asEventArgs: null};

$$.Array2d = {"": "Sequence;width>,height>,_liblib5$_source<",
  get$length: function(_) {
    return $.get$length$asx(this._liblib5$_source);
  },
  $index: function(_, index) {
    var t1 = this._liblib5$_source;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout1(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout1: function(state0, index, t1) {
    return $.$index$asx(t1, index);
  },
  $indexSet: function(_, index, value) {
    $.$indexSet$ax(this._liblib5$_source, index, value);
  },
  get$rows: function(_) {
    return $._Array2dRows$(this, null);
  },
  get$2: function(x, y) {
    var i, t1;
    i = this._getIndex$2(x, y);
    t1 = this._liblib5$_source;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior()))
      return this.get$2$bailout(1, t1, i);
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  },
  get$2$bailout: function(state0, t1, i) {
    return $.$index$asx(t1, i);
  },
  set$3: function(x, y, value) {
    this.$indexSet(this, this._getIndex$2(x, y), value);
  },
  getAdjacent$2: function(x, y) {
    return $.List_List$from($.JSArray_methods.map$1(this.getAdjacentIndices$2(x, y), new $.Array2d_getAdjacent_anon(this)), true, $.getRuntimeTypeArgument(this, this["$asArray2d"], 0));
  },
  getAdjacentIndices$2: function(x, y) {
    var adj, k, t1, t2, t3, j, t4;
    adj = $.List_List($, $.$int);
    $.setRuntimeTypeInfo(adj, [$.$int]);
    for (k = $.max(0, y - 1), t1 = this.width, t2 = x + 2, t3 = x - 1; k < $.min(this.height, y + 2); ++k)
      for (j = $.max(0, t3), t4 = k !== y; j < $.min(t1, t2); ++j)
        if (j !== x || t4)
          adj.push(this._getIndex$2(j, k));
    return adj;
  },
  _getIndex$2: function(x, y) {
    var t1;
    if (typeof x !== "number")
      return this._getIndex$2$bailout(1, x, y);
    if (typeof y !== "number")
      return this._getIndex$2$bailout(1, x, y);
    t1 = this.width;
    if (t1 !== (t1 | 0))
      return this._getIndex$2$bailout(2, x, y, t1);
    return x + y * t1;
  },
  _getIndex$2$bailout: function(state0, x, y, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.width;
      case 2:
        state0 = 0;
        return $.$add$ns(x, $.$mul$n(y, t1));
    }
  },
  Array2d$_skinny$1: function(height, T) {
  },
  Array2d$wrap$2: function(width, source, T) {
    var t1, t2;
    $.requireArgumentNotNull(width, "width");
    $.requireArgumentNotNull(source, "source");
    t1 = $.getInterceptor$n(width);
    $.requireArgument(t1.$ge(width, 0), "width", "width must be non-zero");
    t2 = this._liblib5$_source;
    if (t1.$mul(width, this.height) === 0)
      $.requireArgument($.$eq($.get$length$asx(t2), 0), "width", "width must be greater than zero if the source is non-empty");
    else {
      t1 = $.getInterceptor$asx(t2);
      $.requireArgument($.$gt$n(t1.get$length(t2), 0), "source", "if width is non-zero, source must be non-empty");
      $.requireArgument($.$mod$n(t1.get$length(t2), width) === 0, "width", "width must evenly divide the source");
    }
  },
  $asSequence: null,
  $asEnumerable: null,
  $asIterable: function() {
    return null;
  }
};

$$.Array2d_getAdjacent_anon = {"": "Closure;this_0",
  call$1: function(i) {
    return $.$index$asx(this.this_0.get$_liblib5$_source(), i);
  },
  $isFunction: true
};

$$._Array2dRows = {"": "Sequence;source",
  get$length: function(_) {
    return this.source.height;
  },
  $index: function(_, index) {
    return $._Array2dRow$(this.source, index, $.getRuntimeTypeArgument(this, this["$as_Array2dRows"], 0));
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_Array2dRows && other.source === this.source;
  },
  $is_Array2dRows: true,
  $asSequence: function (T) { return [[$.Sequence, T]]; },
  $asEnumerable: function (T) { return [[$.Sequence, T]]; },
  $asIterable: function() {
    return function (T) { return [[$.Sequence, T]]; };
  }
};

$$._Array2dRow = {"": "Sequence;source,row",
  get$length: function(_) {
    return this.source.width;
  },
  $index: function(_, index) {
    return this.source.get$2(index, this.row);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_Array2dRow)
      t1 = other.source === this.source && $.$eq(other.row, this.row) === true;
    else
      t1 = false;
    return t1;
  },
  $is_Array2dRow: true,
  $asSequence: null,
  $asEnumerable: null,
  $asIterable: function() {
    return null;
  }
};

$$.CollectionUtil_count_anon = {"": "Closure;test_0",
  call$2: function(previous, element) {
    if (this.test_0.call$1(element) === true)
      return $.$add$ns(previous, 1);
    else
      return previous;
  },
  $isFunction: true
};

$$.CollectionUtil_exclude_anon = {"": "Closure;itemsToExclude_0",
  call$1: function(e) {
    return !$.JSArray_methods.contains$1(this.itemsToExclude_0, e);
  },
  $isFunction: true
};

$$.CollectionUtil_distinct_anon = {"": "Closure;",
  call$2: function(a, b) {
    return $.$eq(a, b);
  },
  $isFunction: true
};

$$.CollectionUtil_distinct_anon0 = {"": "Closure;box_0",
  call$1: function(s) {
    return $._DistinctIterator$($.get$iterator$ax(s), this.box_0.comparer_0, null);
  },
  $isFunction: true
};

$$.CollectionUtil_toMap_anon = {"": "Closure;",
  call$1: function(a) {
    return a;
  },
  $isFunction: true
};

$$._DistinctIterator = {"": "Object;_liblib5$_source<,_comparer,_found,_liblib5$_current",
  _comparer$2: function(arg0, arg1) {
    return this._comparer.call$2(arg0, arg1);
  },
  get$current: function() {
    return this._liblib5$_current;
  },
  moveNext$0: function() {
    var t1, t2, candidate;
    for (t1 = this._found, t2 = this._liblib5$_source; t2.moveNext$0();) {
      candidate = t2.get$current();
      if (!$.JSArray_methods.any$1(t1, new $._DistinctIterator_moveNext_anon(this, candidate))) {
        this._liblib5$_current = candidate;
        t1.push(this._liblib5$_current);
        return true;
      }
    }
    return false;
  }
};

$$._DistinctIterator_moveNext_anon = {"": "Closure;this_0,candidate_1",
  call$1: function(e) {
    return this.this_0._comparer$2(e, this.candidate_1);
  },
  $isFunction: true
};

$$._SequenceIterator = {"": "Object;_list,_liblib5$_length,_liblib5$_position,_liblib5$_current",
  moveNext$0: function() {
    var t1, t2, nextPosition;
    t1 = this._list;
    t2 = this._liblib5$_length;
    if ($.$eq(t1.get$length(t1), t2) !== true)
      throw $.$$throw($.ConcurrentModificationError$(t1));
    nextPosition = this._liblib5$_position + 1;
    if ($.JSInt_methods.$lt(nextPosition, t2)) {
      this._liblib5$_position = nextPosition;
      this._liblib5$_current = t1.$index(t1, nextPosition);
      return true;
    }
    this._liblib5$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib5$_current;
  }
};

$$.Enumerable = {"": "Iterable;",
  count$1: function(f) {
    return $.CollectionUtil_count(this, f);
  },
  map$1: function(_, f) {
    return $.$$($.Iterable.prototype.map$1.call(this, this, f));
  },
  where$1: function(_, f) {
    return $.$$($.Iterable.prototype.where$1.call(this, this, f));
  },
  exclude$1: function(items) {
    return $.CollectionUtil_exclude(this, items);
  },
  expand$1: function(_, f) {
    return $.$$($.Iterable.prototype.expand$1.call(this, this, f));
  },
  distinct$1: function(comparer) {
    return $.CollectionUtil_distinct(this, comparer);
  },
  distinct$0: function() {
    return this.distinct$1(null);
  },
  group$1: function(keyFunc) {
    return $.Grouping$(this, keyFunc, null, null);
  },
  group$0: function() {
    return this.group$1(null);
  },
  concat$1: function(_, source) {
    return $.expand$1$ax($.$$([this, source]), new $.Enumerable_concat_anon());
  },
  forEachWithIndex$1: function(f) {
    var t1, i, i0;
    for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
      i0 = i + 1;
      f.call$2(t1.get$current(), i);
    }
  },
  toMap$2: function(valueFunc, keyFunc) {
    return $.CollectionUtil_toMap(this, valueFunc, keyFunc);
  },
  toMap$1: function(valueFunc) {
    return this.toMap$2(valueFunc, null);
  },
  selectNumbers$1: function(f) {
    var t1 = $.$$($.Iterable.prototype.map$1.call(this, this, f));
    $.requireArgumentNotNull(t1, "source");
    return $._SimpleNumEnumerable$(t1, null);
  },
  toString$0: function(_) {
    var buffer = $.StringBuffer$("");
    buffer.writeAll$2(this, ", ");
    return "[" + buffer.toString$0(buffer) + "]";
  },
  $isEnumerable: true,
  $asIterable: function() {
    return null;
  }
};

$$.Enumerable_concat_anon = {"": "Closure;",
  call$1: function(e) {
    return e;
  },
  $isFunction: true
};

$$._SimpleEnumerable = {"": "Enumerable;_liblib5$_source<",
  get$iterator: function(_) {
    return $.get$iterator$ax(this._liblib5$_source);
  },
  $asEnumerable: null,
  $asIterable: function() {
    return null;
  }
};

$$._FuncEnumerable = {"": "Enumerable;_liblib5$_source<,_liblib5$_func",
  _liblib5$_func$1: function(arg0) {
    return this._liblib5$_func.call$1(arg0);
  },
  get$iterator: function(_) {
    return this._liblib5$_func$1(this._liblib5$_source);
  },
  $asEnumerable: function (TSource, TOutput) { return [TOutput]; },
  $asIterable: function() {
    return function (TSource, TOutput) { return [TOutput]; };
  }
};

$$.Grouping = {"": "Object;_values",
  containsKey$1: function(key) {
    return this._values.containsKey$1(key);
  },
  $index: function(_, key) {
    var t1 = this._values;
    return t1.$index(t1, key);
  },
  forEach$1: function(_, f) {
    var t1 = this._values;
    return t1.forEach$1(t1, f);
  },
  getValues$0: function() {
    var t1 = this._values;
    t1 = t1.get$values(t1);
    return t1.expand$1(t1, new $.Grouping_getValues_anon());
  },
  get$length: function(_) {
    var t1 = this._values;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._values;
    return t1.get$isEmpty(t1);
  },
  toString$0: function(_) {
    var t1 = this._values;
    return t1.toString$0(t1);
  },
  Grouping$2: function(source, keyFunc, K, V) {
    var t1, t2, t3;
    if (keyFunc == null)
      keyFunc = new $.anon2();
    for (t1 = source.get$iterator(source), t2 = this._values; t1.moveNext$0();) {
      t3 = t1.get$current();
      $.add$1$ax(t2.putIfAbsent$2(keyFunc.call$1(t3), new $.anon3(V)), t3);
    }
  }
};

$$.anon2 = {"": "Closure;",
  call$1: function(v) {
    return v;
  },
  $isFunction: true
};

$$.anon3 = {"": "Closure;V_0",
  call$0: function() {
    var t1, t2;
    t1 = this.V_0;
    t2 = $.List_List($, t1);
    $.setRuntimeTypeInfo(t2, [t1]);
    return t2;
  },
  $isFunction: true
};

$$.Grouping_getValues_anon = {"": "Closure;",
  call$1: function(a) {
    return a;
  },
  $isFunction: true
};

$$.NumberEnumerable = {"": "Iterable;",
  sum$0: function() {
    var t1, theSum, t2;
    for (t1 = this.get$iterator(this), theSum = 0; t1.moveNext$0();) {
      t2 = t1.get$current();
      if (t2 == null)
        throw $.$$throw($.InvalidOperationError_61T);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      theSum += t2;
    }
    return theSum;
  },
  average$0: function() {
    var t1, theCount, theSum, t2;
    for (t1 = this.get$iterator(this), theCount = 0, theSum = 0; t1.moveNext$0();) {
      t2 = t1.get$current();
      if (t2 == null)
        throw $.$$throw($.InvalidOperationError_61T);
      if (typeof t2 !== "number")
        throw $.iae(t2);
      theSum += t2;
      ++theCount;
    }
    return theSum / theCount;
  },
  $asIterable: function() {
    return null;
  }
};

$$._SimpleNumEnumerable = {"": "NumberEnumerable;_liblib5$_source<",
  get$iterator: function(_) {
    return $.get$iterator$ax(this._liblib5$_source);
  },
  $asNumberEnumerable: null,
  $asIterable: function() {
    return null;
  }
};

$$._RangeEnumerable = {"": "NumberEnumerable;_start,_count",
  get$iterator: function(_) {
    return $._RangeIterator$(this._start, this._count);
  },
  $asNumberEnumerable: function () { return [$.$int]; },
  $asIterable: function() {
    return function () { return [$.$int]; };
  }
};

$$._RangeIterator = {"": "Object;_start,_count,_liblib5$_current",
  moveNext$0: function() {
    if (this._liblib5$_current == null)
      this._liblib5$_current = this._start - 1;
    if ($.$lt$n(this._liblib5$_current, this._start + this._count - 1)) {
      this._liblib5$_current = $.$add$ns(this._liblib5$_current, 1);
      return true;
    } else
      return false;
  },
  get$current: function() {
    return this._liblib5$_current;
  }
};

$$.ReadOnlyCollection = {"": "Sequence;_items",
  get$length: function(_) {
    return this._items.length;
  },
  $index: function(_, index) {
    var t1 = this._items;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $asSequence: null,
  $asEnumerable: null,
  $asIterable: function() {
    return null;
  }
};

$$.Sequence = {"": "Enumerable;",
  indexOf$2: function(_, value, start) {
    var i, t1;
    if (typeof start !== "number")
      return this.indexOf$2$bailout(1, value, start);
    i = start;
    while (true) {
      t1 = this.get$length(this);
      if (typeof t1 !== "number")
        return this.indexOf$2$bailout(2, value, 0, i, t1);
      if (!(i < t1))
        break;
      if ($.$eq(this.$index(this, i), value) === true)
        return i;
      ++i;
    }
    return -1;
  },
  indexOf$2$bailout: function(state0, value, start, i, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        i = start;
      case 2:
        var t3;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.get$length(this);
              case 2:
                state0 = 0;
                t3 = $.getInterceptor$n(i);
                if (!(t3.$lt(i, t1) === true))
                  break L0;
                if ($.$eq(this.$index(this, i), value) === true)
                  return i;
                i = t3.$add(i, 1);
            }
        return -1;
    }
  },
  indexOf$1: function($receiver, value) {
    return this.indexOf$2($receiver, value, 0);
  },
  lastIndexOf$2: function(_, value, start) {
    var i;
    if (typeof start !== "number")
      return this.lastIndexOf$2$bailout(1, value, start);
    for (i = start; i >= 0; --i)
      if ($.$eq(this.$index(this, i), value) === true)
        return i;
    return -1;
  },
  lastIndexOf$2$bailout: function(state0, value, start, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
      case 2:
        var i;
        if (state0 === 2 || state0 === 0 && start == null)
          switch (state0) {
            case 0:
              t1 = this.get$length(this);
            case 2:
              state0 = 0;
              start = $.$sub$n(t1, 1);
          }
        for (i = start; t1 = $.getInterceptor$n(i), t1.$ge(i, 0) === true; i = t1.$sub(i, 1))
          if ($.$eq(this.$index(this, i), value) === true)
            return i;
        return -1;
    }
  },
  lastIndexOf$1: function($receiver, value) {
    return this.lastIndexOf$2($receiver, value, null);
  },
  elementAt$1: function(_, index) {
    return this.$index(this, index);
  },
  get$iterator: function(_) {
    return $._SequenceIterator$(this, null);
  },
  asList$0: function() {
    return $._SequenceList$(this, null);
  },
  $asEnumerable: null,
  $asIterable: function() {
    return null;
  }
};

$$._SequenceList = {"": "Sequence;_liblib5$_source<",
  $index: function(_, index) {
    var t1 = this._liblib5$_source;
    return t1.$index(t1, index);
  },
  get$length: function(_) {
    var t1 = this._liblib5$_source;
    return t1.get$length(t1);
  },
  sublist$2: function(_, start, end) {
    var t1, $length, result, i, t2;
    if (typeof start !== "number")
      return this.sublist$2$bailout(1, start, end);
    if (end == null)
      end = this.get$length(this);
    if (start < 0 || $.JSNumber_methods.$gt(start, this.get$length(this)))
      throw $.$$throw($.RangeError$range(start, 0, this.get$length(this)));
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) === true || t1.$gt(end, this.get$length(this)) === true)
      throw $.$$throw($.RangeError$range(end, start, this.get$length(this)));
    $length = t1.$sub(end, start);
    if (typeof $length !== "number")
      return this.sublist$2$bailout(2, start, 0, $length, $.JSNumber_methods);
    result = $.List_List($, $.getRuntimeTypeArgument(this, this["$as_SequenceList"], 0));
    $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this["$as_SequenceList"], 0)]);
    $.JSArray_methods.set$length(result, $length);
    for (t1 = this._liblib5$_source, i = 0; i < $length; ++i) {
      t2 = t1.$index(t1, start + i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  sublist$2$bailout: function(state0, start, end, $length, t1) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (end == null)
          end = this.get$length(this);
        t1 = $.getInterceptor$n(start);
        if (t1.$lt(start, 0) === true || t1.$gt(start, this.get$length(this)) === true)
          throw $.$$throw($.RangeError$range(start, 0, this.get$length(this)));
        t2 = $.getInterceptor$n(end);
        if (t2.$lt(end, start) === true || t2.$gt(end, this.get$length(this)) === true)
          throw $.$$throw($.RangeError$range(end, start, this.get$length(this)));
        $length = t2.$sub(end, start);
      case 2:
        var t2, result, i, t3;
        state0 = 0;
        result = $.List_List($, $.getRuntimeTypeArgument(this, this["$as_SequenceList"], 0));
        $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this["$as_SequenceList"], 0)]);
        $.JSArray_methods.set$length(result, $length);
        for (t2 = this._liblib5$_source, i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
          t3 = t2.$index(t2, t1.$add(start, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t3;
        }
        return result;
    }
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $indexSet: function(_, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  add$1: function(_, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  addAll$1: function(_, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to an unmodifiable list"));
  },
  retainWhere$1: function(_, test) {
    throw $.$$throw($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  sort$1: function(_, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot modify an unmodifiable list"));
  },
  clear$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot clear an unmodifiable list"));
  },
  removeAt$1: function(_, index) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  removeLast$0: function(_) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from an unmodifiable list"));
  },
  $asSequence: null,
  $asEnumerable: null,
  $asIterable: function() {
    return null;
  },
  $asList: function() {
    return null;
  },
  $asCollection: function() {
    return null;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isIterable: function() {
    return true;
  }
};

$$.HslColor = {"": "Object;h<,s<,l<",
  toRgb$0: function() {
    var normH, t1, b, g, r, t2, t3, temp2, temp1;
    normH = this.h / 360;
    t1 = this.s;
    if ($.$eq(t1, 0) === true) {
      b = $.$mul$n(this.l, 255);
      g = b;
      r = g;
    } else {
      t2 = this.l;
      t3 = $.getInterceptor$n(t2);
      if (t3.$lt(t2, 0.5) === true) {
        if (typeof t1 !== "number")
          throw $.iae(t1);
        temp2 = t3.$mul(t2, 1 + t1);
      } else
        temp2 = $.$sub$n($.$add$ns(t2, t1), $.$mul$n(t1, t2));
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (typeof temp2 !== "number")
        throw $.iae(temp2);
      temp1 = 2 * t2 - temp2;
      t1 = $.HslColor__hueToRgb(temp1, temp2, normH + 0.3333333333333333);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      r = 255 * t1;
      t1 = $.HslColor__hueToRgb(temp1, temp2, normH);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      g = 255 * t1;
      t1 = $.HslColor__hueToRgb(temp1, temp2, normH - 0.3333333333333333);
      if (typeof t1 !== "number")
        throw $.iae(t1);
      b = 255 * t1;
    }
    t1 = $.JSNumber_methods.toInt$0($.round$0$n(r));
    t2 = $.JSNumber_methods.toInt$0($.round$0$n(g));
    t3 = $.JSNumber_methods.toInt$0($.round$0$n(b));
    $.requireArgument(!$.JSNumber_methods.get$isInfinite(t1) && !$.JSNumber_methods.get$isNaN(t1), "r", null);
    $.requireArgument(t1 >= 0 && t1 <= 255, "r", null);
    $.requireArgument(!$.JSNumber_methods.get$isInfinite(t2) && !$.JSNumber_methods.get$isNaN(t2), "g", null);
    $.requireArgument(t2 >= 0 && t2 <= 255, "g", null);
    $.requireArgument(!$.JSNumber_methods.get$isInfinite(t3) && !$.JSNumber_methods.get$isNaN(t3), "b", null);
    $.requireArgument(t3 >= 0 && t3 <= 255, "b", null);
    return $.RgbColor$_internal(t1, t2, t3);
  },
  get$hashCode: function(_) {
    return $.Util_getHashCode([this.h, this.s, this.l]);
  },
  $eq: function(_, other) {
    var t1 = other == null;
    if (t1)
      return false;
    return !t1 && other.get$h() === this.h && $.$eq(other.get$s(), this.s) === true && $.$eq(other.get$l(), this.l) === true;
  },
  toString$0: function(_) {
    return "{HslColor: " + $.S(this.h) + ", " + $.S(this.s) + ", " + $.S(this.l) + "}";
  }
};

$$.RgbColor = {"": "Object;r>,g<,b<",
  toHex$0: function() {
    var buffer = $.StringBuffer$("#");
    $.JSArray_methods.forEach$1([this.r, this.g, this.b], new $.RgbColor_toHex_anon(buffer));
    return buffer.toString$0(buffer);
  },
  toHsl$0: function() {
    var normR, normG, normB, max, min, t1, t2, l, h, t3, s;
    normR = $.$div$n(this.r, 255);
    normG = $.$div$n(this.g, 255);
    normB = $.$div$n(this.b, 255);
    max = $.max(normR, $.max(normG, normB));
    min = $.min(normR, $.min(normG, normB));
    t1 = $.getInterceptor$ns(max);
    t2 = t1.$add(max, min);
    if (typeof t2 !== "number")
      throw $.iae(t2);
    l = 0.5 * t2;
    if (t1.$eq(max, min) !== true) {
      if (t1.$eq(max, normR) === true) {
        t2 = t1.$sub(max, min);
        if (typeof t2 !== "number")
          throw $.iae(t2);
        h = 60 * (normG - normB) / t2;
      } else if (t1.$eq(max, normG) === true) {
        t2 = t1.$sub(max, min);
        if (typeof t2 !== "number")
          throw $.iae(t2);
        h = 60 * (normB - normR) / t2 + 120;
      } else if (t1.$eq(max, normB) === true) {
        t2 = t1.$sub(max, min);
        if (typeof t2 !== "number")
          throw $.iae(t2);
        h = 60 * (normR - normG) / t2 + 240;
      } else
        h = 0;
      t2 = 0 < l && l <= 0.5;
      t3 = 2 * l;
      s = t2 ? $.$div$n(t1.$sub(max, min), t3) : $.min(1, $.$div$n(t1.$sub(max, min), 2 - t3));
    } else {
      h = 0;
      s = 0;
    }
    return $.HslColor_HslColor(h, s, l);
  },
  get$hashCode: function(_) {
    return $.Util_getHashCode([this.r, this.g, this.b]);
  },
  $eq: function(_, other) {
    var t1 = other == null;
    if (t1)
      return false;
    return !t1 && $.$eq($.get$r$x(other), this.r) === true && $.$eq(other.get$g(), this.g) === true && $.$eq(other.get$b(), this.b) === true;
  },
  toString$0: function(_) {
    return "{RgbColor: " + $.S(this.r) + ", " + $.S(this.g) + ", " + $.S(this.b) + "}";
  }
};

$$.RgbColor_toHex_anon = {"": "Closure;buffer_0",
  call$1: function(c) {
    var t1, t2;
    t1 = this.buffer_0;
    t2 = $.toRadixString$1$n(c, 16);
    t1.write$1(t2.length === 1 ? $.JSString_methods.$add("0", t2) : t2);
  },
  $isFunction: true
};

$$.DisposedError = {"": "Object;message>"};

$$.DisposableImpl = {"": "Object;",
  dispose$0: function() {
    this.validateNotDisposed$0();
    this._disposed = true;
    this.disposeInternal$0();
  },
  validateNotDisposed$0: function() {
    if (this._disposed)
      throw $.$$throw($.DisposedError_SMD);
  },
  get$isDisposed: function() {
    return this._disposed;
  },
  disposeInternal$0: function() {
  }
};

$$.EventArgs = {"": "Object;"};

$$.EventHandle = {"": "StreamController;_disposed,stream",
  dispose$0: function() {
    if (this._disposed)
      throw $.$$throw($.DisposedError_SMD);
    this._disposed = true;
    $.StreamController.prototype.close$0.call(this, this);
  },
  $asStreamController: null
};

$$.DetailedArgumentError = {"": "Object;argument,details",
  get$message: function(_) {
    return "Illegal argument: \"" + this.argument + "\" -- " + $.S(this.details);
  },
  toString$0: function(_) {
    return this.get$message(this);
  },
  DetailedArgumentError$2: function(argument, details) {
    var t1;
    if (this.argument.length === 0)
      throw $.$$throw($.InvalidOperationError$("That's just sad. Give me a valid argument"));
    t1 = this.details;
    if (t1 == null || $.get$length$asx(t1) === 0)
      throw $.$$throw($.InvalidOperationError$("That's just sad. I need details!"));
  },
  $isArgumentError: true
};

$$.InvalidOperationError = {"": "Object;message>", $isInvalidOperationError: true, $isException: true};

$$.NullArgumentError = {"": "DetailedArgumentError;argument,details", $isNullArgumentError: true};

$$.AffineTransform = {"": "Object;_scX<,_shY<,_shX<,_scY<,_tX<,_tY<",
  get$scaleX: function() {
    return this._scX;
  },
  get$scaleY: function() {
    return this._scY;
  },
  get$translateX: function() {
    return this._tX;
  },
  get$translateY: function() {
    return this._tY;
  },
  get$shearX: function() {
    return this._shX;
  },
  get$shearY: function() {
    return this._shY;
  },
  get$determinant: function() {
    return $.$sub$n($.$mul$n(this._scX, this._scY), $.$mul$n(this._shX, this._shY));
  },
  get$isIdentity: function() {
    return $.$eq(this._scX, 1) === true && $.$eq(this._shY, 0) === true && $.$eq(this._shX, 0) === true && $.$eq(this._scY, 1) === true && $.$eq(this._tX, 0) === true && $.$eq(this._tY, 0) === true;
  },
  concatenate$1: function(tx) {
    var m0, m1;
    m0 = this._scX;
    m1 = this._shX;
    this._scX = $.$add$ns($.$mul$n(tx._scX, m0), $.$mul$n(tx._shY, m1));
    this._shX = $.$add$ns($.$mul$n(tx._shX, m0), $.$mul$n(tx._scY, m1));
    this._tX = $.$add$ns(this._tX, $.$add$ns($.$mul$n(tx._tX, m0), $.$mul$n(tx._tY, m1)));
    m0 = this._shY;
    m1 = this._scY;
    this._shY = $.$add$ns($.$mul$n(tx._scX, m0), $.$mul$n(tx._shY, m1));
    this._scY = $.$add$ns($.$mul$n(tx._shX, m0), $.$mul$n(tx._scY, m1));
    this._tY = $.$add$ns(this._tY, $.$add$ns($.$mul$n(tx._tX, m0), $.$mul$n(tx._tY, m1)));
    return this;
  },
  rotate$3: function(_, theta, x, y) {
    return this.concatenate$1($.AffineTransform$(1, 0, 0, 1, 0, 0).setToRotation$3(theta, x, y));
  },
  translate$2: function(_, dx, dy) {
    var t1, t2, t3;
    t1 = this._tX;
    t2 = this._scX;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t3 = this._shX;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    this._tX = $.$add$ns(t1, dx * t2 + dy * t3);
    t3 = this._tY;
    t2 = this._shY;
    if (typeof t2 !== "number")
      throw $.iae(t2);
    t1 = this._scY;
    if (typeof t1 !== "number")
      throw $.iae(t1);
    this._tY = $.$add$ns(t3, dx * t2 + dy * t1);
    return this;
  },
  setToRotation$3: function(theta, x, y) {
    var cos, sin;
    cos = Math.cos($.checkNum(theta));
    sin = Math.sin($.checkNum(theta));
    return this.setTransform$6(cos, sin, -sin, cos, x - x * cos + y * sin, y - x * sin - y * cos);
  },
  setFromTransfrom$1: function(tx) {
    $.requireArgumentNotNull(tx, "tx");
    return this.setTransform$6(tx._scX, tx._shY, tx._shX, tx._scY, tx._tX, tx._tY);
  },
  setTransform$6: function(m00, m10, m01, m11, m02, m12) {
    this._scX = m00;
    this._shY = m10;
    this._shX = m01;
    this._scY = m11;
    this._tX = m02;
    this._tY = m12;
    return this;
  },
  createInverse$0: function() {
    var det, t1, t2;
    det = this.get$determinant();
    t1 = $.$div$n(this._scY, det);
    t2 = $.$negate$n(this._shY);
    if (typeof det !== "number")
      throw $.iae(det);
    return $.AffineTransform$(t1, t2 / det, $.$negate$n(this._shX) / det, $.$div$n(this._scX, det), $.$div$n($.$sub$n($.$mul$n(this._shX, this._tY), $.$mul$n(this._scY, this._tX)), det), $.$div$n($.$sub$n($.$mul$n(this._shY, this._tX), $.$mul$n(this._scX, this._tY)), det));
  },
  clone$0: function(_) {
    return $.AffineTransform$(this._scX, this._shY, this._shX, this._scY, this._tX, this._tY);
  },
  $eq: function(_, other) {
    var t1 = other == null;
    if (t1)
      return false;
    return !t1 && $.$eq(this._scX, other.get$_scX()) === true && $.$eq(this._shX, other.get$_shX()) === true && $.$eq(this._tX, other.get$_tX()) === true && $.$eq(this._shY, other.get$_shY()) === true && $.$eq(this._scY, other.get$_scY()) === true && $.$eq(this._tY, other.get$_tY()) === true;
  },
  toString$0: function(_) {
    return $.JSArray_methods.join$1([this.get$scaleX(), this.get$shearY(), this.get$shearX(), this.get$scaleY(), this.get$translateX(), this.get$translateY()], ", ");
  }
};

$$.Box = {"": "Object;left>,top>,width>,height>",
  get$topLeft: function() {
    return $.Coordinate$(this.left, this.top);
  },
  get$size: function(_) {
    return $.Size$(this.width, this.height);
  },
  get$isValid: function() {
    return this.get$topLeft().get$isValid() && this.get$size(this).get$isValid();
  },
  contains$1: function(_, point) {
    var t1, t2;
    t1 = $.getInterceptor$x(point);
    t2 = this.left;
    if ($.$ge$n(t1.get$x(point), t2) === true)
      if ($.$le$n(t1.get$x(point), $.$add$ns(t2, this.width)) === true) {
        t2 = this.top;
        t1 = $.$ge$n(t1.get$y(point), t2) === true && $.$le$n(t1.get$y(point), $.$add$ns(t2, this.height)) === true;
      } else
        t1 = false;
    else
      t1 = false;
    return t1;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  $eq: function(_, other) {
    var t1, t2;
    t1 = other == null;
    if (t1)
      return false;
    t2 = $.getInterceptor(other);
    return !t1 && $.$eq(t2.get$left(other), this.left) === true && $.$eq(t2.get$top(other), this.top) === true && $.$eq(t2.get$width(other), this.width) === true && $.$eq(t2.get$height(other), this.height) === true;
  },
  toString$0: function(_) {
    return "Location: " + $.S(this.get$topLeft()) + ", Size: " + $.S(this.get$size(this));
  },
  get$hashCode: function(_) {
    return $.Util_getHashCode([this.left, this.top, this.width, this.height]);
  }
};

$$.Coordinate = {"": "Object;x>,y>",
  getDistance$1: function(other) {
    var t1 = this.$sub(this, other);
    return t1.get$length(t1);
  },
  get$isValid: function() {
    return $.isValidNumber(this.x) && $.isValidNumber(this.y);
  },
  $sub: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return $.Vector$($.$sub$n(this.x, t1.get$x(other)), $.$sub$n(this.y, t1.get$y(other)));
  },
  $add: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return $.Coordinate$($.$add$ns(this.x, t1.get$x(other)), $.$add$ns(this.y, t1.get$y(other)));
  },
  $eq: function(_, other) {
    var t1, t2;
    t1 = other == null;
    if (t1)
      return false;
    t2 = $.getInterceptor(other);
    return !t1 && $.$eq(this.x, t2.get$x(other)) === true && $.$eq(this.y, t2.get$y(other)) === true;
  },
  toString$0: function(_) {
    return "{x:" + $.S(this.x) + ", y:" + $.S(this.y) + "}";
  }
};

$$.Size = {"": "Object;width>,height>",
  $eq: function(_, other) {
    var t1, t2;
    t1 = other == null;
    if (t1)
      return false;
    t2 = $.getInterceptor(other);
    return !t1 && $.$eq(this.width, t2.get$width(other)) === true && $.$eq(this.height, t2.get$height(other)) === true;
  },
  get$area: function() {
    return $.$mul$n(this.width, this.height);
  },
  isEmpty$0: function(_) {
    return $.$eq(this.get$area(), 0);
  },
  get$isEmpty: function(receiver) {
    return new $.BoundClosure$i0(this, "isEmpty$0", receiver);
  },
  get$isValid: function() {
    var t1, t2;
    t1 = this.width;
    if ($.isValidNumber(t1)) {
      t2 = this.height;
      t1 = $.isValidNumber(t2) && $.$ge$n(t1, 0) === true && $.$ge$n(t2, 0) === true;
    } else
      t1 = false;
    return t1;
  },
  $mul: function(_, magnitude) {
    return $.Size$($.$mul$n(this.width, magnitude), $.$mul$n(this.height, magnitude));
  },
  toString$0: function(_) {
    return "(" + $.S(this.width) + " x " + $.S(this.height) + ")";
  }
};

$$.TarjanCycleDetect = {"": "Object;_liblib5$_index,_stack,_scc,_list",
  _executeTarjan$0: function() {
    var t1, t2;
    for (t1 = $.get$iterator$ax($.List_List$from(this._list.getSourceNodeSet$0(), true, $._TarjanNode)); t1.moveNext$0();) {
      t2 = t1.get$current();
      if ($.get$index$x(t2) === -1)
        this._tarjan$1(t2);
    }
    return this._scc;
  },
  _tarjan$1: function(v) {
    var t1, t2, t3, t4, t5, t6, component, n;
    t1 = $.getInterceptor$x(v);
    t1.set$index(v, this._liblib5$_index);
    v.set$lowlink(this._liblib5$_index);
    this._liblib5$_index = this._liblib5$_index + 1;
    t2 = this._stack;
    $.JSArray_methods.insertRange$3(t2, 0, 1, v);
    for (t3 = $.get$iterator$ax(this._list.getAdjacent$1(v)); t3.moveNext$0();) {
      t4 = t3.get$current();
      t5 = $.getInterceptor$x(t4);
      if (t5.get$index(t4) === -1) {
        this._tarjan$1(t4);
        v.set$lowlink($.min(v.get$lowlink(), t4.get$lowlink()));
      } else {
        t6 = $.JSArray_methods.indexOf$1(t2, t4);
        if (typeof t6 !== "number")
          return this._tarjan$1$bailout(1, v, t1, t3, t2, t4, t5, t6);
        if (t6 >= 0)
          v.set$lowlink($.min(v.get$lowlink(), t5.get$index(t4)));
      }
    }
    if ($.$eq(v.get$lowlink(), t1.get$index(v)) === true) {
      component = $.List_List($, $.getRuntimeTypeArgument(this, this["$asTarjanCycleDetect"], 0));
      $.setRuntimeTypeInfo(component, [$.getRuntimeTypeArgument(this, this["$asTarjanCycleDetect"], 0)]);
      do {
        if (0 >= t2.length)
          throw $.ioore(0);
        n = t2[0];
        $.JSArray_methods.removeRange$2(t2, 0, 1);
        t1 = $.getInterceptor$x(n);
        component.push(t1.get$value(n));
      } while (t1.$eq(n, v) !== true);
      this._scc.push(component);
    }
  },
  _tarjan$1$bailout: function(state0, v, t1, t3, t2, t4, t5, t6) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$x(v);
        t1.set$index(v, this._liblib5$_index);
        v.set$lowlink(this._liblib5$_index);
        this._liblib5$_index = this._liblib5$_index + 1;
        t2 = this._stack;
        $.JSArray_methods.insertRange$3(t2, 0, 1, v);
        t3 = $.get$iterator$ax(this._list.getAdjacent$1(v));
      case 1:
        var component, n;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!t3.moveNext$0())
                  break L0;
                t4 = t3.get$current();
                t5 = $.getInterceptor$x(t4);
              case 1:
                if (state0 === 0 && t5.get$index(t4) === -1) {
                  this._tarjan$1(t4);
                  v.set$lowlink($.min(v.get$lowlink(), t4.get$lowlink()));
                } else
                  switch (state0) {
                    case 0:
                      t6 = $.JSArray_methods.indexOf$1(t2, t4);
                    case 1:
                      state0 = 0;
                      if ($.$ge$n(t6, 0) === true)
                        v.set$lowlink($.min(v.get$lowlink(), t5.get$index(t4)));
                  }
            }
        if ($.$eq(v.get$lowlink(), t1.get$index(v)) === true) {
          component = $.List_List($, $.getRuntimeTypeArgument(this, this["$asTarjanCycleDetect"], 0));
          $.setRuntimeTypeInfo(component, [$.getRuntimeTypeArgument(this, this["$asTarjanCycleDetect"], 0)]);
          do {
            if (0 >= t2.length)
              throw $.ioore(0);
            n = t2[0];
            $.JSArray_methods.removeRange$2(t2, 0, 1);
            t1 = $.getInterceptor$x(n);
            component.push(t1.get$value(n));
          } while (t1.$eq(n, v) !== true);
          this._scc.push(component);
        }
    }
  }
};

$$._TarjanNode = {"": "Object;value>,index*,lowlink@",
  get$hashCode: function(_) {
    return $.get$hashCode$(this.value);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return $.$eq($.get$value$x(other), this.value);
  }
};

$$._TarjanList = {"": "Object;_nodes",
  getSourceNodeSet$0: function() {
    return this._nodes.get$keys();
  },
  getAdjacent$1: function(v) {
    var t1, nodes;
    t1 = this._nodes;
    nodes = t1.$index(t1, v);
    if (nodes == null)
      return [];
    else
      return nodes;
  }
};

$$._TarjanList__TarjanList_anon = {"": "Closure;TNode_0,map_1,nodes_2",
  call$2: function(k, v) {
    var t1, tKey, t2, edges, t3;
    t1 = this.map_1;
    tKey = t1.putIfAbsent$2(k, new $._TarjanList__TarjanList__anon(k));
    t2 = this.nodes_2;
    edges = $.HashSet$([$._TarjanNode, this.TNode_0]);
    t2.$indexSet(t2, tKey, edges);
    if (v != null)
      for (t2 = $.get$iterator$ax(v); t2.moveNext$0();) {
        t3 = t2.get$current();
        edges.add$1(edges, t1.putIfAbsent$2(t3, new $._TarjanList__TarjanList__anon0(t3)));
      }
  },
  $isFunction: true
};

$$._TarjanList__TarjanList__anon = {"": "Closure;k_3",
  call$0: function() {
    return $._TarjanNode$(this.k_3, null);
  },
  $isFunction: true
};

$$._TarjanList__TarjanList__anon0 = {"": "Closure;edge_4",
  call$0: function() {
    return $._TarjanNode$(this.edge_4, null);
  },
  $isFunction: true
};

$$.Vector = {"": "Coordinate;x,y",
  get$length: function(_) {
    var t1, t2;
    t1 = this.x;
    t2 = this.y;
    return $.sqrt($.$add$ns($.$mul$n(t1, t1), $.$mul$n(t2, t2)));
  },
  get$normal: function() {
    return this.scale$1(this, 1 / this.get$length(this));
  },
  get$angle: function() {
    return $.atan2(this.y, this.x);
  },
  $add: function(_, other) {
    var t1 = $.getInterceptor$x(other);
    return $.Vector$($.$add$ns(this.x, t1.get$x(other)), $.$add$ns(this.y, t1.get$y(other)));
  },
  $mul: function(_, magnitude) {
    return $.Vector$($.$mul$n(this.x, magnitude), $.$mul$n(this.y, magnitude));
  },
  scale$1: function(_, magnitude) {
    return $.Vector$($.$mul$n(this.x, magnitude), $.$mul$n(this.y, magnitude));
  },
  dot$1: function(other) {
    return $.$add$ns($.$mul$n(this.x, other.x), $.$mul$n(this.y, other.y));
  },
  cross$1: function(other) {
    return $.$sub$n($.$mul$n(this.x, other.y), $.$mul$n(this.y, other.x));
  },
  getAngle$1: function(other) {
    return other.get$angle() - this.get$angle();
  },
  rotate$1: function(_, angle) {
    var cos, sin, t1, t2, t3, t4;
    cos = Math.cos($.checkNum(angle));
    sin = Math.sin($.checkNum(angle));
    t1 = this.x;
    t2 = $.getInterceptor$n(t1);
    t3 = this.y;
    t4 = $.getInterceptor$n(t3);
    return $.Vector$($.$sub$n(t2.$mul(t1, cos), t4.$mul(t3, sin)), $.$add$ns(t4.$mul(t3, cos), t2.$mul(t1, sin)));
  },
  rotateAroundPoint$2: function(axisPoint, angle) {
    var t1 = this.$sub(this, axisPoint);
    t1 = t1.rotate$1(t1, angle);
    return t1.$add(t1, axisPoint);
  }
};

$$.StringLineReader = {"": "Object;source,_liblib5$_position",
  get$position: function(_) {
    return this._liblib5$_position;
  },
  readNextLine$0: function() {
    return this._peekOrReadNextLine$1(true);
  },
  readToEnd$0: function() {
    var t1, value;
    if (this._liblib5$_position == null)
      return;
    t1 = this.source;
    value = $.substring$2$s(t1, this.get$position(this), $.get$length$asx(t1));
    this._liblib5$_position = null;
    return value;
  },
  _peekOrReadNextLine$1: function(updatePosition) {
    var t1, t2, nextLF, value, isWinNL, t3, t4;
    t1 = this._liblib5$_position;
    if (t1 == null)
      return;
    t2 = this.source;
    nextLF = $.indexOf$2$asx(t2, "\n", t1);
    t1 = $.getInterceptor$n(nextLF);
    if (t1.$lt(nextLF, 0) === true) {
      value = $.substring$2$s(t2, this.get$position(this), $.get$length$asx(t2));
      if (updatePosition)
        this._liblib5$_position = null;
      return value;
    }
    isWinNL = t1.$gt(nextLF, 0) === true && $.substring$2$s(t2, t1.$sub(nextLF, 1), nextLF) === "\r";
    t3 = $.getInterceptor$s(t2);
    t4 = this._liblib5$_position;
    value = isWinNL ? t3.substring$2(t2, t4, t1.$sub(nextLF, 1)) : t3.substring$2(t2, t4, nextLF);
    if (updatePosition)
      this._liblib5$_position = t1.$add(nextLF, 1);
    return value;
  },
  StringLineReader$1: function(source) {
    $.requireArgumentNotNull(this.source, "source");
  }
};

$$._StringLineIterator = {"": "Iterator;_reader,_liblib5$_current",
  get$current: function() {
    return this._liblib5$_current;
  },
  moveNext$0: function() {
    this._liblib5$_current = this._reader.readNextLine$0();
    return this._liblib5$_current != null;
  },
  $asIterator: function () { return [$.String]; }
};

$$.Tuple = {"": "Object;item1<,item2<",
  $eq: function(_, other) {
    var t1 = other == null;
    if (t1)
      return false;
    return !t1 && $.$eq(this.item1, other.get$item1()) === true && $.$eq(this.item2, other.get$item2()) === true;
  },
  toString$0: function(_) {
    return "{item1: " + $.S(this.item1) + ", item2: " + $.S(this.item2) + "}";
  },
  get$hashCode: function(_) {
    return $.Util_getHashCode([this.item1, this.item2]);
  }
};

$$.Tuple3 = {"": "Tuple;item3<,item1,item2",
  $eq: function(_, other) {
    var t1 = other == null;
    if (t1)
      return false;
    return !t1 && $.$eq(this.item1, other.get$item1()) === true && $.$eq(this.item2, other.get$item2()) === true && $.$eq(this.item3, other.get$item3()) === true;
  },
  toString$0: function(_) {
    return "{item1: " + $.S(this.item1) + ", item2: " + $.S(this.item2) + ", item3: " + $.S(this.item3) + "}";
  },
  get$hashCode: function(_) {
    return $.Util_getHashCode([this.item1, this.item2, this.item3]);
  },
  $asTuple: function (T1, T2, T3) { return [T1, T2]; }
};

$$.Util_splitLines_anon = {"": "Closure;",
  call$1: function(v) {
    return $._StringLineIterator$(v);
  },
  $isFunction: true
};

$$.FutureValue = {"": "Object;",
  set$input: function(value) {
    var t1;
    this._input = value;
    if (this._liblib4$_future == null)
      this._startFuture$0();
    else
      this._pending = true;
    t1 = this._inputChangedHandle;
    t1.add$1(t1, $.C_EventArgs);
  },
  get$output: function() {
    return this._output;
  },
  get$outputChanged: function() {
    return this._outputChangedHandle.stream;
  },
  get$error: function(_) {
    return this._errorHandle.stream;
  },
  error$2: function($receiver, arg0, arg1) {
    return this.get$error($receiver).call$2(arg0, arg1);
  },
  _startFuture$0: function() {
    this._liblib4$_future = this.getFuture$1(this._input);
    this._liblib4$_future.then$2$onError(this.get$_futureCompleted(), this.get$_futureException());
  },
  _futureException$1: function(exception) {
    var t1;
    this._liblib4$_future = null;
    t1 = this._errorHandle;
    t1.add$1(t1, exception);
    if (this._pending) {
      this._pending = false;
      this._liblib4$_future = this.getFuture$1(this._input);
      this._liblib4$_future.then$2$onError(this.get$_futureCompleted(), this.get$_futureException());
    }
    return true;
  },
  get$_futureException: function() {
    return new $.BoundClosure$1(this, "_futureException$1");
  },
  _futureCompleted$1: function(value) {
    var t1;
    this._liblib4$_future = null;
    this._output = value;
    t1 = this._outputChangedHandle;
    t1.add$1(t1, $.C_EventArgs);
    if (this._pending) {
      this._pending = false;
      this._liblib4$_future = this.getFuture$1(this._input);
      this._liblib4$_future.then$2$onError(this.get$_futureCompleted(), this.get$_futureException());
    }
  },
  get$_futureCompleted: function() {
    return new $.BoundClosure$1(this, "_futureCompleted$1");
  }
};

$$.FutureValueResult = {"": "Object;value>,error>,stackTrace<,_outputSerializer",
  error$2: function($receiver, arg0, arg1) {
    return this.error.call$2(arg0, arg1);
  },
  _outputSerializer$1: function(arg0) {
    return this._outputSerializer.call$1(arg0);
  },
  get$isException: function() {
    return this.error != null;
  },
  toMap$0: function() {
    return $.makeLiteralMap(["value", this._serialize$1(this.value), "error", this.error, "stackTrace", this.stackTrace]);
  },
  $eq: function(_, other) {
    var t1, t2;
    t1 = other == null;
    if (t1)
      return false;
    t2 = $.getInterceptor(other);
    return !t1 && $.$eq(t2.get$value(other), this.value) === true && $.$eq(t2.get$error(other), this.error) === true && $.$eq(other.get$stackTrace(), this.stackTrace) === true;
  },
  _serialize$1: function(output) {
    if (this._outputSerializer == null)
      return output;
    else
      return this._outputSerializer$1(output);
  },
  FutureValueResult$fromException$2: function(error, stackTrace, TOutput) {
    $.requireArgumentNotNull(this.error, "error");
  }
};

$$.SendPortValue = {"": "FutureValue;",
  inputSerializer$1: function(arg0) {
    return this.inputSerializer.call$1(arg0);
  },
  outputDeserializer$1: function(arg0) {
    return this.outputDeserializer.call$1(arg0);
  },
  getFuture$1: function(value) {
    var t1;
    this._completer = $._CompleterImpl$($.getRuntimeTypeArgument(this, this["$asSendPortValue"], 1));
    t1 = this._sendPort;
    if (this.inputSerializer == null)
      this._innerFuture = t1.call$1(value);
    else
      this._innerFuture = t1.call$1(this.inputSerializer$1(value));
    this._innerFuture.then$1(this.get$__futureCompleted());
    return this._completer.future;
  },
  __futureCompleted$1: function(value) {
    var fvr, t1, t2, c;
    this._innerFuture = null;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isMap && $.FutureValueResult_isMyMap(value)) {
      fvr = $.FutureValueResult_FutureValueResult$fromMap(value, null);
      if (fvr.get$isException() === true) {
        t1 = $.get$error$x(fvr);
        t2 = fvr.get$stackTrace();
        c = this._completer;
        this._completer = null;
        c.completeError$2(t1, t2);
      } else {
        t1 = $.get$value$x(fvr);
        c = this._completer;
        this._completer = null;
        c.complete$1(c, this._deserializer$1(t1));
      }
    } else {
      c = this._completer;
      this._completer = null;
      c.complete$1(c, this._deserializer$1(value));
    }
  },
  get$__futureCompleted: function() {
    return new $.BoundClosure$1(this, "__futureCompleted$1");
  },
  _deserializer$1: function(input) {
    if (this.outputDeserializer == null)
      return input;
    else
      return this.outputDeserializer$1(input);
  },
  $asFutureValue: null
};

$$.SendValuePort = {"": "Object;_func,inputDeserializer,outputSerializer<",
  _func$1: function(arg0) {
    return this._func.call$1(arg0);
  },
  inputDeserializer$1: function(arg0) {
    return this.inputDeserializer.call$1(arg0);
  },
  _deserialize$1: function(input) {
    if (this.inputDeserializer == null)
      return input;
    else
      return this.inputDeserializer$1(input);
  },
  SendValuePort$3$inputDeserializer$outputSerializer: function(_func, inputDeserializer, outputSerializer, TInput, TOutput) {
    $.port().receive$1(new $.anon1(TOutput, this));
  }
};

$$.anon1 = {"": "Closure;TOutput_0,this_1",
  call$2: function(rawValue, reply) {
    var value, _message, output, ex, stack, exString, stackString, t1, exception;
    t1 = this.this_1;
    value = t1._deserialize$1(rawValue);
    _message = null;
    try {
      output = t1._func$1(value);
      _message = $.FutureValueResult$(output, t1.get$outputSerializer(), this.TOutput_0);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      ex = t1;
      stack = $.getTraceFromException(exception);
      exString = $.toString$0(ex);
      stackString = $.toString$0(stack);
      _message = $.FutureValueResult$fromException(exString, stackString, this.TOutput_0);
    }

    reply.send$1(_message.toMap$0());
  },
  $isFunction: true
};

$$.EventWatcher = {"": "Object;_lastArgs,_eventCount",
  get$lastArgs: function() {
    return this._lastArgs;
  },
  get$eventCount: function() {
    return this._eventCount;
  },
  handler$1: function(args) {
    this._lastArgs = args;
    this._eventCount = this._eventCount + 1;
  },
  get$handler: function() {
    return new $.BoundClosure$1(this, "handler$1");
  }
};

$$.expectFutureFail_anon = {"": "Closure;onException_0",
  call$2: function(isError, result) {
    var failureHandler, t1;
    if (isError !== true) {
      if ($._assertFailureHandler == null)
        $._assertFailureHandler = $.DefaultFailureHandler$();
      failureHandler = $._assertFailureHandler;
      failureHandler.fail$1("Expected future to throw an exception");
    }
    t1 = this.onException_0;
    if (t1 != null)
      t1.call$1(result);
  },
  $isFunction: true
};

$$.expectFutureFail_anon0 = {"": "Closure;testWait_1",
  call$1: function(value) {
    return this.testWait_1.call$2(false, value);
  },
  $isFunction: true
};

$$.expectFutureFail_anon1 = {"": "Closure;testWait_2",
  call$1: function(error) {
    return this.testWait_2.call$2(true, error);
  },
  $isFunction: true
};

$$.expectFutureComplete_anon = {"": "Closure;onComplete_0",
  call$2: function(isError, result) {
    var t1, t2;
    if (isError === true) {
      t1 = $.get$error$x(result);
      t2 = result.get$stackTrace();
      $._registerException($._currentTestCaseIndex, t1, t2);
    }
    t1 = this.onComplete_0;
    if (t1 != null)
      t1.call$1(result);
  },
  $isFunction: true
};

$$.expectFutureComplete_anon0 = {"": "Closure;testWait_1",
  call$1: function(value) {
    return this.testWait_1.call$2(false, value);
  },
  $isFunction: true
};

$$.expectFutureComplete_anon1 = {"": "Closure;testWait_2",
  call$1: function(error) {
    return this.testWait_2.call$2(true, error);
  },
  $isFunction: true
};

$$._Finishes = {"": "BaseMatcher;_liblib3$_matcher<",
  matches$2: function(_, item, matchState) {
    var done;
    if (!(typeof item === "object" && item !== null && !!$.getInterceptor(item).$isFuture))
      return false;
    done = $.get$wrapAsync().call$1(new $._Finishes_matches_anon());
    item.then$2$onError(new $._Finishes_matches_anon0(this, done), new $._Finishes_matches_anon1(done));
    return true;
  },
  describe$1: function(description) {
    description.add$1(description, "completes to a value that ").addDescriptionOf$1(this._liblib3$_matcher);
    return description;
  }
};

$$._Finishes_matches_anon = {"": "Closure;",
  call$1: function(fn) {
    return fn.call$0();
  },
  $isFunction: true
};

$$._Finishes_matches_anon0 = {"": "Closure;this_0,done_1",
  call$1: function(value) {
    this.done_1.call$1(new $._Finishes_matches__anon0(this.this_0, value));
  },
  $isFunction: true
};

$$._Finishes_matches__anon0 = {"": "Closure;this_2,value_3",
  call$0: function() {
    var t1 = this.this_2.get$_liblib3$_matcher();
    if (t1 != null)
      $.expect(this.value_3, t1, null, null, false);
  },
  $isFunction: true
};

$$._Finishes_matches_anon1 = {"": "Closure;done_4",
  call$1: function(e) {
    this.done_4.call$1(new $._Finishes_matches__anon(e));
  },
  $isFunction: true
};

$$._Finishes_matches__anon = {"": "Closure;e_5",
  call$0: function() {
    var t1, t2;
    t1 = this.e_5;
    t2 = $.get$error$x(t1);
    t1 = t1.get$stackTrace();
    $._registerException($._currentTestCaseIndex, t2, t1);
    return;
  },
  $isFunction: true
};

$$._InvalidOperationError = {"": "TypeMatcher;_name",
  matches$2: function(_, item, matchState) {
    return typeof item === "object" && item !== null && !!$.getInterceptor(item).$isInvalidOperationError;
  }
};

$$._NullArgumentError = {"": "TypeMatcher;_name",
  matches$2: function(_, item, matchState) {
    return typeof item === "object" && item !== null && !!$.getInterceptor(item).$isNullArgumentError;
  }
};

$$.HtmlEnhancedConfiguration = {"": "Configuration;_isLayoutTest,_onErrorSubscription,_onMessageSubscription,_liblib2$_receivePort,name,autoStart",
  _installOnErrorHandler$0: function() {
    if (this._onErrorSubscription == null)
      this._onErrorSubscription = $.get$onError$x(window).listen$1(new $.HtmlEnhancedConfiguration__installOnErrorHandler_anon(this));
  },
  _installOnMessageHandler$0: function() {
    if (this._onMessageSubscription == null)
      this._onMessageSubscription = $.get$onMessage$x(window).listen$1(new $.HtmlEnhancedConfiguration__installOnMessageHandler_anon(this));
  },
  onInit$0: function() {
    var cssElement, t1;
    this._installOnErrorHandler$0();
    this._installOnMessageHandler$0();
    cssElement = $.get$head$x(document).querySelector("#_unittestcss_");
    if (cssElement == null) {
      t1 = $.get$children$x($.get$head$x(document));
      t1.add$1(t1, $._ElementFactoryProvider_createElement_html("<style id=\"_unittestcss_\"></style>"));
      cssElement = $.get$head$x(document).querySelector("#_unittestcss_");
    }
    $.set$innerHtml$x(cssElement, this.get$_htmlTestCSS());
    $.postMessage$2$x(window, "unittest-suite-wait-for-done", "*");
  },
  onStart$0: function() {
    this._installOnErrorHandler$0();
  },
  onSummary$5: function(passed, failed, errors, results, uncaughtError) {
    this._showInteractiveResultsInPage$6(passed, failed, errors, results, this._isLayoutTest, uncaughtError);
  },
  onDone$1: function(success) {
    var t1 = this._onErrorSubscription;
    if (t1 != null) {
      t1.cancel$0();
      this._onErrorSubscription = null;
    }
    t1 = this._onMessageSubscription;
    if (t1 != null) {
      t1.cancel$0();
      this._onMessageSubscription = null;
    }
    $.postMessage$2$x(window, "unittest-suite-done", "*");
  },
  _showInteractiveResultsInPage$6: function(passed, failed, errors, results, isLayoutTest, uncaughtError) {
    var t1, te, t2, t3, t4, t5, t6, groupedBy, t7, flattened, nonAlphanumeric, groupPassFail, safeGroup, testsInGroup, groupTotalTestCount, groupTestPassedCount, passFailClass, grp;
    t1 = {};
    if (isLayoutTest && passed === $.get$length$asx(results))
      $.set$innerHtml$x($.get$body$x(document), "PASS");
    else {
      te = $._ElementFactoryProvider_createElement_html("<div class=\"unittest-table\"></div>");
      t2 = $.getInterceptor$x(te);
      t3 = t2.get$children(te);
      t4 = $.getInterceptor$asx(results);
      $.add$1$ax(t3, $._ElementFactoryProvider_createElement_html(passed === t4.get$length(results) ? "<div class='unittest-overall unittest-pass'>PASS</div>" : "<div class='unittest-overall unittest-fail'>FAIL</div>"));
      if (passed === t4.get$length(results) && uncaughtError == null)
        $.add$1$ax(t2.get$children(te), $._ElementFactoryProvider_createElement_html("          <div class='unittest-pass'>All " + passed + " tests passed</div>"));
      else {
        t3 = uncaughtError == null;
        if (!t3)
          $.add$1$ax(t2.get$children(te), $._ElementFactoryProvider_createElement_html("            <div class='unittest-summary'>\n              <span class='unittest-error'>Uncaught error: " + $.S(uncaughtError) + "</span>\n            </div>"));
        t5 = t2.get$children(te);
        t6 = "          <div class='unittest-summary'>\n            <span class='unittest-pass'>Total " + passed + " passed</span>,\n            <span class='unittest-fail'>" + failed + " failed</span>,\n            <span class='unittest-error'>\n            ";
        $.add$1$ax(t5, $._ElementFactoryProvider_createElement_html(t6 + (errors + (t3 ? 0 : 1)) + " errors</span>\n          </div>"));
      }
      $.add$1$ax(t2.get$children(te), $._ElementFactoryProvider_createElement_html("        <div><button id='btnCollapseAll'>Collapse All</button></div>\n       "));
      $.get$onClick$x(t2.query$1(te, "#btnCollapseAll")).listen$1(new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon());
      t1.previousGroup_0 = "";
      groupedBy = $.LinkedHashMap$($.String, [$.List, $.TestCase]);
      for (t3 = t4.get$iterator(results); t3.moveNext$0();) {
        t5 = t3.get$current();
        if (!groupedBy.containsKey$1(t5.get$currentGroup())) {
          t6 = t5.get$currentGroup();
          t7 = $.List_List($, $.TestCase);
          $.setRuntimeTypeInfo(t7, [$.TestCase]);
          groupedBy.$indexSet(groupedBy, t6, t7);
        }
        $.add$1$ax(groupedBy.$index(groupedBy, t5.get$currentGroup()), t5);
      }
      flattened = $.List_List($, $.TestCase);
      $.setRuntimeTypeInfo(flattened, [$.TestCase]);
      t3 = groupedBy.get$values(groupedBy);
      t3.forEach$1(t3, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon0(flattened));
      nonAlphanumeric = $.JSSyntaxRegExp$("[^a-z0-9A-Z]", true, false);
      for (t3 = $.JSArray_methods.get$iterator(flattened), groupPassFail = true; t3.moveNext$0();) {
        t5 = t3.get$current();
        safeGroup = $.replaceAll$2$s(t5.get$currentGroup(), nonAlphanumeric, "_");
        if ($.$eq(t5.get$currentGroup(), t1.previousGroup_0) !== true) {
          t1.previousGroup_0 = t5.get$currentGroup();
          testsInGroup = $.toList$0$ax(t4.where$1(results, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon1(t1)));
          t6 = $.getInterceptor$asx(testsInGroup);
          groupTotalTestCount = t6.get$length(testsInGroup);
          groupTestPassedCount = $.get$length$asx(t6.where$1(testsInGroup, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon2()));
          groupPassFail = $.$eq(groupTotalTestCount, groupTestPassedCount);
          passFailClass = "unittest-group-status unittest-group-status-" + (groupPassFail === true ? "pass" : "fail");
          t6 = t2.get$children(te);
          t7 = "            <div>\n              <div id='" + safeGroup + "'\n                   class='unittest-group " + safeGroup + " test" + safeGroup + "'>\n                <div ";
          t7 = t7 + ($.contains$1$asx($.get$navigator$x($.window()).userAgent, "MSIE") ? "style='display:inline-block' " : "") + "\n                     class='unittest-row-status'>\n                  <div class='" + passFailClass + "'></div>\n                </div>\n                <div ";
          t7 = t7 + ($.contains$1$asx($.get$navigator$x($.window()).userAgent, "MSIE") ? "style='display:inline-block' " : "") + ">\n                    " + $.S(t5.get$currentGroup()) + "</div>\n                &nbsp;\n                <div ";
          $.add$1$ax(t6, $._ElementFactoryProvider_createElement_html(t7 + ($.contains$1$asx($.get$navigator$x($.window()).userAgent, "MSIE") ? "style='display:inline-block' " : "") + ">\n                    (" + $.S(groupTestPassedCount) + "/" + $.S(groupTotalTestCount) + ")</div>\n              </div>\n            </div>"));
          grp = safeGroup === "" ? null : t2.query$1(te, "#" + safeGroup);
          if (grp != null)
            $.get$onClick$x(grp).listen$1(new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon3(safeGroup));
        }
        this._buildRow$4(t5, te, safeGroup, groupPassFail !== true);
      }
      $.clear$0$ax($.get$children$x($.get$body$x(document)));
      $.add$1$ax($.get$children$x($.get$body$x(document)), te);
    }
  },
  _buildRow$4: function(test_, te, groupID, isVisible) {
    var t1, t2, background, display, t3;
    t1 = $.getInterceptor$x(test_);
    t2 = t1.get$id(test_);
    if (typeof t2 !== "number")
      return this._buildRow$4$bailout(1, test_, te, groupID, isVisible, t2, t1);
    background = "unittest-row-" + ($.JSNumber_methods.$mod(t2, 2) === 0 ? "even" : "odd");
    display = isVisible ? "unittest-row" : "unittest-row-hidden";
    t2 = new $.HtmlEnhancedConfiguration__buildRow__htmlEscape();
    t3 = new $.HtmlEnhancedConfiguration__buildRow_addRowElement(test_, te, groupID, background, display);
    if (!test_.get$isComplete()) {
      t3.call$3($.S(t1.get$id(test_)), "NO STATUS", "Test did not complete.");
      return;
    }
    t3.call$3($.S(t1.get$id(test_)), $.toUpperCase$0$s(t1.get$result(test_)), test_.get$description() + ". " + $.S(t2.call$1(t1.get$message(test_))));
    if (test_.get$stackTrace() != null)
      t3.call$3("", "", "<pre>" + $.S(t2.call$1(test_.get$stackTrace())) + "</pre>");
  },
  _buildRow$4$bailout: function(state0, test_, te, groupID, isVisible, t2, t1) {
    var background, display, t3;
    background = "unittest-row-" + ($.$mod$n(t2, 2) === 0 ? "even" : "odd");
    display = isVisible ? "unittest-row" : "unittest-row-hidden";
    t2 = new $.HtmlEnhancedConfiguration__buildRow__htmlEscape();
    t3 = new $.HtmlEnhancedConfiguration__buildRow_addRowElement(test_, te, groupID, background, display);
    if (!test_.get$isComplete()) {
      t3.call$3($.S(t1.get$id(test_)), "NO STATUS", "Test did not complete.");
      return;
    }
    t3.call$3($.S(t1.get$id(test_)), $.toUpperCase$0$s(t1.get$result(test_)), test_.get$description() + ". " + $.S(t2.call$1(t1.get$message(test_))));
    if (test_.get$stackTrace() != null)
      t3.call$3("", "", "<pre>" + $.S(t2.call$1(test_.get$stackTrace())) + "</pre>");
  },
  get$_htmlTestCSS: function() {
    var t1 = "  body{\n    font-size: 14px;\n    font-family: 'Open Sans', 'Lucida Sans Unicode', 'Lucida Grande', sans-serif;\n    background: WhiteSmoke;\n  }\n\n  .unittest-group\n  {\n    background: rgb(75,75,75);\n    width:98%;\n    color: WhiteSmoke;\n    font-weight: bold;\n    padding: 6px;\n    cursor: pointer;\n\n    /* Provide some visual separation between groups for IE */\n    " + ($.HtmlEnhancedConfiguration__isIE() === true ? "border-bottom:solid black 1px;" : "") + "\n    ";
    return t1 + ($.HtmlEnhancedConfiguration__isIE() === true ? "border-top:solid #777777 1px;" : "") + "\n\n    background-image: -webkit-linear-gradient(bottom, rgb(50,50,50) 0%, rgb(100,100,100) 100%);\n    background-image: -moz-linear-gradient(bottom, rgb(50,50,50) 0%, rgb(100,100,100) 100%);\n    background-image: -ms-linear-gradient(bottom, rgb(50,50,50) 0%, rgb(100,100,100) 100%);\n    background-image: linear-gradient(bottom, rgb(50,50,50) 0%, rgb(100,100,100) 100%);\n\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-box;\n    display: box;\n\n    -webkit-box-orient: horizontal;\n    -moz-box-orient: horizontal;\n    -ms-box-orient: horizontal;\n    box-orient: horizontal;\n\n    -webkit-box-align: center;\n    -moz-box-align: center;\n    -ms-box-align: center;\n    box-align: center;\n   }\n\n  .unittest-group-status\n  {\n    width: 20px;\n    height: 20px;\n    border-radius: 20px;\n    margin-left: 10px;\n  }\n\n  .unittest-group-status-pass{\n    background: Green;\n    background: -webkit-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: -moz-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: -ms-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n  }\n\n  .unittest-group-status-fail{\n    background: Red;\n    background: -webkit-radial-gradient(center, ellipse cover, #FFAAAA 0%,Red 100%);\n    background: -moz-radial-gradient(center, ellipse cover, #FFAAAA 0%,Red 100%);\n    background: -ms-radial-gradient(center, ellipse cover, #AAFFAA 0%,Green 100%);\n    background: radial-gradient(center, ellipse cover, #FFAAAA 0%,Red 100%);\n  }\n\n  .unittest-overall{\n    font-size: 20px;\n  }\n\n  .unittest-summary{\n    font-size: 18px;\n  }\n\n  .unittest-pass{\n    color: Green;\n  }\n\n  .unittest-fail, .unittest-error\n  {\n    color: Red;\n  }\n\n  .unittest-row\n  {\n    display: -webkit-box;\n    display: -moz-box;\n    display: -ms-box;\n    display: box;\n    -webkit-box-orient: horizontal;\n    -moz-box-orient: horizontal;\n    -ms-box-orient: horizontal;\n    box-orient: horizontal;\n    width: 100%;\n  }\n\n  .unittest-row-hidden\n  {\n    display: none;\n  }\n\n  .unittest-row-odd\n  {\n    background: WhiteSmoke;\n  }\n\n  .unittest-row-even\n  {\n    background: #E5E5E5;\n  }\n\n  .unittest-row-id\n  {\n    width: 3em;\n  }\n\n  .unittest-row-status\n  {\n    width: 4em;\n  }\n\n  .unittest-row-description\n  {\n  }\n\n  ";
  }
};

$$.HtmlEnhancedConfiguration__installOnErrorHandler_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return $._reportTestError("(DOM callback has errors)\nCaught " + $.S(e), "");
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__installOnMessageHandler_anon = {"": "Closure;this_0",
  call$1: function(e) {
    if ("unittest-suite-external-error" === $.get$data$x(e))
      $._reportTestError("(external error detected)\nCaught <unknown>", "");
    return;
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon = {"": "Closure;",
  call$1: function(_) {
    var t1 = $.queryAll$1$x(document, ".unittest-row");
    t1.forEach$1(t1, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon2());
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon2 = {"": "Closure;",
  call$1: function(el) {
    var t1, t2;
    t1 = $.getInterceptor$x(el);
    t2 = t1.get$attributes(el);
    t1 = t1.get$attributes(el);
    t1 = $.replaceAll$2$s(t1.$index(t1, "class"), "unittest-row ", "unittest-row-hidden ");
    t2.$indexSet(t2, "class", t1);
    return t1;
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon0 = {"": "Closure;flattened_1",
  call$1: function(tList) {
    $.sort$1$ax(tList, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon1());
    $.JSArray_methods.addAll$1(this.flattened_1, tList);
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon1 = {"": "Closure;",
  call$2: function(tcA, tcB) {
    return $.$sub$n($.get$id$x(tcA), $.get$id$x(tcB));
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon1 = {"": "Closure;box_0",
  call$1: function(t) {
    return $.$eq(t.get$currentGroup(), this.box_0.previousGroup_0);
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon2 = {"": "Closure;",
  call$1: function(t) {
    return $.$eq($.get$result$x(t), "pass");
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage_anon3 = {"": "Closure;safeGroup_2",
  call$1: function(_) {
    var t1, t2;
    t1 = document;
    t2 = this.safeGroup_2;
    t1 = $.get$attributes$x(t1.querySelector(".unittest-row-" + t2));
    if ($.contains$1$asx(t1.$index(t1, "class"), "unittest-row ")) {
      t1 = $.queryAll$1$x(document, ".unittest-row-" + t2);
      t1.forEach$1(t1, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon());
    } else {
      t1 = $.queryAll$1$x(document, ".unittest-row-" + t2);
      t1.forEach$1(t1, new $.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon0());
    }
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon = {"": "Closure;",
  call$1: function(e) {
    var t1, t2;
    t1 = $.getInterceptor$x(e);
    t2 = t1.get$attributes(e);
    t1 = t1.get$attributes(e);
    t1 = $.replaceAll$2$s(t1.$index(t1, "class"), "unittest-row ", "unittest-row-hidden ");
    t2.$indexSet(t2, "class", t1);
    return t1;
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__showInteractiveResultsInPage__anon0 = {"": "Closure;",
  call$1: function(e) {
    var t1, t2;
    t1 = $.getInterceptor$x(e);
    t2 = t1.get$attributes(e);
    t1 = t1.get$attributes(e);
    t1 = $.replaceAll$2$s(t1.$index(t1, "class"), "unittest-row-hidden", "unittest-row");
    t2.$indexSet(t2, "class", t1);
    return t1;
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__buildRow__htmlEscape = {"": "Closure;",
  call$1: function(string) {
    return $.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.replaceAll$2$s(string, "&", "&amp;"), "<", "&lt;"), ">", "&gt;");
  },
  $isFunction: true
};

$$.HtmlEnhancedConfiguration__buildRow_addRowElement = {"": "Closure;test__0,te_1,groupID_2,background_3,display_4",
  call$3: function(id, $status, description) {
    var t1, t2;
    t1 = $.get$children$x(this.te_1);
    t2 = " <div>\n                <div class='" + this.display_4 + " unittest-row-" + this.groupID_2 + " " + this.background_3 + "'>\n                  <div ";
    t2 = t2 + ($.contains$1$asx($.get$navigator$x($.window()).userAgent, "MSIE") ? "style='display:inline-block' " : "") + "\n                       class='unittest-row-id'>" + $.S(id) + "</div>\n                  <div ";
    t2 = t2 + ($.contains$1$asx($.get$navigator$x($.window()).userAgent, "MSIE") ? "style='display:inline-block' " : "") + "\n                       class=\"unittest-row-status unittest-" + $.S($.get$result$x(this.test__0)) + "\">\n                       " + $.S($status) + "</div>\n                  <div ";
    $.add$1$ax(t1, $._ElementFactoryProvider_createElement_html(t2 + ($.contains$1$asx($.get$navigator$x($.window()).userAgent, "MSIE") ? "style='display:inline-block' " : "") + "\n                       class='unittest-row-description'>" + $.S(description) + "</div>\n                </div>\n              </div>"));
  },
  $isFunction: true
};

$$.MatchState = {"": "Object;state*"};

$$.BaseMatcher = {"": "Object;",
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    return mismatchDescription.add$1(mismatchDescription, "was ").addDescriptionOf$1(item);
  },
  $isMatcher: true
};

$$._EveryElement = {"": "_CollectionMatcher;_matcher<",
  matches$2: function(_, item, matchState) {
    var t1, i, t2, t3;
    if (!(typeof item === "object" && item !== null && (item.constructor === Array || $.getInterceptor(item).$isIterable())))
      return false;
    for (t1 = $.get$iterator$ax(item), i = 0; t1.moveNext$0();) {
      t2 = t1.get$current();
      t3 = this._matcher;
      if (t3.matches$2(t3, t2, matchState) !== true) {
        t1 = $.getInterceptor$x(matchState);
        t1.set$state(matchState, $.makeLiteralMap(["index", i, "element", t2, "state", t1.get$state(matchState)]));
        return false;
      }
      ++i;
    }
    return true;
  },
  describe$1: function(description) {
    return description.add$1(description, "every element ").addDescriptionOf$1(this._matcher);
  },
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    var t1, index, element;
    t1 = $.getInterceptor$x(matchState);
    if (t1.get$state(matchState) != null) {
      index = $.$index$asx(t1.get$state(matchState), "index");
      element = $.$index$asx(t1.get$state(matchState), "element");
      return $.add$1$ax(this._matcher.describeMismatch$4(element, mismatchDescription, $.$index$asx(t1.get$state(matchState), "state"), verbose), " at position " + $.S(index));
    }
    return $._CollectionMatcher.prototype.describeMismatch$4.call(this, item, mismatchDescription, matchState, verbose);
  }
};

$$._OrderedEquals = {"": "BaseMatcher;_expected<,_matcher<",
  matches$2: function(_, item, matchState) {
    var t1;
    if (typeof item === "object" && item !== null && (item.constructor === Array || $.getInterceptor(item).$isIterable())) {
      t1 = this._matcher;
      t1 = t1.matches$2(t1, item, matchState) === true;
    } else
      t1 = false;
    return t1;
  },
  describe$1: function(description) {
    var t1 = description.add$1(description, "equals ").addDescriptionOf$1(this._expected);
    return t1.add$1(t1, " ordered");
  },
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    if (!(typeof item === "object" && item !== null && (item.constructor === Array || $.getInterceptor(item).$isIterable())))
      return mismatchDescription.add$1(mismatchDescription, "not an Iterable");
    else
      return this._matcher.describeMismatch$4(item, mismatchDescription, matchState, verbose);
  },
  _OrderedEquals$1: function(_expected) {
    this._matcher = $.equals(this._expected, 1);
  }
};

$$._UnorderedEquals = {"": "BaseMatcher;_expected<",
  _liblib6$_test$1: function(item) {
    var t1, expectedLength, t2, actualLength, matched, i, t3, expectedPosition, t4, t5, t6, actualPosition, gotMatch, t7, reason;
    if (!(typeof item === "object" && item !== null && (item.constructor === Array || $.getInterceptor(item).$isIterable())))
      return "not iterable";
    t1 = this._expected;
    if (typeof t1 === "object" && t1 !== null && (t1.constructor === Array || $.getInterceptor(t1).$isCollection()))
      expectedLength = $.get$length$asx(t1);
    else
      for (t2 = $.get$iterator$ax(t1), expectedLength = 0; t2.moveNext$0();) {
        t2.get$current();
        ++expectedLength;
      }
    if (typeof item === "object" && item !== null && (item.constructor === Array || $.getInterceptor(item).$isCollection()))
      actualLength = $.get$length$asx(item);
    else
      for (t2 = $.get$iterator$ax(item), actualLength = 0; t2.moveNext$0();) {
        t2.get$current();
        ++actualLength;
      }
    if (typeof actualLength !== "number")
      return this._liblib6$_test$1$bailout(1, item, actualLength, t1, expectedLength);
    t2 = $.getInterceptor$n(expectedLength);
    if (t2.$gt(expectedLength, actualLength) === true)
      return "has too few elements (" + $.S(actualLength) + " < " + $.S(expectedLength) + ")";
    else if (t2.$lt(expectedLength, actualLength) === true)
      return "has too many elements (" + $.S(actualLength) + " > " + $.S(expectedLength) + ")";
    matched = $.List_List(actualLength, $.bool);
    $.setRuntimeTypeInfo(matched, [$.bool]);
    for (t2 = matched.length, i = 0; i < actualLength; ++i) {
      if (i >= t2)
        throw $.ioore(i);
      matched[i] = false;
    }
    for (t1 = $.get$iterator$ax(t1), t3 = $.getInterceptor$ax(item), expectedPosition = 0; t1.moveNext$0();) {
      t4 = t1.get$current();
      for (t5 = t3.get$iterator(item), t6 = $.getInterceptor(t4), actualPosition = 0; gotMatch = false, t5.moveNext$0();) {
        t7 = t5.get$current();
        if (actualPosition >= t2)
          throw $.ioore(actualPosition);
        if (matched[actualPosition] !== true)
          if (t6.$eq(t4, t7) === true) {
            matched[actualPosition] = true;
            gotMatch = true;
            break;
          }
        ++actualPosition;
      }
      if (!gotMatch) {
        reason = $.StringDescription$("");
        t1 = reason.add$1(reason, "has no match for element ").addDescriptionOf$1(t4);
        t1.add$1(t1, " at position " + expectedPosition);
        return reason.toString$0(reason);
      }
      ++expectedPosition;
    }
    return;
  },
  _liblib6$_test$1$bailout: function(state0, item, actualLength, t1, expectedLength) {
    var t2, matched, i, t3, expectedPosition, t4, t5, t6, actualPosition, gotMatch, t7, reason;
    t2 = $.getInterceptor$n(expectedLength);
    if (t2.$gt(expectedLength, actualLength) === true)
      return "has too few elements (" + $.S(actualLength) + " < " + $.S(expectedLength) + ")";
    else if (t2.$lt(expectedLength, actualLength) === true)
      return "has too many elements (" + $.S(actualLength) + " > " + $.S(expectedLength) + ")";
    matched = $.List_List(actualLength, $.bool);
    $.setRuntimeTypeInfo(matched, [$.bool]);
    for (t2 = matched.length, i = 0; $.JSNumber_methods.$lt(i, actualLength); ++i) {
      if (i >= t2)
        throw $.ioore(i);
      matched[i] = false;
    }
    for (t1 = $.get$iterator$ax(t1), t3 = $.getInterceptor$ax(item), expectedPosition = 0; t1.moveNext$0();) {
      t4 = t1.get$current();
      for (t5 = t3.get$iterator(item), t6 = $.getInterceptor(t4), actualPosition = 0; gotMatch = false, t5.moveNext$0();) {
        t7 = t5.get$current();
        if (actualPosition >= t2)
          throw $.ioore(actualPosition);
        if (matched[actualPosition] !== true)
          if (t6.$eq(t4, t7) === true) {
            matched[actualPosition] = true;
            gotMatch = true;
            break;
          }
        ++actualPosition;
      }
      if (!gotMatch) {
        reason = $.StringDescription$("");
        t1 = reason.add$1(reason, "has no match for element ").addDescriptionOf$1(t4);
        t1.add$1(t1, " at position " + expectedPosition);
        return reason.toString$0(reason);
      }
      ++expectedPosition;
    }
    return;
  },
  matches$2: function(_, item, mismatchState) {
    return this._liblib6$_test$1(item) == null;
  },
  describe$1: function(description) {
    var t1 = description.add$1(description, "equals ").addDescriptionOf$1(this._expected);
    return t1.add$1(t1, " unordered");
  },
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    return mismatchDescription.add$1(mismatchDescription, this._liblib6$_test$1(item));
  }
};

$$._CollectionMatcher = {"": "BaseMatcher;",
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    var t1;
    if (!(typeof item === "object" && item !== null && (item.constructor === Array || $.getInterceptor(item).$isIterable()))) {
      t1 = mismatchDescription.addDescriptionOf$1(item);
      return t1.add$1(t1, " not an Iterable");
    } else
      return $.BaseMatcher.prototype.describeMismatch$4.call(this, item, mismatchDescription, matchState, verbose);
  }
};

$$.Configuration = {"": "Object;_liblib2$_receivePort,name,autoStart<",
  onInit$0: function() {
    this._liblib2$_receivePort = $.ReceivePortImpl$();
    $.Primitives_printString("unittest-suite-wait-for-done");
  },
  onStart$0: function() {
  },
  onTestStart$1: function(testCase) {
  },
  onTestResult$1: function(testCase) {
  },
  onTestResultChanged$1: function(testCase) {
  },
  onLogMessage$2: function(testCase, message) {
    $.Primitives_printString(message);
  },
  onSummary$5: function(passed, failed, errors, results, uncaughtError) {
    var t1, t2, t3;
    for (t1 = $.get$iterator$ax(results); t1.moveNext$0();) {
      t2 = t1.get$current();
      t3 = $.getInterceptor$x(t2);
      $.Primitives_printString($.JSString_methods.toUpperCase$0($.S(t3.get$result(t2))) + ": " + t2.get$description());
      if ($.$eq(t3.get$message(t2), "") !== true)
        $.Primitives_printString(this._indent$1(t3.get$message(t2)));
      if (t2.get$stackTrace() != null && $.$eq(t2.get$stackTrace(), "") !== true)
        $.Primitives_printString(this._indent$1(t2.get$stackTrace()));
    }
    $.Primitives_printString("");
    if (passed === 0 && failed === 0 && errors === 0 && uncaughtError == null)
      $.Primitives_printString("No tests found.");
    else if (failed === 0 && errors === 0 && uncaughtError == null)
      $.Primitives_printString("All " + passed + " tests passed.");
    else {
      if (uncaughtError != null)
        $.Primitives_printString("Top-level uncaught error: " + $.S(uncaughtError));
      $.Primitives_printString("" + passed + " PASSED, " + failed + " FAILED, " + errors + " ERRORS");
    }
  },
  onDone$1: function(success) {
    var t1;
    if (success) {
      $.Primitives_printString("unittest-suite-success");
      t1 = this._liblib2$_receivePort;
      t1.close$0(t1);
    } else {
      t1 = this._liblib2$_receivePort;
      t1.close$0(t1);
      throw $.$$throw($._ExceptionImplementation$("Some tests failed."));
    }
  },
  _indent$1: function(str) {
    var t1 = $.JSArray_methods.map$1($.split$1$s(str, "\n"), new $.Configuration__indent_anon());
    return t1.join$1(t1, "\n");
  }
};

$$.Configuration__indent_anon = {"": "Closure;",
  call$1: function(line) {
    return "  " + $.S(line);
  },
  $isFunction: true
};

$$._IsNull = {"": "BaseMatcher;",
  matches$2: function(_, item, matchState) {
    return item == null;
  },
  describe$1: function(description) {
    return description.add$1(description, "null");
  }
};

$$._IsTrue = {"": "BaseMatcher;",
  matches$2: function(_, item, matchState) {
    return $.$eq(item, true);
  },
  describe$1: function(description) {
    return description.add$1(description, "true");
  }
};

$$._IsFalse = {"": "BaseMatcher;",
  matches$2: function(_, item, matchState) {
    return $.$eq(item, false);
  },
  describe$1: function(description) {
    return description.add$1(description, "false");
  }
};

$$._IsSameAs = {"": "BaseMatcher;_expected<",
  matches$2: function(_, item, matchState) {
    var t1 = this._expected;
    return item == null ? t1 == null : item === t1;
  },
  describe$1: function(description) {
    return description.add$1(description, "same instance as ").addDescriptionOf$1(this._expected);
  }
};

$$._DeepMatcher = {"": "BaseMatcher;_expected<,_limit,count",
  _compareIterables$4: function(expected, actual, matcher, depth) {
    var expectedIterator, actualIterator, position, reason, r;
    if (!(typeof actual === "object" && actual !== null && (actual.constructor === Array || $.getInterceptor(actual).$isIterable())))
      return "is not Iterable";
    expectedIterator = $.get$iterator$ax(expected);
    actualIterator = $.get$iterator$ax(actual);
    for (position = 0, reason = null; reason == null;)
      if (expectedIterator.moveNext$0())
        if (actualIterator.moveNext$0()) {
          r = matcher.call$4(expectedIterator.get$current(), actualIterator.get$current(), "mismatch at position " + position, depth);
          if (r != null)
            reason = $.toString$0(r);
          ++position;
        } else
          reason = "shorter than expected";
      else {
        if (actualIterator.moveNext$0())
          ;
        else
          return;
        reason = "longer than expected";
      }
    return reason;
  },
  _recursiveMatch$4: function(expected, actual, $location, depth) {
    var canRecurse, reason, r, err, t1, t2, t3, eType, aType, includeTypes;
    if (typeof expected !== "object" || expected === null || expected.constructor !== Array && !$.getInterceptor(expected).$isJavaScriptIndexingBehavior())
      return this._recursiveMatch$4$bailout(1, expected, actual, $location, depth);
    if (typeof depth !== "number")
      return this._recursiveMatch$4$bailout(1, expected, actual, $location, depth);
    canRecurse = depth === 0 || this._limit > 1;
    if (expected === actual)
      reason = null;
    else if (depth > this._limit)
      reason = $.StringDescription$("recursion depth limit exceeded");
    else if (canRecurse) {
      r = this._compareIterables$4(expected, actual, this.get$_recursiveMatch(), depth + 1);
      reason = r != null ? $.StringDescription$(r) : null;
    } else if (false)
      if (!(typeof actual === "object" && actual !== null && !!$.getInterceptor(actual).$isMap))
        reason = $.StringDescription$("expected a map");
      else {
        err = expected.length === actual.get$length(actual) ? "" : "different map lengths; ";
        for (t1 = $.get$iterator$ax(expected.get$keys()); reason = null, t1.moveNext$0();) {
          t2 = t1.get$current();
          if (actual.containsKey$1(t2) !== true) {
            reason = $.StringDescription$(err);
            reason.add$1(reason, "missing map key ");
            reason.addDescriptionOf$1(t2);
            break;
          }
        }
        if (reason == null) {
          for (t1 = $.get$iterator$ax(actual.get$keys()); t1.moveNext$0();) {
            t2 = t1.get$current();
            if (expected.containsKey$1(t2) !== true) {
              reason = $.StringDescription$(err);
              reason.add$1(reason, "extra map key ");
              reason.addDescriptionOf$1(t2);
              break;
            }
          }
          if (reason == null)
            for (t1 = $.get$iterator$ax(expected.get$keys()), t2 = depth + 1; t1.moveNext$0();) {
              t3 = t1.get$current();
              if (t3 !== (t3 | 0))
                throw $.iae(t3);
              if (t3 < 0 || t3 >= expected.length)
                throw $.ioore(t3);
              reason = this._recursiveMatch$4(expected[t3], actual.$index(actual, t3), "with key <" + t3 + "> " + $.S($location), t2);
              if (reason != null)
                break;
            }
        }
      }
    else {
      reason = $.StringDescription$("");
      eType = this.typeName$1(expected);
      aType = this.typeName$1(actual);
      t1 = $.$eq(eType, aType) === true;
      includeTypes = !t1;
      if (!t1 || depth > 1) {
        reason.add$1(reason, "expected ");
        if (includeTypes) {
          t1 = reason.add$1(reason, eType);
          t1.add$1(t1, ":");
        }
        t1 = reason.addDescriptionOf$1(expected);
        t1.add$1(t1, " but ");
      }
      reason.add$1(reason, "was ");
      if (includeTypes) {
        t1 = reason.add$1(reason, aType);
        t1.add$1(t1, ":");
      }
      reason.addDescriptionOf$1(actual);
    }
    if (reason != null) {
      t1 = $.get$length$asx($location);
      if (typeof t1 !== "number")
        return this._recursiveMatch$4$bailout(2, 0, 0, $location, 0, t1, reason);
      t1 = t1 > 0;
    } else
      t1 = false;
    if (t1)
      $.add$1$ax($.add$1$ax(reason, " "), $location);
    return reason;
  },
  _recursiveMatch$4$bailout: function(state0, expected, actual, $location, depth, t1, reason) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(depth);
        canRecurse = t1.$eq(depth, 0) === true || this._limit > 1;
        t2 = $.getInterceptor(expected);
        if (t2.$eq(expected, actual) === true)
          reason = null;
        else if (t1.$gt(depth, this._limit) === true)
          reason = $.StringDescription$("recursion depth limit exceeded");
        else if (typeof expected === "object" && expected !== null && (expected.constructor === Array || $.getInterceptor(expected).$isIterable()) && canRecurse) {
          r = this._compareIterables$4(expected, actual, this.get$_recursiveMatch(), t1.$add(depth, 1));
          reason = r != null ? $.StringDescription$(r) : null;
        } else if (typeof expected === "object" && expected !== null && !!$.getInterceptor(expected).$isMap && canRecurse)
          if (!(typeof actual === "object" && actual !== null && !!$.getInterceptor(actual).$isMap))
            reason = $.StringDescription$("expected a map");
          else {
            err = $.$eq(t2.get$length(expected), actual.get$length(actual)) === true ? "" : "different map lengths; ";
            for (t3 = $.get$iterator$ax(expected.get$keys()); reason = null, t3.moveNext$0();) {
              t4 = t3.get$current();
              if (actual.containsKey$1(t4) !== true) {
                reason = $.StringDescription$(err);
                reason.add$1(reason, "missing map key ");
                reason.addDescriptionOf$1(t4);
                break;
              }
            }
            if (reason == null) {
              for (t3 = $.get$iterator$ax(actual.get$keys()); t3.moveNext$0();) {
                t4 = t3.get$current();
                if (expected.containsKey$1(t4) !== true) {
                  reason = $.StringDescription$(err);
                  reason.add$1(reason, "extra map key ");
                  reason.addDescriptionOf$1(t4);
                  break;
                }
              }
              if (reason == null)
                for (t3 = $.get$iterator$ax(expected.get$keys()); t3.moveNext$0();) {
                  t4 = t3.get$current();
                  reason = this._recursiveMatch$4(t2.$index(expected, t4), actual.$index(actual, t4), "with key <" + $.S(t4) + "> " + $.S($location), t1.$add(depth, 1));
                  if (reason != null)
                    break;
                }
            }
          }
        else {
          reason = $.StringDescription$("");
          eType = this.typeName$1(expected);
          aType = this.typeName$1(actual);
          t2 = $.$eq(eType, aType) === true;
          includeTypes = !t2;
          if (!t2 || t1.$gt(depth, 1) === true) {
            reason.add$1(reason, "expected ");
            if (includeTypes) {
              t1 = reason.add$1(reason, eType);
              t1.add$1(t1, ":");
            }
            t1 = reason.addDescriptionOf$1(expected);
            t1.add$1(t1, " but ");
          }
          reason.add$1(reason, "was ");
          if (includeTypes) {
            t1 = reason.add$1(reason, aType);
            t1.add$1(t1, ":");
          }
          reason.addDescriptionOf$1(actual);
        }
      case 2:
        var canRecurse, t2, r, err, t3, t4, eType, aType, includeTypes;
        if (state0 === 2 || state0 === 0 && reason != null)
          switch (state0) {
            case 0:
              t1 = $.get$length$asx($location);
            case 2:
              state0 = 0;
              t1 = $.$gt$n(t1, 0) === true;
          }
        else
          t1 = false;
        if (t1)
          $.add$1$ax($.add$1$ax(reason, " "), $location);
        return reason;
    }
  },
  get$_recursiveMatch: function() {
    return new $.BoundClosure$4(this, "_recursiveMatch$4");
  },
  typeName$1: function(x) {
    var t1, exception;
    try {
      if (x == null)
        return "null";
      t1 = $.get$runtimeType$(x);
      t1 = t1.toString$0(t1);
      return t1;
    } catch (exception) {
      $.unwrapException(exception);
      return "Unknown";
    }

  },
  matches$2: function(_, item, matchState) {
    var reason = this._recursiveMatch$4(this._expected, item, "", 0);
    return (reason == null ? null : $.toString$0(reason)) == null;
  },
  describe$1: function(description) {
    return description.addDescriptionOf$1(this._expected);
  },
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    var reason = this._recursiveMatch$4(this._expected, item, "", 0);
    return mismatchDescription.add$1(mismatchDescription, reason == null ? null : $.toString$0(reason));
  }
};

$$.Throws = {"": "BaseMatcher;_matcher<",
  matches$2: function(_, item, matchState) {
    var e, s, t1, done, exception;
    t1 = item;
    if (!(typeof t1 === "function" || typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFunction)) {
      t1 = item;
      t1 = !(typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFuture);
    } else
      t1 = false;
    if (t1)
      return false;
    t1 = item;
    if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isFuture) {
      done = $.get$wrapAsync().call$1(new $.Throws_matches_anon());
      item.then$2$onError(new $.Throws_matches_anon0(done), new $.Throws_matches_anon1(this, done));
      return true;
    }
    try {
      item.call$0();
      return false;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      t1 = this._matcher;
      if (t1 == null || $.matches$2$x(t1, e, matchState) === true)
        return true;
      else {
        $.set$state$x(matchState, $.makeLiteralMap(["exception", e, "stack", s]));
        return false;
      }
    }

  },
  describe$1: function(description) {
    var t1 = this._matcher;
    if (t1 == null)
      return description.add$1(description, "throws an exception");
    else
      return description.add$1(description, "throws an exception which matches ").addDescriptionOf$1(t1);
  },
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    var t1, t2, t3;
    if (!(typeof item === "function" || typeof item === "object" && item !== null && !!$.getInterceptor(item).$isFunction) && !(typeof item === "object" && item !== null && !!$.getInterceptor(item).$isFuture))
      return mismatchDescription.add$1(mismatchDescription, " not a Function or Future");
    else {
      t1 = this._matcher;
      if (t1 == null || $.get$state$x(matchState) == null)
        return mismatchDescription.add$1(mismatchDescription, " no exception");
      else {
        t2 = $.getInterceptor$x(matchState);
        mismatchDescription.add$1(mismatchDescription, " exception ").addDescriptionOf$1($.$index$asx(t2.get$state(matchState), "exception"));
        if (verbose === true) {
          t3 = mismatchDescription.add$1(mismatchDescription, " at ");
          t3.add$1(t3, $.toString$0($.$index$asx(t2.get$state(matchState), "stack")));
        }
        mismatchDescription.add$1(mismatchDescription, " does not match ").addDescriptionOf$1(t1);
        return mismatchDescription;
      }
    }
  }
};

$$.Throws_matches_anon = {"": "Closure;",
  call$1: function(fn) {
    return fn.call$0();
  },
  $isFunction: true
};

$$.Throws_matches_anon0 = {"": "Closure;done_0",
  call$1: function(value) {
    this.done_0.call$1(new $.Throws_matches__anon0(value));
  },
  $isFunction: true
};

$$.Throws_matches__anon0 = {"": "Closure;value_1",
  call$0: function() {
    var t1, failureHandler;
    t1 = "Expected future to fail, but succeeded with '" + $.S(this.value_1) + "'.";
    if ($._assertFailureHandler == null)
      $._assertFailureHandler = $.DefaultFailureHandler$();
    failureHandler = $._assertFailureHandler;
    failureHandler.fail$1(t1);
    return;
  },
  $isFunction: true
};

$$.Throws_matches_anon1 = {"": "Closure;this_2,done_3",
  call$1: function(e) {
    this.done_3.call$1(new $.Throws_matches__anon(this.this_2, e));
  },
  $isFunction: true
};

$$.Throws_matches__anon = {"": "Closure;this_4,e_5",
  call$0: function() {
    var t1, t2, reason;
    t1 = this.this_4;
    if (t1.get$_matcher() == null)
      return;
    t2 = this.e_5;
    reason = t2.get$stackTrace() != null ? "Actual exception trace:\n" + ("  " + $.replaceAll$2$s($.toString$0(t2.get$stackTrace()), "\n", "\n  ")) : null;
    $.expect($.get$error$x(t2), t1.get$_matcher(), null, reason, false);
  },
  $isFunction: true
};

$$._ReturnsNormally = {"": "BaseMatcher;",
  matches$2: function(_, f, matchState) {
    var e, s, exception, t1;
    try {
      f.call$0();
      return true;
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      $.set$state$x(matchState, $.makeLiteralMap(["exception", e, "stack", s]));
      return false;
    }

  },
  describe$1: function(description) {
    return description.add$1(description, "return normally");
  },
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    var t1, t2;
    t1 = $.getInterceptor$x(matchState);
    mismatchDescription.add$1(mismatchDescription, " threw ").addDescriptionOf$1($.$index$asx(t1.get$state(matchState), "exception"));
    if (verbose === true) {
      t2 = mismatchDescription.add$1(mismatchDescription, " at ");
      t2.add$1(t2, $.toString$0($.$index$asx(t1.get$state(matchState), "stack")));
    }
    return mismatchDescription;
  }
};

$$.TypeMatcher = {"": "BaseMatcher;",
  describe$1: function(description) {
    return description.add$1(description, this._name);
  }
};

$$._ArgumentError = {"": "TypeMatcher;_name",
  matches$2: function(_, item, matchState) {
    return typeof item === "object" && item !== null && !!$.getInterceptor(item).$isArgumentError;
  }
};

$$._UnsupportedError = {"": "TypeMatcher;_name",
  matches$2: function(_, item, matchState) {
    return typeof item === "object" && item !== null && !!$.getInterceptor(item).$isUnsupportedError;
  }
};

$$._Contains = {"": "BaseMatcher;_expected<",
  matches$2: function(_, item, matchState) {
    if (typeof item === "string")
      return $.JSString_methods.indexOf$1(item, this._expected) >= 0;
    else if (typeof item === "object" && item !== null && (item.constructor === Array || $.getInterceptor(item).$isIterable()))
      return $.contains$1$asx(item, this._expected);
    else if (typeof item === "object" && item !== null && !!$.getInterceptor(item).$isMap)
      return item.containsKey$1(this._expected);
    return false;
  },
  describe$1: function(description) {
    return description.add$1(description, "contains ").addDescriptionOf$1(this._expected);
  }
};

$$._Contains_matches_anon = {"": "Closure;this_0,matchState_1",
  call$1: function(e) {
    return $.matches$2$x(this.this_0.get$_expected(), e, this.matchState_1);
  },
  $isFunction: true
};

$$._Predicate = {"": "BaseMatcher;_matcher<,_description",
  _matcher$1: function(arg0) {
    return this._matcher.call$1(arg0);
  },
  matches$2: function(_, item, matchState) {
    return this._matcher$1(item);
  },
  describe$1: function(description) {
    return description.add$1(description, this._description);
  }
};

$$.StringDescription = {"": "Object;_out",
  toString$0: function(_) {
    return this._out;
  },
  add$1: function(_, text) {
    this._out = $.S(this._out) + $.S(text);
    return this;
  },
  addDescriptionOf$1: function(value) {
    var t1, description, t2, t3;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isMatcher)
      value.describe$1(this);
    else if (typeof value === "string")
      this._addEscapedString$1(value);
    else {
      t1 = $.getInterceptor(value);
      if (value == null)
        description = "null";
      else {
        t2 = t1.toString$0(value);
        if (typeof t2 !== "string")
          return this.addDescriptionOf$1$bailout(1, value, t1, t2);
        description = t2;
      }
      if ($.JSString_methods.startsWith$1(description, "<") && $.JSString_methods.endsWith$1(description, ">"))
        this._out = $.S(this._out) + description;
      else {
        t2 = $.JSString_methods.startsWith$1(description, "Instance of");
        t3 = this._out;
        if (t2) {
          this._out = $.S(t3) + "<";
          this._out = $.S(this._out) + description;
          this._out = $.S(this._out) + ":";
          t1 = $.toString$0(t1.get$hashCode(value));
          this._out = $.S(this._out) + $.S(t1);
          this._out = $.S(this._out) + ">";
        } else {
          this._out = $.S(t3) + "<";
          this._out = $.S(this._out) + description;
          this._out = $.S(this._out) + ">";
        }
      }
    }
    return this;
  },
  addDescriptionOf$1$bailout: function(state0, value, t1, t2) {
    switch (state0) {
      case 0:
      case 1:
        var description, t3;
        if (state0 === 0 && typeof value === "object" && value !== null && !!$.getInterceptor(value).$isMatcher)
          value.describe$1(this);
        else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && typeof value === "string")
                this._addEscapedString$1(value);
              else
                switch (state0) {
                  case 0:
                    t1 = $.getInterceptor(value);
                  case 1:
                    if (state0 === 0 && value == null)
                      description = "null";
                    else
                      switch (state0) {
                        case 0:
                          t2 = t1.toString$0(value);
                        case 1:
                          state0 = 0;
                          description = t2;
                      }
                    t2 = $.getInterceptor$s(description);
                    if (t2.startsWith$1(description, "<") && t2.endsWith$1(description, ">"))
                      this._out = $.S(this._out) + $.S(description);
                    else {
                      t2 = t2.startsWith$1(description, "Instance of");
                      t3 = this._out;
                      if (t2) {
                        this._out = $.S(t3) + "<";
                        this._out = $.S(this._out) + $.S(description);
                        this._out = $.S(this._out) + ":";
                        t1 = $.toString$0(t1.get$hashCode(value));
                        this._out = $.S(this._out) + $.S(t1);
                        this._out = $.S(this._out) + ">";
                      } else {
                        this._out = $.S(t3) + "<";
                        this._out = $.S(this._out) + $.S(description);
                        this._out = $.S(this._out) + ">";
                      }
                    }
                }
          }
        return this;
    }
  },
  _addEscapedString$1: function(string) {
    var t1, i, t2;
    this._out = $.S(this._out) + "'";
    for (t1 = string.length, i = 0; i < t1; ++i) {
      t2 = this._escape$1(string[i]);
      this._out = $.S(this._out) + $.S(t2);
    }
    this._out = $.S(this._out) + "'";
  },
  _escape$1: function(ch) {
    if (ch === "'")
      return "'";
    else if (ch === "\n")
      return "\\n";
    else if (ch === "\r")
      return "\\r";
    else if (ch === "\t")
      return "\\t";
    else
      return ch;
  },
  StringDescription$1: function(init) {
    this._out = init;
  }
};

$$.TestFailure = {"": "Object;_message",
  get$message: function(_) {
    return this._message;
  },
  toString$0: function(_) {
    return this._message;
  },
  $isTestFailure: true
};

$$.anon = {"": "Closure;",
  call$2: function(f, id) {
    return f;
  },
  call$1: function(f) {
    return this.call$2(f, null);
  },
  $isFunction: true
};

$$.DefaultFailureHandler = {"": "Object;",
  fail$1: function(reason) {
    throw $.$$throw($.TestFailure$(reason));
  },
  failMatch$5: function(actual, matcher, reason, matchState, verbose) {
    this.fail$1($._assertErrorFormatter.call$5(actual, matcher, reason, matchState, verbose));
  },
  DefaultFailureHandler$0: function() {
    if ($._assertErrorFormatter == null)
      $._assertErrorFormatter = $._defaultErrorFormatter;
  }
};

$$._IsCloseTo = {"": "BaseMatcher;_liblib6$_value,_delta",
  matches$2: function(_, item, matchState) {
    var diff, t1;
    if (!(typeof item === "number" && Math.floor(item) === item || typeof item === "number"))
      return false;
    diff = $.$sub$n(item, this._liblib6$_value);
    t1 = $.getInterceptor$n(diff);
    if (t1.$lt(diff, 0) === true)
      diff = t1.$negate(diff);
    return $.$le$n(diff, this._delta);
  },
  describe$1: function(description) {
    var t1 = description.add$1(description, "a numeric value within ").addDescriptionOf$1(this._delta);
    return t1.add$1(t1, " of ").addDescriptionOf$1(this._liblib6$_value);
  },
  describeMismatch$4: function(item, mismatchDescription, matchState, verbose) {
    var t1, diff;
    if (!(typeof item === "number")) {
      t1 = mismatchDescription.addDescriptionOf$1(item);
      return t1.add$1(t1, " not numeric");
    } else {
      t1 = this._liblib6$_value;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      diff = item - t1;
      if (diff < 0)
        diff = -diff;
      t1 = mismatchDescription.addDescriptionOf$1(item);
      return t1.add$1(t1, " differed by ").addDescriptionOf$1(diff);
    }
  }
};

$$._IsNot = {"": "BaseMatcher;_matcher<",
  matches$2: function(_, item, matchState) {
    var t1 = this._matcher;
    return t1.matches$2(t1, item, matchState) !== true;
  },
  describe$1: function(description) {
    return description.add$1(description, "not ").addDescriptionOf$1(this._matcher);
  }
};

$$.TestCase = {"": "Object;id>,description<,setUp,tearDown,testFunction,_callbackFunctionsOutstanding@,_liblib2$_message,_result,_stackTrace,currentGroup<,_startTime?,_runningTime?,enabled,_doneTeardown,_testComplete@",
  setUp$0: function() {
    return this.setUp.call$0();
  },
  tearDown$0: function() {
    return this.tearDown.call$0();
  },
  testFunction$0: function() {
    return this.testFunction.call$0();
  },
  get$message: function(_) {
    return this._liblib2$_message;
  },
  get$result: function(_) {
    return this._result;
  },
  get$stackTrace: function() {
    return this._stackTrace;
  },
  get$startTime: function(_) {
    return this._startTime;
  },
  get$runningTime: function() {
    return this._runningTime;
  },
  get$isComplete: function() {
    return !this.enabled || this.get$result(this) != null;
  },
  _runTest$0: function() {
    $._config.onTestStart$1(this);
    this._startTime = $.DateTime$_now();
    this._runningTime = null;
    this._callbackFunctionsOutstanding = this._callbackFunctionsOutstanding + 1;
    var f = this.testFunction$0();
    this._callbackFunctionsOutstanding = this._callbackFunctionsOutstanding - 1;
    if (typeof f === "object" && f !== null && !!$.getInterceptor(f).$isFuture)
      return f.then$1(new $.TestCase__runTest_anon(this)).catchError$1(new $.TestCase__runTest_anon0(this));
    else {
      if (this.get$result(this) == null && this._callbackFunctionsOutstanding === 0)
        this._complete$1("pass");
      return;
    }
  },
  _run$0: function() {
    var rtn, f;
    if (!this.enabled)
      return;
    this._stackTrace = null;
    this._result = null;
    this._liblib2$_message = "";
    this._doneTeardown = false;
    rtn = this.setUp == null ? null : this.setUp$0();
    if (typeof rtn === "object" && rtn !== null && !!$.getInterceptor(rtn).$isFuture)
      rtn.then$1(new $.TestCase__run_anon(this)).catchError$1(new $.TestCase__run_anon0(this));
    else {
      f = this._runTest$0();
      if (f != null)
        return f;
    }
    if (this.get$result(this) == null) {
      this._testComplete = $._CompleterImpl$(null);
      return this._testComplete.future;
    }
    return;
  },
  get$_run: function() {
    return new $.BoundClosure$0(this, "_run$0");
  },
  _setResult$3: function(testResult, messageText, stack) {
    var t1, t2;
    this._liblib2$_message = messageText;
    this._stackTrace = stack;
    t1 = this.get$result(this);
    t2 = $._config;
    if (t1 == null) {
      this._result = testResult;
      t2.onTestResult$1(this);
    } else {
      this._result = testResult;
      t2.onTestResultChanged$1(this);
    }
  },
  _complete$3: function(testResult, messageText, stack) {
    var rtn, t1;
    if (this.get$runningTime() == null)
      this._runningTime = $.DateTime$_now().difference$1(this.get$startTime(this));
    this._setResult$3(testResult, messageText, stack);
    if (!this._doneTeardown) {
      this._doneTeardown = true;
      if (this.tearDown != null) {
        rtn = this.tearDown$0();
        if (typeof rtn === "object" && rtn !== null && !!$.getInterceptor(rtn).$isFuture) {
          rtn.then$1(new $.TestCase__complete_anon(this)).catchError$1(new $.TestCase__complete_anon0(this));
          return;
        }
      }
    }
    t1 = this._testComplete;
    if (t1 != null) {
      t1.complete$1(t1, this);
      this._testComplete = null;
    }
  },
  _complete$1: function(testResult) {
    return this._complete$3(testResult, "", "");
  },
  fail$2: function(messageText, stack) {
    if (this.get$result(this) != null)
      this._complete$3("error", this.get$result(this) === "pass" ? "Test failed after initially passing: " + $.S(messageText) : "Test failed more than once: " + $.S(messageText), stack);
    else
      this._complete$3("fail", messageText, stack);
  },
  fail$1: function(messageText) {
    return this.fail$2(messageText, "");
  },
  error$2: function(_, messageText, stack) {
    this._complete$3("error", messageText, stack);
  },
  get$error: function(receiver) {
    return new $.Bound_error_TestCase(this, "error$2", receiver);
  },
  _markCallbackComplete$0: function() {
    var t1 = this._callbackFunctionsOutstanding - 1;
    this._callbackFunctionsOutstanding = t1;
    if (t1 === 0 && !this.get$isComplete())
      this._complete$1("pass");
  }
};

$$.TestCase__runTest_anon = {"": "Closure;this_0",
  call$1: function(_) {
    var t1 = this.this_0;
    if ($.get$result$x(t1) == null && t1.get$_callbackFunctionsOutstanding() === 0)
      t1._complete$1("pass");
    return;
  },
  $isFunction: true
};

$$.TestCase__runTest_anon0 = {"": "Closure;this_1",
  call$1: function(e) {
    return this.this_1.fail$1($.S($.get$error$x(e)));
  },
  $isFunction: true
};

$$.TestCase__run_anon = {"": "Closure;this_0",
  call$1: function(_) {
    return this.this_0._runTest$0();
  },
  $isFunction: true
};

$$.TestCase__run_anon0 = {"": "Closure;this_1",
  call$1: function(e) {
    var t1, t2;
    t1 = $._config;
    t2 = this.this_1;
    t1.onTestStart$1(t2);
    t2.set$_startTime($.DateTime$_now());
    t2.set$_runningTime(null);
    t2._complete$3("error", t2.get$description() + ": Test setup failed: " + $.S($.get$error$x(e)), "");
  },
  $isFunction: true
};

$$.TestCase__complete_anon = {"": "Closure;this_0",
  call$1: function(_) {
    var t1, t2;
    t1 = this.this_0;
    t2 = t1.get$_testComplete();
    if (t2 != null) {
      t2.complete$1(t2, t1);
      t1.set$_testComplete(null);
    }
  },
  $isFunction: true
};

$$.TestCase__complete_anon0 = {"": "Closure;this_1",
  call$1: function(e) {
    var t1, t2;
    t1 = this.this_1;
    t1._setResult$3("error", t1.get$description() + ": Test teardown failed: " + $.S($.get$error$x(e)), $.toString$0(e.get$stackTrace()));
    t2 = t1.get$_testComplete();
    if (t2 != null) {
      t2.complete$1(t2, t1);
      t1.set$_testComplete(null);
    }
  },
  $isFunction: true
};

$$._SpreadArgsHelper = {"": "Object;callback,minExpectedCalls,maxExpectedCalls,isDone,testNum,id>,actualCalls,testCase,complete",
  callback$1: function(arg0) {
    return this.callback.call$1(arg0);
  },
  callback$2: function(arg0, arg1) {
    return this.callback.call$2(arg0, arg1);
  },
  isDone$0: function() {
    return this.isDone.call$0();
  },
  shouldCallBack$0: function() {
    var t1, t2, t3;
    this.actualCalls = this.actualCalls + 1;
    if (this.testCase.get$isComplete()) {
      if ($.$eq($.get$result$x(this.testCase), "pass") === true) {
        t1 = this.testCase;
        t2 = "Callback " + this.id + "called (" + $.S(this.actualCalls) + ") after test case ";
        t3 = this.testCase;
        $.error$2$x(t1, t2 + t3.get$description() + " has already been marked as " + $.S($.get$result$x(t3)) + ".", "");
      }
      return false;
    } else {
      t1 = this.maxExpectedCalls;
      if (t1 >= 0 && this.actualCalls > t1)
        throw $.$$throw($.TestFailure$("Callback " + this.id + "called more times than expected (" + t1 + ")."));
    }
    return true;
  },
  after$0: function() {
    if (!this.complete) {
      var t1 = this.minExpectedCalls;
      if (t1 > 0 && this.actualCalls < t1)
        return;
      if (this.isDone != null && this.isDone$0() !== true)
        return;
      this.complete = true;
      this.testCase._markCallbackComplete$0();
    }
  },
  get$after: function() {
    return new $.BoundClosure$0(this, "after$0");
  },
  invoke1$1: function(arg1) {
    return $._guardAsync(new $._SpreadArgsHelper_invoke1_anon(this, arg1), this.get$after(), this.testNum);
  },
  get$invoke1: function() {
    return new $.BoundClosure$1(this, "invoke1$1");
  },
  invoke2$2: function(arg1, arg2) {
    return $._guardAsync(new $._SpreadArgsHelper_invoke2_anon(this, arg1, arg2), this.get$after(), this.testNum);
  },
  get$invoke2: function() {
    return new $.BoundClosure$2(this, "invoke2$2");
  },
  _SpreadArgsHelper$5: function(callback, minExpected, maxExpected, isDone, id) {
    var t1;
    $.ensureInitialized();
    if (!($.$ge$n($._currentTestCaseIndex, 0) === true && $.$lt$n($._currentTestCaseIndex, $.get$length$asx($.get$_testCases())) === true && $.$index$asx($.get$_testCases(), $._currentTestCaseIndex) != null))
      $.print("No valid test, did you forget to run your test inside a call to test()?");
    this.testCase = $.$index$asx($.get$_testCases(), $._currentTestCaseIndex);
    if (isDone != null || minExpected > 0) {
      t1 = this.testCase;
      t1.set$_callbackFunctionsOutstanding(t1.get$_callbackFunctionsOutstanding() + 1);
      this.complete = false;
    } else
      this.complete = true;
  }
};

$$._SpreadArgsHelper_invoke1_anon = {"": "Closure;this_0,arg1_1",
  call$0: function() {
    var t1 = this.this_0;
    if (t1.shouldCallBack$0())
      return t1.callback$1(this.arg1_1);
  },
  $isFunction: true
};

$$._SpreadArgsHelper_invoke2_anon = {"": "Closure;this_0,arg1_1,arg2_2",
  call$0: function() {
    var t1 = this.this_0;
    if (t1.shouldCallBack$0())
      return t1.callback$2(this.arg1_1, this.arg2_2);
  },
  $isFunction: true
};

$$._nextTestCase_anon = {"": "Closure;",
  call$0: function() {
    $._currentTestCaseIndex = $.$add$ns($._currentTestCaseIndex, 1);
    $._nextBatch();
  },
  $isFunction: true
};

$$._defer_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  },
  $isFunction: true
};

$$.filterTests_anon = {"": "Closure;re_0",
  call$1: function(t) {
    return this.re_0.hasMatch$1(t.get$description());
  },
  $isFunction: true
};

$$.filterTests_anon0 = {"": "Closure;testFilter_1",
  call$1: function(t) {
    return this.testFilter_1.hasMatch$1(t.get$description());
  },
  $isFunction: true
};

$$.runTests_anon = {"": "Closure;",
  call$1: function(t) {
    return $.$eq(t, $._soloTest);
  },
  $isFunction: true
};

$$.runTests_anon0 = {"": "Closure;",
  call$0: function() {
    $._nextBatch();
  },
  $isFunction: true
};

$$._nextBatch_anon = {"": "Closure;",
  call$0: function() {
    $._nextTestCase();
  },
  $isFunction: true
};

$$._ensureInitialized_anon = {"": "Closure;",
  call$2: function(f, id) {
    return $._SpreadArgsHelper$(f, 1, 0, null, id).get$invoke1();
  },
  call$1: function(f) {
    return this.call$2(f, null);
  },
  $isFunction: true
};

$$._WorkerStub = {"": "Interceptor;",
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, i) {
    receiver.id = i;
  },
  set$onmessage: function(receiver, f) {
    receiver.onmessage = f;
  },
  postMessage$1: function(receiver, msg) {
    receiver.postMessage(msg);
  },
  terminate$0: function(receiver) {
    receiver.terminate();
  }
};

$$._HTMLElement = {"": "Element;"};

$$.AnchorElement = {"": "Element;",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AnimationEvent = {"": "Event;"};

$$.AreaElement = {"": "Element;"};

$$.ArrayBuffer = {"": "Interceptor;",
  $isArrayBuffer: function() {
    return true;
  },
  $asArrayBuffer: function() {
    return null;
  }
};

$$.ArrayBufferView = {"": "Interceptor;",
  $isArrayBufferView: function() {
    return true;
  },
  $asArrayBufferView: function() {
    return null;
  }
};

$$.Attr = {"": "Node;"};

$$.AudioElement = {"": "MediaElement;"};

$$.BRElement = {"": "Element;"};

$$.BaseElement = {"": "Element;"};

$$.BeforeLoadEvent = {"": "Event;"};

$$.Blob = {"": "Interceptor;",
  $isBlob: function() {
    return true;
  },
  $asBlob: function() {
    return null;
  }
};

$$.BodyElement = {"": "Element;"};

$$.ButtonElement = {"": "Element;value="};

$$.CDataSection = {"": "Text;"};

$$.CanvasElement = {"": "Element;height=,width="};

$$.CharacterData = {"": "Node;data=,length="};

$$.CloseEvent = {"": "Event;"};

$$.Comment = {"": "CharacterData;"};

$$.CompositionEvent = {"": "UIEvent;data="};

$$.ContentElement = {"": "Element;"};

$$.CssStyleDeclaration = {"": "Interceptor;length=",
  getPropertyValue$1: function(receiver, propertyName) {
    var propValue = receiver.getPropertyValue(propertyName);
    return propValue != null ? propValue : "";
  },
  get$clear: function(receiver) {
    return this.getPropertyValue$1(receiver, "clear");
  },
  clear$1: function($receiver, arg0) {
    return this.get$clear($receiver).call$1(arg0);
  },
  get$height: function(receiver) {
    return this.getPropertyValue$1(receiver, "height");
  },
  get$left: function(receiver) {
    return this.getPropertyValue$1(receiver, "left");
  },
  get$top: function(receiver) {
    return this.getPropertyValue$1(receiver, "top");
  },
  get$width: function(receiver) {
    return this.getPropertyValue$1(receiver, "width");
  }
};

$$.CustomEvent = {"": "Event;"};

$$.DListElement = {"": "Element;"};

$$.DataListElement = {"": "Element;"};

$$.DataView = {"": "ArrayBufferView;"};

$$.DetailsElement = {"": "Element;"};

$$.DeviceMotionEvent = {"": "Event;"};

$$.DeviceOrientationEvent = {"": "Event;"};

$$.DivElement = {"": "Element;"};

$$.Document = {"": "Node;$$dom_body:body=,$$dom_head:head=",
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  queryAll$1: function(receiver, selectors) {
    return $._FrozenElementList$_wrap(receiver.querySelectorAll(selectors));
  }
};

$$.DocumentFragment = {"": "Node;",
  get$children: function(receiver) {
    if (receiver._children == null)
      receiver._children = $.FilteredElementList$(receiver);
    return receiver._children;
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  set$innerHtml: function(receiver, value) {
    var t1, e, nodes;
    t1 = this.get$nodes(receiver);
    t1.clear$0(t1);
    e = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(e);
    t1.set$innerHtml(e, value);
    nodes = $.List_List$from(t1.get$nodes(e), true, null);
    t1 = this.get$nodes(receiver);
    t1.addAll$1(t1, nodes);
  }
};

$$.DocumentType = {"": "Node;"};

$$.DomError = {"": "Interceptor;"};

$$.DomException = {"": "Interceptor;message=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {"": "Node;$$dom_children:children=,id=,innerHtml:innerHTML},tagName=",
  get$attributes: function(receiver) {
    return $._ElementAttributeMap$(receiver);
  },
  get$children: function(receiver) {
    return $._ChildrenElementList$_wrap(receiver);
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  },
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  }
};

$$.EmbedElement = {"": "Element;height=,width="};

$$.EntityReference = {"": "Node;"};

$$.ErrorEvent = {"": "Event;message="};

$$.Event = {"": "Interceptor;"};

$$.EventException = {"": "Interceptor;message=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventTarget = {"": "Interceptor;",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
};

$$.FieldSetElement = {"": "Element;"};

$$.File = {"": "Blob;",
  $isFile: function() {
    return true;
  },
  $asFile: function() {
    return null;
  }
};

$$.FileError = {"": "Interceptor;"};

$$.FileException = {"": "Interceptor;message=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Float32Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.num);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  expand$1: function(receiver, f) {
    return $.ExpandIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.num);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeAt$1: function(receiver, pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$double]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$double]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$double]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.Float64Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.num);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  expand$1: function(receiver, f) {
    return $.ExpandIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.num);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeAt$1: function(receiver, pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$double]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$double]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$double]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.FocusEvent = {"": "UIEvent;"};

$$.FormElement = {"": "Element;length="};

$$.HRElement = {"": "Element;"};

$$.HashChangeEvent = {"": "Event;"};

$$.HeadElement = {"": "Element;"};

$$.HeadingElement = {"": "Element;"};

$$.HtmlCollection = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Node);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  expand$1: function(receiver, f) {
    return $.ExpandIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeAt$1: function(receiver, pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.HtmlDocument = {"": "Document;",
  get$body: function(receiver) {
    return $.get$$$dom_body$x($.document());
  },
  get$head: function(receiver) {
    return $.get$$$dom_head$x($.document());
  }
};

$$.HtmlElement = {"": "Element;"};

$$.HtmlFormControlsCollection = {"": "HtmlCollection;"};

$$.HtmlOptionsCollection = {"": "HtmlCollection;"};

$$.HttpRequestException = {"": "Interceptor;message=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.HttpRequestProgressEvent = {"": "ProgressEvent;"};

$$.IFrameElement = {"": "Element;height=,width="};

$$.ImageElement = {"": "Element;height=,width=,x=,y="};

$$.InputElement = {"": "Element;height=,value=,width=",
  $isElement: function() {
    return true;
  },
  $asElement: function() {
    return null;
  },
  $isNode: function() {
    return true;
  },
  $asNode: function() {
    return null;
  }
};

$$.Int16Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  expand$1: function(receiver, f) {
    return $.ExpandIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeAt$1: function(receiver, pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.Int32Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  expand$1: function(receiver, f) {
    return $.ExpandIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeAt$1: function(receiver, pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.Int8Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  expand$1: function(receiver, f) {
    return $.ExpandIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeAt$1: function(receiver, pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.KeyboardEvent = {"": "UIEvent;"};

$$.KeygenElement = {"": "Element;"};

$$.LIElement = {"": "Element;value="};

$$.LabelElement = {"": "Element;"};

$$.LegendElement = {"": "Element;"};

$$.LinkElement = {"": "Element;"};

$$.LocalMediaStream = {"": "MediaStream;"};

$$.MapElement = {"": "Element;"};

$$.MediaElement = {"": "Element;error=",
  error$2: function($receiver, arg0, arg1) {
    return this.error.call$2(arg0, arg1);
  }
};

$$.MediaError = {"": "Interceptor;"};

$$.MediaKeyError = {"": "Interceptor;"};

$$.MediaKeyEvent = {"": "Event;message="};

$$.MediaStream = {"": "EventTarget;id=",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  }
};

$$.MediaStreamEvent = {"": "Event;stream="};

$$.MediaStreamTrackEvent = {"": "Event;"};

$$.MenuElement = {"": "Element;"};

$$.MessageEvent = {"": "Event;",
  get$data: function(receiver) {
    return $.convertNativeToDart_SerializedScriptValue(receiver.data);
  }
};

$$.MetaElement = {"": "Element;"};

$$.MeterElement = {"": "Element;value="};

$$.ModElement = {"": "Element;"};

$$.MouseEvent = {"": "UIEvent;"};

$$.MutationEvent = {"": "Event;"};

$$.Navigator = {"": "Interceptor;"};

$$.NavigatorUserMediaError = {"": "Interceptor;"};

$$.Node = {"": "EventTarget;",
  get$nodes: function(receiver) {
    return $._ChildNodeListLazy$(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  contains$1: function(receiver, other) {
    return receiver.contains(other);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild,oldChild);
  },
  $isNode: function() {
    return true;
  },
  $asNode: function() {
    return null;
  }
};

$$.NodeList = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Node);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  expand$1: function(receiver, f) {
    return $.ExpandIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeAt$1: function(receiver, pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.Notation = {"": "Node;"};

$$.OListElement = {"": "Element;"};

$$.ObjectElement = {"": "Element;data=,height=,width="};

$$.OptGroupElement = {"": "Element;"};

$$.OptionElement = {"": "Element;index=,value="};

$$.OutputElement = {"": "Element;value="};

$$.OverflowEvent = {"": "Event;"};

$$.PageTransitionEvent = {"": "Event;"};

$$.ParagraphElement = {"": "Element;"};

$$.ParamElement = {"": "Element;value="};

$$.PopStateEvent = {"": "Event;",
  get$state: function(receiver) {
    return $.convertNativeToDart_SerializedScriptValue(receiver.state);
  }
};

$$.PositionError = {"": "Interceptor;message="};

$$.PreElement = {"": "Element;"};

$$.ProcessingInstruction = {"": "Node;data="};

$$.ProgressElement = {"": "Element;value="};

$$.ProgressEvent = {"": "Event;"};

$$.QuoteElement = {"": "Element;"};

$$.RadioNodeList = {"": "NodeList;value="};

$$.RangeException = {"": "Interceptor;message=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.RtcDataChannelEvent = {"": "Event;"};

$$.RtcDtmfToneChangeEvent = {"": "Event;"};

$$.RtcIceCandidateEvent = {"": "Event;"};

$$.ScriptElement = {"": "Element;"};

$$.SelectElement = {"": "Element;length=,value="};

$$.ShadowElement = {"": "Element;"};

$$.ShadowRoot = {"": "DocumentFragment;innerHtml:innerHTML}"};

$$.SourceElement = {"": "Element;"};

$$.SpanElement = {"": "Element;"};

$$.SpeechInputEvent = {"": "Event;"};

$$.SpeechRecognitionError = {"": "Event;error=,message=",
  error$2: function($receiver, arg0, arg1) {
    return this.error.call$2(arg0, arg1);
  }
};

$$.SpeechRecognitionEvent = {"": "Event;"};

$$.StorageEvent = {"": "Event;"};

$$.StyleElement = {"": "Element;"};

$$.TableCaptionElement = {"": "Element;"};

$$.TableCellElement = {"": "Element;"};

$$.TableColElement = {"": "Element;"};

$$.TableElement = {"": "Element;caption=,tFoot=,tHead=",
  get$tBodies: function(receiver) {
    return $._WrappedList$(receiver.tBodies, $.TableSectionElement);
  },
  get$rows: function(receiver) {
    return $._WrappedList$(receiver.rows, $.TableRowElement);
  }
};

$$.TableRowElement = {"": "Element;",
  get$cells: function(receiver) {
    return $._WrappedList$(receiver.cells, $.TableCellElement);
  }
};

$$.TableSectionElement = {"": "Element;",
  get$rows: function(receiver) {
    return $._WrappedList$(receiver.rows, $.TableRowElement);
  }
};

$$.TemplateElement = {"": "Element;"};

$$.Text = {"": "CharacterData;"};

$$.TextAreaElement = {"": "Element;rows=,value="};

$$.TextEvent = {"": "UIEvent;data="};

$$.TitleElement = {"": "Element;"};

$$.TouchEvent = {"": "UIEvent;"};

$$.TrackElement = {"": "Element;"};

$$.TrackEvent = {"": "Event;"};

$$.TransitionEvent = {"": "Event;"};

$$.UIEvent = {"": "Event;"};

$$.UListElement = {"": "Element;"};

$$.Uint16Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  expand$1: function(receiver, f) {
    return $.ExpandIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeAt$1: function(receiver, pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.Uint32Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  expand$1: function(receiver, f) {
    return $.ExpandIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeAt$1: function(receiver, pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.Uint8Array = {"": "ArrayBufferView;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  expand$1: function(receiver, f) {
    return $.ExpandIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return this.$index(receiver, index);
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeAt$1: function(receiver, pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.Uint8ClampedArray = {"": "Uint8Array;",
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.$int);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  expand$1: function(receiver, f) {
    return $.ExpandIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.$int);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeAt$1: function(receiver, pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.$int]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.$int]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.$int]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$.UnknownElement = {"": "Element;"};

$$.VideoElement = {"": "MediaElement;height=,width="};

$$.WheelEvent = {"": "MouseEvent;"};

$$.Window = {"": "EventTarget;navigator=",
  get$top: function(receiver) {
    return $._convertNativeToDart_Window(receiver.top);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  postMessage$3: function(receiver, message, targetOrigin, messagePorts) {
    var t1 = $ === messagePorts;
    if (t1)
      messagePorts = null;
    if (!t1) {
      receiver.postMessage($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin, messagePorts);
      return;
    }
    receiver.postMessage($._convertDartToNative_PrepareForStructuredClone(message), targetOrigin);
    return;
  },
  postMessage$2: function($receiver, message, targetOrigin) {
    return this.postMessage$3($receiver, message, targetOrigin, $);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onMessage: function(receiver) {
    return $.EventStreamProvider_message.forTarget$1(receiver);
  }
};

$$.XPathException = {"": "Interceptor;message=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$._HTMLAppletElement = {"": "Element;"};

$$._HTMLBaseFontElement = {"": "Element;"};

$$._HTMLDirectoryElement = {"": "Element;"};

$$._HTMLFontElement = {"": "Element;"};

$$._HTMLFrameElement = {"": "Element;"};

$$._HTMLFrameSetElement = {"": "Element;"};

$$._HTMLMarqueeElement = {"": "Element;"};

$$._NamedNodeMap = {"": "Interceptor;",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver, $.Node);
  },
  contains$1: function(receiver, element) {
    return $.IterableMixinWorkaround_contains(receiver, element);
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0();)
      f.call$1(t1.get$current());
    return;
  },
  map$1: function(receiver, f) {
    return $.MappedListIterable$(receiver, f, null, null);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f, null);
  },
  expand$1: function(receiver, f) {
    return $.ExpandIterable$(receiver, f, null, null);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return this.get$length(receiver) === 0;
  },
  elementAt$1: function(receiver, index) {
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(receiver, iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  sort$1: function(receiver, compare) {
    throw $.$$throw($.UnsupportedError$("Cannot sort immutable List."));
  },
  indexOf$2: function(receiver, element, start) {
    return $.Lists_indexOf(receiver, element, start, this.get$length(receiver));
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  removeAt$1: function(receiver, pos) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  retainWhere$1: function(receiver, test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = this.get$length(receiver);
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  $isList: function() {
    return true;
  },
  $asList: function() {
    return function () { return [$.Node]; };
  },
  $isCollection: function() {
    return true;
  },
  $asCollection: function() {
    return function () { return [$.Node]; };
  },
  $isIterable: function() {
    return true;
  },
  $asIterable: function() {
    return function () { return [$.Node]; };
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  }
};

$$._WebKitTransitionEvent = {"": "Event;"};

$$.VersionChangeEvent = {"": "Event;"};

$$.AElement = {"": "StyledElement;"};

$$.AltGlyphElement = {"": "TextPositioningElement;"};

$$.AnimateElement = {"": "AnimationElement;"};

$$.AnimateMotionElement = {"": "AnimationElement;"};

$$.AnimateTransformElement = {"": "AnimationElement;"};

$$.AnimatedLength = {"": "Interceptor;"};

$$.AnimatedLengthList = {"": "Interceptor;"};

$$.AnimatedNumber = {"": "Interceptor;"};

$$.AnimatedNumberList = {"": "Interceptor;"};

$$.AnimatedString = {"": "Interceptor;"};

$$.AnimationElement = {"": "SvgElement;"};

$$.CircleElement = {"": "StyledElement;r="};

$$.ClipPathElement = {"": "StyledElement;"};

$$.DefsElement = {"": "StyledElement;"};

$$.DescElement = {"": "StyledElement;"};

$$.EllipseElement = {"": "StyledElement;"};

$$.FEBlendElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEColorMatrixElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEComponentTransferElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FECompositeElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEConvolveMatrixElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEDiffuseLightingElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEDisplacementMapElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEDistantLightElement = {"": "SvgElement;"};

$$.FEFloodElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEFuncAElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncBElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncGElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEFuncRElement = {"": "_SVGComponentTransferFunctionElement;"};

$$.FEGaussianBlurElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEImageElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEMergeElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEMergeNodeElement = {"": "SvgElement;"};

$$.FEMorphologyElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEOffsetElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FEPointLightElement = {"": "SvgElement;x=,y="};

$$.FESpecularLightingElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FESpotLightElement = {"": "SvgElement;x=,y="};

$$.FETileElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FETurbulenceElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$.FilterElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ForeignObjectElement = {"": "StyledElement;height=,width=,x=,y="};

$$.GElement = {"": "StyledElement;"};

$$.ImageElement0 = {"": "StyledElement;height=,width=,x=,y="};

$$.LineElement = {"": "StyledElement;"};

$$.LinearGradientElement = {"": "_SVGGradientElement;"};

$$.MarkerElement = {"": "StyledElement;"};

$$.MaskElement = {"": "StyledElement;height=,width=,x=,y="};

$$.MetadataElement = {"": "SvgElement;"};

$$.PathElement = {"": "StyledElement;"};

$$.PatternElement = {"": "StyledElement;height=,width=,x=,y="};

$$.PolygonElement = {"": "StyledElement;"};

$$.PolylineElement = {"": "StyledElement;"};

$$.RadialGradientElement = {"": "_SVGGradientElement;r="};

$$.RectElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ScriptElement0 = {"": "SvgElement;"};

$$.SetElement = {"": "AnimationElement;"};

$$.StopElement = {"": "StyledElement;"};

$$.StyleElement0 = {"": "SvgElement;"};

$$.StyledElement = {"": "SvgElement;"};

$$.SvgDocument = {"": "Document;"};

$$.SvgElement = {"": "Element;",
  get$children: function(receiver) {
    return $.FilteredElementList$(receiver);
  },
  set$children: function(receiver, value) {
    var children = this.get$children(receiver);
    children.clear$0(children);
    children.addAll$1(children, value);
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1;
    container = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    this.set$children(receiver, $.get$children$x($.$index$asx(t1.get$children(container), 0)));
  },
  get$$$dom_children: function(receiver) {
    throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  }
};

$$.SvgException = {"": "Interceptor;message=",
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {"": "StyledElement;height=,width=,x=,y="};

$$.SwitchElement = {"": "StyledElement;"};

$$.SymbolElement = {"": "StyledElement;"};

$$.TSpanElement = {"": "TextPositioningElement;"};

$$.TextContentElement = {"": "StyledElement;"};

$$.TextElement = {"": "TextPositioningElement;"};

$$.TextPathElement = {"": "TextContentElement;"};

$$.TextPositioningElement = {"": "TextContentElement;x=,y="};

$$.TitleElement0 = {"": "StyledElement;"};

$$.UseElement = {"": "StyledElement;height=,width=,x=,y="};

$$.ViewElement = {"": "SvgElement;"};

$$.ZoomEvent = {"": "UIEvent;"};

$$._SVGAltGlyphDefElement = {"": "SvgElement;"};

$$._SVGAltGlyphItemElement = {"": "SvgElement;"};

$$._SVGAnimateColorElement = {"": "AnimationElement;"};

$$._SVGComponentTransferFunctionElement = {"": "SvgElement;"};

$$._SVGCursorElement = {"": "SvgElement;x=,y="};

$$._SVGFEDropShadowElement = {"": "StyledElement;height=,result=,width=,x=,y="};

$$._SVGFontElement = {"": "SvgElement;"};

$$._SVGFontFaceElement = {"": "SvgElement;"};

$$._SVGFontFaceFormatElement = {"": "SvgElement;"};

$$._SVGFontFaceNameElement = {"": "SvgElement;"};

$$._SVGFontFaceSrcElement = {"": "SvgElement;"};

$$._SVGFontFaceUriElement = {"": "SvgElement;"};

$$._SVGGlyphElement = {"": "SvgElement;"};

$$._SVGGlyphRefElement = {"": "StyledElement;x=,y="};

$$._SVGGradientElement = {"": "StyledElement;"};

$$._SVGHKernElement = {"": "SvgElement;"};

$$._SVGMPathElement = {"": "SvgElement;"};

$$._SVGMissingGlyphElement = {"": "StyledElement;"};

$$._SVGTRefElement = {"": "TextPositioningElement;"};

$$._SVGVKernElement = {"": "SvgElement;"};

$$.AudioProcessingEvent = {"": "Event;"};

$$.OfflineAudioCompletionEvent = {"": "Event;"};

$$.ContextEvent = {"": "Event;"};

$$.SqlError = {"": "Interceptor;message="};

$$.SqlException = {"": "Interceptor;message="};

// Bound closures
$$.BoundClosure$i1 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};

$$.Bound_contains_JSString = {"": "Closure;self,target,receiver",
  call$2: function(p0, p1) {
    return this.self[this.target](this.receiver, p0, p1);
  },
  call$1: function(other) {
    return this.call$2(other, 0);
  }
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};

$$.BoundClosure$i0 = {"": "Closure;self,target,receiver",
  call$0: function() {
    return this.self[this.target](this.receiver);
  }
};

$$.BoundClosure$4 = {"": "Closure;self,target",
  call$4: function(p0, p1, p2, p3) {
    return this.self[this.target](p0, p1, p2, p3);
  }
};

$$.Bound_error_TestCase = {"": "Closure;self,target,receiver",
  call$2: function(p0, p1) {
    return this.self[this.target](this.receiver, p0, p1);
  },
  call$1: function(messageText) {
    return this.call$2(messageText, "");
  }
};

$$.BoundClosure$2 = {"": "Closure;self,target",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  }
};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.main = function() {
  $.group("bot", new $.main_anon1());
};

$._testStringReader = function() {
  $._verifyValues("", [""], null);
  $._verifyValues("Shanna", ["Shanna"], null);
  $._verifyValues("Shanna\n", ["Shanna", ""], null);
  $._verifyValues("\nShanna\n", ["", "Shanna", ""], null);
  $._verifyValues("\r\nShanna\n", ["", "Shanna", ""], null);
  $._verifyValues("\r\nShanna\r\n", ["", "Shanna", ""], null);
  $._verifyValues("\rShanna\r\n", ["\rShanna", ""], null);
  $._verifyValues("\r\n\r\n\r\r\n\n", ["", "", "\r", "", ""], null);
  $._verifyValues("line1\nline2\n\nthis\nis\the\rest\n", ["line1", "line2", ""], "this\nis\the\rest\n");
};

$._verifyValues = function(input, output, rest) {
  var sr, t1, t2;
  sr = $.StringLineReader$(input);
  for (t1 = $.JSArray_methods.get$iterator(output); t1.moveNext$0();) {
    t2 = t1.get$current();
    $.expect(sr.readNextLine$0(), t2, null, null, false);
  }
  $.expect(sr.readToEnd$0(), rest, null, "rest did not match", false);
  $.expect(sr.readNextLine$0(), null, null, "future nextLines should be null", false);
  $.expect(sr.readToEnd$0(), null, null, "future readToEnd should be null", false);
};

$.TestAttachedEvents$ = function() {
  return new $.TestAttachedEvents($.Map_Map($.Property, $.Object), $.Map_Map($.Attachable, $.EventHandle), false);
};

$.TestAttachedEvents_run = function() {
  $.group("AttachableEvent", new $.TestAttachedEvents_run_anon());
};

$.TestAttachedEvents__testRemove = function() {
  var obj, watcher1, h1;
  obj = $.TestAttachedEvents$();
  watcher1 = $.EventWatcher$($.EventArgs);
  $.expect($.get$TestAttachedEvents__testEvent1().hasSubscribers$1(obj), false, null, null, false);
  h1 = $.get$TestAttachedEvents__testEvent1().getStream$1(obj).listen$1(watcher1.get$handler());
  $.expect($.get$TestAttachedEvents__testEvent1().hasSubscribers$1(obj), true, null, null, false);
  h1.cancel$0();
  $.expect($.get$TestAttachedEvents__testEvent1().hasSubscribers$1(obj), false, null, null, false);
};

$.TestAttachedEvents__testWholeDeal = function() {
  var watcher1, watcher2, obj, h1, h2, h3;
  watcher1 = $.EventWatcher$($.EventArgs);
  watcher2 = $.EventWatcher$($.EventArgs);
  obj = $.TestAttachedEvents$();
  h1 = $.get$TestAttachedEvents__testEvent1().getStream$1(obj).listen$1(watcher1.get$handler());
  h2 = $.get$TestAttachedEvents__testEvent2().getStream$1(obj).listen$1(watcher2.get$handler());
  $.get$TestAttachedEvents__testEvent1().fireEvent$2(obj, $.C_EventArgs);
  $.expect(watcher1.get$eventCount(), $._DeepMatcher$(1, 100), null, null, false);
  $.expect(watcher2.get$eventCount(), $._DeepMatcher$(0, 100), null, null, false);
  $.get$TestAttachedEvents__testEvent2().fireEvent$2(obj, $.C_EventArgs);
  $.expect(watcher1.get$eventCount(), $._DeepMatcher$(1, 100), null, null, false);
  $.expect(watcher2.get$eventCount(), $._DeepMatcher$(1, 100), null, null, false);
  h3 = $.get$TestAttachedEvents__testEvent1().getStream$1(obj).listen$1(watcher2.get$handler());
  h1.cancel$0();
  $.expect($.get$TestAttachedEvents__testEvent1().hasSubscribers$1(obj), $.C__IsTrue, null, null, false);
  $.get$TestAttachedEvents__testEvent1().fireEvent$2(obj, $.C_EventArgs);
  $.expect(watcher1.get$eventCount(), $._DeepMatcher$(1, 100), null, null, false);
  $.expect(watcher2.get$eventCount(), $._DeepMatcher$(2, 100), null, null, false);
  $.expect($.get$TestAttachedEvents__testEvent2().hasSubscribers$1(obj), $.C__IsTrue, null, null, false);
  h2.cancel$0();
  $.expect($.get$TestAttachedEvents__testEvent2().hasSubscribers$1(obj), $.C__IsFalse, null, null, false);
  $.expect($.get$TestAttachedEvents__testEvent1().hasSubscribers$1(obj), $.C__IsTrue, null, null, false);
  h3.cancel$0();
  $.expect($.get$TestAttachedEvents__testEvent1().hasSubscribers$1(obj), $.C__IsFalse, null, null, false);
};

$.TestProperties$ = function() {
  return new $.TestProperties($.Map_Map($.Property, $.Object), $.Map_Map($.Attachable, $.EventHandle), false);
};

$.TestProperties_run = function() {
  $.group("PropertyObject", new $.TestProperties_run_anon());
};

$.TestProperties_testFactories = function(prop, setValue, propFactoryValue) {
  var wodWatcher, object, t1, propFactory;
  wodWatcher = $.EventWatcher$($.PropertyChangedEventArgs);
  object = $.TestProperties$();
  prop.getStream$1(object).listen$1(wodWatcher.get$handler());
  t1 = prop.defaultValue;
  $.expect(prop.get$1(object), $._DeepMatcher$(t1, 100), null, null, false);
  $.expect(prop.getCore$1(object), $._DeepMatcher$($.C__UndefinedValue, 100), null, null, false);
  $.expect(wodWatcher.get$eventCount(), $._DeepMatcher$(0, 100), null, null, false);
  prop.set$2(object, setValue);
  $.expect(prop.get$1(object), $._DeepMatcher$(setValue, 100), null, null, false);
  $.expect(prop.getCore$1(object), $._DeepMatcher$(setValue, 100), null, null, false);
  $.expect(wodWatcher.get$eventCount(), $._DeepMatcher$(1, 100), null, null, false);
  propFactory = new $.TestProperties_testFactories_anon(propFactoryValue);
  $.expect(prop.get$2(object, propFactory), $._DeepMatcher$(setValue, 100), null, null, false);
  $.expect(prop.getCore$1(object), $._DeepMatcher$(setValue, 100), null, null, false);
  $.expect(wodWatcher.get$eventCount(), $._DeepMatcher$(1, 100), null, null, false);
  prop.clear$1(prop, object);
  $.expect(wodWatcher.get$eventCount(), $._DeepMatcher$(2, 100), null, null, false);
  $.expect(prop.get$1(object), $._DeepMatcher$(t1, 100), null, null, false);
  $.expect(prop.getCore$1(object), $._DeepMatcher$($.C__UndefinedValue, 100), null, null, false);
  $.expect(prop.get$2(object, propFactory), $._DeepMatcher$(propFactoryValue, 100), null, null, false);
  $.expect(prop.getCore$1(object), $._DeepMatcher$(propFactoryValue, 100), null, null, false);
  $.expect(wodWatcher.get$eventCount(), $._DeepMatcher$(3, 100), null, null, false);
};

$.TestPropertyEventIntegration$ = function() {
  var t1 = new $.TestPropertyEventIntegration($.EventHandle$(null, $.EventArgs), $.EventHandle$(null, $.EventArgs), $.Map_Map($.Property, $.Object), $.Map_Map($.Attachable, $.EventHandle), false);
  t1.TestPropertyEventIntegration$0();
  return t1;
};

$.TestPropertyEventIntegration_doTest = function() {
  var nh, ah, obj;
  nh = $.EventWatcher$($.EventArgs);
  ah = $.EventWatcher$($.EventArgs);
  obj = $.TestPropertyEventIntegration$();
  obj.get$nameChanged().listen$1(nh.get$handler());
  obj.get$ageChanged().listen$1(ah.get$handler());
  $.expect(obj.get$name(obj), $.C__IsNull, null, null, false);
  $.expect(obj.get$age(), $._DeepMatcher$(0, 100), null, null, false);
  $.expect(nh.get$eventCount(), $._DeepMatcher$(0, 100), null, null, false);
  $.expect(ah.get$eventCount(), $._DeepMatcher$(0, 100), null, null, false);
  obj.set$name(obj, "Bob");
  $.expect(obj.get$name(obj), $._DeepMatcher$("Bob", 100), null, null, false);
  $.expect(obj.get$age(), $._DeepMatcher$(0, 100), null, null, false);
  $.expect(nh.get$eventCount(), $._DeepMatcher$(1, 100), null, null, false);
  $.expect(ah.get$eventCount(), $._DeepMatcher$(0, 100), null, null, false);
  obj.set$name(obj, "Bob");
  $.expect(obj.get$name(obj), $._DeepMatcher$("Bob", 100), null, null, false);
  $.expect(obj.get$age(), $._DeepMatcher$(0, 100), null, null, false);
  $.expect(nh.get$eventCount(), $._DeepMatcher$(2, 100), null, null, false);
  $.expect(ah.get$eventCount(), $._DeepMatcher$(0, 100), null, null, false);
  obj.set$age(19);
  $.expect(obj.get$name(obj), $._DeepMatcher$("Bob", 100), null, null, false);
  $.expect(obj.get$age(), $._DeepMatcher$(19, 100), null, null, false);
  $.expect(nh.get$eventCount(), $._DeepMatcher$(2, 100), null, null, false);
  $.expect(ah.get$eventCount(), $._DeepMatcher$(1, 100), null, null, false);
  obj.reset$0(obj);
  $.expect(obj.get$name(obj), $.C__IsNull, null, null, false);
  $.expect(obj.get$age(), $._DeepMatcher$(0, 100), null, null, false);
  $.expect(nh.get$eventCount(), $._DeepMatcher$(3, 100), null, null, false);
  $.expect(ah.get$eventCount(), $._DeepMatcher$(2, 100), null, null, false);
  obj.dispose$0();
};

$.TestArray2d_run = function() {
  $.group("Array2d", new $.TestArray2d_run_anon());
};

$.TestArray2d__testGetAdjacent = function() {
  var list, a;
  list = ["a", "b", "c", "d", "e", "f", "g", "h", "i"];
  a = $.Array2d_Array2d$readonlyFrom(3, list, null);
  $.expect(a, $._OrderedEquals$(list), null, null, false);
  $.expect(a.getAdjacentIndices$2(0, 0), $._OrderedEquals$([1, 3, 4]), null, null, false);
  $.expect(a.getAdjacentIndices$2(1, 1), $._OrderedEquals$([0, 1, 2, 3, 5, 6, 7, 8]), null, null, false);
  $.expect(a.getAdjacentIndices$2(4, 4), $._OrderedEquals$([]), null, null, false);
  $.expect(a.getAdjacent$2(0, 0), $._OrderedEquals$(["b", "d", "e"]), null, null, false);
  $.expect(a.getAdjacent$2(1, 1), $._OrderedEquals$(["a", "b", "c", "d", "f", "g", "h", "i"]), null, null, false);
  $.expect(a.getAdjacent$2(4, 4), $._OrderedEquals$([]), null, null, false);
};

$.TestArray2d__testSetGet = function() {
  var a, x, y;
  a = $.Array2d_Array2d(3, 3, 0, $.$int);
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.getInterceptor(a).$isJavaScriptIndexingBehavior())
    return $.TestArray2d__testSetGet$bailout(1, a);
  $.expect(a, $._OrderedEquals$([0, 0, 0, 0, 0, 0, 0, 0, 0]), null, null, false);
  for (x = 0; x < 3; ++x)
    for (y = 0; y < 3; ++y)
      $.expect(a.get$2(x, y), $._DeepMatcher$(0, 100), null, null, false);
  if (3 >= a.length)
    throw $.ioore(3);
  a[3] = 1;
  $.expect(a[3], $._DeepMatcher$(1, 100), null, null, false);
  $.expect(a.get$2(0, 1), $._DeepMatcher$(1, 100), null, null, false);
  a.set$3(0, 1, 2);
  if (3 >= a.length)
    throw $.ioore(3);
  $.expect(a[3], $._DeepMatcher$(2, 100), null, null, false);
  $.expect(a.get$2(0, 1), $._DeepMatcher$(2, 100), null, null, false);
};

$.TestArray2d__testSetGet$bailout = function(state0, a) {
  var x, y, t1;
  $.expect(a, $._OrderedEquals$([0, 0, 0, 0, 0, 0, 0, 0, 0]), null, null, false);
  for (x = 0; x < 3; ++x)
    for (y = 0; y < 3; ++y)
      $.expect(a.get$2(x, y), $._DeepMatcher$(0, 100), null, null, false);
  t1 = $.getInterceptor$ax(a);
  t1.$indexSet(a, 3, 1);
  $.expect(t1.$index(a, 3), $._DeepMatcher$(1, 100), null, null, false);
  $.expect(a.get$2(0, 1), $._DeepMatcher$(1, 100), null, null, false);
  a.set$3(0, 1, 2);
  $.expect(t1.$index(a, 3), $._DeepMatcher$(2, 100), null, null, false);
  $.expect(a.get$2(0, 1), $._DeepMatcher$(2, 100), null, null, false);
};

$.TestArray2d__testDefaultCtor = function() {
  var skinnyArray, t1;
  skinnyArray = $.Array2d_Array2d(3, 0, null, $.$int);
  t1 = $.getInterceptor$x(skinnyArray);
  $.expect(t1.get$width(skinnyArray), 3, null, null, false);
  $.expect(t1.get$height(skinnyArray), 0, null, null, false);
  $.expect(t1.get$length(skinnyArray), 0, null, null, false);
  skinnyArray = $.Array2d_Array2d(0, 3, null, $.$int);
  t1 = $.getInterceptor$x(skinnyArray);
  $.expect(t1.get$width(skinnyArray), 0, null, null, false);
  $.expect(t1.get$height(skinnyArray), 3, null, null, false);
  $.expect(t1.get$length(skinnyArray), 0, null, null, false);
};

$.TestArray2d__testReadonlyFromCtorParams = function() {
  var skinnyArray, t1;
  $.expect(new $.TestArray2d__testReadonlyFromCtorParams_anon(), $.Throws_gT2, null, null, false);
  $.expect(new $.TestArray2d__testReadonlyFromCtorParams_anon0(), $.Throws_gT2, null, null, false);
  $.expect(new $.TestArray2d__testReadonlyFromCtorParams_anon1(), $.Throws__ArgumentError_ArgumentError, null, null, false);
  $.expect(new $.TestArray2d__testReadonlyFromCtorParams_anon2(), $.Throws__ArgumentError_ArgumentError, null, null, false);
  skinnyArray = $.Array2d_Array2d$readonlyFrom(3, [], $.$int);
  t1 = $.getInterceptor$x(skinnyArray);
  $.expect(t1.get$width(skinnyArray), 3, null, null, false);
  $.expect(t1.get$height(skinnyArray), 0, null, null, false);
  $.expect(t1.get$length(skinnyArray), 0, null, null, false);
  skinnyArray = $.Array2d_Array2d$readonlyFrom(0, [], $.$int);
  t1 = $.getInterceptor$x(skinnyArray);
  $.expect(t1.get$width(skinnyArray), 0, null, null, false);
  $.expect(t1.get$height(skinnyArray), 0, null, null, false);
  $.expect(t1.get$length(skinnyArray), 0, null, null, false);
};

$.TestArray2d__testCollectionEquals = function() {
  $.expect($.Array2d_Array2d$readonlyFrom(2, [0, 1, 2, 3], $.$int), $._OrderedEquals$([0, 1, 2, 3]), null, null, false);
};

$.TestCollectionUtil_run = function() {
  $.group("CollectionUtil", new $.TestCollectionUtil_run_anon());
};

$.TestCollectionUtil__testListish = function() {
  $.expect($.CollectionUtil_allUnique($.ReadOnlyCollection$([1, 2], null)), $.C__IsTrue, null, null, false);
};

$.TestCollectionUtil__testAllUnique = function() {
  $.expect($.CollectionUtil_allUnique([]), $.C__IsTrue, null, null, false);
  $.expect($.CollectionUtil_allUnique([1]), $.C__IsTrue, null, null, false);
  $.expect($.CollectionUtil_allUnique([null]), $.C__IsTrue, null, null, false);
  $.expect($.CollectionUtil_allUnique([""]), $.C__IsTrue, null, null, false);
  $.expect($.CollectionUtil_allUnique(["str"]), $.C__IsTrue, null, null, false);
  $.expect($.CollectionUtil_allUnique([1, 2]), $.C__IsTrue, null, null, false);
  $.expect($.CollectionUtil_allUnique([1, 2]), $.C__IsTrue, null, null, false);
  $.expect($.CollectionUtil_allUnique(["", "str"]), $.C__IsTrue, null, null, false);
  $.expect($.CollectionUtil_allUnique([1, 1]), $.C__IsFalse, null, null, false);
  $.expect($.CollectionUtil_allUnique([null, null]), $.C__IsFalse, null, null, false);
  $.expect($.CollectionUtil_allUnique(["", ""]), $.C__IsFalse, null, null, false);
  $.expect($.CollectionUtil_allUnique(["", ""]), $.C__IsFalse, null, null, false);
  $.expect($.CollectionUtil_allUnique(["str", "str"]), $.C__IsFalse, null, null, false);
};

$.TestEnumerable_run = function() {
  $.group("Enumerable", new $.TestEnumerable_run_anon());
};

$.TestEnumerable__testConcat = function() {
  $.expect($.concat$1$s($.$$([0, 1, 2]), [3, 4, 5]), $._OrderedEquals$([0, 1, 2, 3, 4, 5]), null, null, false);
};

$.TestEnumerable__testExclude = function() {
  var $enum = $.$$([0, 1, 2, 3, 4]);
  $.expect($enum.exclude$1([]), $._OrderedEquals$($enum), null, null, false);
  $.expect($enum.exclude$1([5, -1]), $._OrderedEquals$($enum), null, null, false);
  $.expect($enum.exclude$1([1, 3]), $._OrderedEquals$([0, 2, 4]), null, null, false);
};

$.TestEnumerable__testDistinct = function() {
  var $enum = $.$$([0, 0, 1, 1, 2, 2, 0, 1, 2, 3, 4, 5]);
  $.expect($enum.distinct$0(), $._UnorderedEquals$([0, 1, 2, 3, 4, 5]), null, null, false);
  $.expect($enum.distinct$1(new $.TestEnumerable__testDistinct_anon()), $._UnorderedEquals$([0, 1]), null, null, false);
};

$.TestEnumerable__testForEachWithIndex = function() {
  $.$$([0, 1, 2, 3]).forEachWithIndex$1(new $.TestEnumerable__testForEachWithIndex_anon());
};

$.TestEnumerable__testToMap = function() {
  var noDupes, hashMap;
  noDupes = $.$$(["the", "kitty", "is", "super"]);
  hashMap = noDupes.toMap$1(new $.TestEnumerable__testToMap_anon());
  hashMap.forEach$1(hashMap, new $.TestEnumerable__testToMap_anon0());
  $.expect(hashMap.get$keys(), $._UnorderedEquals$(noDupes), null, null, false);
  hashMap = noDupes.toMap$2(new $.TestEnumerable__testToMap_anon1(), new $.TestEnumerable__testToMap_anon2());
  hashMap.forEach$1(hashMap, new $.TestEnumerable__testToMap_anon3());
  $.expect(hashMap.get$values(hashMap), $._UnorderedEquals$(noDupes), null, null, false);
  $.expect(new $.TestEnumerable__testToMap_anon4(noDupes), $.Throws_fPC, null, null, false);
  $.expect(new $.TestEnumerable__testToMap_anon5($.$$(["the", "cat", "is", "the", "super", "cat"])), $.Throws_fPC, null, null, false);
};

$.TestEnumerable__testCount = function() {
  var e = $.$$([1, 2, 3, 4, 5, 6]);
  $.expect($.get$length$asx(e), $._DeepMatcher$(6, 100), null, null, false);
  $.expect(e.count$1(new $.TestEnumerable__testCount_anon()), $._DeepMatcher$(3, 100), null, null, false);
};

$.TestEnumerable__testSelectNumbers = function() {
  var e = $.$$(["a", "cat", "is", "super"]).selectNumbers$1(new $.TestEnumerable__testSelectNumbers_anon());
  $.expect(e, $._OrderedEquals$([1, 3, 2, 5]), null, null, false);
  $.expect(e.sum$0(), $._DeepMatcher$(11, 100), null, null, false);
};

$.TestEnumerable__testComplexGrouping = function() {
  var keyFunc, grouping, list, t1, source;
  keyFunc = new $.TestEnumerable__testComplexGrouping_anon();
  grouping = $.$$(["a"]).group$1(keyFunc);
  $.expect(grouping.get$length(grouping), $._DeepMatcher$(1, 100), null, null, false);
  list = grouping.$index(grouping, 1);
  t1 = $.getInterceptor$asx(list);
  $.expect(t1.get$length(list), $._DeepMatcher$(1, 100), null, null, false);
  $.expect(t1.$index(list, 0), $._DeepMatcher$("a", 100), null, null, false);
  source = ["a", "b", "c", "ab", "bc", "abc"];
  grouping = $.$$(source).group$1(keyFunc);
  $.expect(grouping.get$length(grouping), $._DeepMatcher$(3, 100), null, null, false);
  list = grouping.$index(grouping, 1);
  $.expect($.get$length$asx(list), $._DeepMatcher$(3, 100), null, null, false);
  $.expect(list, $._Contains$("a"), null, null, false);
  $.expect(list, $._Contains$("b"), null, null, false);
  $.expect(list, $._Contains$("c"), null, null, false);
  $.expect(list, $._IsNot$($.wrapMatcher($._Contains$("d"))), null, null, false);
  list = grouping.$index(grouping, 2);
  $.expect($.get$length$asx(list), $._DeepMatcher$(2, 100), null, null, false);
  $.expect(list, $._Contains$("ab"), null, null, false);
  $.expect(list, $._Contains$("bc"), null, null, false);
  $.expect(list, $._IsNot$($.wrapMatcher($._Contains$("a"))), null, null, false);
  list = grouping.$index(grouping, 3);
  t1 = $.getInterceptor$asx(list);
  $.expect(t1.get$length(list), $._DeepMatcher$(1, 100), null, null, false);
  $.expect(t1.$index(list, 0), $._DeepMatcher$("abc", 100), null, null, false);
  $.expect(list, $._IsNot$($.wrapMatcher($._Contains$("d"))), null, null, false);
  $.expect(grouping.$index(grouping, 0), $.C__IsNull, null, null, false);
  $.expect($.List_List$from(grouping.getValues$0(), true, $.String), $._UnorderedEquals$(source), null, null, false);
};

$.TestEnumerable__testSimpleGrouping = function() {
  var grouping, list, t1;
  grouping = $.$$([1]).group$0();
  $.expect(grouping.get$length(grouping), $._DeepMatcher$(1, 100), null, null, false);
  list = grouping.$index(grouping, 1);
  t1 = $.getInterceptor$asx(list);
  $.expect(t1.get$length(list), $._DeepMatcher$(1, 100), null, null, false);
  $.expect(t1.$index(list, 0), $._DeepMatcher$(1, 100), null, null, false);
  grouping = $.$$([1, 1]).group$0();
  $.expect(grouping.get$length(grouping), $._DeepMatcher$(1, 100), null, null, false);
  list = grouping.$index(grouping, 1);
  t1 = $.getInterceptor$asx(list);
  $.expect(t1.get$length(list), $._DeepMatcher$(2, 100), null, null, false);
  $.expect(t1.$index(list, 0), $._DeepMatcher$(1, 100), null, null, false);
  $.expect(t1.$index(list, 1), $._DeepMatcher$(1, 100), null, null, false);
  grouping = $.$$([1, 2, 3, 1, 2, 1]).group$0();
  $.expect(grouping.get$length(grouping), $._DeepMatcher$(3, 100), null, null, false);
  list = grouping.$index(grouping, 1);
  $.expect($.get$length$asx(list), $._DeepMatcher$(3, 100), null, null, false);
  $.expect(list, $._EveryElement$($.wrapMatcher($._DeepMatcher$(1, 100))), null, null, false);
  list = grouping.$index(grouping, 2);
  $.expect($.get$length$asx(list), $._DeepMatcher$(2, 100), null, null, false);
  $.expect(list, $._EveryElement$($.wrapMatcher($._DeepMatcher$(2, 100))), null, null, false);
  list = grouping.$index(grouping, 3);
  $.expect($.get$length$asx(list), $._DeepMatcher$(1, 100), null, null, false);
  $.expect(list, $._EveryElement$($.wrapMatcher($._DeepMatcher$(3, 100))), null, null, false);
  $.expect(grouping.$index(grouping, 4), $.C__IsNull, null, null, false);
};

$.TestNumberEnumerable_run = function() {
  $.group("NumberEnumerable", new $.TestNumberEnumerable_run_anon());
};

$.TestNumberEnumerable__testRange = function() {
  $.expect($._RangeEnumerable$(10, 5), $._OrderedEquals$([10, 11, 12, 13, 14]), null, null, false);
  $.expect($._RangeEnumerable$(0, -1), $._OrderedEquals$([]), null, null, false);
  $.expect($._RangeEnumerable$(0, 0), $._OrderedEquals$([]), null, null, false);
  $.expect($._RangeEnumerable$(0, 1), $._OrderedEquals$([0]), null, null, false);
};

$.TestNumberEnumerable__testSum = function() {
  var t1 = [1, 2, 3];
  $.requireArgumentNotNull(t1, "source");
  $.expect($._SimpleNumEnumerable$(t1, null).sum$0(), $._DeepMatcher$(6, 100), null, null, false);
  $.expect(new $.TestNumberEnumerable__testSum_anon(), $.Throws_null, null, null, false);
};

$.TestNumberEnumerable__testMin = function() {
  var t1 = [1, 2, 3];
  $.requireArgumentNotNull(t1, "source");
  t1 = $._SimpleNumEnumerable$(t1, null);
  $.expect(t1.min$0(t1), $._DeepMatcher$(1, 100), null, null, false);
  $.expect(new $.TestNumberEnumerable__testMin_anon(), $.Throws_null, null, null, false);
};

$.TestNumberEnumerable__testMax = function() {
  var t1 = [1, 2, 3];
  $.requireArgumentNotNull(t1, "source");
  t1 = $._SimpleNumEnumerable$(t1, null);
  $.expect(t1.max$0(t1), $._DeepMatcher$(3, 100), null, null, false);
  $.expect(new $.TestNumberEnumerable__testMax_anon(), $.Throws_null, null, null, false);
};

$.TestNumberEnumerable__testAverage = function() {
  var t1 = [1, 2, 3];
  $.requireArgumentNotNull(t1, "source");
  $.expect($._SimpleNumEnumerable$(t1, null).average$0(), $._DeepMatcher$(2, 100), null, null, false);
  $.expect(new $.TestNumberEnumerable__testAverage_anon(), $.Throws_fgL, null, null, false);
};

$.TestSequence_run = function() {
  $.group("ListBase", new $.TestSequence_run_anon());
};

$.TestSequence__testLast = function() {
  $.expect($.TestSequence_false.get$last($.TestSequence_false), 1, null, null, false);
};

$.TestSequence__testSimple = function() {
  $.expect($.TestSequence_false.get$length($.TestSequence_false), $._DeepMatcher$(5, 100), null, null, false);
  $.expect($.TestSequence_false, $._OrderedEquals$([5, 4, 3, 2, 1]), null, null, false);
};

$.TestSequence__testIndexOf = function() {
  var i;
  for (var i = 1; i <= 5; ++i) {
    $.expect($.TestSequence_true.indexOf$1($.TestSequence_true, i), $._DeepMatcher$(5 - i, 100), null, null, false);
    $.expect($.TestSequence_true.lastIndexOf$1($.TestSequence_true, i), $._DeepMatcher$(5 + i - 1, 100), null, null, false);
  }
  for (i = 1; i <= 5; ++i)
    $.expect($.TestSequence_true.indexOf$2($.TestSequence_true, i, 5), $._DeepMatcher$(5 + i - 1, 100), null, null, false);
  for (i = 1; i <= 5; ++i)
    $.expect($.TestSequence_true.lastIndexOf$2($.TestSequence_true, i, 4), 5 - i, null, null, false);
  $.expect($.TestSequence_true.indexOf$2($.TestSequence_true, 1, 6), $._DeepMatcher$(-1, 100), null, null, false);
  $.expect($.TestSequence_true.lastIndexOf$2($.TestSequence_true, 1, 3), $._DeepMatcher$(-1, 100), null, null, false);
  $.expect($.TestSequence_true.indexOf$1($.TestSequence_true, 0), $._DeepMatcher$(-1, 100), null, null, false);
  $.expect($.TestSequence_true.lastIndexOf$1($.TestSequence_true, 0), $._DeepMatcher$(-1, 100), null, null, false);
};

$.TestHslColor_run = function() {
  $.group("HslColor", new $.TestHslColor_run_anon());
};

$.TestHslColor__testEquals = function() {
  var a, b, c;
  a = $.HslColor_HslColor(123, 1, 0.5);
  $.expect(a, $._DeepMatcher$(a, 100), null, null, false);
  $.expect(a, $._IsSameAs$(a), null, null, false);
  b = $.HslColor_HslColor(483, 1, 0.5);
  $.expect(b, $._DeepMatcher$(a, 100), null, null, false);
  $.expect(b, $._IsNot$($.wrapMatcher($._IsSameAs$(a))), null, null, false);
  c = $.HslColor_HslColor(1, 1, 0);
  $.expect(c, $._IsNot$($.wrapMatcher($._DeepMatcher$(a, 100))), null, null, false);
  $.expect(c, $._IsNot$($.wrapMatcher($._IsSameAs$(a))), null, null, false);
};

$.TestHslColor__testInvalid = function() {
  var t1, t2;
  $.expect(new $.TestHslColor__testInvalid_anon(), $.C__ReturnsNormally, null, null, false);
  for (t1 = $.JSArray_methods.get$iterator($.List_oaL); t1.moveNext$0();) {
    t2 = t1.get$current();
    $.expect(new $.TestHslColor__testInvalid_anon0(t2), $.Throws__ArgumentError_ArgumentError, null, null, false);
    $.expect(new $.TestHslColor__testInvalid_anon1(t2), $.Throws__ArgumentError_ArgumentError, null, null, false);
    $.expect(new $.TestHslColor__testInvalid_anon2(t2), $.Throws__ArgumentError_ArgumentError, null, null, false);
    $.expect(new $.TestHslColor__testInvalid_anon3(t2), $.Throws__ArgumentError_ArgumentError, null, null, false);
  }
  $.expect(new $.TestHslColor__testInvalid_anon4(), $.Throws__ArgumentError_ArgumentError, null, null, false);
  $.expect(new $.TestHslColor__testInvalid_anon5(), $.Throws__ArgumentError_ArgumentError, null, null, false);
};

$.TestRgbColor_run = function() {
  $.group("RgbColor", new $.TestRgbColor_run_anon());
};

$.TestRgbColor__testEquals = function() {
  var a, b, c;
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(1) && !$.JSInt_methods.get$isNaN(1), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "b", null);
  $.requireArgument(true, "b", null);
  a = $.RgbColor$_internal(0, 1, 255);
  $.expect(a, $._DeepMatcher$(a, 100), null, null, false);
  $.expect(a, $._IsSameAs$(a), null, null, false);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(1) && !$.JSInt_methods.get$isNaN(1), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "b", null);
  $.requireArgument(true, "b", null);
  b = $.RgbColor$_internal(0, 1, 255);
  $.expect(b, $._DeepMatcher$(a, 100), null, null, false);
  $.expect(b, $._IsNot$($.wrapMatcher($._IsSameAs$(a))), null, null, false);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(1) && !$.JSInt_methods.get$isNaN(1), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(2) && !$.JSInt_methods.get$isNaN(2), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(3) && !$.JSInt_methods.get$isNaN(3), "b", null);
  $.requireArgument(true, "b", null);
  c = $.RgbColor$_internal(1, 2, 3);
  $.expect(c, $._IsNot$($.wrapMatcher($._DeepMatcher$(a, 100))), null, null, false);
  $.expect(c, $._IsNot$($.wrapMatcher($._IsSameAs$(a))), null, null, false);
};

$.TestRgbColor__testInvalid = function() {
  $.expect(new $.TestRgbColor__testInvalid_anon(), $.Throws__ArgumentError_ArgumentError, null, null, false);
  $.expect(new $.TestRgbColor__testInvalid_anon0(), $.Throws__ArgumentError_ArgumentError, null, null, false);
  $.expect(new $.TestRgbColor__testInvalid_anon1(), $.Throws__ArgumentError_ArgumentError, null, null, false);
};

$.TestRgbColor__testHslRoundTrip = function() {
  var t1, t2, i, t3;
  for (t1 = $.JSArray_methods.get$iterator($.TestRgbColor__getCoreColors()); t1.moveNext$0();) {
    t2 = t1.get$current();
    $.expect(t2.toHsl$0().toRgb$0(), $._DeepMatcher$(t2, 100), null, null, false);
  }
  for (t1 = $.JSArray_methods.get$iterator([$.HslColor_HslColor(0, 1, 0.75)]); t1.moveNext$0();)
    $.TestRgbColor__expectRgbRoundTrip(t1.get$current());
  for (i = 0; i < 100; ++i) {
    if ($._botHelperRandom == null)
      $._botHelperRandom = $.Random_Random(null);
    t1 = $._botHelperRandom.nextInt$1(256);
    if ($._botHelperRandom == null)
      $._botHelperRandom = $.Random_Random(null);
    t2 = $._botHelperRandom.nextInt$1(256);
    if ($._botHelperRandom == null)
      $._botHelperRandom = $.Random_Random(null);
    t3 = $._botHelperRandom.nextInt$1(256);
    $.requireArgument(!$.JSInt_methods.get$isInfinite(t1) && !$.JSInt_methods.get$isNaN(t1), "r", null);
    $.requireArgument(t1 >= 0 && t1 <= 255, "r", null);
    $.requireArgument(!$.JSInt_methods.get$isInfinite(t2) && !$.JSInt_methods.get$isNaN(t2), "g", null);
    $.requireArgument(t2 >= 0 && t2 <= 255, "g", null);
    $.requireArgument(!$.JSInt_methods.get$isInfinite(t3) && !$.JSInt_methods.get$isNaN(t3), "b", null);
    $.requireArgument(t3 >= 0 && t3 <= 255, "b", null);
    t1 = $.RgbColor$_internal(t1, t2, t3);
    $.expect(t1.toHsl$0().toRgb$0(), $._DeepMatcher$(t1, 100), null, null, false);
  }
};

$.TestRgbColor__testHexRoundTrip = function() {
  var t1, t2, i, t3;
  for (t1 = $.JSArray_methods.get$iterator($.TestRgbColor__getCoreColors()); t1.moveNext$0();) {
    t2 = t1.get$current();
    $.expect($.RgbColor_RgbColor$fromHex(t2.toHex$0()), $._DeepMatcher$(t2, 100), null, null, false);
  }
  for (i = 0; i < 100; ++i) {
    if ($._botHelperRandom == null)
      $._botHelperRandom = $.Random_Random(null);
    t1 = $._botHelperRandom.nextInt$1(256);
    if ($._botHelperRandom == null)
      $._botHelperRandom = $.Random_Random(null);
    t2 = $._botHelperRandom.nextInt$1(256);
    if ($._botHelperRandom == null)
      $._botHelperRandom = $.Random_Random(null);
    t3 = $._botHelperRandom.nextInt$1(256);
    $.requireArgument(!$.JSInt_methods.get$isInfinite(t1) && !$.JSInt_methods.get$isNaN(t1), "r", null);
    $.requireArgument(t1 >= 0 && t1 <= 255, "r", null);
    $.requireArgument(!$.JSInt_methods.get$isInfinite(t2) && !$.JSInt_methods.get$isNaN(t2), "g", null);
    $.requireArgument(t2 >= 0 && t2 <= 255, "g", null);
    $.requireArgument(!$.JSInt_methods.get$isInfinite(t3) && !$.JSInt_methods.get$isNaN(t3), "b", null);
    $.requireArgument(t3 >= 0 && t3 <= 255, "b", null);
    t1 = $.RgbColor$_internal(t1, t2, t3);
    $.expect($.RgbColor_RgbColor$fromHex(t1.toHex$0()), $._DeepMatcher$(t1, 100), null, null, false);
  }
};

$.TestRgbColor__testFromHex = function() {
  var knownSet = $.HashMap$($.String, $.RgbColor);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "b", null);
  $.requireArgument(true, "b", null);
  knownSet.$indexSet(knownSet, "#ffffff", $.RgbColor$_internal(255, 255, 255));
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "b", null);
  $.requireArgument(true, "b", null);
  knownSet.$indexSet(knownSet, "#FFFFFF", $.RgbColor$_internal(255, 255, 255));
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "b", null);
  $.requireArgument(true, "b", null);
  knownSet.$indexSet(knownSet, "#000000", $.RgbColor$_internal(0, 0, 0));
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "b", null);
  $.requireArgument(true, "b", null);
  knownSet.$indexSet(knownSet, "#FF0000", $.RgbColor$_internal(255, 0, 0));
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "b", null);
  $.requireArgument(true, "b", null);
  knownSet.$indexSet(knownSet, "#ff0000", $.RgbColor$_internal(255, 0, 0));
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "b", null);
  $.requireArgument(true, "b", null);
  knownSet.$indexSet(knownSet, "#00ff00", $.RgbColor$_internal(0, 255, 0));
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "b", null);
  $.requireArgument(true, "b", null);
  knownSet.$indexSet(knownSet, "#0000ff", $.RgbColor$_internal(0, 0, 255));
  $.requireArgument(!$.JSInt_methods.get$isInfinite(51) && !$.JSInt_methods.get$isNaN(51), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(102) && !$.JSInt_methods.get$isNaN(102), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(153) && !$.JSInt_methods.get$isNaN(153), "b", null);
  $.requireArgument(true, "b", null);
  knownSet.$indexSet(knownSet, "#336699", $.RgbColor$_internal(51, 102, 153));
  knownSet.forEach$1(knownSet, new $.TestRgbColor__testFromHex_anon());
};

$.TestRgbColor__testInvalidHex = function() {
  $.JSArray_methods.forEach$1(["aoeu", "ffffff", "fff", "#ffffffff", "white", "", null], new $.TestRgbColor__testInvalidHex_anon());
};

$.TestRgbColor__getCoreColors = function() {
  var t1, t2, t3, t4, t5, t6;
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(0) && !$.JSInt_methods.get$isNaN(0), "b", null);
  $.requireArgument(true, "b", null);
  t1 = $.RgbColor$_internal(0, 0, 0);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(1) && !$.JSInt_methods.get$isNaN(1), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(1) && !$.JSInt_methods.get$isNaN(1), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(1) && !$.JSInt_methods.get$isNaN(1), "b", null);
  $.requireArgument(true, "b", null);
  t2 = $.RgbColor$_internal(1, 1, 1);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(42) && !$.JSInt_methods.get$isNaN(42), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(29) && !$.JSInt_methods.get$isNaN(29), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(123) && !$.JSInt_methods.get$isNaN(123), "b", null);
  $.requireArgument(true, "b", null);
  t3 = $.RgbColor$_internal(42, 29, 123);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(42) && !$.JSInt_methods.get$isNaN(42), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(29) && !$.JSInt_methods.get$isNaN(29), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(120) && !$.JSInt_methods.get$isNaN(120), "b", null);
  $.requireArgument(true, "b", null);
  t4 = $.RgbColor$_internal(42, 29, 120);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(254) && !$.JSInt_methods.get$isNaN(254), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(254) && !$.JSInt_methods.get$isNaN(254), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(254) && !$.JSInt_methods.get$isNaN(254), "b", null);
  $.requireArgument(true, "b", null);
  t5 = $.RgbColor$_internal(254, 254, 254);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "b", null);
  $.requireArgument(true, "b", null);
  t6 = $.RgbColor$_internal(255, 255, 255);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(245) && !$.JSInt_methods.get$isNaN(245), "r", null);
  $.requireArgument(true, "r", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(255) && !$.JSInt_methods.get$isNaN(255), "g", null);
  $.requireArgument(true, "g", null);
  $.requireArgument(!$.JSInt_methods.get$isInfinite(193) && !$.JSInt_methods.get$isNaN(193), "b", null);
  $.requireArgument(true, "b", null);
  return [t1, t2, t3, t4, t5, t6, $.RgbColor$_internal(245, 255, 193)];
};

$.TestRgbColor__expectRgbRoundTrip = function(hsl) {
  var hsl2 = hsl.toRgb$0().toHsl$0();
  $.expect(hsl2.h, $._IsCloseTo$(hsl.get$h(), 0.001), null, null, false);
  $.expect(hsl2.s, $._IsCloseTo$(hsl.get$s(), 0.001), null, null, false);
  $.expect(hsl2.l, $._IsCloseTo$(hsl.get$l(), 0.001), null, null, false);
};

$.TestEvents$ = function() {
  return new $.TestEvents($.EventHandle$(null, $.String));
};

$.TestEvents_run = function() {
  var t1 = new $.TestEvents_run_anon();
  $._ensureInitialized(true);
  $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("Event, EventHandle"), t1));
};

$.TestTarjanCycleDetect_run = function() {
  $.group("Tarjan", new $.TestTarjanCycleDetect_run_anon());
};

$.TestTarjanCycleDetect__testImpliedKey = function() {
  var graph, t1, result;
  graph = $.HashMap$($.$int, [$.Set, $.$int]);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [2]);
  graph.$indexSet(graph, 1, t1);
  result = $.TarjanCycleDetect$_internal($._TarjanList__TarjanList(graph, null), null)._executeTarjan$0();
  $.expect(result.length, $._DeepMatcher$(2, 100), null, null, false);
  if (0 >= result.length)
    throw $.ioore(0);
  $.expect(result[0], $._UnorderedEquals$([2]), null, null, false);
  if (1 >= result.length)
    throw $.ioore(1);
  $.expect(result[1], $._UnorderedEquals$([1]), null, null, false);
};

$.TestTarjanCycleDetect__testSingle = function() {
  var graph, result;
  graph = $.HashMap$($.$int, [$.Set, $.$int]);
  graph.$indexSet(graph, 1, null);
  result = $.TarjanCycleDetect$_internal($._TarjanList__TarjanList(graph, null), null)._executeTarjan$0();
  $.expect(result.length, $._DeepMatcher$(1, 100), null, null, false);
  if (0 >= result.length)
    throw $.ioore(0);
  $.expect(result[0], $._UnorderedEquals$([1]), null, null, false);
};

$.TestTarjanCycleDetect__test5Isolated = function() {
  var graph, result;
  graph = $.HashMap$($.$int, [$.Set, $.$int]);
  graph.$indexSet(graph, 1, null);
  graph.$indexSet(graph, 2, null);
  graph.$indexSet(graph, 3, null);
  graph.$indexSet(graph, 4, null);
  graph.$indexSet(graph, 5, null);
  result = $.TarjanCycleDetect$_internal($._TarjanList__TarjanList(graph, null), null)._executeTarjan$0();
  $.expect(result.length, $._DeepMatcher$(5, 100), null, null, false);
  if (0 >= result.length)
    throw $.ioore(0);
  $.expect(result[0], $._UnorderedEquals$([1]), null, null, false);
  if (1 >= result.length)
    throw $.ioore(1);
  $.expect(result[1], $._UnorderedEquals$([2]), null, null, false);
  if (2 >= result.length)
    throw $.ioore(2);
  $.expect(result[2], $._UnorderedEquals$([3]), null, null, false);
  if (3 >= result.length)
    throw $.ioore(3);
  $.expect(result[3], $._UnorderedEquals$([4]), null, null, false);
  if (4 >= result.length)
    throw $.ioore(4);
  $.expect(result[4], $._UnorderedEquals$([5]), null, null, false);
};

$.TestTarjanCycleDetect__test5Line = function() {
  var graph, t1, result;
  graph = $.HashMap$($.$int, [$.Set, $.$int]);
  graph.$indexSet(graph, 1, null);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [1]);
  graph.$indexSet(graph, 2, t1);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [2]);
  graph.$indexSet(graph, 3, t1);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [3]);
  graph.$indexSet(graph, 4, t1);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [4]);
  graph.$indexSet(graph, 5, t1);
  result = $.TarjanCycleDetect$_internal($._TarjanList__TarjanList(graph, null), null)._executeTarjan$0();
  $.expect(result.length, $._DeepMatcher$(5, 100), null, null, false);
  if (0 >= result.length)
    throw $.ioore(0);
  $.expect(result[0], $._UnorderedEquals$([1]), null, null, false);
  if (1 >= result.length)
    throw $.ioore(1);
  $.expect(result[1], $._UnorderedEquals$([2]), null, null, false);
  if (2 >= result.length)
    throw $.ioore(2);
  $.expect(result[2], $._UnorderedEquals$([3]), null, null, false);
  if (3 >= result.length)
    throw $.ioore(3);
  $.expect(result[3], $._UnorderedEquals$([4]), null, null, false);
  if (4 >= result.length)
    throw $.ioore(4);
  $.expect(result[4], $._UnorderedEquals$([5]), null, null, false);
};

$.TestTarjanCycleDetect__test5Loop = function() {
  var graph, t1, result;
  graph = $.HashMap$($.$int, [$.Set, $.$int]);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [5]);
  graph.$indexSet(graph, 1, t1);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [1]);
  graph.$indexSet(graph, 2, t1);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [2]);
  graph.$indexSet(graph, 3, t1);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [3]);
  graph.$indexSet(graph, 4, t1);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [4]);
  graph.$indexSet(graph, 5, t1);
  result = $.TarjanCycleDetect$_internal($._TarjanList__TarjanList(graph, null), null)._executeTarjan$0();
  $.expect(result.length, $._DeepMatcher$(1, 100), null, null, false);
  if (0 >= result.length)
    throw $.ioore(0);
  $.expect(result[0], $._UnorderedEquals$([1, 2, 3, 4, 5]), null, null, false);
};

$.TestTarjanCycleDetect__test5Random = function() {
  var graph, t1, result;
  graph = $.HashMap$($.$int, [$.Set, $.$int]);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [2]);
  graph.$indexSet(graph, 1, t1);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [3]);
  graph.$indexSet(graph, 2, t1);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [2]);
  graph.$indexSet(graph, 3, t1);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [1]);
  graph.$indexSet(graph, 4, t1);
  t1 = $.HashSet$($.$int);
  t1.addAll$1(t1, [4]);
  graph.$indexSet(graph, 5, t1);
  result = $.TarjanCycleDetect$_internal($._TarjanList__TarjanList(graph, null), null)._executeTarjan$0();
  $.expect(result.length, $._DeepMatcher$(4, 100), null, null, false);
  if (0 >= result.length)
    throw $.ioore(0);
  $.expect(result[0], $._UnorderedEquals$([2, 3]), null, null, false);
  if (1 >= result.length)
    throw $.ioore(1);
  $.expect(result[1], $._UnorderedEquals$([1]), null, null, false);
  if (2 >= result.length)
    throw $.ioore(2);
  $.expect(result[2], $._UnorderedEquals$([4]), null, null, false);
  if (3 >= result.length)
    throw $.ioore(3);
  $.expect(result[3], $._UnorderedEquals$([5]), null, null, false);
};

$.TestAffineTransform_run = function() {
  $.group("AffineTransform", new $.TestAffineTransform_run_anon());
};

$.TestCoordinate_run = function() {
  $.group("Coordinate", new $.TestCoordinate_run_anon());
};

$.TestBox_run = function() {
  $.group("Box", new $.TestBox_run_anon());
};

$.TestBox__testEquals = function() {
  $.expect($.Box_0_0_1_1, $._DeepMatcher$($.Box_0_0_1_1, 100), null, null, false);
  $.expect($.Box_0_0_1_1, $._IsSameAs$($.Box_0_0_1_1), null, null, false);
  $.expect($.Box_0_0_1_1, $._DeepMatcher$($.Box_0_0_1_1, 100), null, null, false);
  $.expect($.Box_0_0_1_1, $._IsSameAs$($.Box_0_0_1_1), null, null, false);
  var c = $.Box$(0, 0, 1, 1);
  $.expect(c, $._DeepMatcher$($.Box_0_0_1_1, 100), null, null, false);
  $.expect(c, $._IsNot$($.wrapMatcher($._IsSameAs$($.Box_0_0_1_1))), null, null, false);
};

$.TestBox__testSizeLocation = function() {
  var a, t1, t2;
  a = $.Box$(1, 2, 3, 4);
  t1 = a.get$topLeft();
  t2 = a.get$size(a);
  $.expect($.Box$(t1.x, t1.y, t2.width, t2.height), $._DeepMatcher$(a, 100), null, null, false);
};

$.TestBox__testValid = function() {
  var validLocations, validSizes, invalidLocations, invalidSizes, t1, a, t2, t3, t4, t5, t6, t7, t8, t9, t10;
  validLocations = [-1, 0, 1];
  validSizes = [0, 1];
  invalidLocations = [(0/0), (-1/0), (1/0), null];
  invalidSizes = [(0/0), (-1/0), (1/0), null, -1];
  for (t1 = $.JSArray_methods.get$iterator(validLocations), a = null; t1.moveNext$0();) {
    t2 = t1.get$current();
    for (t3 = $.JSArray_methods.get$iterator(validLocations); t3.moveNext$0();) {
      t4 = t3.get$current();
      for (t5 = $.JSArray_methods.get$iterator(validSizes); t5.moveNext$0();) {
        t6 = t5.get$current();
        for (t7 = $.JSArray_methods.get$iterator(validSizes); t7.moveNext$0();) {
          t8 = t7.get$current();
          a = $.Box$(t2, t4, t6, t8);
          $.expect(a.get$isValid(), $.C__IsTrue, null, null, false);
          for (t9 = $.JSArray_methods.get$iterator(invalidLocations); t9.moveNext$0();) {
            t10 = t9.get$current();
            $.expect($.Box$(t10, t4, t6, t8).get$isValid(), $.C__IsFalse, null, null, false);
            a = $.Box$(t2, t10, t6, t8);
            $.expect(a.get$isValid(), $.C__IsFalse, null, null, false);
          }
          for (t9 = $.JSArray_methods.get$iterator(invalidSizes); t9.moveNext$0();) {
            t10 = t9.get$current();
            $.expect($.Box$(t2, t4, t10, t8).get$isValid(), $.C__IsFalse, null, null, false);
            a = $.Box$(t2, t4, t6, t10);
            $.expect(a.get$isValid(), $.C__IsFalse, null, null, false);
          }
        }
      }
    }
  }
};

$.TestVector_run = function() {
  $.group("Vector", new $.TestVector_run_anon());
};

$.TestCloneable$internal = function(_id) {
  return new $.TestCloneable(_id);
};

$.TestCloneable_run = function() {
  var t1 = new $.TestCloneable_run_anon();
  $._ensureInitialized(true);
  $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("Cloneable"), t1));
};

$.TestTuple_run = function() {
  var t1 = new $.TestTuple_run_anon();
  $._ensureInitialized(true);
  $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("Tuple"), t1));
  t1 = new $.TestTuple_run_anon0();
  $._ensureInitialized(true);
  $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec("Tuple3"), t1));
};

$.TestUtil_run = function() {
  $.group("Util", new $.TestUtil_run_anon());
};

$.TestUtil__testSplitLines = function() {
  var t1, t2;
  $.expect(new $.TestUtil__testSplitLines_anon(), $.Throws_gT2, null, null, false);
  for (t1 = $.JSArray_methods.get$iterator($.List_Avr); t1.moveNext$0();) {
    t2 = t1.get$current();
    $.expect($.Util_splitLines(t2.get$item1()), $._DeepMatcher$(t2.get$item2(), 100), null, null, false);
  }
};

$.TestUtil__testGetHashCode = function() {
  $.expect(new $.TestUtil__testGetHashCode_anon(), $.Throws_gT2, null, null, false);
  $.TestUtil__hashCodeFun([], 0);
  $.TestUtil__hashCodeFun([null], 0);
  $.TestUtil__hashCodeFun([null, null], 0);
  $.TestUtil__hashCodeFun([1], 307143837);
  $.TestUtil__hashCodeFun([1, 2], 93096440);
  $.TestUtil__hashCodeFun([2, 1], 405401106);
  $.TestUtil__hashCodeFun([null, 1], 307143837);
  $.TestUtil__hashCodeFun([null, null, 1], 307143837);
  $.TestUtil__hashCodeFun([1, null], 15319219);
};

$.TestUtil__hashCodeFun = function(items, expectedValue) {
  $.expect($.Util_getHashCode($.JSArray_methods.map$1(items, new $.TestUtil__hashCodeFun_anon())), $._DeepMatcher$(expectedValue, 100), null, null, false);
};

$._SimpleHash__SimpleHash = function(hashCode) {
  if (hashCode == null)
    return;
  else
    return $._SimpleHash$_internal(hashCode);
};

$._SimpleHash$_internal = function(hashCode) {
  return new $._SimpleHash(hashCode);
};

$.main0 = function() {
  $.group("bot_async", new $.main_anon0());
};

$.registerDelayedResultTests = function() {
  $.group("delayedResult", new $.registerDelayedResultTests_anon());
};

$._testSilly = function(values, doThrow) {
  var finalVal, t1, msg;
  finalVal = $._drValue;
  $._drValue = $.$add$ns(finalVal, 1);
  t1 = $.JSArray_methods.map$1(values, new $._testSilly_anon());
  msg = t1.join$1(t1, " to ");
  if (!$.JSString_methods.get$isEmpty(msg))
    msg = $.JSString_methods.$add(msg, " to ");
  $._drTest($.JSString_methods.$add(msg, doThrow === true ? "throw sorry" : "obj"), $._returnSilly(values, finalVal, doThrow), finalVal, doThrow);
};

$._returnSilly = function(values, finalVal, doThrow) {
  var t1 = $.getInterceptor$asx(values);
  if (t1.get$isEmpty(values) === true) {
    if (doThrow === true)
      return new $._returnSilly_anon(finalVal);
    return finalVal;
  }
  if (t1.removeAt$1(values, 0) === true)
    return $._FutureImpl$immediate($._returnSilly(values, finalVal, doThrow), null);
  else
    return new $._returnSilly_anon0(values, finalVal, doThrow);
};

$._drTest = function(description, input, expectedOutput, expectThrow) {
  var t1 = new $._drTest_anon(input, expectedOutput, expectThrow);
  $._ensureInitialized(true);
  $.add$1$ax($.get$_testCases(), $.TestCase$_internal($.$add$ns($.get$length$asx($.get$_testCases()), 1), $._fullSpec(description), t1));
};

$.TestFutureValueResult_run = function() {
  $.group("FutureValueResult", new $.TestFutureValueResult_run_anon());
};

$.TestFutureValueResult__testValueRoundTrip = function() {
  var initialVal, map, newVal;
  initialVal = $.FutureValueResult$(42, null, null);
  map = initialVal.toMap$0();
  $.expect($.FutureValueResult_isMyMap(map), $.C__IsTrue, null, null, false);
  newVal = $.FutureValueResult_FutureValueResult$fromMap(map, null);
  $.expect(newVal, $._DeepMatcher$(initialVal, 100), null, null, false);
  $.expect(newVal, $._IsNot$($.wrapMatcher($._IsSameAs$(initialVal))), null, null, false);
  $.expect($.get$value$x(newVal), $._DeepMatcher$(42, 100), null, null, false);
};

$.TestFutureValueResult__testExceptionRoundTrip = function() {
  var initialVal, map, newVal;
  initialVal = $.FutureValueResult$fromException("oops", "bad things", null);
  map = initialVal.toMap$0();
  $.expect($.FutureValueResult_isMyMap(map), $.C__IsTrue, null, null, false);
  newVal = $.FutureValueResult_FutureValueResult$fromMap(map, null);
  $.expect(newVal, $._DeepMatcher$(initialVal, 100), null, null, false);
  $.expect(newVal, $._IsNot$($.wrapMatcher($._IsSameAs$(initialVal))), null, null, false);
  $.expect($.get$error$x(newVal), $._DeepMatcher$("oops", 100), null, null, false);
  $.expect(newVal.get$stackTrace(), $._DeepMatcher$("bad things", 100), null, null, false);
};

$.TestSendPortValue_run = function() {
  $.group("SendPortValue", new $.TestSendPortValue_run_anon());
};

$.TestSendPortValue__testSimple = function() {
  var tv, callback, onError;
  tv = $._TestValue$();
  callback = $._SpreadArgsHelper$(new $.TestSendPortValue__testSimple_anon(tv), 1, 0, null, null).get$invoke1();
  onError = $._SpreadArgsHelper$(new $.TestSendPortValue__testSimple_anon0(), 1, 0, null, null).get$invoke1();
  tv.get$outputChanged().listen$1(callback);
  tv.get$error(tv).listen$1(onError);
  tv.set$input(5);
  tv.set$input(-1);
};

$.TestSendPortValue__testComplex = function() {
  var tv, callback, onError;
  tv = $._ComplexTestValue$();
  callback = $._SpreadArgsHelper$(new $.TestSendPortValue__testComplex_anon(tv), 1, 0, null, null).get$invoke1();
  onError = $._SpreadArgsHelper$(new $.TestSendPortValue__testComplex_anon0(), 1, 0, null, null).get$invoke1();
  tv.get$outputChanged().listen$1(callback);
  tv.get$error(tv).listen$1(onError);
  tv.set$input($.Tuple$(5, 6, $.$int, $.$int));
  tv.set$input(null);
};

$._TestValue$ = function() {
  return new $._TestValue($.spawnFunction($._testIsolate, null), null, null, null, null, null, null, null, false, $.EventHandle$(null, $.EventArgs), $.EventHandle$(null, $.EventArgs), $.EventHandle$(null, $.Object));
};

$._testIsolate = function() {
  $.SendValuePort$(new $._testIsolate_anon(), null, null, $.$int, $.$int);
};

$._ComplexTestValue$ = function() {
  return new $._ComplexTestValue($.spawnFunction($._complexTestIsolate, null), $._t2ToList, $._listToT3, null, null, null, null, null, false, $.EventHandle$(null, $.EventArgs), $.EventHandle$(null, $.EventArgs), $.EventHandle$(null, $.Object));
};

$._t2ToList = function(input) {
  if (input == null)
    return;
  else
    return [input.get$item1(), input.get$item2()];
};

$._listToT2 = function(input) {
  var t1 = $.getInterceptor(input);
  if (input == null)
    return;
  else
    return $.Tuple$(t1.$index(input, 0), t1.$index(input, 1), $.$int, $.$int);
};

$._t3ToList = function(input) {
  return [input.get$item1(), input.get$item2(), input.get$item3()];
};

$._listToT3 = function(input) {
  var t1 = $.getInterceptor$asx(input);
  return $.Tuple3$(t1.$index(input, 0), t1.$index(input, 1), t1.$index(input, 2), $.$int, $.$int, $.$int);
};

$._complexTestIsolate = function() {
  $.SendValuePort$(new $._complexTestIsolate_anon(), $._listToT2, $._t3ToList, [$.Tuple, $.$int, $.$int], [$.Tuple3, $.$int, $.$int, $.$int]);
};

$.main1 = function() {
  $.group("bot_test", new $.main_anon());
};

$._testExpectFutureComplete = function() {
  $.expectFutureComplete($._getFuture(false), null);
};

$._testExpectFutureCompleteWithComplete = function() {
  var onComplete = $._SpreadArgsHelper$(new $._testExpectFutureCompleteWithComplete_anon(), 1, 0, null, null).get$invoke1();
  $.expectFutureComplete($._getFuture(false), onComplete);
};

$._testExpectFutureException = function() {
  $.expectFutureFail($._getFuture(true), null);
};

$._testExpectFutureExceptionWithComplete = function() {
  var onFail = $._SpreadArgsHelper$(new $._testExpectFutureExceptionWithComplete_anon(), 1, 0, null, null).get$invoke1();
  $.expectFutureFail($._getFuture(true), onFail);
};

$._getFuture = function(shouldFail) {
  return $._Isolate_spawnFunction($._echoIsolate, null).call$1(shouldFail).then$1(new $._getFuture_anon());
};

$._echoIsolate = function() {
  $._Isolate_port().receive$1(new $._echoIsolate_anon());
};

$.main2 = function() {
  $.groupSep = " - ";
  var t1 = $.get$_singletonNotLayout();
  $.unittestConfiguration(t1);
  $.main();
  $.main0();
  $.main1();
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.getInterceptor(src).$isJavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof srcStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.getInterceptor(dst).$isJavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof count !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var t1, i, j, t2, t3;
  t1 = $.getInterceptor$n(srcStart);
  if (t1.$lt(srcStart, dstStart) === true)
    for (i = $.$sub$n(t1.$add(srcStart, count), 1), j = $.$sub$n($.$add$ns(dstStart, count), 1), t1 = $.getInterceptor$asx(src); t2 = $.getInterceptor$n(i), t2.$ge(i, srcStart) === true; i = t2.$sub(i, 1), j = $.$sub$n(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t2 = $.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = $.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)) === true; i = t3.$add(i, 1), j = $.$add$ns(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex !== (startIndex | 0))
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Arrays_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, i;
  t1 = $.getInterceptor$n(startIndex);
  if (t1.$ge(startIndex, a.length) === true)
    return -1;
  if (t1.$lt(startIndex, 0) === true)
    startIndex = 0;
  for (i = startIndex; $.$lt$n(i, endIndex) === true; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.ListIterator$ = function(iterable, E) {
  var t1 = new $.ListIterator(iterable, $.get$length$asx(iterable), 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.MappedIterable$ = function(_iterable, _f, S, T) {
  var t1 = new $.MappedIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedIterator$ = function(_iterator, _f, S, T) {
  var t1 = new $.MappedIterator(null, _iterator, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedListIterable$ = function(_source, _f, S, T) {
  var t1 = new $.MappedListIterable(_source, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.WhereIterable$ = function(_iterable, _f, E) {
  var t1 = new $.WhereIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterator$ = function(_iterator, _f, E) {
  var t1 = new $.WhereIterator(_iterator, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.ExpandIterable$ = function(_iterable, _f, S, T) {
  var t1 = new $.ExpandIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.ExpandIterator$ = function(_iterator, _f, S, T) {
  var t1 = new $.ExpandIterator(_iterator, _f, $.C_EmptyIterator, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.ListMixin__filter = function(source, test, retainMatching) {
  var retained, $length, i, element;
  retained = [];
  $length = source.get$length(source);
  for (i = 0; i < $length; ++i) {
    element = source.$index(source, i);
    if ($.$eq(test.call$1(element), retainMatching) === true)
      retained.push(element);
    if ($length !== source.get$length(source))
      throw $.$$throw($.ConcurrentModificationError$(source));
  }
  if (retained.length !== source.get$length(source)) {
    source.setRange$3(source, 0, retained.length, retained);
    source.set$length(source, retained.length);
  }
};

$.Sort_insertionSort_ = function(a, left, right, compare) {
  var i, el, j, t1, t2, j0;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.getInterceptor(a).$isJavaScriptIndexingBehavior())
    return $.Sort_insertionSort_$bailout(1, a, left, right, compare);
  for (i = left + 1; i <= right; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    el = a[i];
    j = i;
    while (true) {
      if (j > left) {
        t1 = j - 1;
        if (t1 < 0 || t1 >= a.length)
          throw $.ioore(t1);
        t1 = $.$gt$n(compare.call$2(a[t1], el), 0) === true;
      } else
        t1 = false;
      t2 = a.length;
      if (!t1)
        break;
      j0 = j - 1;
      if (j0 < 0 || j0 >= t2)
        throw $.ioore(j0);
      t1 = a[j0];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      a[j] = t1;
      j = j0;
    }
    if (j < 0 || j >= t2)
      throw $.ioore(j);
    a[j] = el;
  }
};

$.Sort_insertionSort_$bailout = function(state0, a, left, right, compare) {
  var i, t1, el, j, j0;
  for (i = left + 1, t1 = $.getInterceptor$asx(a); i <= right; ++i) {
    el = t1.$index(a, i);
    j = i;
    while (true) {
      if (!(j > left && $.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0) === true))
        break;
      j0 = j - 1;
      t1.$indexSet(a, j, t1.$index(a, j0));
      j = j0;
    }
    t1.$indexSet(a, j, el);
  }
};

$.Sort__dualPivotQuicksort = function(a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, t2, less, great, k, ak, comp, t3, great0, less0, t4;
  if (typeof a !== "object" || a === null || (a.constructor !== Array || !!a.immutable$list) && !$.getInterceptor(a).$isJavaScriptIndexingBehavior())
    return $.Sort__dualPivotQuicksort$bailout(1, a, left, right, compare);
  sixth = $.JSNumber_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  if (index1 !== (index1 | 0))
    throw $.iae(index1);
  t1 = a.length;
  if (index1 < 0 || index1 >= t1)
    throw $.ioore(index1);
  el1 = a[index1];
  if (index2 !== (index2 | 0))
    throw $.iae(index2);
  if (index2 < 0 || index2 >= t1)
    throw $.ioore(index2);
  el2 = a[index2];
  if (index3 !== (index3 | 0))
    throw $.iae(index3);
  if (index3 < 0 || index3 >= t1)
    throw $.ioore(index3);
  el3 = a[index3];
  if (index4 !== (index4 | 0))
    throw $.iae(index4);
  if (index4 < 0 || index4 >= t1)
    throw $.ioore(index4);
  el4 = a[index4];
  if (index5 !== (index5 | 0))
    throw $.iae(index5);
  if (index5 < 0 || index5 >= t1)
    throw $.ioore(index5);
  el5 = a[index5];
  if ($.$gt$n(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1 = a.length;
  if (index1 >= t1)
    throw $.ioore(index1);
  a[index1] = el1;
  if (index3 >= t1)
    throw $.ioore(index3);
  a[index3] = el3;
  if (index5 >= t1)
    throw $.ioore(index5);
  a[index5] = el5;
  if (left < 0 || left >= t1)
    throw $.ioore(left);
  t2 = a[left];
  if (index2 >= t1)
    throw $.ioore(index2);
  a[index2] = t2;
  if (right < 0 || right >= t1)
    throw $.ioore(right);
  t2 = a[right];
  if (index4 >= t1)
    throw $.ioore(index4);
  a[index4] = t2;
  less = left + 1;
  great = right - 1;
  t1 = $.$eq(compare.call$2(el2, el4), 0) === true;
  if (t1)
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      comp = compare.call$2(ak, el2);
      t2 = $.getInterceptor(comp);
      if (t2.$eq(comp, 0) === true)
        continue;
      if (t2.$lt(comp, 0) === true) {
        if (k !== less) {
          t2 = a.length;
          if (less >= t2)
            throw $.ioore(less);
          t3 = a[less];
          if (k >= t2)
            throw $.ioore(k);
          a[k] = t3;
          a[less] = ak;
        }
        ++less;
      } else
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          comp = compare.call$2(a[great], el2);
          t2 = $.getInterceptor$n(comp);
          if (t2.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            t2 = t2.$lt(comp, 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              t2 = a[less];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              less0 = less + 1;
              if (great >= t3)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              great = great0;
              less = less0;
              break;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              t2 = a[great];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              a[great] = ak;
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$lt$n(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t2 = a.length;
          if (less >= t2)
            throw $.ioore(less);
          t3 = a[less];
          if (k >= t2)
            throw $.ioore(k);
          a[k] = t3;
          a[less] = ak;
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$gt$n(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t2 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t3 = a.length;
            if (t2 === true) {
              if (less >= t3)
                throw $.ioore(less);
              t2 = a[less];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              less0 = less + 1;
              if (great >= t3)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t3)
                throw $.ioore(great);
              t2 = a[great];
              if (k >= t3)
                throw $.ioore(k);
              a[k] = t2;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
  t2 = less - 1;
  t3 = a.length;
  if (t2 >= t3)
    throw $.ioore(t2);
  t4 = a[t2];
  if (left >= t3)
    throw $.ioore(left);
  a[left] = t4;
  a[t2] = el2;
  t2 = great + 1;
  if (t2 < 0 || t2 >= t3)
    throw $.ioore(t2);
  t4 = a[t2];
  if (right >= t3)
    throw $.ioore(right);
  a[right] = t4;
  a[t2] = el4;
  t2 = less - 2;
  if (t2 - left <= 32)
    $.Sort_insertionSort_(a, left, t2, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, t2, compare);
  t2 = great + 2;
  if (right - t2 <= 32)
    $.Sort_insertionSort_(a, t2, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, t2, right, compare);
  if (t1)
    return;
  if (less < index1 && great > index5) {
    while (true) {
      if (less >= a.length)
        throw $.ioore(less);
      if (!($.$eq(compare.call$2(a[less], el2), 0) === true))
        break;
      ++less;
    }
    while (true) {
      if (great < 0 || great >= a.length)
        throw $.ioore(great);
      if (!($.$eq(compare.call$2(a[great], el4), 0) === true))
        break;
      --great;
    }
    for (k = less; k <= great; ++k) {
      if (k >= a.length)
        throw $.ioore(k);
      ak = a[k];
      if ($.$eq(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t1 = a.length;
          if (less >= t1)
            throw $.ioore(less);
          t2 = a[less];
          if (k >= t1)
            throw $.ioore(k);
          a[k] = t2;
          a[less] = ak;
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;) {
          if (great < 0 || great >= a.length)
            throw $.ioore(great);
          if ($.$eq(compare.call$2(a[great], el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            if (great >= a.length)
              throw $.ioore(great);
            t1 = $.$lt$n(compare.call$2(a[great], el2), 0);
            great0 = great - 1;
            t2 = a.length;
            if (t1 === true) {
              if (less >= t2)
                throw $.ioore(less);
              t1 = a[less];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              less0 = less + 1;
              if (great >= t2)
                throw $.ioore(great);
              a[less] = a[great];
              a[great] = ak;
              less = less0;
            } else {
              if (great >= t2)
                throw $.ioore(great);
              t1 = a[great];
              if (k >= t2)
                throw $.ioore(k);
              a[k] = t1;
              a[great] = ak;
            }
            great = great0;
            break;
          }
        }
    }
    if (great - less <= 32)
      $.Sort_insertionSort_(a, less, great, compare);
    else
      $.Sort__dualPivotQuicksort(a, less, great, compare);
  } else if (great - less <= 32)
    $.Sort_insertionSort_(a, less, great, compare);
  else
    $.Sort__dualPivotQuicksort(a, less, great, compare);
};

$.Sort__dualPivotQuicksort$bailout = function(state0, a, left, right, compare) {
  var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, t2, k, ak, comp, t3, great0, less0;
  sixth = $.JSNumber_methods.$tdiv(right - left + 1, 6);
  index1 = left + sixth;
  index5 = right - sixth;
  index3 = $.JSInt_methods.$tdiv(left + right, 2);
  index2 = index3 - sixth;
  index4 = index3 + sixth;
  t1 = $.getInterceptor$asx(a);
  el1 = t1.$index(a, index1);
  el2 = t1.$index(a, index2);
  el3 = t1.$index(a, index3);
  el4 = t1.$index(a, index4);
  el5 = t1.$index(a, index5);
  if ($.$gt$n(compare.call$2(el1, el2), 0) === true) {
    t0 = el2;
    el2 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el3), 0) === true) {
    t0 = el3;
    el3 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el1, el4), 0) === true) {
    t0 = el4;
    el4 = el1;
    el1 = t0;
  }
  if ($.$gt$n(compare.call$2(el3, el4), 0) === true) {
    t0 = el4;
    el4 = el3;
    el3 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el5), 0) === true) {
    t0 = el5;
    el5 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el2, el3), 0) === true) {
    t0 = el3;
    el3 = el2;
    el2 = t0;
  }
  if ($.$gt$n(compare.call$2(el4, el5), 0) === true) {
    t0 = el5;
    el5 = el4;
    el4 = t0;
  }
  t1.$indexSet(a, index1, el1);
  t1.$indexSet(a, index3, el3);
  t1.$indexSet(a, index5, el5);
  t1.$indexSet(a, index2, t1.$index(a, left));
  t1.$indexSet(a, index4, t1.$index(a, right));
  less = left + 1;
  great = right - 1;
  t2 = $.$eq(compare.call$2(el2, el4), 0) === true;
  if (t2)
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      comp = compare.call$2(ak, el2);
      t3 = $.getInterceptor(comp);
      if (t3.$eq(comp, 0) === true)
        continue;
      if (t3.$lt(comp, 0) === true) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else
        for (; true;) {
          comp = compare.call$2(t1.$index(a, great), el2);
          t3 = $.getInterceptor$n(comp);
          if (t3.$gt(comp, 0) === true) {
            --great;
            continue;
          } else {
            great0 = great - 1;
            if (t3.$lt(comp, 0) === true) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
              break;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              break;
            }
          }
        }
    }
  else
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if ($.$lt$n(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$gt$n(compare.call$2(ak, el4), 0) === true)
        for (; true;)
          if ($.$gt$n(compare.call$2(t1.$index(a, great), el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if ($.$lt$n(compare.call$2(t1.$index(a, great), el2), 0) === true) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
  t3 = less - 1;
  t1.$indexSet(a, left, t1.$index(a, t3));
  t1.$indexSet(a, t3, el2);
  t3 = great + 1;
  t1.$indexSet(a, right, t1.$index(a, t3));
  t1.$indexSet(a, t3, el4);
  t3 = less - 2;
  if (t3 - left <= 32)
    $.Sort_insertionSort_(a, left, t3, compare);
  else
    $.Sort__dualPivotQuicksort(a, left, t3, compare);
  t3 = great + 2;
  if (right - t3 <= 32)
    $.Sort_insertionSort_(a, t3, right, compare);
  else
    $.Sort__dualPivotQuicksort(a, t3, right, compare);
  if (t2)
    return;
  if (less < index1 && great > index5) {
    for (; $.$eq(compare.call$2(t1.$index(a, less), el2), 0) === true;)
      ++less;
    for (; $.$eq(compare.call$2(t1.$index(a, great), el4), 0) === true;)
      --great;
    for (k = less; k <= great; ++k) {
      ak = t1.$index(a, k);
      if ($.$eq(compare.call$2(ak, el2), 0) === true) {
        if (k !== less) {
          t1.$indexSet(a, k, t1.$index(a, less));
          t1.$indexSet(a, less, ak);
        }
        ++less;
      } else if ($.$eq(compare.call$2(ak, el4), 0) === true)
        for (; true;)
          if ($.$eq(compare.call$2(t1.$index(a, great), el4), 0) === true) {
            --great;
            if (great < k)
              break;
            continue;
          } else {
            great0 = great - 1;
            if ($.$lt$n(compare.call$2(t1.$index(a, great), el2), 0) === true) {
              t1.$indexSet(a, k, t1.$index(a, less));
              less0 = less + 1;
              t1.$indexSet(a, less, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
              less = less0;
            } else {
              t1.$indexSet(a, k, t1.$index(a, great));
              t1.$indexSet(a, great, ak);
              great = great0;
            }
            break;
          }
    }
    if (great - less <= 32)
      $.Sort_insertionSort_(a, less, great, compare);
    else
      $.Sort__dualPivotQuicksort(a, less, great, compare);
  } else if (great - less <= 32)
    $.Sort_insertionSort_(a, less, great, compare);
  else
    $.Sort__dualPivotQuicksort(a, less, great, compare);
};

$.ToString__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, first, t3;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || $.getInterceptor(c).$isList());
  result.write$1(isList ? "[" : "{");
  for (t2 = $.get$iterator$ax(c), first = true; t2.moveNext$0(); first = false) {
    t3 = t2.get$current();
    if (!first)
      result.write$1(", ");
    $.ToString__emitObject(t3, result, visiting);
  }
  result.write$1(isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || $.getInterceptor(o).$isCollection()))
    if ($.ToString__containsRef(visiting, o))
      result.write$1(typeof o === "object" && o !== null && (o.constructor === Array || $.getInterceptor(o).$isList()) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      result.write$1("{...}");
    else
      $.ToString__emitMap(o, result, visiting);
  else
    result.write$1(o);
};

$.ToString__containsRef = function(c, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(c); t1.moveNext$0();)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.ToString__emitMap = function(m, result, visiting) {
  var t1, t2;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  result.write$1("{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitMap_anon(t1, result, visiting));
  result.write$1("}");
  t2.removeLast$0(visiting);
};

$.HashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key) === true)
      return i;
  return -1;
};

$.HashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.HashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashMapKeyIterator$ = function(_map, _keys, E) {
  var t1 = new $.HashMapKeyIterator(_map, _keys, 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashSet__findBucketIndex = function(bucket, element) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i], element) === true)
      return i;
  return -1;
};

$.HashSetIterator$ = function(_set, _elements, E) {
  var t1 = new $.HashSetIterator(_set, _elements, 0, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._ConstantMapKeyIterable$ = function(_map) {
  return new $._ConstantMapKeyIterable(_map);
};

$.getNativeInterceptor = function(object) {
  return object[$.dispatchPropertyName]();
};

$.setNativeInterceptor = function($prototype, $function) {
  $prototype[$.dispatchPropertyName]=$function;
};

$.JsIsolateSink$fromPort = function(_port) {
  return new $.JsIsolateSink(false, _port);
};

$._callInIsolate = function(isolate, $function) {
  isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.$$throw($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, entryPoint, replyTo, context, t2;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_anon(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.managers;
      t2 = $.getInterceptor$x(sender);
      t1.remove$1(t1, t2.get$id(sender));
      t2.terminate$0(sender);
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        t1 = $globalState.mainManager;
        t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.$$throw(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives_spawnFunction = function(topLevelFunction) {
  var $name = (topLevelFunction.$name || null);
  if ($name == null)
    throw $.$$throw($.UnsupportedError$("only top-level functions can be spawned."));
  return $.IsolateNatives_spawn($name, null, false);
};

$.IsolateNatives_spawn = function(functionName, uri, isLight) {
  var completer, port, signalReply;
  completer = $._CompleterImpl$($.SendPort);
  port = $.ReceivePortImpl$();
  port.receive$1(new $.IsolateNatives_spawn_anon(completer, port));
  signalReply = port.toSendPort$0();
  if ($globalState.get$useWorkers() === true && !isLight)
    $.IsolateNatives__startWorker(functionName, uri, signalReply);
  else
    $.IsolateNatives__startNonWorker(functionName, uri, signalReply);
  return $._BufferingSendPort$($.get$id$x($globalState.currentContext), completer.future);
};

$.IsolateNatives__startWorker = function(functionName, uri, replyPort) {
  var t1;
  if ($globalState.isWorker === true) {
    t1 = $globalState.mainManager;
    t1.postMessage$1(t1, $._serializeMessage($.makeLiteralMap(["command", "spawn-worker", "functionName", functionName, "uri", uri, "replyPort", replyPort])));
  } else
    $.IsolateNatives__spawnWorker(functionName, uri, replyPort);
};

$.IsolateNatives__startNonWorker = function(functionName, uri, replyPort) {
  if (uri != null)
    throw $.$$throw($.UnsupportedError$("Currently spawnUri is not supported without web workers."));
  $globalState.topEventLoop.enqueue$3($._IsolateContext$(), new $.IsolateNatives__startNonWorker_anon(functionName, replyPort), "nonworker start");
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, t2, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  t1 = $.getInterceptor$x(worker);
  t1.set$onmessage(worker, function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t2 = $globalState;
  workerId = t2.nextManagerId;
  t2.nextManagerId = workerId + 1;
  t1.set$id(worker, workerId);
  t2 = $globalState.managers;
  t2.$indexSet(t2, workerId, worker);
  t1.postMessage$1(worker, $._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$._BufferingSendPort$ = function(isolateId, _futurePort) {
  var t1 = new $._BufferingSendPort($._BufferingSendPort__idCount, null, _futurePort, [], isolateId);
  t1._BufferingSendPort$2(isolateId, _futurePort);
  return t1;
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports, $.List).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + (value);
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives__throwFormatException = function(string) {
  throw $.$$throw($.FormatException$(string));
};

$.Primitives_parseInt = function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i;
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  $.checkString(source);
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    t1 = $.getInterceptor(match);
    if (match != null) {
      if (t1.$index(match, 2) != null)
        return parseInt(source, 16);
      if (t1.$index(match, 3) != null)
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    throw $.$$throw($.ArgumentError$("Radix is not an integer"));
    if ($.JSNull_methods.$lt(radix, 2) || $.JSNull_methods.$gt(radix, 36))
      throw $.$$throw($.RangeError$("Radix " + $.S(radix) + " not in range 2..36"));
    t1 = $.getInterceptor(match);
    if (match != null) {
      if (false)
        return parseInt(source, 10);
      if ($.JSNull_methods.$lt(radix, 10) || t1.$index(match, 3) == null) {
        if ($.JSNull_methods.$le(radix, 10)) {
          if (typeof radix !== "number")
            throw $.iae(radix);
          maxCharCode = 48 + radix - 1;
        } else {
          if (typeof radix !== "number")
            throw $.iae(radix);
          maxCharCode = 97 + radix - 10 - 1;
        }
        digitsPart = $.toLowerCase$0$s(t1.$index(match, 1));
        for (i = 0; i < digitsPart.length; ++i)
          if ($.JSString_methods.codeUnitAt$1(digitsPart, i) > maxCharCode)
            return handleError.call$1(source);
      }
    }
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_dateNow = function() {
  return Date.now();
};

$.Primitives_lazyAsJsDate = function(receiver) {
  if (receiver.date === (void 0))
    receiver.date = new Date(receiver.millisecondsSinceEpoch);
  return receiver.date;
};

$.Primitives_getYear = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === (void 0))
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = (receiver.date.getUTCFullYear() + 0);
  } else {
    if (receiver.date === (void 0))
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = (receiver.date.getFullYear() + 0);
  }
  return t1;
};

$.Primitives_getMonth = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === (void 0))
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getUTCMonth() + 1;
  } else {
    if (receiver.date === (void 0))
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = receiver.date.getMonth() + 1;
  }
  return t1;
};

$.Primitives_getDay = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === (void 0))
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = (receiver.date.getUTCDate() + 0);
  } else {
    if (receiver.date === (void 0))
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = (receiver.date.getDate() + 0);
  }
  return t1;
};

$.Primitives_getHours = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === (void 0))
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = (receiver.date.getUTCHours() + 0);
  } else {
    if (receiver.date === (void 0))
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = (receiver.date.getHours() + 0);
  }
  return t1;
};

$.Primitives_getMinutes = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === (void 0))
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = (receiver.date.getUTCMinutes() + 0);
  } else {
    if (receiver.date === (void 0))
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = (receiver.date.getMinutes() + 0);
  }
  return t1;
};

$.Primitives_getSeconds = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === (void 0))
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = (receiver.date.getUTCSeconds() + 0);
  } else {
    if (receiver.date === (void 0))
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = (receiver.date.getSeconds() + 0);
  }
  return t1;
};

$.Primitives_getMilliseconds = function(receiver) {
  var t1;
  if (receiver.isUtc === true) {
    if (receiver.date === (void 0))
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = (receiver.date.getUTCMilliseconds() + 0);
  } else {
    if (receiver.date === (void 0))
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    t1 = (receiver.date.getMilliseconds() + 0);
  }
  return t1;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.C_NullThrownError;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$(null, null);
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  target.$builtinTypeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  return target.$builtinTypeInfo;
};

$.getRuntimeTypeArgument = function(target, substitution, index) {
  var $arguments = $.getRuntimeTypeInfo(target);
  if (substitution != null && (substitution.constructor === Array))
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $arguments == null ? null : $arguments[index];
};

$.TypeImpl$ = function(typeName) {
  return new $.TypeImpl(typeName);
};

$.getRuntimeTypeAsString = function(runtimeType) {
  var t1, className;
  t1 = $.getInterceptor$asx(runtimeType);
  className = t1.$index(runtimeType, 0).builtin$cls;
  if ($.$eq(t1.get$length(runtimeType), 1) === true)
    return className;
  return className + "<" + $.joinArguments(runtimeType, 1) + ">";
};

$.runtimeTypeToString = function(type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && (type.constructor === Array))
    return $.getRuntimeTypeAsString(type);
  else
    return type.builtin$cls;
};

$.joinArguments = function(types, startIndex) {
  var buffer, index, firstArgument;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !$.getInterceptor(types).$isJavaScriptIndexingBehavior()))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer.write$1(", ");
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    buffer.write$1($.runtimeTypeToString(types[index]));
  }
  return buffer.toString$0(buffer);
};

$.joinArguments$bailout = function(state0, types, startIndex) {
  var buffer, t1, index, firstArgument;
  buffer = $.StringBuffer$("");
  for (t1 = $.getInterceptor$asx(types), index = startIndex, firstArgument = true; $.JSNumber_methods.$lt(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer.write$1(", ");
    buffer.write$1($.runtimeTypeToString(t1.$index(types, index)));
  }
  return buffer.toString$0(buffer);
};

$.getRuntimeTypeString = function(object) {
  var className, typeInfo;
  className = (object.constructor === Array) ? "List" : object.constructor.builtin$cls;
  typeInfo = object.$builtinTypeInfo;
  if (typeInfo == null)
    return className;
  return className + "<" + $.joinArguments(typeInfo, 0) + ">";
};

$.createRuntimeType = function($name) {
  return $.TypeImpl$($name);
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.getFunctionForTypeNameOf = function() {
  if (typeof(navigator) !== "object")
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.toStringForNativeObject = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $._getTypeNameOf.call$1(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, $name, methods, $arguments) {
  var hasOwnPropertyFunction, tag, method, secondTag, nameOfObjectClass, proto;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if (!((obj) instanceof ($.Object))) {
    if ($._getTypeNameOf == null)
      $._getTypeNameOf = $.getFunctionForTypeNameOf();
    tag = $._getTypeNameOf.call$1(obj);
    method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
    if (method == null) {
      secondTag = $.alternateTag(obj, tag);
      if (secondTag != null)
        method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
    }
  } else
    method = null;
  if (method == null) {
    if ($._getTypeNameOf == null)
      $._getTypeNameOf = $.getFunctionForTypeNameOf();
    nameOfObjectClass = $._getTypeNameOf.call$1($.C_Object);
    method = hasOwnPropertyFunction.call(methods, nameOfObjectClass) ? methods[nameOfObjectClass] : null;
  }
  if (method == null)
    (function(){throw new TypeError($name + " is not a function");})();
  else {
    proto = Object.getPrototypeOf(obj);
    if (!hasOwnPropertyFunction.call(proto, $name) || proto === Object.prototype)
      Object.defineProperty(proto, $name, {value: method, enumerable: false, writable: true, configurable: true});
  }
  return method.apply(obj, $arguments);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, t1, i, entry;
  method = hasOwnPropertyFunction.call(methods, tag) ? methods[tag] : null;
  if (method == null) {
    if (typeof($dynamicMetadata) === "undefined")
      $._dynamicMetadata([]);
    t1 = $dynamicMetadata != null;
  } else
    t1 = false;
  if (t1) {
    i = 0;
    while (true) {
      if (typeof($dynamicMetadata) === "undefined")
        $._dynamicMetadata([]);
      if (!(i < $dynamicMetadata.length))
        break;
      if (typeof($dynamicMetadata) === "undefined")
        $._dynamicMetadata([]);
      entry = $dynamicMetadata[i];
      if (hasOwnPropertyFunction.call(entry.get$_liblib8$_set(), tag)) {
        t1 = entry.get$_tag();
        method = hasOwnPropertyFunction.call(methods, t1) ? methods[t1] : null;
        if (method != null)
          break;
      }
      ++i;
    }
  }
  return method;
};

$.dynamicFunction = function($name) {
  var table, f, methods, bind;
  table = $.dynamicFunctionTable;
  if (table == null) {
    table = {};
    $.dynamicFunctionTable = table;
  }
  f = table[$name];
  if (f != null && !!f.methods)
    return f.methods;
  methods = {};
  bind = function() {return $.dynamicBind.call$4(this, $name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  Object.defineProperty(Object.prototype, $name, {value: bind, enumerable: false, writable: true, configurable: true});
  Object.defineProperty(table, $name, {value: bind, enumerable: false, writable: true, configurable: true});
  return methods;
};

$.defineNativeMethods = function(tag, interceptorClass) {
  var methods = interceptorClass.prototype;
  $.dynamicFunction($.dispatchPropertyName)[tag]=function(){return methods};
};

$.defineNativeMethodsNonleaf = function(tag, interceptorClass) {
  var methods, method;
  methods = interceptorClass.prototype;
  method = $.dispatchPropertyName;
  $.dynamicFunction(method)[tag]=function(){if(Object.getPrototypeOf(this).hasOwnProperty(method))return methods;return $._redispatchGetNativeInterceptorHook(method,this);};
};

$.defineNativeMethodsFinish = function() {
  var t1, t2;
  t1 = $.dispatchPropertyName;
  t2 = Object.getPrototypeOf($.C_Interceptor);
  Object.prototype[t1]=function(){if (Object.getPrototypeOf(this) === Object.prototype)return t2;return $._redispatchGetNativeInterceptorHook(t1,this);};
};

$._redispatchGetNativeInterceptorHook = function($name, receiver) {
  return $.dynamicFunctionTable[$name].call(receiver);
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive, $.JSSyntaxRegExp_makeNative(pattern, multiLine, caseSensitive, false));
};

$.JSSyntaxRegExp$_globalVersionOf = function(other) {
  var t1, t2, t3;
  t1 = other.get$pattern(other);
  t2 = other.get$isMultiLine();
  t3 = other.get$isCaseSensitive();
  return new $.JSSyntaxRegExp(t1, t2, t3, $.JSSyntaxRegExp_makeNative(t1, t2, t3, true));
};

$.JSSyntaxRegExp_makeNative = function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  $.checkString(pattern);
  m = multiLine === true ? "m" : "";
  i = caseSensitive === true ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.$$throw($.FormatException$("Illegal RegExp pattern: " + $.S(pattern) + ", " + errorMessage));
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp$_globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, $length, patternLength, startIndex, position, endIndex;
  result = $.List_List($, $.Match);
  $.setRuntimeTypeInfo(result, [$.Match]);
  $length = haystack.length;
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = $.JSString_methods.indexOf$2(haystack, needle, startIndex);
    if (position === -1)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = position + patternLength;
    if (endIndex === $length)
      break;
    else
      startIndex = position === endIndex ? startIndex + 1 : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
  else if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$isJSSyntaxRegExp)
    return other.hasMatch$1($.JSString_methods.substring$1(receiver, startIndex));
  else
    return $.get$iterator$ax($.allMatches$1$s(other, $.JSString_methods.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  $.checkString(to);
  if (typeof from === "string")
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = $.StringBuffer$("");
        $length = receiver.length;
        result.write$1(to);
        for (i = 0; i < $length; ++i) {
          result.write$1(receiver[i]);
          result.write$1(to);
        }
        return result.toString$0(result);
      }
    else
      return receiver.replace(new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
  else if (typeof from === "object" && from !== null && !!$.getInterceptor(from).$isJSSyntaxRegExp)
    return receiver.replace($.JSSyntaxRegExp$_globalVersionOf(from)._nativeRegExp, to.replace("$", "$$$$"));
  else {
    $.checkNull(from);
    throw $.$$throw("String.replaceAll(Pattern) UNIMPLEMENTED");
  }
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$.Future_Future$of = function($function, T) {
  var result, T0, error, stackTrace, t1, exception;
  try {
    result = $function.call$0();
    t1 = $._FutureImpl$(T0);
    t1._setOrChainValue$1(result);
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    error = t1;
    stackTrace = $.getTraceFromException(exception);
    return $._FutureImpl$immediateError(error, stackTrace, T0);
  }

};

$._CompleterImpl$ = function(T) {
  var t1 = new $._CompleterImpl($._FutureImpl$(T), false);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureListenerWrapper$ = function(future, T) {
  var t1 = new $._FutureListenerWrapper(future, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$ = function(T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureImpl$immediate = function(value, T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediate$1(value, T);
  return t1;
};

$._FutureImpl$immediateError = function(error, stackTrace, T) {
  var t1 = new $._FutureImpl(0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._FutureImpl$immediateError$2(error, stackTrace, T);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures, T) {
  var t1, t2, t3, t4, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    t4 = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    t4.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, pos));
  }
  if ($.$eq(t1.remaining_2, 0) === true)
    return $._FutureImpl$immediate($.List_empty, null);
  t1.values_1 = $.List_List(t1.remaining_2, null);
  t1.completer_0 = $._CompleterImpl$($.List);
  return t1.completer_0.future;
};

$._ThenFuture$ = function(_onValue, S, T) {
  var t1 = new $._ThenFuture(_onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._CatchErrorFuture$ = function(_onError, _test, T) {
  var t1 = new $._CatchErrorFuture(_test, _onError, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SubscribeFuture$ = function(onValue, _onError, S, T) {
  var t1 = new $._SubscribeFuture(_onError, onValue, null, 0, null);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$._WhenFuture$ = function(_action, T) {
  var t1 = new $._WhenFuture(_action, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FutureWrapper$ = function(_future, T) {
  var t1 = new $._FutureWrapper(_future);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._MultiControllerStream$ = function(_subscriptionHandler, _pauseHandler, T) {
  var t1 = new $._MultiControllerStream(_subscriptionHandler, _pauseHandler, null, null, 0, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._MultiStreamImpl$0(T);
  return t1;
};

$._StreamSubscriptionImpl$ = function(source, _onData, _onError, _onDone, _unsubscribeOnError, T) {
  var t1 = new $._StreamSubscriptionImpl(_unsubscribeOnError, _onData, _onError, _onDone, source, 0, null, null);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._InternalLink$0();
  return t1;
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  error.throwDelayed$0();
};

$._nullDoneHandler = function() {
};

$._DelayedData$ = function(value, T) {
  var t1 = new $._DelayedData(value, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._DelayedDone$ = function() {
  return new $._DelayedDone();
};

$._InternalLink_unlink = function(element) {
  var next, previous;
  next = element.get$_nextLink();
  previous = element.get$_previousLink();
  next.set$_previousLink(previous);
  previous.set$_nextLink(next);
  element.set$_previousLink(element);
  element.set$_nextLink(element);
};

$._InternalLinkList_add = function(list, element) {
  var listEnd;
  if (element !== element._nextLink)
    $._InternalLink_unlink(element);
  listEnd = list._previousLink;
  listEnd.set$_nextLink(element);
  list._previousLink = element;
  element._previousLink = listEnd;
  element._nextLink = list;
};

$._InternalLinkList_isEmpty = function(list) {
  return list === list._nextLink;
};

$._StreamImplEvents$ = function() {
  return new $._StreamImplEvents(null, null, null);
};

$._DoneSubscription$ = function(_handler, T) {
  var t1 = new $._DoneSubscription(_handler, null, 0);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._DoneSubscription$1(_handler, T);
  return t1;
};

$._asyncError = function(error, stackTrace, cause) {
  if (typeof error === "object" && error !== null && !!$.getInterceptor(error).$isAsyncError)
    return error;
  if (cause == null)
    return $.AsyncError$(error, stackTrace);
  return $.AsyncError$withCause(error, stackTrace, cause);
};

$._runUserCode = function(userCode, onSuccess, onError, cause) {
  var result, e, e0, s, exception, t1;
  result = null;
  try {
    result = userCode.call$0();
  } catch (exception) {
    t1 = $.unwrapException(exception);
    if (typeof t1 === "object" && t1 !== null && !!$.getInterceptor(t1).$isAsyncError) {
      e = t1;
      return onError.call$1(e);
    } else {
      e0 = t1;
      s = $.getTraceFromException(exception);
      if (cause == null)
        onError.call$1($.AsyncError$(e0, s));
      else
        onError.call$1($.AsyncError$withCause(e0, s, cause));
    }
  }

  onSuccess.call$1(result);
};

$._cancelAndError = function(subscription, future) {
  return new $._cancelAndError_anon(subscription, future);
};

$._ForwardingStreamSubscription$ = function(_stream, onData, onError, onDone, _unsubscribeOnError, S, T) {
  var t1 = new $._ForwardingStreamSubscription(_stream, _unsubscribeOnError, null, onData, onError, onDone);
  $.setRuntimeTypeInfo(t1, [S, T]);
  t1._BaseStreamSubscription$3(onData, onError, onDone, T);
  t1._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, _unsubscribeOnError, S, T);
  return t1;
};

$._WhereStream$ = function(source, test, T) {
  var t1 = new $._WhereStream(test, source);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._MapStream$ = function(source, transform, S, T) {
  var t1 = new $._MapStream(transform, source);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.Timer_run = function(callback) {
  var t1, milliseconds;
  $.add$1$ax($.get$Timer__runCallbacks(), callback);
  if ($.$eq($.get$length$asx($.get$Timer__runCallbacks()), 1) === true) {
    t1 = new $.Timer_run_anon();
    milliseconds = $.Duration_0.get$inMilliseconds();
    if (milliseconds < 0)
      milliseconds = 0;
    $.TimerImpl$(milliseconds, t1);
  }
};

$.IterableMixinWorkaround_contains = function(iterable, element) {
  var t1, t2;
  for (t1 = $.get$iterator$ax(iterable), t2 = $.getInterceptor(element); t1.moveNext$0();)
    if (t2.$eq(element, t1.get$current()) === true)
      return true;
  return false;
};

$.IterableMixinWorkaround_any = function(iterable, f) {
  var t1;
  for (t1 = $.JSArray_methods.get$iterator(iterable); t1.moveNext$0();)
    if (f.call$1(t1.get$current()) === true)
      return true;
  return false;
};

$.IterableMixinWorkaround_removeWhereList = function(list, test) {
  var retained, $length, i, element, t1, t2;
  if (typeof list !== "object" || list === null || (list.constructor !== Array || !!list.immutable$list) && !$.getInterceptor(list).$isJavaScriptIndexingBehavior())
    return $.IterableMixinWorkaround_removeWhereList$bailout(1, list, test);
  retained = [];
  $length = list.length;
  for (i = 0; i < $length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if ($length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  t1 = retained.length;
  if (t1 === $length)
    return;
  $.JSArray_methods.set$length(list, t1);
  for (t1 = list.length, i = 0; i < retained.length; ++i) {
    t2 = retained[i];
    if (i >= t1)
      throw $.ioore(i);
    list[i] = t2;
  }
};

$.IterableMixinWorkaround_removeWhereList$bailout = function(state0, list, test) {
  var retained, $length, i, element, t1;
  retained = [];
  $length = list.length;
  for (i = 0; i < $length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if ($length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  t1 = retained.length;
  if (t1 === $length)
    return;
  $.JSArray_methods.set$length(list, t1);
  for (i = 0; i < retained.length; ++i)
    $.JSArray_methods.$indexSet(list, i, retained[i]);
};

$.IterableMixinWorkaround_setRangeList = function(list, start, $length, from, startFrom) {
  var t1 = $.getInterceptor($length);
  if (t1.$eq($length, 0) === true)
    return;
  if (t1.$lt($length, 0) === true)
    throw $.$$throw($.ArgumentError$($length));
  t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) === true)
    throw $.$$throw($.RangeError$value(start));
  if ($.$gt$n(t1.$add(start, $length), list.length) === true)
    throw $.$$throw($.RangeError$value(t1.$add(start, $length)));
  $.Arrays_copy(from, startFrom, list, start, $length);
};

$.UnmodifiableListView$ = function(source, E) {
  var t1 = new $.UnmodifiableListView(source);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashMap$ = function(K, V) {
  var t1 = new $.HashMap(0, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.HashSet$ = function(E) {
  var t1 = new $.HashSet(0, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._LinkedHashMapTable$ = function(K, V) {
  var t1 = new $._LinkedHashMapTable(null, 8, 0, 0, 0, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1._HashTable$1(8, K);
  return t1;
};

$.LinkedHashMap$ = function(K, V) {
  var t1 = new $.LinkedHashMap($._LinkedHashMapTable$(K, V));
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1.LinkedHashMap$0(K, V);
  return t1;
};

$._LinkedHashTableKeyIterable$ = function(_table, K) {
  var t1 = new $._LinkedHashTableKeyIterable(_table);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._LinkedHashTableKeyIterator$ = function(hashTable, K) {
  var t1 = new $._LinkedHashTableKeyIterator(hashTable, hashTable._modificationCount, hashTable._next$1(0), null);
  $.setRuntimeTypeInfo(t1, [K]);
  return t1;
};

$._LinkedHashTableValueIterable$ = function(_hashTable, _valueIndex, V) {
  var t1 = new $._LinkedHashTableValueIterable(_hashTable, _valueIndex);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$._LinkedHashTableValueIterator$ = function(hashTable, _valueIndex, V) {
  var t1 = new $._LinkedHashTableValueIterator(_valueIndex, hashTable, hashTable._modificationCount, hashTable._next$1(0), null);
  $.setRuntimeTypeInfo(t1, [V]);
  return t1;
};

$.Queue_Queue = function(E) {
  return $.ListQueue$(null, E);
};

$.ListQueue$ = function(initialCapacity, E) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  return $.JSNull_methods.$and(number, $.JSNull_methods.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var nextNumber;
  number = $.$shl$n(number, 2) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue, E) {
  var t1 = new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.Comparable_compare = function(a, b) {
  return $.compareTo$1$ns(a, b);
};

$.DateTime$fromMillisecondsSinceEpoch = function(millisecondsSinceEpoch, isUtc) {
  var t1 = new $.DateTime(millisecondsSinceEpoch, isUtc);
  t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
  return t1;
};

$.DateTime$_now = function() {
  var t1 = new $.DateTime($.Primitives_dateNow(), false);
  t1.DateTime$_now$0();
  return t1;
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  var t1 = $.$mul$n(milliseconds, 1000);
  if (typeof t1 !== "number")
    throw $.iae(t1);
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + t1 + microseconds);
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string")
    return "\"" + $.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"") + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.IntegerDivisionByZeroException$ = function() {
  return new $.IntegerDivisionByZeroException();
};

$.List_List = function($length, E) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.List_List$from = function(other, growable, E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = $.List_List($, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0();)
    list.push(t1.get$current());
  if (growable)
    return list;
  $length = list.length;
  fixedList = $.List_List($length, E);
  $.setRuntimeTypeInfo(fixedList, [E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
};

$.Map_Map = function(K, V) {
  return $.HashMap$(K, V);
};

$.print = function(object) {
  $.Primitives_printString(object);
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.get$$$dom_children$x(element));
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, -1, null);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$._ElementFactoryProvider_createElement_html = function(html) {
  var match, tag, parentTag, temp, t1, element;
  match = $.get$_START_TAG_REGEXP().firstMatch$1(html);
  if (match != null) {
    tag = $.toLowerCase$0$s(match.group$1(1));
    if ($.Device__isIE == null)
      $.Device__isIE = $.Device_isOpera() !== true && $.contains$2$asx($.Device_userAgent(), "MSIE", 0);
    if ($.Device__isIE === true && $.Map_Ai46y.containsKey$1(tag))
      return $._ElementFactoryProvider__createTableForIE(html, tag);
    parentTag = $.Map_8h6qb.$index($.Map_8h6qb, tag);
    if (parentTag == null)
      parentTag = "div";
  } else {
    parentTag = "div";
    tag = null;
  }
  temp = document.createElement(parentTag);
  t1 = $.getInterceptor$x(temp);
  t1.set$innerHtml(temp, html);
  if ($.$eq($.get$length$asx(t1.get$children(temp)), 1) === true)
    element = $.$index$asx(t1.get$children(temp), 0);
  else if ($.$eq(parentTag, "html") === true && $.$eq($.get$length$asx(t1.get$children(temp)), 2) === true) {
    t1 = t1.get$children(temp);
    element = $.$index$asx(t1, tag === "head" ? 0 : 1);
  } else {
    $._ElementFactoryProvider__singleNode(t1.get$children(temp));
    element = null;
  }
  $.remove$0$ax(element);
  return element;
};

$._ElementFactoryProvider__createTableForIE = function(html, tag) {
  var div, t1, table, element;
  div = document.createElement("div");
  t1 = $.getInterceptor$x(div);
  t1.set$innerHtml(div, "<table>" + html + "</table>");
  table = $._ElementFactoryProvider__singleNode(t1.get$children(div));
  element = null;
  switch (tag) {
    case "td":
    case "th":
      element = $._ElementFactoryProvider__singleNode($.get$cells$x($._ElementFactoryProvider__singleNode($.get$rows$x(table))));
      break;
    case "tr":
      element = $._ElementFactoryProvider__singleNode($.get$rows$x(table));
      break;
    case "tbody":
      element = $._ElementFactoryProvider__singleNode($.get$tBodies$x(table));
      break;
    case "thead":
      element = $.get$tHead$x(table);
      break;
    case "tfoot":
      element = $.get$tFoot$x(table);
      break;
    case "caption":
      element = $.get$caption$x(table);
      break;
    case "colgroup":
      element = $._ElementFactoryProvider__getColgroup(table);
      break;
    case "col":
      element = $._ElementFactoryProvider__singleNode($.get$children$x($._ElementFactoryProvider__getColgroup(table)));
      break;
  }
  $.remove$0$ax(element);
  return element;
};

$._ElementFactoryProvider__getColgroup = function(table) {
  return $._ElementFactoryProvider__singleNode($.toList$0$ax($.where$1$ax($.get$children$x(table), new $._ElementFactoryProvider__getColgroup_anon())));
};

$._ElementFactoryProvider__singleNode = function(list) {
  var t1 = $.getInterceptor$asx(list);
  if ($.$eq(t1.get$length(list), 1) === true)
    return t1.$index(list, 0);
  throw $.$$throw($.ArgumentError$("HTML had " + $.S(t1.get$length(list)) + " top level elements but 1 expected"));
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._EventStream$ = function(_target, _eventType, _useCapture, T) {
  var t1 = new $._EventStream(_target, _eventType, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture, T) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  $.setRuntimeTypeInfo(t1, [T]);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture, T);
  return t1;
};

$._WrappedList$ = function(_list, E) {
  var t1 = new $._WrappedList(_list);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._WrappedIterator$ = function(_iterator, E) {
  var t1 = new $._WrappedIterator(_iterator);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  if (w === window)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array, T) {
  var t1 = new $.FixedSizeListIterator(array, $.get$length$asx(array), -1, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.convertNativeToDart_SerializedScriptValue = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, true);
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var copies, t1, t2, t3, t4, copy;
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot([], copies);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t2, t3).call$1(value);
  t4.call$0();
  return copy;
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.Device_userAgent = function() {
  return $.get$navigator$x($.window()).userAgent;
};

$.Device_isOpera = function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = $.contains$2$asx($.Device_userAgent(), "Opera", 0);
  return $.Device__isOpera;
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, $.get$nodes$x(node));
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !$.getInterceptor(a).$isJavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, t2, i;
  t1 = $.getInterceptor$asx(a);
  t2 = $.getInterceptor$n(startIndex);
  if (t2.$ge(startIndex, t1.get$length(a)) === true)
    return -1;
  if (t2.$lt(startIndex, 0) === true)
    startIndex = 0;
  for (i = startIndex; t2 = $.getInterceptor$n(i), t2.$lt(i, endIndex) === true; i = t2.$add(i, 1))
    if ($.$eq(t1.$index(a, i), element) === true)
      return i;
  return -1;
};

$.Lists_getRange = function(a, start, end, accumulator) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !$.getInterceptor(a).$isJavaScriptIndexingBehavior()))
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof start !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof end !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (end < start)
    throw $.$$throw($.RangeError$value(end));
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, end, accumulator) {
  var t1, t2, i;
  if ($.$lt$n(start, 0) === true)
    throw $.$$throw($.RangeError$value(start));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) === true)
    throw $.$$throw($.RangeError$value(end));
  t2 = $.getInterceptor$asx(a);
  if (t1.$gt(end, t2.get$length(a)) === true)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; t1 = $.getInterceptor$n(i), t1.$lt(i, end) === true; i = t1.$add(i, 1))
    accumulator.push(t2.$index(a, i));
  return accumulator;
};

$.port = function() {
  return $._Isolate_port();
};

$.spawnFunction = function(topLevelFunction, unhandledExceptionCallback) {
  return $._Isolate_spawnFunction(topLevelFunction, unhandledExceptionCallback);
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$._Isolate_spawnFunction = function(topLevelFunction, unhandledExceptionCallback) {
  if (unhandledExceptionCallback != null)
    throw $.$$throw($.UnimplementedError$("spawnFunction with unhandledExceptionCallback"));
  return $.IsolateNatives_spawnFunction(topLevelFunction);
};

$.min = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.JSDouble_methods.get$isNegative(b) || $.JSDouble_methods.get$isNaN(b))
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.max = function(a, b) {
  if (typeof b === "number") {
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if ($.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    if (b === 0 && $.JSNumber_methods.get$isNegative(a))
      return b;
    return a;
  }
  throw $.$$throw($.ArgumentError$(b));
  throw $.$$throw($.ArgumentError$(a));
};

$.atan2 = function(a, b) {
  return Math.atan2($.checkNum(a), $.checkNum(b));
};

$.sqrt = function(x) {
  return Math.sqrt($.checkNum(x));
};

$.Random_Random = function(seed) {
  return $.C__Random;
};

$.getDelayedResult = function(input) {
  if (typeof input === "function" || typeof input === "object" && input !== null && !!$.getInterceptor(input).$isFunction)
    input = $.Future_Future$of(input, null);
  if (typeof input === "object" && input !== null && !!$.getInterceptor(input).$isFuture)
    return input.then$1(new $.getDelayedResult_anon());
  else
    return $._FutureImpl$immediate(input, null);
};

$.AttachedEvent$ = function($name, T) {
  var t1 = new $.AttachedEvent($name);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.Property$ = function($name, defaultValue, T) {
  var t1 = new $.Property(defaultValue, $name);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.PropertyChangedEventArgs$ = function(property, newValue, T) {
  var t1 = new $.PropertyChangedEventArgs(property, newValue, false);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.PropertyChangedEventArgs$valueCleared = function(property, T) {
  var t1 = new $.PropertyChangedEventArgs(property, null, true);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.Array2d_Array2d$readonlyFrom = function(width, source, T) {
  var list, s;
  $.requireArgumentNotNull(width, "width");
  $.requireArgumentNotNull(source, "source");
  list = $.List_List$from(source, true, T);
  s = source == null ? null : $.ReadOnlyCollection$wrap(list, T);
  return $.Array2d$wrap(width, s.asList$0(), null);
};

$.Array2d_Array2d = function(width, height, initialValue, T) {
  var s;
  $.requireArgumentNotNull(width, "width");
  $.requireArgumentNotNull(height, "height");
  $.requireArgument(width >= 0, "width", null);
  $.requireArgument(height >= 0, "height", null);
  s = $.List_List($, T);
  $.setRuntimeTypeInfo(s, [T]);
  $.JSArray_methods.insertRange$3(s, 0, width * height, initialValue);
  if (width === 0)
    return $.Array2d$_skinny(height, null);
  return $.Array2d$wrap(width, s, null);
};

$.Array2d$_skinny = function(height, T) {
  var t1 = new $.Array2d(0, height, []);
  $.setRuntimeTypeInfo(t1, [T]);
  t1.Array2d$_skinny$1(height, T);
  return t1;
};

$.Array2d$wrap = function(width, source, T) {
  var t1 = width != null && $.$gt$n(width, 0) && true ? $.$tdiv$n($.get$length$asx(source), width) : 0;
  t1 = new $.Array2d(width, t1, source);
  $.setRuntimeTypeInfo(t1, [T]);
  t1.Array2d$wrap$2(width, source, T);
  return t1;
};

$._Array2dRows$ = function(source, T) {
  var t1 = new $._Array2dRows(source);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._Array2dRow$ = function(source, row, T) {
  var t1 = new $._Array2dRow(source, row);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.CollectionUtil_allUnique = function(items) {
  var t1, i, j, j0;
  $.requireArgumentNotNull(items, "items");
  for (t1 = $.getInterceptor$asx(items), i = 0; $.JSNumber_methods.$lt(i, t1.get$length(items)); i = j)
    for (j = i + 1, j0 = j; $.JSNumber_methods.$lt(j0, t1.get$length(items)); ++j0)
      if ($.$eq(t1.elementAt$1(items, i), t1.elementAt$1(items, j0)) === true)
        return false;
  return true;
};

$.CollectionUtil_count = function(source, test) {
  return source.fold$2(source, 0, new $.CollectionUtil_count_anon(test));
};

$.CollectionUtil_exclude = function(source, itemsToExclude) {
  $.requireArgumentNotNull(itemsToExclude, "itemsToExclude");
  return $.$$($.WhereIterable$(source, new $.CollectionUtil_exclude_anon(itemsToExclude), null));
};

$.CollectionUtil_distinct = function(source, comparer) {
  var t1 = {};
  t1.comparer_0 = comparer;
  if (t1.comparer_0 == null)
    t1.comparer_0 = new $.CollectionUtil_distinct_anon();
  return $._FuncEnumerable$(source, new $.CollectionUtil_distinct_anon0(t1), null, null);
};

$.CollectionUtil_toMap = function(source, valueFunc, keyFunc) {
  var map, t1, t2, k;
  if (keyFunc == null)
    keyFunc = new $.CollectionUtil_toMap_anon();
  map = $.HashMap$(null, null);
  for (t1 = source.get$iterator(source); t1.moveNext$0();) {
    t2 = t1.get$current();
    k = keyFunc.call$1(t2);
    if (map.containsKey$1(k) === true)
      throw $.$$throw($.UnsupportedError$("The key '" + $.S(k) + "' is duplicated"));
    map.$indexSet(map, k, valueFunc.call$1(t2));
  }
  return map;
};

$._DistinctIterator$ = function(_source, _comparer, T) {
  var t1 = $.List_List($, T);
  $.setRuntimeTypeInfo(t1, [T]);
  t1 = new $._DistinctIterator(_source, _comparer, t1, null);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SequenceIterator$ = function(list, E) {
  var t1 = new $._SequenceIterator(list, list.get$length(list), -1, null);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.$$ = function(source) {
  if (typeof source === "object" && source !== null && !!$.getInterceptor(source).$isEnumerable)
    return source;
  else {
    $.requireArgumentNotNull(source, "source");
    return $._SimpleEnumerable$(source, null);
  }
};

$._SimpleEnumerable$ = function(_source, T) {
  var t1 = new $._SimpleEnumerable(_source);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._FuncEnumerable$ = function(_source, _func, TSource, TOutput) {
  var t1 = new $._FuncEnumerable(_source, _func);
  $.setRuntimeTypeInfo(t1, [TSource, TOutput]);
  return t1;
};

$.Grouping$ = function(source, keyFunc, K, V) {
  var t1 = new $.Grouping($.HashMap$(K, [$.List, V]));
  $.setRuntimeTypeInfo(t1, [K, V]);
  t1.Grouping$2(source, keyFunc, K, V);
  return t1;
};

$._SimpleNumEnumerable$ = function(_source, T) {
  var t1 = new $._SimpleNumEnumerable(_source);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._RangeEnumerable$ = function(_start, _count) {
  return new $._RangeEnumerable(_start, _count);
};

$._RangeIterator$ = function(_start, _count) {
  return new $._RangeIterator(_start, _count, null);
};

$.ReadOnlyCollection$wrap = function(source, T) {
  var t1 = new $.ReadOnlyCollection(source);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.ReadOnlyCollection$ = function(source, T) {
  var t1 = new $.ReadOnlyCollection($.List_List$from(source, false, T));
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$._SequenceList$ = function(_source, E) {
  var t1 = new $._SequenceList(_source);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HslColor$_internal = function(h, s, l) {
  return new $.HslColor(h, s, l);
};

$.HslColor_HslColor = function(h, s, l) {
  var t1;
  if (typeof h !== "number")
    return $.HslColor_HslColor$bailout(1, h, s, l);
  if (typeof s !== "number")
    return $.HslColor_HslColor$bailout(1, h, s, l);
  if (typeof l !== "number")
    return $.HslColor_HslColor$bailout(1, h, s, l);
  $.requireArgument(!$.JSNumber_methods.get$isInfinite(h) && !$.JSNumber_methods.get$isNaN(h), "h", "hue value was not valid");
  h = $.JSNumber_methods.$mod(h, 360);
  $.requireArgument(!$.JSNumber_methods.get$isInfinite(s) && !$.JSNumber_methods.get$isNaN(s), "s", "must be a valid number");
  t1 = s >= 0 && s <= 1;
  $.requireArgument(t1, "s", "must be >= 0 && <= 1 but was " + $.S(s));
  $.requireArgument(!$.JSNumber_methods.get$isInfinite(l) && !$.JSNumber_methods.get$isNaN(l), "l", "must be a valid number");
  t1 = l >= 0 && l <= 1;
  $.requireArgument(t1, "l", "must be >= 0 && <=1 but was " + $.S(l));
  return $.HslColor$_internal(h, s, l);
};

$.HslColor_HslColor$bailout = function(state0, h, s, l) {
  var t1 = $.getInterceptor(h);
  $.requireArgument(h != null && !t1.get$isInfinite(h) && !t1.get$isNaN(h), "h", "hue value was not valid");
  h = t1.$mod(h, 360);
  t1 = $.getInterceptor(s);
  $.requireArgument(s != null && !t1.get$isInfinite(s) && !t1.get$isNaN(s), "s", "must be a valid number");
  t1 = t1.$ge(s, 0) === true && t1.$le(s, 1) === true;
  $.requireArgument(t1, "s", "must be >= 0 && <= 1 but was " + $.S(s));
  t1 = $.getInterceptor(l);
  $.requireArgument(l != null && !t1.get$isInfinite(l) && !t1.get$isNaN(l), "l", "must be a valid number");
  t1 = t1.$ge(l, 0) === true && t1.$le(l, 1) === true;
  $.requireArgument(t1, "l", "must be >= 0 && <=1 but was " + $.S(l));
  return $.HslColor$_internal(h, s, l);
};

$.HslColor__hueToRgb = function(v1, v2, vH) {
  vH = $.JSNumber_methods.$mod(vH, 1);
  if (6 * vH < 1)
    return v1 + (v2 - v1) * 6 * vH;
  else if (2 * vH < 1)
    return v2;
  else if (3 * vH < 2)
    return v1 + (v2 - v1) * (0.6666666666666666 - vH) * 6;
  return v1;
};

$.RgbColor$_internal = function(r, g, b) {
  return new $.RgbColor(r, g, b);
};

$.RgbColor_RgbColor$fromHex = function(hexColor) {
  var r, g, b, t1;
  $.requireArgumentNotNull(hexColor, "hexColor");
  $.requireArgument($.get$RgbColor__validHexColorRe().hasMatch$1(hexColor), "hexColor", "'" + $.S(hexColor) + "' is not a valid hex color");
  hexColor = $.toLowerCase$0$s(hexColor);
  r = $.Primitives_parseInt($.JSString_methods.$add("0x", $.JSString_methods.substring$2(hexColor, 1, 3)), null, null);
  g = $.Primitives_parseInt($.JSString_methods.$add("0x", $.JSString_methods.substring$2(hexColor, 3, 5)), null, null);
  b = $.Primitives_parseInt($.JSString_methods.$add("0x", $.JSString_methods.substring$2(hexColor, 5, 7)), null, null);
  t1 = $.getInterceptor(r);
  $.requireArgument(r != null && !t1.get$isInfinite(r) && !t1.get$isNaN(r), "r", null);
  $.requireArgument(t1.$ge(r, 0) === true && t1.$le(r, 255) === true, "r", null);
  t1 = $.getInterceptor(g);
  $.requireArgument(g != null && !t1.get$isInfinite(g) && !t1.get$isNaN(g), "g", null);
  $.requireArgument(t1.$ge(g, 0) === true && t1.$le(g, 255) === true, "g", null);
  t1 = $.getInterceptor(b);
  $.requireArgument(b != null && !t1.get$isInfinite(b) && !t1.get$isNaN(b), "b", null);
  $.requireArgument(t1.$ge(b, 0) === true && t1.$le(b, 255) === true, "b", null);
  return $.RgbColor$_internal(r, g, b);
};

$.EventHandle$ = function(onSubscriptionStateChange, T) {
  var t1 = new $.EventHandle(false, $._MultiControllerStream$(onSubscriptionStateChange, null, T));
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.DetailedArgumentError$ = function(argument, details) {
  var t1 = new $.DetailedArgumentError(argument, details);
  t1.DetailedArgumentError$2(argument, details);
  return t1;
};

$.InvalidOperationError$ = function(message) {
  return new $.InvalidOperationError(message);
};

$.NullArgumentError$ = function(argument) {
  var t1 = new $.NullArgumentError(argument, "cannot be null");
  t1.DetailedArgumentError$2(argument, "cannot be null");
  return t1;
};

$.AffineTransform$ = function(scaleX, shearY, shearX, scaleY, translateX, translateY) {
  return new $.AffineTransform(scaleX, shearY, shearX, scaleY, translateX, translateY);
};

$.Box$ = function(left, $top, width, height) {
  return new $.Box(left, $top, width, height);
};

$.Coordinate$ = function(x, y) {
  return new $.Coordinate(x, y);
};

$.isValidNumber = function(value) {
  var t1 = $.getInterceptor(value);
  return value != null && !t1.get$isInfinite(value) && !t1.get$isNaN(value);
};

$.Size$ = function(width, height) {
  return new $.Size(width, height);
};

$.TarjanCycleDetect$_internal = function(_list, TNode) {
  var t1, t2;
  t1 = $.List_List($, [$._TarjanNode, TNode]);
  $.setRuntimeTypeInfo(t1, [[$._TarjanNode, TNode]]);
  t2 = $.List_List($, [$.List, TNode]);
  $.setRuntimeTypeInfo(t2, [[$.List, TNode]]);
  t2 = new $.TarjanCycleDetect(0, t1, t2, _list);
  $.setRuntimeTypeInfo(t2, [TNode]);
  return t2;
};

$._TarjanNode$ = function(value, TNode) {
  var t1 = new $._TarjanNode(value, -1, null);
  $.setRuntimeTypeInfo(t1, [TNode]);
  return t1;
};

$._TarjanList$_internal = function(_nodes, TNode) {
  var t1 = new $._TarjanList(_nodes);
  $.setRuntimeTypeInfo(t1, [TNode]);
  return t1;
};

$._TarjanList__TarjanList = function(source, TNode) {
  var map, nodes;
  map = $.HashMap$(TNode, [$._TarjanNode, TNode]);
  nodes = $.HashMap$([$._TarjanNode, TNode], [$.Set, [$._TarjanNode, TNode]]);
  source.forEach$1(source, new $._TarjanList__TarjanList_anon(TNode, map, nodes));
  return $._TarjanList$_internal(nodes, null);
};

$.Vector$ = function(x, y) {
  return new $.Vector(x, y);
};

$.requireArgument = function(truth, argName, message) {
  $._metaRequireArgumentNotNullOrEmpty(argName);
  if (truth !== true) {
    if (message == null || $.get$isEmpty$asx(message))
      message = "value was invalid";
    throw $.$$throw($.DetailedArgumentError$(argName, message));
  }
};

$.requireArgumentNotNull = function(argument, argName) {
  $._metaRequireArgumentNotNullOrEmpty(argName);
  if (argument == null)
    throw $.$$throw($.NullArgumentError$(argName));
};

$._metaRequireArgumentNotNullOrEmpty = function(argName) {
  if (argName.length === 0)
    throw $.$$throw($.InvalidOperationError$("That's just sad. Give me a good argName"));
};

$.StringLineReader$ = function(source) {
  var t1 = new $.StringLineReader(source, 0);
  t1.StringLineReader$1(source);
  return t1;
};

$._StringLineIterator$ = function(source) {
  return new $._StringLineIterator($.StringLineReader$(source), null);
};

$.Tuple$ = function(item1, item2, T1, T2) {
  var t1 = new $.Tuple(item1, item2);
  $.setRuntimeTypeInfo(t1, [T1, T2]);
  return t1;
};

$.Tuple3$ = function(param1, param2, item3, T1, T2, T3) {
  var t1 = new $.Tuple3(item3, param1, param2);
  $.setRuntimeTypeInfo(t1, [T1, T2, T3]);
  return t1;
};

$.Util_getHashCode = function(source) {
  var t1, hash, t2, next;
  $.requireArgumentNotNull(source, "source");
  for (t1 = $.get$iterator$ax(source), hash = 0; t1.moveNext$0();) {
    t2 = t1.get$current();
    next = t2 == null ? 0 : $.get$hashCode$(t2);
    if (typeof next !== "number")
      throw $.iae(next);
    hash = 536870911 & hash + next;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    hash = (hash ^ $.JSInt_methods.$shr(hash, 6)) >>> 0;
  }
  hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
  hash = (hash ^ $.JSInt_methods.$shr(hash, 11)) >>> 0;
  return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
};

$.Util_splitLines = function(input) {
  $.requireArgumentNotNull(input, "input");
  return $._FuncEnumerable$(input, new $.Util_splitLines_anon(), null, null);
};

$.FutureValueResult$ = function(value, _outputSerializer, TOutput) {
  var t1 = new $.FutureValueResult(value, null, null, _outputSerializer);
  $.setRuntimeTypeInfo(t1, [TOutput]);
  return t1;
};

$.FutureValueResult$fromException = function(error, stackTrace, TOutput) {
  var t1 = new $.FutureValueResult(null, error, stackTrace, null);
  $.setRuntimeTypeInfo(t1, [TOutput]);
  t1.FutureValueResult$fromException$2(error, stackTrace, TOutput);
  return t1;
};

$.FutureValueResult_FutureValueResult$fromMap = function(value, TOutput) {
  var t1, ex;
  $.requireArgumentNotNull(value, "value");
  $.requireArgument($.FutureValueResult_isMyMap(value), "value", null);
  t1 = $.getInterceptor$asx(value);
  ex = t1.$index(value, "error");
  if (ex != null)
    return $.FutureValueResult$fromException(ex, t1.$index(value, "stackTrace"), null);
  else
    return $.FutureValueResult$(t1.$index(value, "value"), null, null);
};

$.FutureValueResult_isMyMap = function(value) {
  return value != null && $.$eq($.get$length$asx(value), 3) === true && value.containsKey$1("value") === true && value.containsKey$1("error") === true && value.containsKey$1("stackTrace") === true;
};

$.SendValuePort$ = function(_func, inputDeserializer, outputSerializer, TInput, TOutput) {
  var t1 = new $.SendValuePort(_func, inputDeserializer, outputSerializer);
  $.setRuntimeTypeInfo(t1, [TInput, TOutput]);
  t1.SendValuePort$3$inputDeserializer$outputSerializer(_func, inputDeserializer, outputSerializer, TInput, TOutput);
  return t1;
};

$.EventWatcher$ = function(T) {
  var t1 = new $.EventWatcher(null, 0);
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.expectFutureFail = function(future, onException) {
  var testWait = $._SpreadArgsHelper$(new $.expectFutureFail_anon(onException), 1, 0, null, null).get$invoke2();
  future.then$2$onError(new $.expectFutureFail_anon0(testWait), new $.expectFutureFail_anon1(testWait));
};

$.expectFutureComplete = function(future, onComplete) {
  var testWait = $._SpreadArgsHelper$(new $.expectFutureComplete_anon(onComplete), 1, 0, null, null).get$invoke2();
  future.then$2$onError(new $.expectFutureComplete_anon0(testWait), new $.expectFutureComplete_anon1(testWait));
};

$._Finishes$ = function(_matcher) {
  return new $._Finishes(_matcher);
};

$.HtmlEnhancedConfiguration$ = function(_isLayoutTest) {
  return new $.HtmlEnhancedConfiguration(_isLayoutTest, null, null, null, "Configuration", true);
};

$.HtmlEnhancedConfiguration__isIE = function() {
  return $.contains$1$asx($.get$navigator$x($.window()).userAgent, "MSIE");
};

$.MatchState$ = function(state) {
  return new $.MatchState(state);
};

$._EveryElement$ = function(_matcher) {
  return new $._EveryElement(_matcher);
};

$._OrderedEquals$ = function(_expected) {
  var t1 = new $._OrderedEquals(_expected, null);
  t1._OrderedEquals$1(_expected);
  return t1;
};

$._UnorderedEquals$ = function(_expected) {
  return new $._UnorderedEquals(_expected);
};

$.Configuration$ = function() {
  return new $.Configuration(null, "Configuration", true);
};

$._IsSameAs$ = function(_expected) {
  return new $._IsSameAs(_expected);
};

$.equals = function(expected, limit) {
  return $._DeepMatcher$(expected, limit);
};

$._DeepMatcher$ = function(_expected, limit) {
  return new $._DeepMatcher(_expected, limit, null);
};

$.Throws$ = function(matcher) {
  return new $.Throws(matcher);
};

$._Contains$ = function(_expected) {
  return new $._Contains(_expected);
};

$._Predicate$ = function(_matcher, _description) {
  return new $._Predicate(_matcher, _description);
};

$.StringDescription$ = function(init) {
  var t1 = new $.StringDescription(null);
  t1.StringDescription$1(init);
  return t1;
};

$.TestFailure$ = function(message) {
  return new $.TestFailure(message);
};

$.expect = function(actual, matcher, failureHandler, reason, verbose) {
  var doesMatch, matchState, e, trace, exception, t1;
  matcher = $.wrapMatcher(matcher);
  doesMatch = null;
  matchState = $.MatchState$(null);
  try {
    doesMatch = $.matches$2$x(matcher, actual, matchState);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    trace = $.getTraceFromException(exception);
    doesMatch = false;
    if (reason == null) {
      t1 = e;
      reason = $.S(typeof t1 === "string" ? e : $.toString$0(e)) + " at " + $.S(trace);
    }
  }

  if (doesMatch !== true) {
    if (failureHandler == null) {
      if ($._assertFailureHandler == null)
        $._assertFailureHandler = $.DefaultFailureHandler$();
      failureHandler = $._assertFailureHandler;
    }
    failureHandler.failMatch$5(actual, matcher, reason, matchState, verbose);
  }
};

$.wrapMatcher = function(x) {
  if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMatcher)
    return x;
  else if (typeof x === "function" || typeof x === "object" && x !== null && !!$.getInterceptor(x).$isFunction)
    return $._Predicate$(x, "satisfies function");
  else
    return $._DeepMatcher$(x, 100);
};

$.DefaultFailureHandler$ = function() {
  var t1 = new $.DefaultFailureHandler();
  t1.DefaultFailureHandler$0();
  return t1;
};

$._defaultErrorFormatter = function(actual, matcher, reason, matchState, verbose) {
  var description, t1, count, t2;
  description = $.StringDescription$("");
  t1 = description.add$1(description, "Expected: ").addDescriptionOf$1(matcher);
  t1.add$1(t1, "\n     but: ");
  matcher.describeMismatch$4(actual, description, matchState, verbose);
  description.add$1(description, ".\n");
  if (verbose === true)
    if (typeof actual === "object" && actual !== null && (actual.constructor === Array || $.getInterceptor(actual).$isIterable())) {
      t1 = description.add$1(description, "Actual: ").addDescriptionOf$1(actual);
      t1.add$1(t1, "\n");
    } else if (typeof actual === "object" && actual !== null && !!$.getInterceptor(actual).$isMap) {
      description.add$1(description, "Actual: ");
      for (t1 = $.get$iterator$ax(actual.get$keys()), count = 25; t1.moveNext$0();) {
        t2 = t1.get$current();
        if (count === 0) {
          description.add$1(description, "...\n");
          break;
        }
        description.addDescriptionOf$1(t2);
        description.add$1(description, " : ");
        description.addDescriptionOf$1(actual.$index(actual, t2));
        description.add$1(description, "\n");
        --count;
      }
    }
  if (reason != null) {
    t1 = description.add$1(description, reason);
    t1.add$1(t1, "\n");
  }
  return description.toString$0(description);
};

$._IsCloseTo$ = function(_value, _delta) {
  return new $._IsCloseTo(_value, _delta);
};

$._IsNot$ = function(_matcher) {
  return new $._IsNot(_matcher);
};

$.TestCase$_internal = function(id, description, testFunction) {
  var t1 = $._currentGroup;
  return new $.TestCase(id, description, $._testSetup, $._testTeardown, testFunction, 0, "", null, null, t1, null, null, true, false, null);
};

$.unittestConfiguration = function(value) {
  var t1 = $._config;
  if (t1 !== value) {
    if (t1 != null)
      throw $.$$throw($.StateError$("unittestConfiguration has already been set"));
    $._config = value;
  }
};

$._SpreadArgsHelper$ = function(callback, minExpected, maxExpected, isDone, id) {
  var t1 = maxExpected === 0 && minExpected > 0 ? minExpected : maxExpected;
  t1 = new $._SpreadArgsHelper(callback, minExpected, t1, isDone, $._currentTestCaseIndex, $._SpreadArgsHelper__makeCallbackId(id, callback), 0, null, null);
  t1._SpreadArgsHelper$5(callback, minExpected, maxExpected, isDone, id);
  return t1;
};

$._SpreadArgsHelper__makeCallbackId = function(id, callback) {
  var fname, t1, pos, t2, epos;
  if (id != null)
    return $.S(id) + " ";
  else {
    fname = $.toString$0(callback);
    t1 = $.getInterceptor$asx(fname);
    pos = t1.indexOf$1(fname, "Function '");
    t2 = $.getInterceptor$n(pos);
    if (t2.$gt(pos, 0) === true) {
      pos = t2.$add(pos, 10);
      epos = t1.indexOf$2(fname, "'", pos);
      if ($.$gt$n(epos, 0) === true)
        return t1.substring$2(fname, pos, epos) + " ";
    }
  }
  return "";
};

$.group = function(description, body) {
  var parentGroup, parentSetup, parentTeardown, e, trace, stack, parentGroup0, exception, t1;
  $._ensureInitialized(true);
  parentGroup0 = $._currentGroup;
  parentGroup = parentGroup0;
  if ($.$eq(parentGroup0, "") !== true)
    $._currentGroup = $.S($._currentGroup) + $.S($.groupSep) + description;
  else
    $._currentGroup = description;
  parentSetup = $._testSetup;
  parentTeardown = $._testTeardown;
  try {
    $._testSetup = null;
    $._testTeardown = null;
    body.call$0();
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    trace = $.getTraceFromException(exception);
    stack = trace == null ? "" : ": " + $.S($.toString$0(trace));
    $._uncaughtErrorMessage = $.S($.toString$0(e)) + $.S(stack);
  }
 finally {
    $._currentGroup = parentGroup;
    $._testSetup = parentSetup;
    $._testTeardown = parentTeardown;
  }
};

$._nextTestCase = function() {
  $._defer(new $._nextTestCase_anon());
};

$._reportTestError = function(msg, trace) {
  if ($.$lt$n($._currentTestCaseIndex, $.get$length$asx($.get$_testCases())) === true)
    $.error$2$x($.$index$asx($.get$_testCases(), $._currentTestCaseIndex), msg, trace);
  else
    $._uncaughtErrorMessage = msg + ": " + trace;
};

$._defer = function(callback) {
  $._FutureImpl$immediate(null, null).then$1(new $._defer_anon(callback));
};

$.filterTests = function(testFilter) {
  var filterFunction = typeof testFilter === "function" || typeof testFilter === "object" && testFilter !== null && !!$.getInterceptor(testFilter).$isFunction ? testFilter : null;
  $.retainWhere$1$ax($.get$_testCases(), filterFunction);
};

$.runTests = function() {
  $._ensureInitialized(false);
  $._currentTestCaseIndex = 0;
  $._currentGroup = "";
  if ($._soloTest != null)
    $.filterTests(new $.runTests_anon());
  $._config.onStart$0();
  $._defer(new $.runTests_anon0());
};

$._guardAsync = function(tryBody, finallyBody, testNum) {
  var e, trace, t1, exception;
  try {
    t1 = tryBody.call$0();
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    trace = $.getTraceFromException(exception);
    $._registerException(testNum, e, trace);
  }
 finally {
    if (finallyBody != null)
      finallyBody.call$0();
  }
};

$._registerException = function(testNum, e, trace) {
  var message;
  trace = trace == null ? "" : $.toString$0(trace);
  message = typeof e === "object" && e !== null && !!$.getInterceptor(e).$isTestFailure ? e.get$message(e) : "Caught " + $.S(e);
  if ($.get$result$x($.$index$asx($.get$_testCases(), testNum)) == null)
    $.$index$asx($.get$_testCases(), testNum).fail$2(message, trace);
  else
    $.error$2$x($.$index$asx($.get$_testCases(), testNum), message, trace);
};

$._nextBatch = function() {
  for (; true;) {
    if ($.$ge$n($._currentTestCaseIndex, $.get$length$asx($.get$_testCases())) === true) {
      $._completeTests();
      break;
    }
    var f = $._guardAsync($.$index$asx($.get$_testCases(), $._currentTestCaseIndex).get$_run(), null, $._currentTestCaseIndex);
    if (f != null) {
      f.whenComplete$1(new $._nextBatch_anon());
      break;
    }
    $._currentTestCaseIndex = $.$add$ns($._currentTestCaseIndex, 1);
  }
};

$._completeTests = function() {
  var t1, passed, failed, errors;
  if ($._initialized !== true)
    return;
  for (t1 = $.get$iterator$ax($.get$_testCases()), passed = 0, failed = 0, errors = 0; t1.moveNext$0();)
    switch ($.get$result$x(t1.get$current())) {
      case "pass":
        ++passed;
        break;
      case "fail":
        ++failed;
        break;
      case "error":
        ++errors;
        break;
    }
  $._config.onSummary$5(passed, failed, errors, $.get$testCases(), $._uncaughtErrorMessage);
  t1 = $._config;
  t1.onDone$1(passed > 0 && failed === 0 && errors === 0 && $._uncaughtErrorMessage == null);
  $._initialized = false;
};

$._fullSpec = function(spec) {
  return $.$eq($._currentGroup, "") !== true ? $.S($._currentGroup) + $.S($.groupSep) + spec : spec;
};

$.ensureInitialized = function() {
  $._ensureInitialized(true);
};

$._ensureInitialized = function(configAutoStart) {
  var t1;
  if ($._initialized === true)
    return;
  $._initialized = true;
  $.wrapAsync = new $._ensureInitialized_anon();
  $._uncaughtErrorMessage = null;
  if ($._config == null) {
    t1 = $.Configuration$();
    $.unittestConfiguration(t1);
  }
  $._config.onInit$0();
  if (configAutoStart && $._config.get$autoStart())
    $._defer($.runTests);
};

$._testStringReader.call$0 = $._testStringReader;
$._testStringReader.$name = "_testStringReader";
$.TestAttachedEvents__testRemove.call$0 = $.TestAttachedEvents__testRemove;
$.TestAttachedEvents__testRemove.$name = "TestAttachedEvents__testRemove";
$.TestAttachedEvents__testWholeDeal.call$0 = $.TestAttachedEvents__testWholeDeal;
$.TestAttachedEvents__testWholeDeal.$name = "TestAttachedEvents__testWholeDeal";
$.TestPropertyEventIntegration_doTest.call$0 = $.TestPropertyEventIntegration_doTest;
$.TestPropertyEventIntegration_doTest.$name = "TestPropertyEventIntegration_doTest";
$.TestArray2d__testGetAdjacent.call$0 = $.TestArray2d__testGetAdjacent;
$.TestArray2d__testGetAdjacent.$name = "TestArray2d__testGetAdjacent";
$.TestArray2d__testSetGet.call$0 = $.TestArray2d__testSetGet;
$.TestArray2d__testSetGet.$name = "TestArray2d__testSetGet";
$.TestArray2d__testDefaultCtor.call$0 = $.TestArray2d__testDefaultCtor;
$.TestArray2d__testDefaultCtor.$name = "TestArray2d__testDefaultCtor";
$.TestArray2d__testReadonlyFromCtorParams.call$0 = $.TestArray2d__testReadonlyFromCtorParams;
$.TestArray2d__testReadonlyFromCtorParams.$name = "TestArray2d__testReadonlyFromCtorParams";
$.TestArray2d__testCollectionEquals.call$0 = $.TestArray2d__testCollectionEquals;
$.TestArray2d__testCollectionEquals.$name = "TestArray2d__testCollectionEquals";
$.TestCollectionUtil__testListish.call$0 = $.TestCollectionUtil__testListish;
$.TestCollectionUtil__testListish.$name = "TestCollectionUtil__testListish";
$.TestCollectionUtil__testAllUnique.call$0 = $.TestCollectionUtil__testAllUnique;
$.TestCollectionUtil__testAllUnique.$name = "TestCollectionUtil__testAllUnique";
$.TestEnumerable__testConcat.call$0 = $.TestEnumerable__testConcat;
$.TestEnumerable__testConcat.$name = "TestEnumerable__testConcat";
$.TestEnumerable__testExclude.call$0 = $.TestEnumerable__testExclude;
$.TestEnumerable__testExclude.$name = "TestEnumerable__testExclude";
$.TestEnumerable__testDistinct.call$0 = $.TestEnumerable__testDistinct;
$.TestEnumerable__testDistinct.$name = "TestEnumerable__testDistinct";
$.TestEnumerable__testForEachWithIndex.call$0 = $.TestEnumerable__testForEachWithIndex;
$.TestEnumerable__testForEachWithIndex.$name = "TestEnumerable__testForEachWithIndex";
$.TestEnumerable__testToMap.call$0 = $.TestEnumerable__testToMap;
$.TestEnumerable__testToMap.$name = "TestEnumerable__testToMap";
$.TestEnumerable__testCount.call$0 = $.TestEnumerable__testCount;
$.TestEnumerable__testCount.$name = "TestEnumerable__testCount";
$.TestEnumerable__testSelectNumbers.call$0 = $.TestEnumerable__testSelectNumbers;
$.TestEnumerable__testSelectNumbers.$name = "TestEnumerable__testSelectNumbers";
$.TestEnumerable__testComplexGrouping.call$0 = $.TestEnumerable__testComplexGrouping;
$.TestEnumerable__testComplexGrouping.$name = "TestEnumerable__testComplexGrouping";
$.TestEnumerable__testSimpleGrouping.call$0 = $.TestEnumerable__testSimpleGrouping;
$.TestEnumerable__testSimpleGrouping.$name = "TestEnumerable__testSimpleGrouping";
$.TestNumberEnumerable__testRange.call$0 = $.TestNumberEnumerable__testRange;
$.TestNumberEnumerable__testRange.$name = "TestNumberEnumerable__testRange";
$.TestNumberEnumerable__testSum.call$0 = $.TestNumberEnumerable__testSum;
$.TestNumberEnumerable__testSum.$name = "TestNumberEnumerable__testSum";
$.TestNumberEnumerable__testMin.call$0 = $.TestNumberEnumerable__testMin;
$.TestNumberEnumerable__testMin.$name = "TestNumberEnumerable__testMin";
$.TestNumberEnumerable__testMax.call$0 = $.TestNumberEnumerable__testMax;
$.TestNumberEnumerable__testMax.$name = "TestNumberEnumerable__testMax";
$.TestNumberEnumerable__testAverage.call$0 = $.TestNumberEnumerable__testAverage;
$.TestNumberEnumerable__testAverage.$name = "TestNumberEnumerable__testAverage";
$.TestSequence__testLast.call$0 = $.TestSequence__testLast;
$.TestSequence__testLast.$name = "TestSequence__testLast";
$.TestSequence__testSimple.call$0 = $.TestSequence__testSimple;
$.TestSequence__testSimple.$name = "TestSequence__testSimple";
$.TestSequence__testIndexOf.call$0 = $.TestSequence__testIndexOf;
$.TestSequence__testIndexOf.$name = "TestSequence__testIndexOf";
$.TestHslColor__testEquals.call$0 = $.TestHslColor__testEquals;
$.TestHslColor__testEquals.$name = "TestHslColor__testEquals";
$.TestHslColor__testInvalid.call$0 = $.TestHslColor__testInvalid;
$.TestHslColor__testInvalid.$name = "TestHslColor__testInvalid";
$.TestRgbColor__testEquals.call$0 = $.TestRgbColor__testEquals;
$.TestRgbColor__testEquals.$name = "TestRgbColor__testEquals";
$.TestRgbColor__testInvalid.call$0 = $.TestRgbColor__testInvalid;
$.TestRgbColor__testInvalid.$name = "TestRgbColor__testInvalid";
$.TestRgbColor__testHslRoundTrip.call$0 = $.TestRgbColor__testHslRoundTrip;
$.TestRgbColor__testHslRoundTrip.$name = "TestRgbColor__testHslRoundTrip";
$.TestRgbColor__testHexRoundTrip.call$0 = $.TestRgbColor__testHexRoundTrip;
$.TestRgbColor__testHexRoundTrip.$name = "TestRgbColor__testHexRoundTrip";
$.TestRgbColor__testFromHex.call$0 = $.TestRgbColor__testFromHex;
$.TestRgbColor__testFromHex.$name = "TestRgbColor__testFromHex";
$.TestRgbColor__testInvalidHex.call$0 = $.TestRgbColor__testInvalidHex;
$.TestRgbColor__testInvalidHex.$name = "TestRgbColor__testInvalidHex";
$.TestTarjanCycleDetect__testImpliedKey.call$0 = $.TestTarjanCycleDetect__testImpliedKey;
$.TestTarjanCycleDetect__testImpliedKey.$name = "TestTarjanCycleDetect__testImpliedKey";
$.TestTarjanCycleDetect__testSingle.call$0 = $.TestTarjanCycleDetect__testSingle;
$.TestTarjanCycleDetect__testSingle.$name = "TestTarjanCycleDetect__testSingle";
$.TestTarjanCycleDetect__test5Isolated.call$0 = $.TestTarjanCycleDetect__test5Isolated;
$.TestTarjanCycleDetect__test5Isolated.$name = "TestTarjanCycleDetect__test5Isolated";
$.TestTarjanCycleDetect__test5Line.call$0 = $.TestTarjanCycleDetect__test5Line;
$.TestTarjanCycleDetect__test5Line.$name = "TestTarjanCycleDetect__test5Line";
$.TestTarjanCycleDetect__test5Loop.call$0 = $.TestTarjanCycleDetect__test5Loop;
$.TestTarjanCycleDetect__test5Loop.$name = "TestTarjanCycleDetect__test5Loop";
$.TestTarjanCycleDetect__test5Random.call$0 = $.TestTarjanCycleDetect__test5Random;
$.TestTarjanCycleDetect__test5Random.$name = "TestTarjanCycleDetect__test5Random";
$.TestBox__testEquals.call$0 = $.TestBox__testEquals;
$.TestBox__testEquals.$name = "TestBox__testEquals";
$.TestBox__testSizeLocation.call$0 = $.TestBox__testSizeLocation;
$.TestBox__testSizeLocation.$name = "TestBox__testSizeLocation";
$.TestBox__testValid.call$0 = $.TestBox__testValid;
$.TestBox__testValid.$name = "TestBox__testValid";
$.TestUtil__testSplitLines.call$0 = $.TestUtil__testSplitLines;
$.TestUtil__testSplitLines.$name = "TestUtil__testSplitLines";
$.TestUtil__testGetHashCode.call$0 = $.TestUtil__testGetHashCode;
$.TestUtil__testGetHashCode.$name = "TestUtil__testGetHashCode";
$.TestFutureValueResult__testValueRoundTrip.call$0 = $.TestFutureValueResult__testValueRoundTrip;
$.TestFutureValueResult__testValueRoundTrip.$name = "TestFutureValueResult__testValueRoundTrip";
$.TestFutureValueResult__testExceptionRoundTrip.call$0 = $.TestFutureValueResult__testExceptionRoundTrip;
$.TestFutureValueResult__testExceptionRoundTrip.$name = "TestFutureValueResult__testExceptionRoundTrip";
$.TestSendPortValue__testSimple.call$0 = $.TestSendPortValue__testSimple;
$.TestSendPortValue__testSimple.$name = "TestSendPortValue__testSimple";
$.TestSendPortValue__testComplex.call$0 = $.TestSendPortValue__testComplex;
$.TestSendPortValue__testComplex.$name = "TestSendPortValue__testComplex";
$._testIsolate.call$0 = $._testIsolate;
$._testIsolate.$name = "_testIsolate";
$._t2ToList.call$1 = $._t2ToList;
$._t2ToList.$name = "_t2ToList";
$._listToT2.call$1 = $._listToT2;
$._listToT2.$name = "_listToT2";
$._t3ToList.call$1 = $._t3ToList;
$._t3ToList.$name = "_t3ToList";
$._listToT3.call$1 = $._listToT3;
$._listToT3.$name = "_listToT3";
$._complexTestIsolate.call$0 = $._complexTestIsolate;
$._complexTestIsolate.$name = "_complexTestIsolate";
$._testExpectFutureComplete.call$0 = $._testExpectFutureComplete;
$._testExpectFutureComplete.$name = "_testExpectFutureComplete";
$._testExpectFutureCompleteWithComplete.call$0 = $._testExpectFutureCompleteWithComplete;
$._testExpectFutureCompleteWithComplete.$name = "_testExpectFutureCompleteWithComplete";
$._testExpectFutureException.call$0 = $._testExpectFutureException;
$._testExpectFutureException.$name = "_testExpectFutureException";
$._testExpectFutureExceptionWithComplete.call$0 = $._testExpectFutureExceptionWithComplete;
$._testExpectFutureExceptionWithComplete.$name = "_testExpectFutureExceptionWithComplete";
$._echoIsolate.call$0 = $._echoIsolate;
$._echoIsolate.$name = "_echoIsolate";
$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.Primitives__throwFormatException.call$1 = $.Primitives__throwFormatException;
$.Primitives__throwFormatException.$name = "Primitives__throwFormatException";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$._redispatchGetNativeInterceptorHook.call$2 = $._redispatchGetNativeInterceptorHook;
$._redispatchGetNativeInterceptorHook.$name = "_redispatchGetNativeInterceptorHook";
$._nullDataHandler.call$1 = $._nullDataHandler;
$._nullDataHandler.$name = "_nullDataHandler";
$._nullErrorHandler.call$1 = $._nullErrorHandler;
$._nullErrorHandler.$name = "_nullErrorHandler";
$._nullDoneHandler.call$0 = $._nullDoneHandler;
$._nullDoneHandler.$name = "_nullDoneHandler";
$.Comparable_compare.call$2 = $.Comparable_compare;
$.Comparable_compare.$name = "Comparable_compare";
$._defaultErrorFormatter.call$5 = $._defaultErrorFormatter;
$._defaultErrorFormatter.$name = "_defaultErrorFormatter";
$.runTests.call$0 = $.runTests;
$.runTests.$name = "runTests";
$.num = {builtin$cls: "num"};
$.Match = {builtin$cls: "Match"};
$.Set = {builtin$cls: "Set"};
$.String = {builtin$cls: "String"};
$._ManagerStub = {builtin$cls: "_ManagerStub"};
$.bool = {builtin$cls: "bool"};
$.SendPort = {builtin$cls: "SendPort"};
$.ReceivePort = {builtin$cls: "ReceivePort"};
$.$double = {builtin$cls: "$double"};
$.$int = {builtin$cls: "$int"};
$.List = {builtin$cls: "List"};
$.C__NullKey = new $._NullKey();
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.List_oaL = Isolate.makeConstantList([null, (1/0), (-1/0), (0/0)]);
$.List_test_test = Isolate.makeConstantList(["test", "test"]);
$.C__DelayedDone = new $._DelayedDone();
$.List_O9m = Isolate.makeConstantList(["", ""]);
$.List_Aia = Isolate.makeConstantList(["caption", "col", "colgroup", "tbody", "td", "tfoot", "th", "thead", "tr"]);
$.Map_Ai46y = new $.ConstantMap(9, {caption: null, col: null, colgroup: null, tbody: null, td: null, tfoot: null, th: null, thead: null, tr: null}, $.List_Aia);
$.Tuple_46y = new $.Tuple("test\ntest", $.List_test_test);
$._NullArgumentError_NullArgumentException = new $._NullArgumentError("NullArgumentException");
$.Throws_gT2 = new $.Throws($._NullArgumentError_NullArgumentException);
$.C__LinkedHashTableHeadMarker = new $._LinkedHashTableHeadMarker();
$.TestSequence_true = new $.TestSequence(true);
$.List_qtl = Isolate.makeConstantList(["  ", "  "]);
$.List_test = Isolate.makeConstantList(["test"]);
$.Tuple_test_List_test = new $.Tuple("test", $.List_test);
$._ArgumentError_ArgumentError = new $._ArgumentError("ArgumentError");
$.Throws__ArgumentError_ArgumentError = new $.Throws($._ArgumentError_ArgumentError);
$.Tuple_w05 = new $.Tuple("  \n  ", $.List_qtl);
$._UnsupportedError_UnsupportedError = new $._UnsupportedError("UnsupportedError");
$.C__UndefinedValue = new $._UndefinedValue();
$.Duration_0 = new $.Duration(0);
$.List_8h5 = Isolate.makeConstantList(["body", "head", "caption", "td", "th", "colgroup", "col", "tr", "tbody", "tfoot", "thead", "track"]);
$.C_NullThrownError = new $.NullThrownError();
$.JSInt_methods = $.JSInt.prototype;
$.Type_String = $.createRuntimeType('String');
$.EventStreamProvider_click = new $.EventStreamProvider("click");
$._InvalidOperationError_InvalidOperationException = new $._InvalidOperationError("InvalidOperationException");
$.C_EmptyIterator = new $.EmptyIterator();
$.C_EventArgs = new $.EventArgs();
$.Type_bool = $.createRuntimeType('bool');
$.TestSequence_false = new $.TestSequence(false);
$.Box_0_0_1_1 = new $.Box(0, 0, 1, 1);
$.Coordinate_2_2 = new $.Coordinate(2, 2);
$.Coordinate_1_0 = new $.Coordinate(1, 0);
$.C__IsNull = new $._IsNull();
$.Vector_1_m1 = new $.Vector(1, -1);
$.C__IsFalse = new $._IsFalse();
$.Vector_2_2 = new $.Vector(2, 2);
$.Vector_10_10 = new $.Vector(10, 10);
$.C__IsTrue = new $._IsTrue();
$.C__ReturnsNormally = new $._ReturnsNormally();
$.Tuple_sBb = new $.Tuple("\n", $.List_O9m);
$.C_CloseToken = new $.CloseToken();
$.Throws_null = new $.Throws(null);
$.Type_$int = $.createRuntimeType('$int');
$.Vector_10_0 = new $.Vector(10, 0);
$.JSDouble_methods = $.JSDouble.prototype;
$.List_2Vk = Isolate.makeConstantList(["  ", " ", ""]);
$.Tuple_CtR = new $.Tuple("  \n \n", $.List_2Vk);
$.List_Avr = Isolate.makeConstantList([$.Tuple_test_List_test, $.Tuple_46y, $.Tuple_sBb, $.Tuple_w05, $.Tuple_CtR, $.Tuple_CtR]);
$.List_yyN = Isolate.makeConstantList([0, 0, 360, 0, -1, 359, -361, 359, 721, 1]);
$.Map_8h6qb = new $.ConstantMap(12, {body: "html", head: "html", caption: "table", td: "tr", th: "tr", colgroup: "table", col: "colgroup", tr: "tbody", tbody: "table", tfoot: "table", thead: "table", track: "audio"}, $.List_8h5);
$.Throws_fPC = new $.Throws($._UnsupportedError_UnsupportedError);
$.EventStreamProvider_error = new $.EventStreamProvider("error");
$.C__Random = new $._Random();
$.C_Interceptor = new $.Interceptor();
$.C_Object = new $.Object();
$.InvalidOperationError_61T = new $.InvalidOperationError("Input contained a null item");
$.JSArray_methods = $.JSArray.prototype;
$.EventStreamProvider_message = new $.EventStreamProvider("message");
$.Throws_fgL = new $.Throws($._InvalidOperationError_InvalidOperationException);
$.Type_$double = $.createRuntimeType('$double');
$.DisposedError_SMD = new $.DisposedError("Invalid operation on disposed object");
$.JSNull_methods = $.JSNull.prototype;
$.Type_Null = $.createRuntimeType('Null');
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.C__DeadEntry = new $._DeadEntry();
$.TestCloneable__globalId = 0;
$._drValue = 0;
$.dispatchPropertyName = "_zzyzx";
$.lazyPort = null;
$._BufferingSendPort__idCount = 0;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.dynamicFunctionTable = null;
$.Device__isOpera = null;
$.Device__isIE = null;
$._botHelperRandom = null;
$._assertFailureHandler = null;
$._assertErrorFormatter = null;
$._config = null;
$._currentGroup = "";
$.groupSep = " ";
$._testSetup = null;
$._testTeardown = null;
$._currentTestCaseIndex = 0;
$._initialized = false;
$._uncaughtErrorMessage = null;
$._soloTest = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return $.getInterceptor$n(receiver).$div(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (!(typeof receiver == "object"))
    return !(a0 == null) && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return $.getInterceptor$n(receiver).$le(receiver, a0);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$mod$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$mod(receiver, a0);
};
$.$mul$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return $.getInterceptor$n(receiver).$mul(receiver, a0);
};
$.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return $.getInterceptor$n(receiver).$negate(receiver);
};
$.$or$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver | a0) >>> 0;
  return $.getInterceptor$n(receiver).$or(receiver, a0);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$.$tdiv$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$tdiv(receiver, a0);
};
$.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return $.getInterceptor$n(receiver).$xor(receiver, a0);
};
$.abs$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).abs$0(receiver);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.addAll$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
$.allMatches$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).allMatches$1(receiver, a0);
};
$.clear$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).clear$0(receiver);
};
$.clear$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).clear$1(receiver, a0);
};
$.compareTo$1$ns = function(receiver, a0) {
  return $.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
$.concat$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).concat$1(receiver, a0);
};
$.contains$1$asx = function(receiver, a0) {
  return $.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
$.contains$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.error$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).error$2(receiver, a0, a1);
};
$.expand$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).expand$1(receiver, a0);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$$$dom_body$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_body(receiver);
};
$.get$$$dom_children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_children(receiver);
};
$.get$$$dom_head$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_head(receiver);
};
$.get$attributes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$attributes(receiver);
};
$.get$body$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$body(receiver);
};
$.get$caption$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$caption(receiver);
};
$.get$cells$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$cells(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$contains$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$contains(receiver);
};
$.get$data$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$data(receiver);
};
$.get$error$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$error(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$head$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$head(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$index$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$index(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$navigator$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$navigator(receiver);
};
$.get$nodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nodes(receiver);
};
$.get$onClick$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClick(receiver);
};
$.get$onError$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onError(receiver);
};
$.get$onMessage$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMessage(receiver);
};
$.get$r$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$r(receiver);
};
$.get$result$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$result(receiver);
};
$.get$rows$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$rows(receiver);
};
$.get$runtimeType$ = function(receiver) {
  return $.getInterceptor(receiver).get$runtimeType(receiver);
};
$.get$state$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$state(receiver);
};
$.get$stream$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$stream(receiver);
};
$.get$tBodies$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tBodies(receiver);
};
$.get$tFoot$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tFoot(receiver);
};
$.get$tHead$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tHead(receiver);
};
$.get$tagName$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$tagName(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.indexOf$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).indexOf$2(receiver, a0, a1);
};
$.map$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).map$1(receiver, a0);
};
$.matches$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).matches$2(receiver, a0, a1);
};
$.postMessage$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).postMessage$1(receiver, a0);
};
$.postMessage$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).postMessage$2(receiver, a0, a1);
};
$.queryAll$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).queryAll$1(receiver, a0);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.removeAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
};
$.removeLast$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).removeLast$0(receiver);
};
$.replaceAll$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.retainWhere$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).retainWhere$1(receiver, a0);
};
$.round$0$n = function(receiver) {
  return $.getInterceptor$n(receiver).round$0(receiver);
};
$.set$innerHtml$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
$.set$state$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$state(receiver, value);
};
$.sort$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sort$1(receiver, a0);
};
$.split$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).split$1(receiver, a0);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.sublist$2$ax = function(receiver, a0, a1) {
  return $.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
$.substring$2$s = function(receiver, a0, a1) {
  return $.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toLowerCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
$.toRadixString$1$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.toUpperCase$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).toUpperCase$0(receiver);
};
$.where$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).where$1(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
Isolate.$lazy($, "_testEvent1", "TestAttachedEvents__testEvent1", "get$TestAttachedEvents__testEvent1", function() {
  return $.AttachedEvent$("testEvent1", $.EventArgs);
});
Isolate.$lazy($, "_testEvent2", "TestAttachedEvents__testEvent2", "get$TestAttachedEvents__testEvent2", function() {
  return $.AttachedEvent$("testEvent2", $.EventArgs);
});
Isolate.$lazy($, "_nameProperty", "TestPropertyEventIntegration__nameProperty", "get$TestPropertyEventIntegration__nameProperty", function() {
  return $.Property$("name", null, $.String);
});
Isolate.$lazy($, "_ageProperty", "TestPropertyEventIntegration__ageProperty", "get$TestPropertyEventIntegration__ageProperty", function() {
  return $.Property$("age", 0, $.$int);
});
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== (void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
});
Isolate.$lazy($, "_START_TAG_REGEXP", "_START_TAG_REGEXP", "get$_START_TAG_REGEXP", function() {
  return $.RegExp_RegExp("<(\\w+)", true, false);
});
Isolate.$lazy($, "_validHexColorRe", "RgbColor__validHexColorRe", "get$RgbColor__validHexColorRe", function() {
  return $.RegExp_RegExp("^#(?:[0-9a-f]{6})$", false, false);
});
Isolate.$lazy($, "_singletonNotLayout", "_singletonNotLayout", "get$_singletonNotLayout", function() {
  return $.HtmlEnhancedConfiguration$(false);
});
Isolate.$lazy($, "wrapAsync", "wrapAsync", "get$wrapAsync", function() {
  return new $.anon();
});
Isolate.$lazy($, "_testCases", "_testCases", "get$_testCases", function() {
  var t1 = $.List_List($, $.TestCase);
  $.setRuntimeTypeInfo(t1, [$.TestCase]);
  return t1;
});
Isolate.$lazy($, "testCases", "testCases", "get$testCases", function() {
  return $.UnmodifiableListView$($.get$_testCases(), null);
});
// Native classes
(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $asJavaScriptIndexingBehavior: function() {
    return null;
  },
  $isCollection: function() {
    return false;
  },
  $asCollection: function() {
    return null;
  },
  $isIterable: function() {
    return false;
  },
  $asIterable: function() {
    return null;
  },
  $isList: function() {
    return false;
  },
  $asList: function() {
    return null;
  },
  $isArrayBuffer: function() {
    return false;
  },
  $asArrayBuffer: function() {
    return null;
  },
  $isArrayBufferView: function() {
    return false;
  },
  $asArrayBufferView: function() {
    return null;
  },
  $isBlob: function() {
    return false;
  },
  $asBlob: function() {
    return null;
  },
  $isElement: function() {
    return false;
  },
  $asElement: function() {
    return null;
  },
  $isFile: function() {
    return false;
  },
  $asFile: function() {
    return null;
  },
  $isNode: function() {
    return false;
  },
  $asNode: function() {
    return null;
  },
  toString$0: function(_) {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function(_) {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(_, a) {
    return this === a;
  }
});

$.defineNativeMethods("Worker", $._WorkerStub);

$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("ArrayBuffer", $.ArrayBuffer);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.ArrayBufferView);

$.defineNativeMethods("Attr", $.Attr);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethodsNonleaf("Blob", $.Blob);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("CSSStyleDeclaration", $.CssStyleDeclaration);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("DataView", $.DataView);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethods("EntityReference", $.EntityReference);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("File", $.File);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("Float32Array", $.Float32Array);

$.defineNativeMethods("Float64Array", $.Float64Array);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequestException", $.HttpRequestException);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("Int16Array", $.Int16Array);

$.defineNativeMethods("Int32Array", $.Int32Array);

$.defineNativeMethods("Int8Array", $.Int8Array);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("LocalMediaStream", $.LocalMediaStream);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethodsNonleaf("MediaStream", $.MediaStream);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethodsNonleaf("NodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("RadioNodeList", $.RadioNodeList);

$.defineNativeMethods("RangeException", $.RangeException);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent", $.TransitionEvent);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("Uint16Array", $.Uint16Array);

$.defineNativeMethods("Uint32Array", $.Uint32Array);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8Array);

$.defineNativeMethods("Uint8ClampedArray", $.Uint8ClampedArray);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow", $.Window);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("HTMLAppletElement", $._HTMLAppletElement);

$.defineNativeMethods("HTMLBaseFontElement", $._HTMLBaseFontElement);

$.defineNativeMethods("HTMLDirectoryElement", $._HTMLDirectoryElement);

$.defineNativeMethods("HTMLFontElement", $._HTMLFontElement);

$.defineNativeMethods("HTMLFrameElement", $._HTMLFrameElement);

$.defineNativeMethods("HTMLFrameSetElement", $._HTMLFrameSetElement);

$.defineNativeMethods("HTMLMarqueeElement", $._HTMLMarqueeElement);

$.defineNativeMethods("NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("WebKitTransitionEvent", $._WebKitTransitionEvent);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedLength", $.AnimatedLength);

$.defineNativeMethods("SVGAnimatedLengthList", $.AnimatedLengthList);

$.defineNativeMethods("SVGAnimatedNumber", $.AnimatedNumber);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethods("SVGAnimatedString", $.AnimatedString);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethods("SVGAltGlyphDefElement", $._SVGAltGlyphDefElement);

$.defineNativeMethods("SVGAltGlyphItemElement", $._SVGAltGlyphItemElement);

$.defineNativeMethods("SVGAnimateColorElement", $._SVGAnimateColorElement);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("SVGCursorElement", $._SVGCursorElement);

$.defineNativeMethods("SVGFEDropShadowElement", $._SVGFEDropShadowElement);

$.defineNativeMethods("SVGFontElement", $._SVGFontElement);

$.defineNativeMethods("SVGFontFaceElement", $._SVGFontFaceElement);

$.defineNativeMethods("SVGFontFaceFormatElement", $._SVGFontFaceFormatElement);

$.defineNativeMethods("SVGFontFaceNameElement", $._SVGFontFaceNameElement);

$.defineNativeMethods("SVGFontFaceSrcElement", $._SVGFontFaceSrcElement);

$.defineNativeMethods("SVGFontFaceUriElement", $._SVGFontFaceUriElement);

$.defineNativeMethods("SVGGlyphElement", $._SVGGlyphElement);

$.defineNativeMethods("SVGGlyphRefElement", $._SVGGlyphRefElement);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._SVGGradientElement);

$.defineNativeMethods("SVGHKernElement", $._SVGHKernElement);

$.defineNativeMethods("SVGMPathElement", $._SVGMPathElement);

$.defineNativeMethods("SVGMissingGlyphElement", $._SVGMissingGlyphElement);

$.defineNativeMethods("SVGTRefElement", $._SVGTRefElement);

$.defineNativeMethods("SVGVKernElement", $._SVGVKernElement);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);

// 263 dynamic classes.
// 263 classes
// 25 !leaf
(function() {
  var v0_Uint8Array = "Uint8Array|Uint8ClampedArray", v1_Text = "CDATASection|Text", v2_TextPositioningElement = "SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement", v3_TextContentElement = [v2_TextPositioningElement, "SVGTextContentElement|SVGTextPathElement"].join("|"), v4__SVGGradientElement = "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement", v5_StyledElement = [v3_TextContentElement, v4__SVGGradientElement, "SVGAElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFESpecularLightingElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGForeignObjectElement|SVGGElement|SVGGlyphRefElement|SVGImageElement|SVGLineElement|SVGMarkerElement|SVGMaskElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGSVGElement|SVGStopElement|SVGStyledElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement"].join("|"), v6_AnimationElement = "SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGSetElement", v7__SVGComponentTransferFunctionElement = "SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement", v8_MediaElement = "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement", v9_SvgElement = [v5_StyledElement, v6_AnimationElement, v7__SVGComponentTransferFunctionElement, "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGCursorElement|SVGElement|SVGFEDistantLightElement|SVGFEMergeNodeElement|SVGFEPointLightElement|SVGFESpotLightElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGHKernElement|SVGMPathElement|SVGMetadataElement|SVGScriptElement|SVGStyleElement|SVGVKernElement|SVGViewElement"].join("|"), v10_MouseEvent = "MouseEvent|WheelEvent", v11_ProgressEvent = "ProgressEvent|XMLHttpRequestProgressEvent", v12_UIEvent = [v10_MouseEvent, "CompositionEvent|FocusEvent|KeyboardEvent|SVGZoomEvent|TextEvent|TouchEvent|UIEvent"].join("|"), v13_Element = [v8_MediaElement, v9_SvgElement, "Element|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTemplateElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement"].join("|"), v14_DocumentFragment = "DocumentFragment|ShadowRoot", v15_CharacterData = [v1_Text, "CharacterData|Comment"].join("|"), v16_Document = "Document|HTMLDocument|SVGDocument", v17_Node = [v13_Element, v14_DocumentFragment, v15_CharacterData, v16_Document, "Attr|DocumentType|EntityReference|Node|Notation|ProcessingInstruction"].join("|"), v18_MediaStream = "LocalMediaStream|MediaStream";
  $.dynamicSetMetadata([["Uint8Array", v0_Uint8Array], ["ArrayBufferView", [v0_Uint8Array, "ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array"].join("|")], ["Blob", "Blob|File"], ["Text", v1_Text], ["CharacterData", v15_CharacterData], ["Document", v16_Document], ["DocumentFragment", v14_DocumentFragment], ["HTMLMediaElement", v8_MediaElement], ["SVGTextPositioningElement", v2_TextPositioningElement], ["SVGTextContentElement", v3_TextContentElement], ["SVGGradientElement", v4__SVGGradientElement], ["SVGStyledElement", v5_StyledElement], ["SVGAnimationElement", v6_AnimationElement], ["SVGComponentTransferFunctionElement", v7__SVGComponentTransferFunctionElement], ["SVGElement", v9_SvgElement], ["Element", v13_Element], ["ProgressEvent", v11_ProgressEvent], ["MouseEvent", v10_MouseEvent], ["UIEvent", v12_UIEvent], ["Event", [v11_ProgressEvent, v12_UIEvent, "AudioProcessingEvent|BeforeLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|Event|HashChangeEvent|IDBVersionChangeEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent"].join("|")], ["Node", v17_Node], ["MediaStream", v18_MediaStream], ["EventTarget", [v17_Node, v18_MediaStream, "DOMWindow|EventTarget"].join("|")], ["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["NodeList", "NodeList|RadioNodeList"]]);
})();

var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.main2.call$0 = $.main2;
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main2); });
      } else {
        $.startRootIsolate($.main2);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main2); });
  } else {
    $.startRootIsolate($.main2);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(field, prototype) {
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        prototype["get$" + accessorName] = new Function(args, body);
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        prototype["set$" + accessorName] = new Function(args, body);
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(cls, fields, prototype) {
    var constructor;
    if (typeof fields == "function") {
      constructor = fields;
    } else {
      var str = "function " + cls + "(";
      var body = "";
      for (var i = 0; i < fields.length; i++) {
        if (i != 0)
          str += ", ";
        var field = fields[i];
        field = generateAccessor(field, prototype);
        str += field;
        body += "this." + field + " = " + field + ";\n";
      }
      str += ") {" + body + "}\nreturn " + cls;
      constructor = new Function(str)();
    }
    constructor.prototype = prototype;
    constructor.builtin$cls = cls;
    return constructor;
  }
  var supportsProto = false;
  var tmp = defineClass("c", ["f?"], {}).prototype;
  if (tmp.__proto__) {
    tmp.__proto__ = {};
    if (typeof tmp.get$f != "undefined")
      supportsProto = true;
  }
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var fields = desc[""], supr;
        if (typeof fields == "string") {
          var s = fields.split(";");
          supr = s[0];
          fields = s[1] == "" ? [] : s[1].split(",");
        } else {
          supr = desc.super;
        }
        isolateProperties[cls] = defineClass(cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if ((!superclass || typeof superclass) != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var getter = new Function("{ return $." + fieldName + ";}");
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    isolateProperties.$currentScript = typeof document == "object" ? document.currentScript || document.scripts[document.scripts.length - 1] : null;
    var isolatePrototype = oldIsolate.prototype;
    var str = "{\n";
    str += "var properties = Isolate.$isolateProperties;\n";
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var staticName in isolateProperties) {
      if (hasOwnProperty.call(isolateProperties, staticName)) {
        str += "this." + staticName + "= properties." + staticName + ";\n";
      }
    }
    str += "}\n";
    var newIsolate = new Function(str);
    newIsolate.prototype = isolatePrototype;
    isolatePrototype.constructor = newIsolate;
    newIsolate.$isolateProperties = isolateProperties;
    newIsolate.$finishClasses = oldIsolate.$finishClasses;
    return newIsolate;
  };
}
//@ sourceMappingURL=harness_browser.dart.js.map
